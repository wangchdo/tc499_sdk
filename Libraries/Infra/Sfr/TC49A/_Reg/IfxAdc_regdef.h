/**
 * \file IfxAdc_regdef.h
 * \brief
 * \copyright Copyright (c) 2021 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_ADC/V0.1.1.2.6
 * Specification: latest @ 2021-08-22 instance sheet @ MC_A3G_TC49x : V9.1.6.1.0 
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Adc_Registers Adc Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Adc_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Adc_Registers
 * 
 * \defgroup IfxSfr_Adc_Registers_union Register unions
 * \ingroup IfxSfr_Adc_Registers
 * 
 * \defgroup IfxSfr_Adc_Registers_struct Memory map
 * \ingroup IfxSfr_Adc_Registers
 */
#ifndef IFXADC_REGDEF_H
#define IFXADC_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Adc_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_ADC_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_ADC_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_ADC_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for Master TAG ID q - ENq (rw) */
} Ifx_ADC_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_ADC_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_ADC_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_ADC_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_ADC_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_ADC_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for Master TAG ID q - ENq (rw) */
} Ifx_ADC_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_ADC_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_ADC_ACCEN_WRB_FPI_Bits;

/** \brief CDSP boudary flag event register */
typedef struct _Ifx_ADC_CDSP_BNDCF_Bits
{
    __IO Ifx_UReg_32Bit BNDF:18;           /**< \brief [17:0] Boundary event for CDSP channel (rwh) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_CDSP_BNDCF_Bits;

/** \brief CDSP boundary flag event clear */
typedef struct _Ifx_ADC_CDSP_BNDCFCL_Bits
{
    __O  Ifx_UReg_32Bit BNDFCLR:18;        /**< \brief [17:0] Boundary event clear for CDSP channels (w) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_CDSP_BNDCFCL_Bits;

/** \brief CDSP debug address register */
typedef struct _Ifx_ADC_CDSP_DB_ADDR_Bits
{
    __IO Ifx_UReg_32Bit ADDRESS:32;        /**< \brief [31:0] Auxiliary register, core or memory address location to be read from for debug read operations or written to for debug write operations (rwh) */
} Ifx_ADC_CDSP_DB_ADDR_Bits;

/** \brief CDSP debug command register */
typedef struct _Ifx_ADC_CDSP_DB_CMD_Bits
{
    __IO Ifx_UReg_32Bit COMMAND:4;         /**< \brief [3:0] Defines the debug command (read/write to aux/core/mem) (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_ADC_CDSP_DB_CMD_Bits;

/** \brief CDSP debug data register */
typedef struct _Ifx_ADC_CDSP_DB_DATA_Bits
{
    __IO Ifx_UReg_32Bit DATA_REGISTER:32;    /**< \brief [31:0] DATA REGISTER (rwh) */
} Ifx_ADC_CDSP_DB_DATA_Bits;

/** \brief CDSP debug reset register */
typedef struct _Ifx_ADC_CDSP_DB_RESET_Bits
{
    __O  Ifx_UReg_32Bit RESET:2;           /**< \brief [1:0] Triggers a system reset request (w) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_ADC_CDSP_DB_RESET_Bits;

/** \brief CDSP debug status register */
typedef struct _Ifx_ADC_CDSP_DB_STATUS_Bits
{
    __IO Ifx_UReg_32Bit ST:1;              /**< \brief [0:0] The stalled (ST) flag indicates that the debug interface is busy (rwh) */
    __IO Ifx_UReg_32Bit FL:1;              /**< \brief [1:1] When true, the failure (FL) flag indicates that the debug operation has failed (rwh) */
    __IO Ifx_UReg_32Bit RD:1;              /**< \brief [2:2] The ready (RD) flag indicates whether the debug interface is available to accept another transaction command (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit RU:1;              /**< \brief [4:4] The run (RU) flag is set to one when the ARC HS processor is running (rwh) */
    __IO Ifx_UReg_32Bit RA:1;              /**< \brief [5:5] The Reset Applied (RA) flag is used by the debug host to determine that a target reset has occurred (rwh) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_ADC_CDSP_DB_STATUS_Bits;

/** \brief CDSP boundary mode configuration register */
typedef struct _Ifx_ADC_CDSP_DSP_BNDCFG_Bits
{
    __IO Ifx_UReg_32Bit BNDMODE:2;         /**< \brief [1:0] Boundary flag mode (rw) */
    __IO Ifx_UReg_32Bit HYSTEN:1;          /**< \brief [2:2] Hysteresis enable (rwh) */
    __IO Ifx_UReg_32Bit SR2CFG:1;          /**< \brief [3:3] Conditions under which SR2 is generated (rw) */
    __IO Ifx_UReg_32Bit SR2GT:1;           /**< \brief [4:4] Service request gate (rw) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_ADC_CDSP_DSP_BNDCFG_Bits;

/** \brief CDSP boundary trigger configuration register 0 */
typedef struct _Ifx_ADC_CDSP_DSP_BNDTRCFG_Bits
{
    __IO Ifx_UReg_32Bit BNDTRS:6;          /**< \brief [5:0] Trigger selection (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit BNDTRM:2;          /**< \brief [9:8] Trigger mode select (rwh) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [14:10] \internal Reserved */
    __IO Ifx_UReg_32Bit BNDTRDLY:16;       /**< \brief [30:15] Trigger delay (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_ADC_CDSP_DSP_BNDTRCFG_Bits;

/** \brief CDSP boundary select register 0 */
typedef struct _Ifx_ADC_CDSP_DSP_BOUNDSEL_Bits
{
    __IO Ifx_UReg_32Bit BOUNDARYL:16;      /**< \brief [15:0] Lower boundary value for limit checking (rwh) */
    __IO Ifx_UReg_32Bit BOUNDARYU:16;      /**< \brief [31:16] Upper boundary value for limit checking - BOUNDARYU (rwh) */
} Ifx_ADC_CDSP_DSP_BOUNDSEL_Bits;

/** \brief CDSP boundary status register 0 */
typedef struct _Ifx_ADC_CDSP_DSP_BOUNDST_Bits
{
    __I  Ifx_UReg_32Bit LOWERST:16;        /**< \brief [15:0] Lower boundary value for limit checking (rh) */
    __I  Ifx_UReg_32Bit UPPERST:16;        /**< \brief [31:16] Upper boundary value for limit checking (rh) */
} Ifx_ADC_CDSP_DSP_BOUNDST_Bits;

/** \brief CDSP channel error clear register 0 */
typedef struct _Ifx_ADC_CDSP_DSP_CHERRCL_Bits
{
    __O  Ifx_UReg_32Bit RDEC:1;            /**< \brief [0:0] Read error flag clear (w) */
    __O  Ifx_UReg_32Bit WREC:1;            /**< \brief [1:1] Write error flag clear (w) */
    __O  Ifx_UReg_32Bit SRTRERC:1;         /**< \brief [2:2] Service request trigger error clear (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __O  Ifx_UReg_32Bit TSTRERC:1;         /**< \brief [4:4] Time-stamp trigger error clear (w) */
    __O  Ifx_UReg_32Bit INTRERC:1;         /**< \brief [5:5] Integrator trigger error clear (w) */
    __O  Ifx_UReg_32Bit BNDTRERC:1;        /**< \brief [6:6] Boundary request trigger error clear (w) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_ADC_CDSP_DSP_CHERRCL_Bits;

/** \brief CDSP configuration of CDSP  0 */
typedef struct _Ifx_ADC_CDSP_DSP_DSPCFG_Bits
{
    __IO Ifx_UReg_32Bit INPSEL:6;          /**< \brief [5:0] Input selection (rw) */
    __IO Ifx_UReg_32Bit HSIMON:6;          /**< \brief [11:6] Input registermonitoring (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [13:12] \internal Reserved */
    __IO Ifx_UReg_32Bit DRM:2;             /**< \brief [15:14] Data read mode (rw) */
    __IO Ifx_UReg_32Bit TSM:1;             /**< \brief [16:16] Time-stamp mode (rw) */
    __IO Ifx_UReg_32Bit TSCLK:2;           /**< \brief [18:17] Timestamp counter clock selection (rw) */
    __IO Ifx_UReg_32Bit TSCRUN:1;          /**< \brief [19:19] Timestamp counter run control (rwh) */
    __IO Ifx_UReg_32Bit SRLVL:2;           /**< \brief [21:20] Service request FIFO level (rw) */
    __O  Ifx_UReg_32Bit FIFL:1;            /**< \brief [22:22] FIFO flush (w) */
    __IO Ifx_UReg_32Bit RDM:1;             /**< \brief [23:23] Result display mode (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_ADC_CDSP_DSP_DSPCFG_Bits;

/** \brief CDSP status register */
typedef struct _Ifx_ADC_CDSP_DSP_DSPST_Bits
{
    __I  Ifx_UReg_32Bit FILL:3;            /**< \brief [2:0] FIFO fill level (rh) */
    __I  Ifx_UReg_32Bit RDERR:1;           /**< \brief [3:3] Read error flag (rh) */
    __I  Ifx_UReg_32Bit WRERR:1;           /**< \brief [4:4] Write error flag (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [24:5] \internal Reserved */
    __I  Ifx_UReg_32Bit TSTRER:1;          /**< \brief [25:25] Timestamp trigger error flag - TSTRER (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [27:26] \internal Reserved */
    __I  Ifx_UReg_32Bit SRTRER:1;          /**< \brief [28:28] Service request trigger error flag - SRTRER (rh) */
    __I  Ifx_UReg_32Bit BNDTRER:1;         /**< \brief [29:29] Boundary update trigger error flag - BNDTRER (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_ADC_CDSP_DSP_DSPST_Bits;

/** \brief CDSP input from DSADC, TMADC, EXMOD or CARMAG */
typedef struct _Ifx_ADC_CDSP_DSP_INPUTMON_Bits
{
    __I  Ifx_UReg_32Bit RESLO:16;          /**< \brief [15:0] Input from DSADC, TMADC (Core-0 and Core-1), EXMOD or CARMAG (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [16:16] \internal Reserved */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [17:17] \internal Reserved */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [28:18] \internal Reserved */
    __I  Ifx_UReg_32Bit INIT:1;            /**< \brief [29:29] Filter chain initialization (rh) */
    __I  Ifx_UReg_32Bit INTST:1;           /**< \brief [30:30] Integrator enable status (rh) */
    __I  Ifx_UReg_32Bit WU:1;              /**< \brief [31:31] Wake up event from selected input register (rh) */
} Ifx_ADC_CDSP_DSP_INPUTMON_Bits;

/** \brief CDSP integrator configuration register 0 */
typedef struct _Ifx_ADC_CDSP_DSP_INTCFG_Bits
{
    __I  Ifx_UReg_32Bit :3;                /**< \brief [2:0] \internal Reserved */
    __IO Ifx_UReg_32Bit IWS:1;             /**< \brief [3:3] Integration window size - IWS (rw) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [30:4] \internal Reserved */
    __IO Ifx_UReg_32Bit INTEN:1;           /**< \brief [31:31] Integrator enable (rw) */
} Ifx_ADC_CDSP_DSP_INTCFG_Bits;

/** \brief CDSP intermediate integration value */
typedef struct _Ifx_ADC_CDSP_DSP_INTIVAL_Bits
{
    __I  Ifx_UReg_32Bit IVAL:23;           /**< \brief [22:0] Integrator intermediate value - IVAL (rh) */
    __I  Ifx_UReg_32Bit ICNT:9;            /**< \brief [31:23] Integrator intermediate count - ICNT (rh) */
} Ifx_ADC_CDSP_DSP_INTIVAL_Bits;

/** \brief CDSP integrator trigger configuration register 0 */
typedef struct _Ifx_ADC_CDSP_DSP_INTTRCFG_Bits
{
    __IO Ifx_UReg_32Bit INTRS:6;           /**< \brief [5:0] TRSEL (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit INTRM:2;           /**< \brief [9:8] Trigger mode select (rwh) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [14:10] \internal Reserved */
    __IO Ifx_UReg_32Bit INTRDLY:16;        /**< \brief [30:15] Trigger delay (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_ADC_CDSP_DSP_INTTRCFG_Bits;

/** \brief CDSP result register 0 */
typedef struct _Ifx_ADC_CDSP_DSP_RES_Bits
{
    __I  Ifx_UReg_32Bit CRESULTLO:16;      /**< \brief [15:0] CDSP result value lower part (rh) */
    __I  Ifx_UReg_32Bit CRESULTHI:16;      /**< \brief [31:16] CDSP result value higher part (rh) */
} Ifx_ADC_CDSP_DSP_RES_Bits;

/** \brief CDSP service request configuration register */
typedef struct _Ifx_ADC_CDSP_DSP_SRCFG_Bits
{
    __IO Ifx_UReg_32Bit SR0E:2;            /**< \brief [1:0] Conditions under which SR0 shall be generated (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __IO Ifx_UReg_32Bit SR1E:2;            /**< \brief [5:4] Service Request 1 enable (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [9:6] \internal Reserved */
    __IO Ifx_UReg_32Bit SR2E:1;            /**< \brief [10:10] Service Request 2 enable (rw) */
    __I  Ifx_UReg_32Bit :21;               /**< \brief [31:11] \internal Reserved */
} Ifx_ADC_CDSP_DSP_SRCFG_Bits;

/** \brief CDSP service request trigger configuration register */
typedef struct _Ifx_ADC_CDSP_DSP_SRTRCFG_Bits
{
    __IO Ifx_UReg_32Bit SRTRS:6;           /**< \brief [5:0] TRSEL (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [14:6] \internal Reserved */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit SRTRDLY:16;        /**< \brief [31:16] Trigger delay (rw) */
} Ifx_ADC_CDSP_DSP_SRTRCFG_Bits;

/** \brief CDSP time-stamp counter 0 */
typedef struct _Ifx_ADC_CDSP_DSP_TSCNT_Bits
{
    __I  Ifx_UReg_32Bit TSCOUNT:16;        /**< \brief [15:0] Timestamp counter value (rh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_ADC_CDSP_DSP_TSCNT_Bits;

/** \brief CDSP time-stamp register 0 */
typedef struct _Ifx_ADC_CDSP_DSP_TSTMP_Bits
{
    __I  Ifx_UReg_32Bit TIMESTAMP:16;      /**< \brief [15:0] The most recent captured timestamp value (rh) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [30:16] \internal Reserved */
    __I  Ifx_UReg_32Bit TSVAL:1;           /**< \brief [31:31] Timestamp valid (rh) */
} Ifx_ADC_CDSP_DSP_TSTMP_Bits;

/** \brief CDSP time stamp trigger configuration register 0 */
typedef struct _Ifx_ADC_CDSP_DSP_TSTRCFG_Bits
{
    __IO Ifx_UReg_32Bit TSTRS:6;           /**< \brief [5:0] TRSEL (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit TSTRM:2;           /**< \brief [9:8] Trigger mode select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [14:10] \internal Reserved */
    __IO Ifx_UReg_32Bit TSTRDLY:16;        /**< \brief [30:15] Trigger delay (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_ADC_CDSP_DSP_TSTRCFG_Bits;

/** \brief CDSP global halt control register */
typedef struct _Ifx_ADC_CDSP_GLOBHCD_Bits
{
    __O  Ifx_UReg_32Bit CHHLTD:18;         /**< \brief [17:0] Channel halt  for DSP - CHHLTD (w) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_CDSP_GLOBHCD_Bits;

/** \brief CDSP global halt status register */
typedef struct _Ifx_ADC_CDSP_GLOBHSTD_Bits
{
    __I  Ifx_UReg_32Bit DSPHST:18;         /**< \brief [17:0] DSP halt status - DSPHST (rh) */
    __I  Ifx_UReg_32Bit R_DSPHST:14;       /**< \brief [31:18] Reserved (r) */
} Ifx_ADC_CDSP_GLOBHSTD_Bits;

/** \brief CDSP global run control register */
typedef struct _Ifx_ADC_CDSP_GLOBRCD_Bits
{
    __O  Ifx_UReg_32Bit CHRUND:18;         /**< \brief [17:0] Channel run for CDSP (w) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_CDSP_GLOBRCD_Bits;

/** \brief CDSP global reset control */
typedef struct _Ifx_ADC_CDSP_GLOBRD_Bits
{
    __O  Ifx_UReg_32Bit DSPRST:18;         /**< \brief [17:0] DSP reset (w) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_CDSP_GLOBRD_Bits;

/** \brief CDSP global run status register */
typedef struct _Ifx_ADC_CDSP_GLOBRSD_Bits
{
    __I  Ifx_UReg_32Bit DSPRST:18;         /**< \brief [17:0] DSP run status - DSPRST (rh) */
    __I  Ifx_UReg_32Bit R_DSPRST:14;       /**< \brief [31:18] Reserved (r) */
} Ifx_ADC_CDSP_GLOBRSD_Bits;

/** \brief CDSP input from general purpose register 0 */
typedef struct _Ifx_ADC_CDSP_GP_Bits
{
    __IO Ifx_UReg_32Bit GPI:32;            /**< \brief [31:0] General purpose input (rw) */
} Ifx_ADC_CDSP_GP_Bits;

/** \brief OCDS control and status register0 for CDSP0-8 */
typedef struct _Ifx_ADC_CDSP_OCSCDSPA_Bits
{
    __IO Ifx_UReg_32Bit SUSM:2;            /**< \brief [1:0] OCDS suspend control mode - SUS (rwh) */
    __IO Ifx_UReg_32Bit SUS:9;             /**< \brief [10:2] OCDS suspend control - SUS (rwh) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [15:11] \internal Reserved */
    __O  Ifx_UReg_32Bit SUS_P:1;           /**< \brief [16:16] SUS write protection - SUS_P (w) */
    __I  Ifx_UReg_32Bit SUSSTA:9;          /**< \brief [25:17] Suspend state - SUSSTA (rh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_ADC_CDSP_OCSCDSPA_Bits;

/** \brief OCDS control and status register1 for CDSP9-17 */
typedef struct _Ifx_ADC_CDSP_OCSCDSPB_Bits
{
    __IO Ifx_UReg_32Bit SUSM:2;            /**< \brief [1:0] OCDS suspend control mode - SUS (rwh) */
    __IO Ifx_UReg_32Bit SUS:9;             /**< \brief [10:2] OCDS suspend control - SUS (rwh) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [15:11] \internal Reserved */
    __O  Ifx_UReg_32Bit SUS_P:1;           /**< \brief [16:16] SUS write protection - SUS_P (w) */
    __I  Ifx_UReg_32Bit SUSSTA:9;          /**< \brief [25:17] Suspend state - SUSSTA (rh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_ADC_CDSP_OCSCDSPB_Bits;

/** \brief CDSP event flag register 0 */
typedef struct _Ifx_ADC_CDSP_RESEV_Bits
{
    __IO Ifx_UReg_32Bit RESEV:18;          /**< \brief [17:0] Result event for result register 0 of CDSP (rwh) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_CDSP_RESEV_Bits;

/** \brief CDSP result event flag clear 0 */
typedef struct _Ifx_ADC_CDSP_RESEVCLR_Bits
{
    __O  Ifx_UReg_32Bit RESEVCLR:18;       /**< \brief [17:0] Result event clear for result register 0 of CDSP (w) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_CDSP_RESEVCLR_Bits;

/** \brief CDSP sleep status register */
typedef struct _Ifx_ADC_CDSP_SLPST_Bits
{
    __I  Ifx_UReg_32Bit DSPSLP:18;         /**< \brief [17:0] CDSP Sleep status (rh) */
    __I  Ifx_UReg_32Bit R_DSPSLP:14;       /**< \brief [31:18] Reserved (r) */
} Ifx_ADC_CDSP_SLPST_Bits;

/** \brief CDSP wake up error event clear register */
typedef struct _Ifx_ADC_CDSP_WUERRCL_Bits
{
    __O  Ifx_UReg_32Bit WUERRCLR:18;       /**< \brief [17:0] Wake up error event clear (w) */
    __I  Ifx_UReg_32Bit R_WUERRCLR:14;     /**< \brief [31:18] Reserved (r) */
} Ifx_ADC_CDSP_WUERRCL_Bits;

/** \brief CDSP wake up error flag register */
typedef struct _Ifx_ADC_CDSP_WUERREV_Bits
{
    __I  Ifx_UReg_32Bit WUERREV:18;        /**< \brief [17:0] Wake up error event (rh) */
    __I  Ifx_UReg_32Bit R_WUERREV:14;      /**< \brief [31:18] Reserved (r) */
} Ifx_ADC_CDSP_WUERREV_Bits;

/** \brief Clock Control Register */
typedef struct _Ifx_ADC_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module Disable Request Bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module Disable Status Bit - DISS (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] Sleep Mode Enable Control - EDIS (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_ADC_CLC_Bits;

/** \brief Clock enable for CDSP */
typedef struct _Ifx_ADC_CLKEN_CDSP_Bits
{
    __IO Ifx_UReg_32Bit CDSPGL:1;          /**< \brief [0:0] Enables the Global part of CDSP (rwh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [3:1] \internal Reserved */
    __IO Ifx_UReg_32Bit CDSPEN:18;         /**< \brief [21:4] Clock enable for corressponding CDSP (rwh) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [31:22] \internal Reserved */
} Ifx_ADC_CLKEN_CDSP_Bits;

/** \brief Clock enable for DSADC and EXMOD */
typedef struct _Ifx_ADC_CLKEN_DSINEX_Bits
{
    __IO Ifx_UReg_32Bit DSINEN:14;         /**< \brief [13:0] DSADC Clock Enable (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit DSEXEN:4;          /**< \brief [19:16] EXMOD Clock Enable (rwh) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [30:20] \internal Reserved */
    __IO Ifx_UReg_32Bit DSADCEN:1;         /**< \brief [31:31] Enables the Global part of DSADC and EXMOD (rwh) */
} Ifx_ADC_CLKEN_DSINEX_Bits;

/** \brief Clock enable for FCC */
typedef struct _Ifx_ADC_CLKEN_FCC_Bits
{
    __IO Ifx_UReg_32Bit FCCEN:10;          /**< \brief [9:0] Clock enable for FCC (rwh) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_ADC_CLKEN_FCC_Bits;

/** \brief Clock enable for TMADC */
typedef struct _Ifx_ADC_CLKEN_TMADC_Bits
{
    __IO Ifx_UReg_32Bit TMADCEN:8;         /**< \brief [7:0] Clock enable for TMADC (rwh) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_ADC_CLKEN_TMADC_Bits;

/** \brief DSADC boundary flag event register */
typedef struct _Ifx_ADC_DSADC_BOUNDF_Bits
{
    __IO Ifx_UReg_32Bit BNDEVIN:14;        /**< \brief [13:0] Boundary event for DSADC channels (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit BNDEVEX:4;         /**< \brief [19:16] Boundary event for EXMOD channels (rwh) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_ADC_DSADC_BOUNDF_Bits;

/** \brief DSADC boundary event flag clear register */
typedef struct _Ifx_ADC_DSADC_BOUNDFCL_Bits
{
    __O  Ifx_UReg_32Bit BNDINCL:14;        /**< \brief [13:0] Boundary event clear for DSADC channels (w) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __O  Ifx_UReg_32Bit BNDEXCL:4;         /**< \brief [19:16] Boundary event clear for EXMOD channels (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_ADC_DSADC_BOUNDFCL_Bits;

/** \brief DSADC carrier generator configuration register */
typedef struct _Ifx_ADC_DSADC_CGCFG_Bits
{
    __IO Ifx_UReg_32Bit CGMOD:2;           /**< \brief [1:0] Carrier Generator Operating Mode - CGMOD (rw) */
    __IO Ifx_UReg_32Bit BREV:1;            /**< \brief [2:2] Bit-Reverse PWM Generation - BREV (rw) */
    __IO Ifx_UReg_32Bit SIGPOL:1;          /**< \brief [3:3] Signal Polarity - SIGPOL (rw) */
    __IO Ifx_UReg_32Bit DIVCG:4;           /**< \brief [7:4] Divider Factor for the PWM Pattern Signal Generator - DIVCG (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_ADC_DSADC_CGCFG_Bits;

/** \brief DSADC carrier generator status register */
typedef struct _Ifx_ADC_DSADC_CGST_Bits
{
    __I  Ifx_UReg_32Bit RUN:1;             /**< \brief [0:0] Run Indicator - RUN (rh) */
    __I  Ifx_UReg_32Bit BITCOUNT:5;        /**< \brief [5:1] Bit Counter - BITCOUNT (rh) */
    __I  Ifx_UReg_32Bit STEPCOUNT:3;       /**< \brief [8:6] Step Counter - STEPCOUNT (rh) */
    __I  Ifx_UReg_32Bit STEPS:1;           /**< \brief [9:9] Step Counter Sign - STEPS (rh) */
    __I  Ifx_UReg_32Bit STEPD:1;           /**< \brief [10:10] Step Counter Direction - STEPD (rh) */
    __I  Ifx_UReg_32Bit SGNCG:1;           /**< \brief [11:11] Sign Signal from Carrier Generator - SGNCG (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_ADC_DSADC_CGST_Bits;

/** \brief EXMOD boundary mode configuration register 0 */
typedef struct _Ifx_ADC_DSADC_EX_BNDCFG_Bits
{
    __IO Ifx_UReg_32Bit BNDMODE:2;         /**< \brief [1:0] Boundary Flag Mode - BNDMOD (rw) */
    __IO Ifx_UReg_32Bit HYSTEN:1;          /**< \brief [2:2] Hysteresis Enable - HYSTEN (rwh) */
    __IO Ifx_UReg_32Bit SR2CFG:1;          /**< \brief [3:3] Conditions under which SR2 is generated (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_ADC_DSADC_EX_BNDCFG_Bits;

/** \brief EXMOD boundary request trigger configuration register 0 */
typedef struct _Ifx_ADC_DSADC_EX_BNDTRCFG_Bits
{
    __IO Ifx_UReg_32Bit BNDTRS:6;          /**< \brief [5:0] Trigger source select (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit BNDTRM:2;          /**< \brief [9:8] Trigger Mode Select (rwh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __IO Ifx_UReg_32Bit BNDTRDLY:16;       /**< \brief [31:16] Trigger Delay (rw) */
} Ifx_ADC_DSADC_EX_BNDTRCFG_Bits;

/** \brief EXMOD boundary select register 0 */
typedef struct _Ifx_ADC_DSADC_EX_BOUNDSEL_Bits
{
    __IO Ifx_UReg_32Bit BOUNDARYL:16;      /**< \brief [15:0] Lower Boundary Value for Limit Checking - BOUNDARYL (rwh) */
    __IO Ifx_UReg_32Bit BOUNDARYU:16;      /**< \brief [31:16] Upper Boundary Value for Limit Checking - BOUNDARYU (rwh) */
} Ifx_ADC_DSADC_EX_BOUNDSEL_Bits;

/** \brief EXMOD boundary status register 0 */
typedef struct _Ifx_ADC_DSADC_EX_BOUNDST_Bits
{
    __I  Ifx_UReg_32Bit LOWERST:16;        /**< \brief [15:0] Lower boundary value currently used for limit checking (rh) */
    __I  Ifx_UReg_32Bit UPPERST:16;        /**< \brief [31:16] Upper boundary value currently used for limit checking (rh) */
} Ifx_ADC_DSADC_EX_BOUNDST_Bits;

/** \brief EXMOD channel configuration register 0 */
typedef struct _Ifx_ADC_DSADC_EX_CHCFG_Bits
{
    __IO Ifx_UReg_32Bit DSR:3;             /**< \brief [2:0] Data Source for External Modulator - DSR (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit DSS:1;             /**< \brief [4:4] Data Stream Select - DSS (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [5:5] \internal Reserved */
    __IO Ifx_UReg_32Bit CSR:4;             /**< \brief [9:6] Clock Source for External Modulator - CSR (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [11:10] \internal Reserved */
    __IO Ifx_UReg_32Bit DIVM:2;            /**< \brief [13:12] External Modulator Clock frequency - DIVM (rw) */
    __IO Ifx_UReg_32Bit DRM:2;             /**< \brief [15:14] Data Read Mode - DRM (rw) */
    __IO Ifx_UReg_32Bit TSM:1;             /**< \brief [16:16] Time-Stamp Mode - TSM (rw) */
    __IO Ifx_UReg_32Bit TSCLK:2;           /**< \brief [18:17] Timestamp Counter Clock Selection - TSCLK (rw) */
    __IO Ifx_UReg_32Bit TSCRUN:1;          /**< \brief [19:19] Timestamp Counter Run Control - TSCRUN (rwh) */
    __IO Ifx_UReg_32Bit SRLVL:2;           /**< \brief [21:20] Service Request FIFO Level (rw) */
    __O  Ifx_UReg_32Bit FIFL:1;            /**< \brief [22:22] FIFO Flush (w) */
    __IO Ifx_UReg_32Bit RDM:1;             /**< \brief [23:23] Result Display Mode - RDM (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [30:24] \internal Reserved */
    __IO Ifx_UReg_32Bit MANEN:1;           /**< \brief [31:31] Manchester Decoding Enable (rwh) */
} Ifx_ADC_DSADC_EX_CHCFG_Bits;

/** \brief EXMOD channel error clear register 0 */
typedef struct _Ifx_ADC_DSADC_EX_CHERRCL_Bits
{
    __O  Ifx_UReg_32Bit RDEC:1;            /**< \brief [0:0] Read Error Flag Clear (w) */
    __O  Ifx_UReg_32Bit WREC:1;            /**< \brief [1:1] Write Error Flag Clear (w) */
    __O  Ifx_UReg_32Bit SRTRERC:1;         /**< \brief [2:2] Service Request Trigger Error Clear (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __O  Ifx_UReg_32Bit TSTRERC:1;         /**< \brief [4:4] Time Stamp Trigger Error Clear (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [5:5] \internal Reserved */
    __O  Ifx_UReg_32Bit BNDTRERC:1;        /**< \brief [6:6] Boundary Request Trigger Error Clear (w) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_ADC_DSADC_EX_CHERRCL_Bits;

/** \brief EXMOD channel status register 0 */
typedef struct _Ifx_ADC_DSADC_EX_CHST_Bits
{
    __I  Ifx_UReg_32Bit FILL:3;            /**< \brief [2:0] FIFO Fill Level (rh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [5:3] \internal Reserved */
    __I  Ifx_UReg_32Bit CFMDCNT:10;        /**< \brief [15:6] CIC Filter Decimation Counter - CFMDCNT (rh) */
    __I  Ifx_UReg_32Bit CFADCNT:7;         /**< \brief [22:16] CIC Filter (Auxiliary) Decimation Counter Count (rh) */
    __I  Ifx_UReg_32Bit RDERR:1;           /**< \brief [23:23] Read Error Flag (rh) */
    __I  Ifx_UReg_32Bit WRERR:1;           /**< \brief [24:24] Write Error Flag (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [25:25] \internal Reserved */
    __I  Ifx_UReg_32Bit TSTRER:1;          /**< \brief [26:26] Timestamp Trigger Error flag - TSTRER (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [27:27] \internal Reserved */
    __I  Ifx_UReg_32Bit SRTRER:1;          /**< \brief [28:28] Service Request Trigger Error flag - SRTRER (rh) */
    __I  Ifx_UReg_32Bit BNDTRER:1;         /**< \brief [29:29] Boundary Update Trigger Error flag - BNDTRER (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_ADC_DSADC_EX_CHST_Bits;

/** \brief EXMOD CIC configuration register 0 */
typedef struct _Ifx_ADC_DSADC_EX_CICCFG_Bits
{
    __IO Ifx_UReg_32Bit CFMDF:10;          /**< \brief [9:0] CIC Filter Decimation Factor - CFMDF (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __IO Ifx_UReg_32Bit CFAEN:1;           /**< \brief [16:16] CIC Filter (Auxiliary) Enable (rwh) */
    __IO Ifx_UReg_32Bit CFADF:2;           /**< \brief [18:17] CIC Filter (Auxiliary) Decimation Factor (rw) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [31:19] \internal Reserved */
} Ifx_ADC_DSADC_EX_CICCFG_Bits;

/** \brief EXMOD gain correction register 0 */
typedef struct _Ifx_ADC_DSADC_EX_GAINCORR_Bits
{
    __IO Ifx_UReg_32Bit GAINFACTOR:13;     /**< \brief [12:0] Multiplication Factor for Gain Correction - GAINFACTOR (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __IO Ifx_UReg_32Bit CICSHIFT:5;        /**< \brief [20:16] Position of the CIC Filter Output Shifter (rw) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_ADC_DSADC_EX_GAINCORR_Bits;

/** \brief EXMOD result register 0 auxiliary */
typedef struct _Ifx_ADC_DSADC_EX_RESA_Bits
{
    __I  Ifx_UReg_32Bit RESULT:16;         /**< \brief [15:0] Most Recent Result of Auxiliary Filter (rh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_ADC_DSADC_EX_RESA_Bits;

/** \brief EXMOD result register 0 main */
typedef struct _Ifx_ADC_DSADC_EX_RESM_Bits
{
    __I  Ifx_UReg_32Bit RESULTLO:16;       /**< \brief [15:0] Result Value Lower Part - RESULTLO (rh) */
    __I  Ifx_UReg_32Bit RESULTHI:16;       /**< \brief [31:16] Result Value Higher Part - RESULTHI (rh) */
} Ifx_ADC_DSADC_EX_RESM_Bits;

/** \brief EXMOD service request configuration register 0 */
typedef struct _Ifx_ADC_DSADC_EX_SRCFG_Bits
{
    __IO Ifx_UReg_32Bit SR0E:2;            /**< \brief [1:0] Service request 0 enable and configuration (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __IO Ifx_UReg_32Bit SR1E:1;            /**< \brief [4:4] Service Request 1 enable (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [9:5] \internal Reserved */
    __IO Ifx_UReg_32Bit SR2E:1;            /**< \brief [10:10] Service Request 2 enable (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [13:11] \internal Reserved */
    __IO Ifx_UReg_32Bit SR3E:1;            /**< \brief [14:14] Service Request 3 enable (rw) */
    __I  Ifx_UReg_32Bit :17;               /**< \brief [31:15] \internal Reserved */
} Ifx_ADC_DSADC_EX_SRCFG_Bits;

/** \brief EXMOD service request trigger configuration register 0 */
typedef struct _Ifx_ADC_DSADC_EX_SRTRCFG_Bits
{
    __IO Ifx_UReg_32Bit SRTRS:6;           /**< \brief [5:0] TRSEL (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [15:6] \internal Reserved */
    __IO Ifx_UReg_32Bit SRTRDLY:16;        /**< \brief [31:16] Trigger Delay (rw) */
} Ifx_ADC_DSADC_EX_SRTRCFG_Bits;

/** \brief EXMOD timestamp counter 0 */
typedef struct _Ifx_ADC_DSADC_EX_TSCNT_Bits
{
    __I  Ifx_UReg_32Bit TSCOUNT:16;        /**< \brief [15:0] Timestamp Counter Value - TSCOUNT (rh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_ADC_DSADC_EX_TSCNT_Bits;

/** \brief EXMOD timestamp register 0 */
typedef struct _Ifx_ADC_DSADC_EX_TSTMP_Bits
{
    __I  Ifx_UReg_32Bit TIMESTAMP:16;      /**< \brief [15:0] The Most Recent Captured Timestamp Value - TIMESTAMP (rh) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [30:16] \internal Reserved */
    __I  Ifx_UReg_32Bit TSVAL:1;           /**< \brief [31:31] Timestamp Valid - TSVAL (rh) */
} Ifx_ADC_DSADC_EX_TSTMP_Bits;

/** \brief EXMOD timestamp trigger configuration register 0 */
typedef struct _Ifx_ADC_DSADC_EX_TSTRCFG_Bits
{
    __IO Ifx_UReg_32Bit TSTRS:6;           /**< \brief [5:0] Trigger source select (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit TSTRM:2;           /**< \brief [9:8] Trigger Mode Select (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __IO Ifx_UReg_32Bit TSTRDLY:16;        /**< \brief [31:16] Trigger Delay (rw) */
} Ifx_ADC_DSADC_EX_TSTRCFG_Bits;

/** \brief DSADC global configuration register */
typedef struct _Ifx_ADC_DSADC_GLOBCFG_Bits
{
    __IO Ifx_UReg_32Bit DSADCSUP:1;        /**< \brief [0:0] DSADC Supply Level (rwh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [3:1] \internal Reserved */
    __IO Ifx_UReg_32Bit SVCH:4;            /**< \brief [7:4] Supervision Channel Select (rwh) */
    __IO Ifx_UReg_32Bit SVSIG:2;           /**< \brief [9:8] Supervision Signal Select (rwh) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_ADC_DSADC_GLOBCFG_Bits;

/** \brief DSADC global run control register for filter chain */
typedef struct _Ifx_ADC_DSADC_GLOBRCF_Bits
{
    __IO Ifx_UReg_32Bit CHRUN:14;          /**< \brief [13:0] Channel run for DSADC channels (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit CHRUNE:4;          /**< \brief [19:16] Channel run for EXMOD channels (rwh) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_ADC_DSADC_GLOBRCF_Bits;

/** \brief DSADC global run control register for analog modulator */
typedef struct _Ifx_ADC_DSADC_GLOBRCM_Bits
{
    __IO Ifx_UReg_32Bit CHRUNM:14;         /**< \brief [13:0] Channel run for modulator in DSADC channel (rwh) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_ADC_DSADC_GLOBRCM_Bits;

/** \brief DSADC boundary mode configuration register 0 */
typedef struct _Ifx_ADC_DSADC_IN_BNDCFG_Bits
{
    __IO Ifx_UReg_32Bit BNDMODE:2;         /**< \brief [1:0] Boundary Flag Mode - BNDMOD (rw) */
    __IO Ifx_UReg_32Bit HYSTEN:1;          /**< \brief [2:2] Hysteresis Enable - HYSTEN (rwh) */
    __IO Ifx_UReg_32Bit SR2CFG:1;          /**< \brief [3:3] Conditions under which SR2 is generated (rw) */
    __IO Ifx_UReg_32Bit SR2GT:1;           /**< \brief [4:4] Service Request Gate for SR2 (rw) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_ADC_DSADC_IN_BNDCFG_Bits;

/** \brief DSADC boundary request trigger configuration register 0 */
typedef struct _Ifx_ADC_DSADC_IN_BNDTRCFG_Bits
{
    __IO Ifx_UReg_32Bit BNDTRS:6;          /**< \brief [5:0] Trigger source select (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit BNDTRM:2;          /**< \brief [9:8] Trigger Mode Select (rwh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __IO Ifx_UReg_32Bit BNDTRDLY:16;       /**< \brief [31:16] Trigger Delay (rw) */
} Ifx_ADC_DSADC_IN_BNDTRCFG_Bits;

/** \brief DSADC boundary select register 0 */
typedef struct _Ifx_ADC_DSADC_IN_BOUNDSEL_Bits
{
    __IO Ifx_UReg_32Bit BOUNDARYL:16;      /**< \brief [15:0] Lower Boundary Value for Limit Checking - BOUNDARYL (rwh) */
    __IO Ifx_UReg_32Bit BOUNDARYU:16;      /**< \brief [31:16] Upper Boundary Value for Limit Checking - BOUNDARYU (rwh) */
} Ifx_ADC_DSADC_IN_BOUNDSEL_Bits;

/** \brief DSADC boundary status register 0 */
typedef struct _Ifx_ADC_DSADC_IN_BOUNDST_Bits
{
    __I  Ifx_UReg_32Bit LOWERST:16;        /**< \brief [15:0] Lower boundary value currently used for limit checking (rh) */
    __I  Ifx_UReg_32Bit UPPERST:16;        /**< \brief [31:16] Upper boundary value currently used for limit checking (rh) */
} Ifx_ADC_DSADC_IN_BOUNDST_Bits;

/** \brief DSADC carrier generation and rectification status register 0 */
typedef struct _Ifx_ADC_DSADC_IN_CGRECST_Bits
{
    __I  Ifx_UReg_32Bit SDCOUNT:8;         /**< \brief [7:0] Sign Delay Counter - SDCOUNT (rh) */
    __I  Ifx_UReg_32Bit SDCAP:8;           /**< \brief [15:8] Sign Delay Capture Value - SDCAP (rh) */
    __I  Ifx_UReg_32Bit SDCVAL:1;          /**< \brief [16:16] Valid Flag - SDCVAL (rh) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [29:17] \internal Reserved */
    __I  Ifx_UReg_32Bit SGNCS:1;           /**< \brief [30:30] Selected Carrier Sign Signal - SGNCS (rh) */
    __I  Ifx_UReg_32Bit SGND:1;            /**< \brief [31:31] Sign Signal Delayed - SGND (rh) */
} Ifx_ADC_DSADC_IN_CGRECST_Bits;

/** \brief DSADC carrier generator synchronization register 0 */
typedef struct _Ifx_ADC_DSADC_IN_CGSYNC_Bits
{
    __I  Ifx_UReg_32Bit :16;               /**< \brief [15:0] \internal Reserved */
    __IO Ifx_UReg_32Bit SDPOS:8;           /**< \brief [23:16] Sign Delay Value for Positive Halfwave - SDPOS (rw) */
    __IO Ifx_UReg_32Bit SDNEG:8;           /**< \brief [31:24] Sign Delay Value for Negative Halfwave - SDNEG (rw) */
} Ifx_ADC_DSADC_IN_CGSYNC_Bits;

/** \brief DSADC channel configuration register 0 */
typedef struct _Ifx_ADC_DSADC_IN_CHCFG_Bits
{
    __IO Ifx_UReg_32Bit INCFGP:2;          /**< \brief [1:0] Configuration of Positive Input Line - INCFGP (rwh) */
    __IO Ifx_UReg_32Bit INCFGN:2;          /**< \brief [3:2] Configuration of Negative Input Line - INCFGN (rwh) */
    __IO Ifx_UReg_32Bit INSEL:2;           /**< \brief [5:4] Input Pin Selection - INSEL (rw) */
    __IO Ifx_UReg_32Bit INMAC:1;           /**< \brief [6:6] Input Multiplexer Action Control - INMAC (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [8:7] \internal Reserved */
    __IO Ifx_UReg_32Bit DITHEN:1;          /**< \brief [9:9] Dithering Enable (rw) */
    __IO Ifx_UReg_32Bit DITRIM:2;          /**< \brief [11:10] Dithering Function Trim Value (rw) */
    __IO Ifx_UReg_32Bit DIVM:2;            /**< \brief [13:12] Modulator Clock frequency - DIVM (rwh) */
    __IO Ifx_UReg_32Bit DRM:2;             /**< \brief [15:14] Data Read Mode - DRM (rw) */
    __IO Ifx_UReg_32Bit TSM:1;             /**< \brief [16:16] Time-Stamp Mode - TSM (rw) */
    __IO Ifx_UReg_32Bit TSCLK:2;           /**< \brief [18:17] Timestamp Counter Clock Selection - TSCLK (rw) */
    __IO Ifx_UReg_32Bit TSCRUN:1;          /**< \brief [19:19] Timestamp Counter Run Control - TSCRUN (rwh) */
    __IO Ifx_UReg_32Bit SRLVL:2;           /**< \brief [21:20] Service Request FIFO Level (rw) */
    __O  Ifx_UReg_32Bit FIFL:1;            /**< \brief [22:22] FIFO Flush (w) */
    __IO Ifx_UReg_32Bit RDM:1;             /**< \brief [23:23] Result Display Mode - RDM (rw) */
    __IO Ifx_UReg_32Bit AMXCOPY:1;         /**< \brief [24:24] Analog MUX Setting Copy Enable - AMXCOPY (rw) */
    __IO Ifx_UReg_32Bit OCEN:3;            /**< \brief [27:25] Offset Compensation Filter Enable - OCEN (rw) */
    __IO Ifx_UReg_32Bit OFFPROT:1;         /**< \brief [28:28] Offset Protection - OFFPROT (rw) */
    __O  Ifx_UReg_32Bit CALIB:1;           /**< \brief [29:29] Calibration Trigger - CALIB (w) */
    __IO Ifx_UReg_32Bit AUTOCAL:1;         /**< \brief [30:30] Automatic Calibration Control - AUTOCAL (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_ADC_DSADC_IN_CHCFG_Bits;

/** \brief DSADC channel error clear register 0 */
typedef struct _Ifx_ADC_DSADC_IN_CHERRCL_Bits
{
    __O  Ifx_UReg_32Bit RDEC:1;            /**< \brief [0:0] Read Error Flag Clear (w) */
    __O  Ifx_UReg_32Bit WREC:1;            /**< \brief [1:1] Write Error Flag Clear (w) */
    __O  Ifx_UReg_32Bit SRTRERC:1;         /**< \brief [2:2] Service Request Trigger Error Clear (w) */
    __O  Ifx_UReg_32Bit IMXTRERC:1;        /**< \brief [3:3] Analog Input Mux Trigger Error Clear (w) */
    __O  Ifx_UReg_32Bit TSTRERC:1;         /**< \brief [4:4] Time Stamp Trigger Error Clear (w) */
    __O  Ifx_UReg_32Bit INTTRERC:1;        /**< \brief [5:5] Integrator Trigger Error Clear (w) */
    __O  Ifx_UReg_32Bit BNDTRERC:1;        /**< \brief [6:6] Boundary Request Trigger Error Clear (w) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_ADC_DSADC_IN_CHERRCL_Bits;

/** \brief DSADC channel status register 0 */
typedef struct _Ifx_ADC_DSADC_IN_CHST_Bits
{
    __I  Ifx_UReg_32Bit FILL:3;            /**< \brief [2:0] FIFO Fill Level (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __I  Ifx_UReg_32Bit INMUX:2;           /**< \brief [5:4] Input Multiplexer Setting - INMUX (rh) */
    __I  Ifx_UReg_32Bit CFMDCNT:10;        /**< \brief [15:6] CIC Filter Decimation Counter - CFMDCNT (rh) */
    __I  Ifx_UReg_32Bit CFADCNT:7;         /**< \brief [22:16] CIC Filter (Auxiliary) Decimation Counter Count (rh) */
    __I  Ifx_UReg_32Bit RDERR:1;           /**< \brief [23:23] Read Error Flag (rh) */
    __I  Ifx_UReg_32Bit WRERR:1;           /**< \brief [24:24] Write Error Flag (rh) */
    __I  Ifx_UReg_32Bit INTRER:1;          /**< \brief [25:25] Integrator Trigger Error flag - INTRER (rh) */
    __I  Ifx_UReg_32Bit TSTRER:1;          /**< \brief [26:26] Timestamp Trigger Error flag - TSTRER (rh) */
    __I  Ifx_UReg_32Bit IMXTRER:1;         /**< \brief [27:27] Input Mux Trigger Error flag - IMXTRER (rh) */
    __I  Ifx_UReg_32Bit SRTRER:1;          /**< \brief [28:28] Service Request Trigger Error flag - SRTRER (rh) */
    __I  Ifx_UReg_32Bit BNDTRER:1;         /**< \brief [29:29] Boundary Update Trigger Error flag - BNDTRER (rh) */
    __I  Ifx_UReg_32Bit CAL:2;             /**< \brief [31:30] Calibration Status Flag - CAL (rh) */
} Ifx_ADC_DSADC_IN_CHST_Bits;

/** \brief DSADC CIC configuration register 0 */
typedef struct _Ifx_ADC_DSADC_IN_CICCFG_Bits
{
    __IO Ifx_UReg_32Bit CFMDF:10;          /**< \brief [9:0] CIC Filter Decimation Factor - CFMDF (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __IO Ifx_UReg_32Bit CFAEN:1;           /**< \brief [16:16] CIC Filter (Auxiliary) Enable (rwh) */
    __IO Ifx_UReg_32Bit CFADF:2;           /**< \brief [18:17] CIC Filter (Auxiliary) Decimation Factor (rw) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [31:19] \internal Reserved */
} Ifx_ADC_DSADC_IN_CICCFG_Bits;

/** \brief DSADC gain calibration register 0 */
typedef struct _Ifx_ADC_DSADC_IN_GAINCAL_Bits
{
    __IO Ifx_UReg_32Bit CALFACTOR:13;      /**< \brief [12:0] Multiplication Factor for Gain Calibration - CALFACTOR (rwh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __IO Ifx_UReg_32Bit CALTARGET:15;      /**< \brief [30:16] Target Value for Calibrated Fullscale - CALTARGET (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_ADC_DSADC_IN_GAINCAL_Bits;

/** \brief DSADC gain correction register 0 */
typedef struct _Ifx_ADC_DSADC_IN_GAINCORR_Bits
{
    __IO Ifx_UReg_32Bit GAINFACTOR:13;     /**< \brief [12:0] Multiplication Factor for Gain Correction - GAINFACTOR (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __IO Ifx_UReg_32Bit CICSHIFT:5;        /**< \brief [20:16] Position of the CIC Filter Output Shifter (rw) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_ADC_DSADC_IN_GAINCORR_Bits;

/** \brief DSADC gain control register 0 */
typedef struct _Ifx_ADC_DSADC_IN_GAINCTR_Bits
{
    __IO Ifx_UReg_32Bit CALGFAC:13;        /**< \brief [12:0] Multiplication Factor for Gain Correction During Calibration - CALGFAC (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __IO Ifx_UReg_32Bit CALCICS:5;         /**< \brief [20:16] Position of the CIC Filter Output Shifter During Calibration - CALCICS (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit CICDEC:1;          /**< \brief [24:24] Decimation Rate of the CIC Filter During Calibration - CICDEC (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_ADC_DSADC_IN_GAINCTR_Bits;

/** \brief DSADC input mux trigger configuration register 0 */
typedef struct _Ifx_ADC_DSADC_IN_IMXTRCFG_Bits
{
    __IO Ifx_UReg_32Bit IMXTRS:6;          /**< \brief [5:0] Trigger source select (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit IMXTRM:2;          /**< \brief [9:8] Trigger Mode Select (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __IO Ifx_UReg_32Bit IMXTRDLY:16;       /**< \brief [31:16] Trigger Delay (rw) */
} Ifx_ADC_DSADC_IN_IMXTRCFG_Bits;

/** \brief DSADC integrator configuration register 0 */
typedef struct _Ifx_ADC_DSADC_IN_INTCFG_Bits
{
    __IO Ifx_UReg_32Bit ISC:3;             /**< \brief [2:0] Integrator Shift Control - ISC (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit IWS:2;             /**< \brief [5:4] Integration Window Size - IWS (rw) */
    __IO Ifx_UReg_32Bit FRC:2;             /**< \brief [7:6] Filter Chain Restart Control (rw) */
    __IO Ifx_UReg_32Bit REPVAL:4;          /**< \brief [11:8] Number of Integration Cycles - REPVAL (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __IO Ifx_UReg_32Bit NVALDIS:7;         /**< \brief [22:16] Number of Values Discarded - NVALDIS (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [23:23] \internal Reserved */
    __IO Ifx_UReg_32Bit NVALINT:7;         /**< \brief [30:24] Number of Values to be Accumulated - NVALINT (rw) */
    __IO Ifx_UReg_32Bit INTEN:1;           /**< \brief [31:31] Integrator Enable (rw) */
} Ifx_ADC_DSADC_IN_INTCFG_Bits;

/** \brief DSADC intermediate integration value register 0 */
typedef struct _Ifx_ADC_DSADC_IN_INTIVAL_Bits
{
    __I  Ifx_UReg_32Bit IVAL:23;           /**< \brief [22:0] Integrator Intermediate Value - IVAL (rh) */
    __I  Ifx_UReg_32Bit ICNT:7;            /**< \brief [29:23] Integrator Intermediate Count - ICNT (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_ADC_DSADC_IN_INTIVAL_Bits;

/** \brief DSADC integrator status register 0 */
typedef struct _Ifx_ADC_DSADC_IN_INTST_Bits
{
    __I  Ifx_UReg_32Bit :8;                /**< \brief [7:0] \internal Reserved */
    __I  Ifx_UReg_32Bit REPCNT:4;          /**< \brief [11:8] Integration Cycle Counter - REPCNT (rh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [14:12] \internal Reserved */
    __I  Ifx_UReg_32Bit INTST:1;           /**< \brief [15:15] Integration enable status- INTST (rh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_ADC_DSADC_IN_INTST_Bits;

/** \brief DSADC integrator trigger configuration register 0 */
typedef struct _Ifx_ADC_DSADC_IN_INTTRCFG_Bits
{
    __IO Ifx_UReg_32Bit INTTRS:6;          /**< \brief [5:0] Trigger source select (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit INTTRM:2;          /**< \brief [9:8] Trigger Mode Select (rwh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __IO Ifx_UReg_32Bit INTTRDLY:16;       /**< \brief [31:16] Trigger Delay (rwh) */
} Ifx_ADC_DSADC_IN_INTTRCFG_Bits;

/** \brief DSADC offset compensation register 0 */
typedef struct _Ifx_ADC_DSADC_IN_OFFCOMP_Bits
{
    __IO Ifx_UReg_32Bit OFFSET:16;         /**< \brief [15:0] Offset Value - OFFSET (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_ADC_DSADC_IN_OFFCOMP_Bits;

/** \brief DSADC rectification configuration register 0 */
typedef struct _Ifx_ADC_DSADC_IN_RECTCFG_Bits
{
    __IO Ifx_UReg_32Bit RFEN:1;            /**< \brief [0:0] Rectification Enable - RFEN (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [3:1] \internal Reserved */
    __IO Ifx_UReg_32Bit SSRC:2;            /**< \brief [5:4] Sign Source (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit SSCH:4;            /**< \brief [11:8] Sign Source Channel (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_ADC_DSADC_IN_RECTCFG_Bits;

/** \brief DSADC result register 0 auxiliary */
typedef struct _Ifx_ADC_DSADC_IN_RESA_Bits
{
    __I  Ifx_UReg_32Bit RESULT:16;         /**< \brief [15:0] Most Recent Result of Auxiliary Filter (rh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_ADC_DSADC_IN_RESA_Bits;

/** \brief DSADC result register 0 main */
typedef struct _Ifx_ADC_DSADC_IN_RESM_Bits
{
    __I  Ifx_UReg_32Bit RESULTLO:16;       /**< \brief [15:0] Result Value Lower Part - RESULTLO (rh) */
    __I  Ifx_UReg_32Bit RESULTHI:16;       /**< \brief [31:16] Result Value Higher Part - RESULTHI (rh) */
} Ifx_ADC_DSADC_IN_RESM_Bits;

/** \brief DSADC service request configuration register */
typedef struct _Ifx_ADC_DSADC_IN_SRCFG_Bits
{
    __IO Ifx_UReg_32Bit SR0E:2;            /**< \brief [1:0] Service request 0 enable and configuration (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __IO Ifx_UReg_32Bit SR1E:1;            /**< \brief [4:4] Service Request 1 enable (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [9:5] \internal Reserved */
    __IO Ifx_UReg_32Bit SR2E:1;            /**< \brief [10:10] Service Request 2 enable (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [13:11] \internal Reserved */
    __IO Ifx_UReg_32Bit SR3E:2;            /**< \brief [15:14] Service request 3 enable and configuration (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_ADC_DSADC_IN_SRCFG_Bits;

/** \brief DSADC service request trigger configuration register 0 */
typedef struct _Ifx_ADC_DSADC_IN_SRTRCFG_Bits
{
    __IO Ifx_UReg_32Bit SRTRS:6;           /**< \brief [5:0] Trigger source select (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [15:6] \internal Reserved */
    __IO Ifx_UReg_32Bit SRTRDLY:16;        /**< \brief [31:16] Trigger Delay (rw) */
} Ifx_ADC_DSADC_IN_SRTRCFG_Bits;

/** \brief DSADC timestamp counter 0 */
typedef struct _Ifx_ADC_DSADC_IN_TSCNT_Bits
{
    __I  Ifx_UReg_32Bit TSCOUNT:16;        /**< \brief [15:0] Timestamp Counter Value - TSCOUNT (rh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_ADC_DSADC_IN_TSCNT_Bits;

/** \brief DSADC timestamp register 0 */
typedef struct _Ifx_ADC_DSADC_IN_TSTMP_Bits
{
    __I  Ifx_UReg_32Bit TIMESTAMP:16;      /**< \brief [15:0] The Most Recent Captured Timestamp Value - TIMESTAMP (rh) */
    __I  Ifx_UReg_32Bit AMX:2;             /**< \brief [17:16] Analog Multiplexer Setting - AMX (rh) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [30:18] \internal Reserved */
    __I  Ifx_UReg_32Bit TSVAL:1;           /**< \brief [31:31] Timestamp Valid - TSVAL (rh) */
} Ifx_ADC_DSADC_IN_TSTMP_Bits;

/** \brief DSADC timestamp trigger configuration register 0 */
typedef struct _Ifx_ADC_DSADC_IN_TSTRCFG_Bits
{
    __IO Ifx_UReg_32Bit TSTRS:6;           /**< \brief [5:0] Trigger source select (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit TSTRM:2;           /**< \brief [9:8] Trigger Mode Select (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __IO Ifx_UReg_32Bit TSTRDLY:16;        /**< \brief [31:16] Trigger Delay (rw) */
} Ifx_ADC_DSADC_IN_TSTRCFG_Bits;

/** \brief DSADC common mode voltage register 0 */
typedef struct _Ifx_ADC_DSADC_IN_VCM_Bits
{
    __IO Ifx_UReg_32Bit INPVC0:1;          /**< \brief [0:0] Voltage Control of Positive Inputs 0 of CH0 (rw) */
    __IO Ifx_UReg_32Bit INPVC1:1;          /**< \brief [1:1] Voltage Control of Positive Inputs 1 of CH0 (rw) */
    __IO Ifx_UReg_32Bit INPVC2:1;          /**< \brief [2:2] Voltage Control of Positive Inputs 2 of CH0 (rw) */
    __IO Ifx_UReg_32Bit INPVC3:1;          /**< \brief [3:3] Voltage Control of Positive Inputs 3 of CH0 (rw) */
    __IO Ifx_UReg_32Bit INNVC0:1;          /**< \brief [4:4] Voltage Control of Negative Inputs 0 of CH0 (rw) */
    __IO Ifx_UReg_32Bit INNVC1:1;          /**< \brief [5:5] Voltage Control of Negative Inputs 1 of CH0 (rw) */
    __IO Ifx_UReg_32Bit INNVC2:1;          /**< \brief [6:6] Voltage Control of Negative Inputs 2 of CH0 (rw) */
    __IO Ifx_UReg_32Bit INNVC3:1;          /**< \brief [7:7] Voltage Control of Negative Inputs 3 of CH0 (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_ADC_DSADC_IN_VCM_Bits;

/** \brief OCDS control and status register for DSADC */
typedef struct _Ifx_ADC_DSADC_OCSDSADC_Bits
{
    __IO Ifx_UReg_32Bit SUSM:2;            /**< \brief [1:0] OCDS Suspend Control Mode - SUS (rwh) */
    __IO Ifx_UReg_32Bit SUS:14;            /**< \brief [15:2] OCDS Suspend Control - SUS (rwh) */
    __O  Ifx_UReg_32Bit SUS_P:1;           /**< \brief [16:16] SUS Write Protection - SUS_P (w) */
    __I  Ifx_UReg_32Bit SUSSTA:14;         /**< \brief [30:17] Suspend State - SUSSTA (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_ADC_DSADC_OCSDSADC_Bits;

/** \brief OCDS control and status register for EXMOD */
typedef struct _Ifx_ADC_DSADC_OCSEXMOD_Bits
{
    __IO Ifx_UReg_32Bit SUSM:2;            /**< \brief [1:0] OCDS Suspend Control Mode for EXMOD - SUS (rwh) */
    __IO Ifx_UReg_32Bit SUS:4;             /**< \brief [5:2] OCDS Suspend Control for EXMOD - SUS (rwh) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [15:6] \internal Reserved */
    __O  Ifx_UReg_32Bit SUS_P:1;           /**< \brief [16:16] SUS Write Protection - SUS_P (w) */
    __I  Ifx_UReg_32Bit SUSSTA:4;          /**< \brief [20:17] Suspend State for EXMOD - SUSSTA (rh) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_ADC_DSADC_OCSEXMOD_Bits;

/** \brief DSADC global reference status register clear */
typedef struct _Ifx_ADC_DSADC_REFERRCL_Bits
{
    __O  Ifx_UReg_32Bit VAREFECL:14;       /**< \brief [13:0] VAREF error clear for modulator of DSADC channels (w) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __O  Ifx_UReg_32Bit VAGNDECL:14;       /**< \brief [29:16] VAGND error clear for modulator of DSADC channels (w) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_ADC_DSADC_REFERRCL_Bits;

/** \brief DSADC global reference status register */
typedef struct _Ifx_ADC_DSADC_REFST_Bits
{
    __I  Ifx_UReg_32Bit VAREFER:14;        /**< \brief [13:0] VAREF error for modulator of DSADC channels (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __I  Ifx_UReg_32Bit VAGNDER:14;        /**< \brief [29:16] VAGND error for modulator of DSADC channels (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_ADC_DSADC_REFST_Bits;

/** \brief DSADC event flag register on auxiliary result register */
typedef struct _Ifx_ADC_DSADC_RESAF_Bits
{
    __IO Ifx_UReg_32Bit REAEVIN:14;        /**< \brief [13:0] Result event for auxiliary result register RESA of DSADC channels (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit REAEVEX:4;         /**< \brief [19:16] Result event for auxiliary result register RESA of EXMOD channels (rwh) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_ADC_DSADC_RESAF_Bits;

/** \brief DSADC result event (auxiliary) flag clear register */
typedef struct _Ifx_ADC_DSADC_RESAFCL_Bits
{
    __O  Ifx_UReg_32Bit REAINCL:14;        /**< \brief [13:0] Auxiliary result event clear for DSADC channels (w) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __O  Ifx_UReg_32Bit REAEXCL:4;         /**< \brief [19:16] Auxiliary result event clear for EXMOD channels (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_ADC_DSADC_RESAFCL_Bits;

/** \brief DSADC event flag register on main result register */
typedef struct _Ifx_ADC_DSADC_RESMF_Bits
{
    __IO Ifx_UReg_32Bit REMEVIN:14;        /**< \brief [13:0] Result event for main result register RESM of DSADC channels (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit REMEVEX:4;         /**< \brief [19:16] Result event for main result register RESM of EXMOD channels (rwh) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_ADC_DSADC_RESMF_Bits;

/** \brief DSADC result event (main) flag clear register */
typedef struct _Ifx_ADC_DSADC_RESMFCL_Bits
{
    __O  Ifx_UReg_32Bit REMINCL:14;        /**< \brief [13:0] Result event clear for DSADC channels (w) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __O  Ifx_UReg_32Bit REMEXCL:4;         /**< \brief [19:16] Result event clear for EXMOD channels (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_ADC_DSADC_RESMFCL_Bits;

/** \brief ADC to eGTM boundary flag select register, cluster 0 */
typedef struct _Ifx_ADC_ETBFSEL_Bits
{
    __IO Ifx_UReg_32Bit OUT0SEL:6;         /**< \brief [5:0] Boundary Flag Output Select (rw) */
    __IO Ifx_UReg_32Bit OUT1SEL:6;         /**< \brief [11:6] Boundary Flag Output Select (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __IO Ifx_UReg_32Bit OUT2SEL:6;         /**< \brief [21:16] Boundary Flag Output Select (rw) */
    __IO Ifx_UReg_32Bit OUT3SEL:6;         /**< \brief [27:22] Boundary Flag Output Select (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_ADC_ETBFSEL_Bits;

/** \brief FCC boundary flag configuration register */
typedef struct _Ifx_ADC_FCC_BFLCFG_Bits
{
    __IO Ifx_UReg_32Bit BFA:1;             /**< \brief [0:0] Boundary Flag Activation (rw) */
    __IO Ifx_UReg_32Bit BFM:1;             /**< \brief [1:1] Boundar Flag Mode Control (rw) */
    __IO Ifx_UReg_32Bit BFS:1;             /**< \brief [2:2] Boundary Flag Select (rw) */
    __IO Ifx_UReg_32Bit SBFV:1;            /**< \brief [3:3] Software Boundary Flag Value (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_ADC_FCC_BFLCFG_Bits;

/** \brief FCC gate trigger configuration register */
typedef struct _Ifx_ADC_FCC_GATRCFG_Bits
{
    __IO Ifx_UReg_32Bit TRS:6;             /**< \brief [5:0] Gate Trigger Select (rw) */
    __IO Ifx_UReg_32Bit TRM:2;             /**< \brief [7:6] Gate Trigger Mode (rw) */
    __IO Ifx_UReg_32Bit BFLPOL:1;          /**< \brief [8:8] Gated Boundary Flag Polarity (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [15:9] \internal Reserved */
    __IO Ifx_UReg_32Bit TRD:16;            /**< \brief [31:16] Gate Trigger Delay (rw) */
} Ifx_ADC_FCC_GATRCFG_Bits;

/** \brief FCC hyteresis configuration register */
typedef struct _Ifx_ADC_FCC_HYSTCFG_Bits
{
    __IO Ifx_UReg_32Bit DELM:10;           /**< \brief [9:0] Delta Minus (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __IO Ifx_UReg_32Bit DELP:10;           /**< \brief [25:16] Delta Plus (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_ADC_FCC_HYSTCFG_Bits;

/** \brief FCC module configuration register */
typedef struct _Ifx_ADC_FCC_MODCFG_Bits
{
    __IO Ifx_UReg_32Bit TV:10;             /**< \brief [9:0] Threhsold Value (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [17:16] \internal Reserved */
    __O  Ifx_UReg_32Bit SWTR:1;            /**< \brief [18:18] Software Trigger (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [19:19] \internal Reserved */
    __IO Ifx_UReg_32Bit GFD:8;             /**< \brief [27:20] Glitch Filter Depth (rw) */
    __IO Ifx_UReg_32Bit MODE:3;            /**< \brief [30:28] Mode (rw) */
    __IO Ifx_UReg_32Bit DDCRT:1;           /**< \brief [31:31] Disable DAC charge refresh timer (rw) */
} Ifx_ADC_FCC_MODCFG_Bits;

/** \brief FCC module enable register */
typedef struct _Ifx_ADC_FCC_MODEN_Bits
{
    __IO Ifx_UReg_32Bit RUN:1;             /**< \brief [0:0] Run (rwh) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_ADC_FCC_MODEN_Bits;

/** \brief FCC module status register */
typedef struct _Ifx_ADC_FCC_MODSTAT_Bits
{
    __I  Ifx_UReg_32Bit CTV:10;            /**< \brief [9:0] Current Threshold Value (rh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __I  Ifx_UReg_32Bit BFL:1;             /**< \brief [16:16] Boundary Flag Value (rh) */
    __I  Ifx_UReg_32Bit DCR:1;             /**< \brief [17:17] Direct comparison result (rh) */
    __I  Ifx_UReg_32Bit VALTV:1;           /**< \brief [18:18] Valid Threshold Value (rh) */
    __I  Ifx_UReg_32Bit RUN:1;             /**< \brief [19:19] Run (rh) */
    __I  Ifx_UReg_32Bit DIS:1;             /**< \brief [20:20] Disable (rh) */
    __I  Ifx_UReg_32Bit RC:1;              /**< \brief [21:21] Ramp Counter (rh) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [31:22] \internal Reserved */
} Ifx_ADC_FCC_MODSTAT_Bits;

/** \brief FCC ramp configruation register */
typedef struct _Ifx_ADC_FCC_RMPCFG_Bits
{
    __IO Ifx_UReg_32Bit STEPWD:16;         /**< \brief [15:0] Step Width (rw) */
    __IO Ifx_UReg_32Bit STEPSZ:10;         /**< \brief [25:16] Step Size (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [26:26] \internal Reserved */
    __O  Ifx_UReg_32Bit RSWTR:1;           /**< \brief [27:27] Ramp start software trigger (w) */
    __IO Ifx_UReg_32Bit DIR:1;             /**< \brief [28:28] Direction (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_ADC_FCC_RMPCFG_Bits;

/** \brief FCC ramp threhsold register */
typedef struct _Ifx_ADC_FCC_RMPT_Bits
{
    __IO Ifx_UReg_32Bit STV:10;            /**< \brief [9:0] Start Threhsold Value (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __IO Ifx_UReg_32Bit ETV:10;            /**< \brief [25:16] End Threshold Value (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_ADC_FCC_RMPT_Bits;

/** \brief FCC ramp trigger configuration register */
typedef struct _Ifx_ADC_FCC_RMPTRCFG_Bits
{
    __IO Ifx_UReg_32Bit TRS:6;             /**< \brief [5:0] Ramp Trigger Select (rw) */
    __IO Ifx_UReg_32Bit TRM:2;             /**< \brief [7:6] Ramp Trigger Mode (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit TRD:16;            /**< \brief [31:16] Ramp Trigger Delay (rw) */
} Ifx_ADC_FCC_RMPTRCFG_Bits;

/** \brief FCC service request configuration register */
typedef struct _Ifx_ADC_FCC_SRCFG_Bits
{
    __IO Ifx_UReg_32Bit SR0EVSEL:2;        /**< \brief [1:0] Service request 0 event select (rw) */
    __IO Ifx_UReg_32Bit SR1EVSEL:2;        /**< \brief [3:2] Service request 1 event select (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_ADC_FCC_SRCFG_Bits;

/** \brief FCC threshold trigger configuration register */
typedef struct _Ifx_ADC_FCC_THTRCFG_Bits
{
    __IO Ifx_UReg_32Bit TRS:6;             /**< \brief [5:0] Threshold Trigger Select (rw) */
    __IO Ifx_UReg_32Bit TRM:2;             /**< \brief [7:6] Threshold Trigger Mode (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit TRD:16;            /**< \brief [31:16] Threshold Trigger Delay (rw) */
} Ifx_ADC_FCC_THTRCFG_Bits;

/** \brief ADC global alarm configuration register */
typedef struct _Ifx_ADC_GLALCFG_Bits
{
    __IO Ifx_UReg_32Bit EVEN0:6;           /**< \brief [5:0] Event Enable (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit EVEN1:6;           /**< \brief [13:8] Event Enable (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit EVOP:2;            /**< \brief [17:16] Event Operation (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_GLALCFG_Bits;

/** \brief ADC global alarm set register */
typedef struct _Ifx_ADC_GLALSET_Bits
{
    __O  Ifx_UReg_32Bit ALSET:8;           /**< \brief [7:0] Alarm Set by SW write - ALSET (w) */
    __I  Ifx_UReg_32Bit R8:24;             /**< \brief [31:8] Reserved (r) */
} Ifx_ADC_GLALSET_Bits;

/** \brief ADC global service request configuration register */
typedef struct _Ifx_ADC_GLSRCFG_Bits
{
    __IO Ifx_UReg_32Bit EVEN:8;            /**< \brief [7:0] Event Enable (rw) */
    __IO Ifx_UReg_32Bit EVOP:1;            /**< \brief [8:8] Event Operation (rw) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_ADC_GLSRCFG_Bits;

/** \brief ADC global service request set register */
typedef struct _Ifx_ADC_GLSRSET_Bits
{
    __O  Ifx_UReg_32Bit SRSET:4;           /**< \brief [3:0] Service Request Set by SW write - ALSET (w) */
    __I  Ifx_UReg_32Bit R4:28;             /**< \brief [31:4] Reserved (r) */
} Ifx_ADC_GLSRSET_Bits;

/** \brief ADC to GTM boundary flag select register, cluster 0 */
typedef struct _Ifx_ADC_GTBFSEL_Bits
{
    __IO Ifx_UReg_32Bit OUT0SEL:6;         /**< \brief [5:0] Boundary Flag Output Select (rw) */
    __IO Ifx_UReg_32Bit OUT1SEL:6;         /**< \brief [11:6] Boundary Flag Output Select (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __IO Ifx_UReg_32Bit OUT2SEL:6;         /**< \brief [21:16] Boundary Flag Output Select (rw) */
    __IO Ifx_UReg_32Bit OUT3SEL:6;         /**< \brief [27:22] Boundary Flag Output Select (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_ADC_GTBFSEL_Bits;

/** \brief ADC to GTM service request select register, cluster 0 */
typedef struct _Ifx_ADC_GTSRSEL_Bits
{
    __IO Ifx_UReg_32Bit SR0SEL:4;          /**< \brief [3:0] Service Request 0 Select  for GTM Cluster 0 (rw) */
    __IO Ifx_UReg_32Bit SR1SEL:4;          /**< \brief [7:4] Service Request 1 Select  for GTM Cluster 0 (rw) */
    __IO Ifx_UReg_32Bit SR2SEL:4;          /**< \brief [11:8] Service Request 2 Select  for GTM Cluster 0 (rw) */
    __IO Ifx_UReg_32Bit SR3SEL:4;          /**< \brief [15:12] Service Request 3 Select  for GTM Cluster 0 (rw) */
    __IO Ifx_UReg_32Bit SR0EN:1;           /**< \brief [16:16] Service Request Enable - SREN (rw) */
    __IO Ifx_UReg_32Bit SR1EN:1;           /**< \brief [17:17] Service Request Enable - SREN (rw) */
    __IO Ifx_UReg_32Bit SR2EN:1;           /**< \brief [18:18] Service Request Enable - SREN (rw) */
    __IO Ifx_UReg_32Bit SR3EN:1;           /**< \brief [19:19] Service Request Enable - SREN (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_ADC_GTSRSEL_Bits;

/** \brief Module Identification Register */
typedef struct _Ifx_ADC_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module Number - MOD_NUM (r) */
} Ifx_ADC_ID_Bits;

/** \brief OCDS control and status register for TMADC */
typedef struct _Ifx_ADC_OCSTM_Bits
{
    __IO Ifx_UReg_32Bit TGS:2;             /**< \brief [1:0] Trigger Set for OTGB0 and OTGB1 - TGS (rw) */
    __IO Ifx_UReg_32Bit TGB:1;             /**< \brief [2:2] OTGB0 and OTGB1 Bus Select - TGB (rw) */
    __IO Ifx_UReg_32Bit TRIG1SEL:2;        /**< \brief [4:3] Trigger Set 1 Select (rw) */
    __IO Ifx_UReg_32Bit TRIG2SEL:2;        /**< \brief [6:5] Trigger Set 2 Select (rw) */
    __O  Ifx_UReg_32Bit TG_P:1;            /**< \brief [7:7] TGS, TGB Write Protection - TG_P (w) */
    __IO Ifx_UReg_32Bit SUSM:2;            /**< \brief [9:8] OCDS Suspend Control Mode - SUS (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [14:10] \internal Reserved */
    __O  Ifx_UReg_32Bit SUS_P:1;           /**< \brief [15:15] SUS Write Protection - SUS_P (w) */
    __IO Ifx_UReg_32Bit SUS:8;             /**< \brief [23:16] OCDS Suspend Control - SUS (rw) */
    __I  Ifx_UReg_32Bit SUSSTA:8;          /**< \brief [31:24] Suspend State - SUSSTA (rh) */
} Ifx_ADC_OCSTM_Bits;

/** \brief ADC pull down diagnostics configuration register */
typedef struct _Ifx_ADC_PDDCFG_Bits
{
    __IO Ifx_UReg_32Bit EN0:1;             /**< \brief [0:0] Enable (rw) */
    __IO Ifx_UReg_32Bit EN1:1;             /**< \brief [1:1] Enable (rw) */
    __IO Ifx_UReg_32Bit EN2:1;             /**< \brief [2:2] Enable (rw) */
    __IO Ifx_UReg_32Bit EN3:1;             /**< \brief [3:3] Enable (rw) */
    __IO Ifx_UReg_32Bit EN4:1;             /**< \brief [4:4] Enable (rw) */
    __IO Ifx_UReg_32Bit EN5:1;             /**< \brief [5:5] Enable (rw) */
    __IO Ifx_UReg_32Bit EN6:1;             /**< \brief [6:6] Enable (rw) */
    __IO Ifx_UReg_32Bit EN7:1;             /**< \brief [7:7] Enable (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_ADC_PDDCFG_Bits;

/** \brief Resource Protection Register */
typedef struct _Ifx_ADC_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual Machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual Machine definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection Set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection Set definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_ADC_PROT_Bits;

/** \brief  */
typedef struct _Ifx_ADC_RES_Bits
{
    __I  Ifx_UReg_32Bit RESULT:16;         /**< \brief [15:0] Conversion result for the configured channel (rh) */
    __I  Ifx_UReg_32Bit CHNR:4;            /**< \brief [19:16] TMADC channel number (rh) */
    __I  Ifx_UReg_32Bit TRNM:6;            /**< \brief [25:20] Trigger number (rh) */
    __I  Ifx_UReg_32Bit SWTR:1;            /**< \brief [26:26] Software trigger status (rh) */
    __I  Ifx_UReg_32Bit EMUXCH:3;          /**< \brief [29:27] EMUX channel number (rh) */
    __I  Ifx_UReg_32Bit DR:1;              /**< \brief [30:30] Diagnostic result (rh) */
    __I  Ifx_UReg_32Bit TRE:1;             /**< \brief [31:31] Trigger edge (rh) */
} Ifx_ADC_RES_Bits;

/** \brief Resource allocation register for CDSP */
typedef struct _Ifx_ADC_RESALLOC_CDSPA_Bits
{
    __IO Ifx_UReg_32Bit CDSP0:4;           /**< \brief [3:0] APU Asignment for Corresponsing CDSP 0 (rw) */
    __IO Ifx_UReg_32Bit CDSP1:4;           /**< \brief [7:4] APU Asignment for Corresponsing CDSP1 (rw) */
    __IO Ifx_UReg_32Bit CDSP2:4;           /**< \brief [11:8] APU Asignment for Corresponsing CDSP2 (rw) */
    __IO Ifx_UReg_32Bit CDSP3:4;           /**< \brief [15:12] APU Asignment for Corresponsing CDSP3 (rw) */
    __IO Ifx_UReg_32Bit CDSP4:4;           /**< \brief [19:16] APU Asignment for Corresponsing CDSP4 (rw) */
    __IO Ifx_UReg_32Bit CDSP5:4;           /**< \brief [23:20] APU Asignment for Corresponsing CDSP5 (rw) */
    __IO Ifx_UReg_32Bit CDSP6:4;           /**< \brief [27:24] APU Asignment for Corresponsing CDSP6 (rw) */
    __IO Ifx_UReg_32Bit CDSP7:4;           /**< \brief [31:28] APU Asignment for corresponsing CDSP7 (rw) */
} Ifx_ADC_RESALLOC_CDSPA_Bits;

/** \brief Resource allocation register for CDSP */
typedef struct _Ifx_ADC_RESALLOC_CDSPB_Bits
{
    __IO Ifx_UReg_32Bit CDSP8:4;           /**< \brief [3:0] APU Asignment for Corresponsing CDSP 8 (rw) */
    __IO Ifx_UReg_32Bit CDSP9:4;           /**< \brief [7:4] APU Asignment for Corresponsing CDSP9 (rw) */
    __IO Ifx_UReg_32Bit CDSP10:4;          /**< \brief [11:8] APU Asignment for Corresponsing CDSP10 (rw) */
    __IO Ifx_UReg_32Bit CDSP11:4;          /**< \brief [15:12] APU Asignment for Corresponsing CDSP11 (rw) */
    __IO Ifx_UReg_32Bit CDSP12:4;          /**< \brief [19:16] APU Asignment for Corresponsing CDSP12 (rw) */
    __IO Ifx_UReg_32Bit CDSP13:4;          /**< \brief [23:20] APU Asignment for Corresponsing CDSP13 (rw) */
    __IO Ifx_UReg_32Bit CDSP14:4;          /**< \brief [27:24] APU Asignment for Corresponsing CDSP 14 (rw) */
    __IO Ifx_UReg_32Bit CDSP15:4;          /**< \brief [31:28] APU Asignment for Corresponsing CDSP15 (rw) */
} Ifx_ADC_RESALLOC_CDSPB_Bits;

/** \brief Resource allocation register for CDSP */
typedef struct _Ifx_ADC_RESALLOC_CDSPC_Bits
{
    __IO Ifx_UReg_32Bit CDSP16:4;          /**< \brief [3:0] APU Asignment for Corresponsing CDSP 16 (rw) */
    __IO Ifx_UReg_32Bit CDSP17:4;          /**< \brief [7:4] APU Asignment for Corresponsing CDSP17 (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_ADC_RESALLOC_CDSPC_Bits;

/** \brief Resource allocation register for DSADC */
typedef struct _Ifx_ADC_RESALLOC_DSADCA_Bits
{
    __IO Ifx_UReg_32Bit DSADC0:4;          /**< \brief [3:0] APU Asignment for Corresponsing DSADC0 (rw) */
    __IO Ifx_UReg_32Bit DSADC1:4;          /**< \brief [7:4] APU Asignment for Corresponsing DSADC1 (rw) */
    __IO Ifx_UReg_32Bit DSADC2:4;          /**< \brief [11:8] APU Asignment for Corresponsing DSADC2 (rw) */
    __IO Ifx_UReg_32Bit DSADC3:4;          /**< \brief [15:12] APU Asignment for Corresponsing DSADC3 (rw) */
    __IO Ifx_UReg_32Bit DSADC4:4;          /**< \brief [19:16] APU Asignment for Corresponsing DSADC4 (rw) */
    __IO Ifx_UReg_32Bit DSADC5:4;          /**< \brief [23:20] APU Asignment for Corresponsing DSADC5 (rw) */
    __IO Ifx_UReg_32Bit DSADC6:4;          /**< \brief [27:24] APU Asignment for Corresponsing DSADC6 (rw) */
    __IO Ifx_UReg_32Bit DSADC7:4;          /**< \brief [31:28] APU Asignment for corresponsing DSADC7 (rw) */
} Ifx_ADC_RESALLOC_DSADCA_Bits;

/** \brief Resource allocation register for DSADC */
typedef struct _Ifx_ADC_RESALLOC_DSADCB_Bits
{
    __IO Ifx_UReg_32Bit DSADC8:4;          /**< \brief [3:0] APU Asignment for Corresponsing DSADC8 (rw) */
    __IO Ifx_UReg_32Bit DSADC9:4;          /**< \brief [7:4] APU Asignment for Corresponsing DSADC9 (rw) */
    __IO Ifx_UReg_32Bit DSADC10:4;         /**< \brief [11:8] APU Asignment for Corresponsing DSADC10 (rw) */
    __IO Ifx_UReg_32Bit DSADC11:4;         /**< \brief [15:12] APU Asignment for Corresponsing DSADC11 (rw) */
    __IO Ifx_UReg_32Bit DSADC12:4;         /**< \brief [19:16] APU Asignment for Corresponsing DSADC12 (rw) */
    __IO Ifx_UReg_32Bit DSADC13:4;         /**< \brief [23:20] APU Asignment for Corresponsing DSADC13 (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_ADC_RESALLOC_DSADCB_Bits;

/** \brief Resource allocation register for EXMOD */
typedef struct _Ifx_ADC_RESALLOC_EXMOD_Bits
{
    __IO Ifx_UReg_32Bit EXMOD0:4;          /**< \brief [3:0] APU Asignment for Corresponsing EXMOD0 (rw) */
    __IO Ifx_UReg_32Bit EXMOD1:4;          /**< \brief [7:4] APU Asignment for Corresponsing EXMOD1 (rw) */
    __IO Ifx_UReg_32Bit EXMOD2:4;          /**< \brief [11:8] APU Asignment for Corresponsing EXMOD2 (rw) */
    __IO Ifx_UReg_32Bit EXMOD3:4;          /**< \brief [15:12] APU Asignment for Corresponsing EXMOD3 (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_ADC_RESALLOC_EXMOD_Bits;

/** \brief Resource allocation register for FCC */
typedef struct _Ifx_ADC_RESALLOC_FCCA_Bits
{
    __IO Ifx_UReg_32Bit FCC0:4;            /**< \brief [3:0] APU Asignment for Corresponsing FCC0 (rw) */
    __IO Ifx_UReg_32Bit FCC1:4;            /**< \brief [7:4] APU Asignment for Corresponsing FCC1 (rw) */
    __IO Ifx_UReg_32Bit FCC2:4;            /**< \brief [11:8] APU Asignment for Corresponsing FCC2 (rw) */
    __IO Ifx_UReg_32Bit FCC3:4;            /**< \brief [15:12] APU Asignment for Corresponsing FCC3 (rw) */
    __IO Ifx_UReg_32Bit FCC4:4;            /**< \brief [19:16] APU Asignment for Corresponsing FCC4 (rw) */
    __IO Ifx_UReg_32Bit FCC5:4;            /**< \brief [23:20] APU Asignment for Corresponsing FCC5 (rw) */
    __IO Ifx_UReg_32Bit FCC6:4;            /**< \brief [27:24] APU Asignment for Corresponsing FCC6 (rw) */
    __IO Ifx_UReg_32Bit FCC7:4;            /**< \brief [31:28] APU Asignment for Corresponsing FCC7 (rw) */
} Ifx_ADC_RESALLOC_FCCA_Bits;

/** \brief Resource allocation register for FCC */
typedef struct _Ifx_ADC_RESALLOC_FCCB_Bits
{
    __IO Ifx_UReg_32Bit FCC8:4;            /**< \brief [3:0] APU Asignment for Corresponsing FCC8 (rw) */
    __IO Ifx_UReg_32Bit FCC9:4;            /**< \brief [7:4] APU Asignment for Corresponsing FCC9 (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_ADC_RESALLOC_FCCB_Bits;

/** \brief Resource allocation register for Global Rsources */
typedef struct _Ifx_ADC_RESALLOC_GLOB_Bits
{
    __IO Ifx_UReg_32Bit GLOB:4;            /**< \brief [3:0] APU Asignment for Global parts of ADC (rw) */
    __IO Ifx_UReg_32Bit DSINEX:4;          /**< \brief [7:4] APU Asignment for Global parts of DSADC and EXMOD (rw) */
    __IO Ifx_UReg_32Bit CDSPGL:4;          /**< \brief [11:8] APU Asignment for Global parts of CDSP (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_ADC_RESALLOC_GLOB_Bits;

/** \brief Resource allocation register for TMADC Resources */
typedef struct _Ifx_ADC_RESALLOC_TMADC_Bits
{
    __IO Ifx_UReg_32Bit TMADC0:4;          /**< \brief [3:0] APU Asignment for Corresponsing TMADC (rw) */
    __IO Ifx_UReg_32Bit TMADC1:4;          /**< \brief [7:4] APU Asignment for Corresponsing TMADC (rw) */
    __IO Ifx_UReg_32Bit TMADC2:4;          /**< \brief [11:8] APU Asignment for Corresponsing TMADC (rw) */
    __IO Ifx_UReg_32Bit TMADC3:4;          /**< \brief [15:12] APU Asignment for Corresponsing TMADC (rw) */
    __IO Ifx_UReg_32Bit TMADC4:4;          /**< \brief [19:16] APU Asignment for Corresponsing TMADC (rw) */
    __IO Ifx_UReg_32Bit TMADC5:4;          /**< \brief [23:20] APU Asignment for Corresponsing TMADC (rw) */
    __IO Ifx_UReg_32Bit TMADC6:4;          /**< \brief [27:24] APU Asignment for Corresponsing TMADC (rw) */
    __IO Ifx_UReg_32Bit TMADC7:4;          /**< \brief [31:28] APU Asignment for Corresponsing TMADC (rw) */
} Ifx_ADC_RESALLOC_TMADC_Bits;

/** \brief Reset Control Register A */
typedef struct _Ifx_ADC_RST_CTRLA_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit GRSTEN0:1;         /**< \brief [8:8] Enable for Global Module Reset Group 0 - GRSTEN0 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN1:1;         /**< \brief [9:9] Enable for Global Module Reset Group 1 - GRSTEN1 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN2:1;         /**< \brief [10:10] Enable for Global Module Reset Group 2 - GRSTEN2 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN3:1;         /**< \brief [11:11] Enable for Global Module Reset Group 3 - GRSTEN3 (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_ADC_RST_CTRLA_Bits;

/** \brief Reset Control Register B */
typedef struct _Ifx_ADC_RST_CTRLB_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [30:1] \internal Reserved */
    __O  Ifx_UReg_32Bit STATCLR:1;         /**< \brief [31:31] Kernel Reset Status Clear - STATCLR (w) */
} Ifx_ADC_RST_CTRLB_Bits;

/** \brief Reset Status Register */
typedef struct _Ifx_ADC_RST_STAT_Bits
{
    __I  Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset Status - KRST (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __I  Ifx_UReg_32Bit GRST0:1;           /**< \brief [8:8] Status for Global Module Reset Group 0 - GRST0 (rh) */
    __I  Ifx_UReg_32Bit GRST1:1;           /**< \brief [9:9] Status for Global Module Reset Group 1 - GRST1 (rh) */
    __I  Ifx_UReg_32Bit GRST2:1;           /**< \brief [10:10] Status for Global Module Reset Group 2 - GRST2 (rh) */
    __I  Ifx_UReg_32Bit GRST3:1;           /**< \brief [11:11] Status for Global Module Reset Group 3 - GRST3 (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_ADC_RST_STAT_Bits;

/** \brief Supply level selection for ADC */
typedef struct _Ifx_ADC_SUPLLEV_Bits
{
    __IO Ifx_UReg_32Bit TMADCSUP:1;        /**< \brief [0:0] TMADC Supply Level (rw) */
    __IO Ifx_UReg_32Bit FCCSUP:1;          /**< \brief [1:1] FCC Supply Level (rw) */
    __I  Ifx_UReg_32Bit R2:13;             /**< \brief [14:2] Reserved (r) */
    __IO Ifx_UReg_32Bit VEN:1;             /**< \brief [15:15] High Ohmic Reference Voltage Enable - VEN (rw) */
    __I  Ifx_UReg_32Bit R16:16;            /**< \brief [31:16] Reserved (r) */
} Ifx_ADC_SUPLLEV_Bits;

/** \brief TMADC monitor channel 0  result register on LLI (AXI) */
typedef struct _Ifx_ADC_TMADCRES_MRESAXI_Bits
{
    __I  Ifx_UReg_32Bit RESULT:16;         /**< \brief [15:0] Conversion result for the configured monitoring channel (rh) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [29:16] \internal Reserved */
    __I  Ifx_UReg_32Bit DR:1;              /**< \brief [30:30] Diagnostic result (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_ADC_TMADCRES_MRESAXI_Bits;

/** \brief TMADC result register 0 on LLI (AXI) */
typedef struct _Ifx_ADC_TMADCRES_RESAXI_Bits
{
    __I  Ifx_UReg_32Bit RESULT:16;         /**< \brief [15:0] Conversion result for the configured channel (rh) */
    __I  Ifx_UReg_32Bit CHNR:4;            /**< \brief [19:16] TMADC channel number (rh) */
    __I  Ifx_UReg_32Bit TRNM:6;            /**< \brief [25:20] Trigger number (rh) */
    __I  Ifx_UReg_32Bit SWTR:1;            /**< \brief [26:26] Software trigger (rh) */
    __I  Ifx_UReg_32Bit EMUXCH:3;          /**< \brief [29:27] EMUX channel number (rh) */
    __I  Ifx_UReg_32Bit DR:1;              /**< \brief [30:30] Diagnostic result (rh) */
    __I  Ifx_UReg_32Bit TRE:1;             /**< \brief [31:31] Trigger edge (rh) */
} Ifx_ADC_TMADCRES_RESAXI_Bits;

/** \brief TMADC timestamp register 0 on LLI (AXI) */
typedef struct _Ifx_ADC_TMADCRES_TSAXI_Bits
{
    __I  Ifx_UReg_32Bit TIMESTAMP:16;      /**< \brief [15:0] The most recent captured timestamp value (rh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_ADC_TMADCRES_TSAXI_Bits;

/** \brief TMADC boundary flag configuration register 0 */
typedef struct _Ifx_ADC_TMADC_BFL_CFG_Bits
{
    __IO Ifx_UReg_32Bit RESEL:4;           /**< \brief [3:0] Result Register Select (rw) */
    __IO Ifx_UReg_32Bit BFM:1;             /**< \brief [4:4] Boundary Flag Mode (rw) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_ADC_TMADC_BFL_CFG_Bits;

/** \brief TMADC boundary flag status register 0 */
typedef struct _Ifx_ADC_TMADC_BFL_STAT_Bits
{
    __I  Ifx_UReg_32Bit BFL:1;             /**< \brief [0:0] Boundary Flag Value (rh) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_ADC_TMADC_BFL_STAT_Bits;

/** \brief TMADC boundary event flag register */
typedef struct _Ifx_ADC_TMADC_BNDF_Bits
{
    __I  Ifx_UReg_32Bit BNDEV:18;          /**< \brief [17:0] Boundary Event (rh) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_TMADC_BNDF_Bits;

/** \brief TMADC boundary event flag clear register */
typedef struct _Ifx_ADC_TMADC_BNDFCLR_Bits
{
    __O  Ifx_UReg_32Bit BNDEVCLR:18;       /**< \brief [17:0] Boundary Event Clear (w) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_TMADC_BNDFCLR_Bits;

/** \brief TMADC boundary  select register 0 */
typedef struct _Ifx_ADC_TMADC_BND_SEL_Bits
{
    __IO Ifx_UReg_32Bit LB:12;             /**< \brief [11:0] Lower Boundary Value for Limit Checking (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __IO Ifx_UReg_32Bit UB:12;             /**< \brief [27:16] Upper Boundary Value for Limit Checking (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_ADC_TMADC_BND_SEL_Bits;

/** \brief TMADC boundary status regsiter */
typedef struct _Ifx_ADC_TMADC_BND_STAT_Bits
{
    __I  Ifx_UReg_32Bit CLB:12;            /**< \brief [11:0] Current Lower Boundary Value for Limit Checking (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __I  Ifx_UReg_32Bit CUB:12;            /**< \brief [27:16] Current Upper Boundary Value for Limit Checking (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_ADC_TMADC_BND_STAT_Bits;

/** \brief TMADC boundary trigger configuration register, boundary register 0 */
typedef struct _Ifx_ADC_TMADC_BND_TRGCFG_Bits
{
    __IO Ifx_UReg_32Bit TRS:6;             /**< \brief [5:0] Trigger Select (rw) */
    __IO Ifx_UReg_32Bit TRMS:2;            /**< \brief [7:6] Trigger Mode Select (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit TRD:16;            /**< \brief [31:16] Trigger Delay (rw) */
} Ifx_ADC_TMADC_BND_TRGCFG_Bits;

/** \brief TMADC broken wire detection control register */
typedef struct _Ifx_ADC_TMADC_BWDCFG_Bits
{
    __IO Ifx_UReg_32Bit ENCH0:2;           /**< \brief [1:0] Enable BWD channel 0 (rw) */
    __IO Ifx_UReg_32Bit ENCH1:2;           /**< \brief [3:2] Enable BWD channel 1 (rw) */
    __IO Ifx_UReg_32Bit ENCH2:2;           /**< \brief [5:4] Enable BWD channel 2 (rw) */
    __IO Ifx_UReg_32Bit ENCH3:2;           /**< \brief [7:6] Enable BWD channel 3 (rw) */
    __IO Ifx_UReg_32Bit ENCH4:2;           /**< \brief [9:8] Enable BWD channel 4 (rw) */
    __IO Ifx_UReg_32Bit ENCH5:2;           /**< \brief [11:10] Enable BWD channel 5 (rw) */
    __IO Ifx_UReg_32Bit ENCH6:2;           /**< \brief [13:12] Enable BWD channel 6 (rw) */
    __IO Ifx_UReg_32Bit ENCH7:2;           /**< \brief [15:14] Enable BWD channel 7 (rw) */
    __IO Ifx_UReg_32Bit ENCH8:2;           /**< \brief [17:16] Enable BWD channel 8 (rw) */
    __IO Ifx_UReg_32Bit ENCH9:2;           /**< \brief [19:18] Enable BWD channel 9 (rw) */
    __IO Ifx_UReg_32Bit ENCH10:2;          /**< \brief [21:20] Enable BWD channel 10 (rw) */
    __IO Ifx_UReg_32Bit ENCH11:2;          /**< \brief [23:22] Enable BWD channel 11 (rw) */
    __IO Ifx_UReg_32Bit ENCH12:2;          /**< \brief [25:24] Enable BWD channel 12 (rw) */
    __IO Ifx_UReg_32Bit ENCH13:2;          /**< \brief [27:26] Enable BWD channel 13 (rw) */
    __IO Ifx_UReg_32Bit ENCH14:2;          /**< \brief [29:28] Enable BWD channel 14 (rw) */
    __IO Ifx_UReg_32Bit ENCH15:2;          /**< \brief [31:30] Enable BWD channel 15 (rw) */
} Ifx_ADC_TMADC_BWDCFG_Bits;

/** \brief TMADC configuration register, channel 0 */
typedef struct _Ifx_ADC_TMADC_CH_CFG_Bits
{
    __IO Ifx_UReg_32Bit HWTR0MS:6;         /**< \brief [5:0] Hardware trigger 0 multiplexer select (rw) */
    __IO Ifx_UReg_32Bit HWTR1MS:6;         /**< \brief [11:6] Hardware trigger 1 multiplexer select (rw) */
    __IO Ifx_UReg_32Bit HWTR0M:2;          /**< \brief [13:12] Hardware trigger 0 mode (rw) */
    __IO Ifx_UReg_32Bit HWTR1M:2;          /**< \brief [15:14] Hardware trigger 1 mode (rw) */
    __IO Ifx_UReg_32Bit RSEL:4;            /**< \brief [19:16] Result register select (rw) */
    __IO Ifx_UReg_32Bit ATREN:1;           /**< \brief [20:20] Auto-trigger enable (rw) */
    __IO Ifx_UReg_32Bit EN:1;              /**< \brief [21:21] Enable (rw) */
    __IO Ifx_UReg_32Bit EMUXEN:1;          /**< \brief [22:22] EMUX enable (rw) */
    __IO Ifx_UReg_32Bit TSEN:1;            /**< \brief [23:23] Time-stamp enable (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_ADC_TMADC_CH_CFG_Bits;

/** \brief TMADC status register, channel 0 */
typedef struct _Ifx_ADC_TMADC_CH_STAT_Bits
{
    __I  Ifx_UReg_32Bit TRENR:6;           /**< \brief [5:0] Trigger Error Number (rh) */
    __I  Ifx_UReg_32Bit HWTRE:1;           /**< \brief [6:6] Hardware Trigger Error (rh) */
    __I  Ifx_UReg_32Bit SWTRE:1;           /**< \brief [7:7] Software trigger Error (rh) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_ADC_TMADC_CH_STAT_Bits;

/** \brief TMADC sampling time control register, channel 0 */
typedef struct _Ifx_ADC_TMADC_CH_STC_Bits
{
    __IO Ifx_UReg_32Bit ST:16;             /**< \brief [15:0] Sampling Time (rw) */
    __IO Ifx_UReg_32Bit TRD:16;            /**< \brief [31:16] Trigger Delay (rw) */
} Ifx_ADC_TMADC_CH_STC_Bits;

/** \brief TMADC connection matrix configuration register */
typedef struct _Ifx_ADC_TMADC_CMATCFG_Bits
{
    __IO Ifx_UReg_32Bit CHCSEL:16;         /**< \brief [15:0] Channel Core Select (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_ADC_TMADC_CMATCFG_Bits;

/** \brief TMADC converter self-diagnostics register core-0 */
typedef struct _Ifx_ADC_TMADC_CSD_Bits
{
    __IO Ifx_UReg_32Bit CHSEL:5;           /**< \brief [4:0] CSD Channel Select (valid only for channels connected to Core-0) (rw) */
    __IO Ifx_UReg_32Bit SEL:2;             /**< \brief [6:5] Select (rw) */
    __IO Ifx_UReg_32Bit EN:1;              /**< \brief [7:7] Enable (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_ADC_TMADC_CSD_Bits;

/** \brief TMADC EMUX configuration register */
typedef struct _Ifx_ADC_TMADC_EMUXCFG_Bits
{
    __IO Ifx_UReg_32Bit CHNR:3;            /**< \brief [2:0] External multiplexer channel number (rw) */
    __IO Ifx_UReg_32Bit CHCNT:3;           /**< \brief [5:3] External multiplexer channel count (rw) */
    __IO Ifx_UReg_32Bit MODE:1;            /**< \brief [6:6] External multiplexer mode (rw) */
    __IO Ifx_UReg_32Bit CHUPD:1;           /**< \brief [7:7] External multiplexer channel update condition (rw) */
    __IO Ifx_UReg_32Bit CS:1;              /**< \brief [8:8] External multiplexer coding scheme (rw) */
    __IO Ifx_UReg_32Bit CISEL0:1;          /**< \brief [9:9] External multiplxer control interface 0 select (rw) */
    __IO Ifx_UReg_32Bit CISEL1:1;          /**< \brief [10:10] External multiplxer control interface 1 select (rw) */
    __I  Ifx_UReg_32Bit :21;               /**< \brief [31:11] \internal Reserved */
} Ifx_ADC_TMADC_EMUXCFG_Bits;

/** \brief TMADC EMUX trigger configuration register */
typedef struct _Ifx_ADC_TMADC_EMUXTCFG_Bits
{
    __IO Ifx_UReg_32Bit TRS:6;             /**< \brief [5:0] Trigger Select (rw) */
    __IO Ifx_UReg_32Bit TRMS:2;            /**< \brief [7:6] Trigger Mode Select (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit TRD:16;            /**< \brief [31:16] Trigger Delay (rw) */
} Ifx_ADC_TMADC_EMUXTCFG_Bits;

/** \brief TMADC error event flag register */
typedef struct _Ifx_ADC_TMADC_ERRF_Bits
{
    __I  Ifx_UReg_32Bit ERREV:18;          /**< \brief [17:0] Error Event (rh) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_TMADC_ERRF_Bits;

/** \brief TMADC error event flag clear register */
typedef struct _Ifx_ADC_TMADC_ERRFCLR_Bits
{
    __O  Ifx_UReg_32Bit ERREVCLR:18;       /**< \brief [17:0] Error Event Clear (w) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_TMADC_ERRFCLR_Bits;

/** \brief TMADC configuration register, monitor channel 0 */
typedef struct _Ifx_ADC_TMADC_MCH_CFG_Bits
{
    __IO Ifx_UReg_32Bit SEL:2;             /**< \brief [1:0] Monitor Multiplexer Input Selection (rw) */
    __IO Ifx_UReg_32Bit ATREN:1;           /**< \brief [2:2] Auto-trigger enable (rw) */
    __IO Ifx_UReg_32Bit EN:1;              /**< \brief [3:3] Enable (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit ST:16;             /**< \brief [31:16] Monitor Channel Sampling Time (rw) */
} Ifx_ADC_TMADC_MCH_CFG_Bits;

/** \brief TMADC module configuration register */
typedef struct _Ifx_ADC_TMADC_MODCFG_Bits
{
    __O  Ifx_UReg_32Bit SUCAL:1;           /**< \brief [0:0] Start-Up Calibration (w) */
    __IO Ifx_UReg_32Bit RUN:1;             /**< \brief [1:1] Run (rwh) */
    __IO Ifx_UReg_32Bit BND0UPD:1;         /**< \brief [2:2] Boundary Values Update, Boundary Register 0 (rw) */
    __IO Ifx_UReg_32Bit BND1UPD:1;         /**< \brief [3:3] Boundary Values Update, Boundary Register 1 (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [8:4] \internal Reserved */
    __IO Ifx_UReg_32Bit TSCRUN:1;          /**< \brief [9:9] Time-stamp counter run control (rw) */
    __IO Ifx_UReg_32Bit OSSEL:2;           /**< \brief [11:10] Output Supervision Signal Select (rwh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_ADC_TMADC_MODCFG_Bits;

/** \brief TMADC module status register */
typedef struct _Ifx_ADC_TMADC_MODSTAT_Bits
{
    __I  Ifx_UReg_32Bit DIS:1;             /**< \brief [0:0] Disable (rh) */
    __I  Ifx_UReg_32Bit RUN:1;             /**< \brief [1:1] Run (rh) */
    __I  Ifx_UReg_32Bit CALPH:2;           /**< \brief [3:2] Calibration phase Indication (rh) */
    __I  Ifx_UReg_32Bit PONPH:2;           /**< \brief [5:4] Power-on phase Indication (rh) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_ADC_TMADC_MODSTAT_Bits;

/** \brief TMADC monitor channel 0  result register */
typedef struct _Ifx_ADC_TMADC_MRES_Bits
{
    __I  Ifx_UReg_32Bit RESULT:16;         /**< \brief [15:0] Separated register to store monitor chnnel results (rh) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [29:16] \internal Reserved */
    __I  Ifx_UReg_32Bit DR:1;              /**< \brief [30:30] Diagnostic result (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_ADC_TMADC_MRES_Bits;

/** \brief TMADC configuration register, monitor channel 0  result register */
typedef struct _Ifx_ADC_TMADC_MRSLT_CFG_Bits
{
    __IO Ifx_UReg_32Bit BNDSEL:2;          /**< \brief [1:0] Boundary Select (rw) */
    __IO Ifx_UReg_32Bit BNDMODE:1;         /**< \brief [2:2] Boundary Mode (rw) */
    __IO Ifx_UReg_32Bit BNDSELR:1;         /**< \brief [3:3] Boundary Select Register (rw) */
    __IO Ifx_UReg_32Bit WFR:1;             /**< \brief [4:4] Wait for Read (rw) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_ADC_TMADC_MRSLT_CFG_Bits;

/** \brief TMADC result rvent flag register */
typedef struct _Ifx_ADC_TMADC_RESF_Bits
{
    __I  Ifx_UReg_32Bit RESEV:18;          /**< \brief [17:0] Result Event (rh) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_TMADC_RESF_Bits;

/** \brief TMADC result event flag clear register */
typedef struct _Ifx_ADC_TMADC_RESFCLR_Bits
{
    __O  Ifx_UReg_32Bit RESEVCLR:18;       /**< \brief [17:0] Result Event Clear (w) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_TMADC_RESFCLR_Bits;

/** \brief TMADC result event flag set register */
typedef struct _Ifx_ADC_TMADC_RESFSET_Bits
{
    __O  Ifx_UReg_32Bit RESEVSET:18;       /**< \brief [17:0] Result Event Set (w) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_TMADC_RESFSET_Bits;

/** \brief TMADC configuration register, result register 0 */
typedef struct _Ifx_ADC_TMADC_RSLT_CFG_Bits
{
    __IO Ifx_UReg_32Bit BNDSEL:2;          /**< \brief [1:0] Boundary Select (rw) */
    __IO Ifx_UReg_32Bit BNDMODE:1;         /**< \brief [2:2] Boundary Mode (rw) */
    __IO Ifx_UReg_32Bit BNDSELR:1;         /**< \brief [3:3] Boundary Select  Register (rw) */
    __IO Ifx_UReg_32Bit WFR:1;             /**< \brief [4:4] Wait for Read (rw) */
    __IO Ifx_UReg_32Bit HYSTM:1;           /**< \brief [5:5] Hysteresis Mode (rw) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_ADC_TMADC_RSLT_CFG_Bits;

/** \brief TMADC service request configuration register 0 */
typedef struct _Ifx_ADC_TMADC_SR_CFG_Bits
{
    __IO Ifx_UReg_32Bit EVEN:18;           /**< \brief [17:0] Event Enable (rw) */
    __IO Ifx_UReg_32Bit EVSEL:2;           /**< \brief [19:18] Event Selection (rw) */
    __IO Ifx_UReg_32Bit EVOP:2;            /**< \brief [21:20] Event Operation (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [31:22] \internal Reserved */
} Ifx_ADC_TMADC_SR_CFG_Bits;

/** \brief TMADC software trigger configuration register */
typedef struct _Ifx_ADC_TMADC_SWTRCFG_Bits
{
    __O  Ifx_UReg_32Bit SCHSEL:18;         /**< \brief [17:0] Software Trigger Channel Select (w) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_TMADC_SWTRCFG_Bits;

/** \brief TMADC supervision module register */
typedef struct _Ifx_ADC_TMSMOD_Bits
{
    __IO Ifx_UReg_32Bit SEL:3;             /**< \brief [2:0] Select (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_ADC_TMSMOD_Bits;

/** \brief  */
typedef struct _Ifx_ADC_TS_Bits
{
    __I  Ifx_UReg_32Bit TIMESTAMP:16;      /**< \brief [15:0] The most recent captured timestamp value (rh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_ADC_TS_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_adc_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_ACCEN_PRS_Bits B;         /**< \brief Bitfield access */
} Ifx_ADC_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_ACCEN_RDA_Bits B;         /**< \brief Bitfield access */
} Ifx_ADC_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_ACCEN_RDB_FPI_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_ACCEN_VM_Bits B;          /**< \brief Bitfield access */
} Ifx_ADC_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_ACCEN_WRA_Bits B;         /**< \brief Bitfield access */
} Ifx_ADC_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_ACCEN_WRB_FPI_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_ACCEN_WRB_FPI;

/** \brief CDSP boudary flag event register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_BNDCF_Bits B;        /**< \brief Bitfield access */
} Ifx_ADC_CDSP_BNDCF;

/** \brief CDSP boundary flag event clear   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_BNDCFCL_Bits B;      /**< \brief Bitfield access */
} Ifx_ADC_CDSP_BNDCFCL;

/** \brief CDSP debug address register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DB_ADDR_Bits B;      /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DB_ADDR;

/** \brief CDSP debug command register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DB_CMD_Bits B;       /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DB_CMD;

/** \brief CDSP debug data register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DB_DATA_Bits B;      /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DB_DATA;

/** \brief CDSP debug reset register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DB_RESET_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DB_RESET;

/** \brief CDSP debug status register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DB_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DB_STATUS;

/** \brief CDSP boundary mode configuration register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_BNDCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_BNDCFG;

/** \brief CDSP boundary trigger configuration register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_BNDTRCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_BNDTRCFG;

/** \brief CDSP boundary select register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_BOUNDSEL_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_BOUNDSEL;

/** \brief CDSP boundary status register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_BOUNDST_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_BOUNDST;

/** \brief CDSP channel error clear register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_CHERRCL_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_CHERRCL;

/** \brief CDSP configuration of CDSP  0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_DSPCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_DSPCFG;

/** \brief CDSP status register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_DSPST_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_DSPST;

/** \brief CDSP input from DSADC, TMADC, EXMOD or CARMAG   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_INPUTMON_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_INPUTMON;

/** \brief CDSP integrator configuration register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_INTCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_INTCFG;

/** \brief CDSP intermediate integration value   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_INTIVAL_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_INTIVAL;

/** \brief CDSP integrator trigger configuration register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_INTTRCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_INTTRCFG;

/** \brief CDSP result register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_RES_Bits B;      /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_RES;

/** \brief CDSP service request configuration register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_SRCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_SRCFG;

/** \brief CDSP service request trigger configuration register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_SRTRCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_SRTRCFG;

/** \brief CDSP time-stamp counter 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_TSCNT_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_TSCNT;

/** \brief CDSP time-stamp register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_TSTMP_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_TSTMP;

/** \brief CDSP time stamp trigger configuration register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_TSTRCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_TSTRCFG;

/** \brief CDSP global halt control register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_GLOBHCD_Bits B;      /**< \brief Bitfield access */
} Ifx_ADC_CDSP_GLOBHCD;

/** \brief CDSP global halt status register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_GLOBHSTD_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_CDSP_GLOBHSTD;

/** \brief CDSP global run control register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_GLOBRCD_Bits B;      /**< \brief Bitfield access */
} Ifx_ADC_CDSP_GLOBRCD;

/** \brief CDSP global reset control   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_GLOBRD_Bits B;       /**< \brief Bitfield access */
} Ifx_ADC_CDSP_GLOBRD;

/** \brief CDSP global run status register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_GLOBRSD_Bits B;      /**< \brief Bitfield access */
} Ifx_ADC_CDSP_GLOBRSD;

/** \brief CDSP input from general purpose register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_GP_Bits B;           /**< \brief Bitfield access */
} Ifx_ADC_CDSP_GP;

/** \brief OCDS control and status register0 for CDSP0-8   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_OCSCDSPA_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_CDSP_OCSCDSPA;

/** \brief OCDS control and status register1 for CDSP9-17   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_OCSCDSPB_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_CDSP_OCSCDSPB;

/** \brief CDSP event flag register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_RESEV_Bits B;        /**< \brief Bitfield access */
} Ifx_ADC_CDSP_RESEV;

/** \brief CDSP result event flag clear 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_RESEVCLR_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_CDSP_RESEVCLR;

/** \brief CDSP sleep status register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_SLPST_Bits B;        /**< \brief Bitfield access */
} Ifx_ADC_CDSP_SLPST;

/** \brief CDSP wake up error event clear register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_WUERRCL_Bits B;      /**< \brief Bitfield access */
} Ifx_ADC_CDSP_WUERRCL;

/** \brief CDSP wake up error flag register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_WUERREV_Bits B;      /**< \brief Bitfield access */
} Ifx_ADC_CDSP_WUERREV;

/** \brief Clock Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CLC_Bits B;               /**< \brief Bitfield access */
} Ifx_ADC_CLC;

/** \brief Clock enable for CDSP   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CLKEN_CDSP_Bits B;        /**< \brief Bitfield access */
} Ifx_ADC_CLKEN_CDSP;

/** \brief Clock enable for DSADC and EXMOD   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CLKEN_DSINEX_Bits B;      /**< \brief Bitfield access */
} Ifx_ADC_CLKEN_DSINEX;

/** \brief Clock enable for FCC   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CLKEN_FCC_Bits B;         /**< \brief Bitfield access */
} Ifx_ADC_CLKEN_FCC;

/** \brief Clock enable for TMADC   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CLKEN_TMADC_Bits B;       /**< \brief Bitfield access */
} Ifx_ADC_CLKEN_TMADC;

/** \brief DSADC boundary flag event register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_BOUNDF_Bits B;      /**< \brief Bitfield access */
} Ifx_ADC_DSADC_BOUNDF;

/** \brief DSADC boundary event flag clear register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_BOUNDFCL_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_BOUNDFCL;

/** \brief DSADC carrier generator configuration register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_CGCFG_Bits B;       /**< \brief Bitfield access */
} Ifx_ADC_DSADC_CGCFG;

/** \brief DSADC carrier generator status register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_CGST_Bits B;        /**< \brief Bitfield access */
} Ifx_ADC_DSADC_CGST;

/** \brief EXMOD boundary mode configuration register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_EX_BNDCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_EX_BNDCFG;

/** \brief EXMOD boundary request trigger configuration register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_EX_BNDTRCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_EX_BNDTRCFG;

/** \brief EXMOD boundary select register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_EX_BOUNDSEL_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_EX_BOUNDSEL;

/** \brief EXMOD boundary status register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_EX_BOUNDST_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_EX_BOUNDST;

/** \brief EXMOD channel configuration register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_EX_CHCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_EX_CHCFG;

/** \brief EXMOD channel error clear register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_EX_CHERRCL_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_EX_CHERRCL;

/** \brief EXMOD channel status register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_EX_CHST_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_DSADC_EX_CHST;

/** \brief EXMOD CIC configuration register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_EX_CICCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_EX_CICCFG;

/** \brief EXMOD gain correction register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_EX_GAINCORR_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_EX_GAINCORR;

/** \brief EXMOD result register 0 auxiliary   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_EX_RESA_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_DSADC_EX_RESA;

/** \brief EXMOD result register 0 main   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_EX_RESM_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_DSADC_EX_RESM;

/** \brief EXMOD service request configuration register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_EX_SRCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_EX_SRCFG;

/** \brief EXMOD service request trigger configuration register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_EX_SRTRCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_EX_SRTRCFG;

/** \brief EXMOD timestamp counter 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_EX_TSCNT_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_EX_TSCNT;

/** \brief EXMOD timestamp register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_EX_TSTMP_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_EX_TSTMP;

/** \brief EXMOD timestamp trigger configuration register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_EX_TSTRCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_EX_TSTRCFG;

/** \brief DSADC global configuration register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_GLOBCFG_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_DSADC_GLOBCFG;

/** \brief DSADC global run control register for filter chain   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_GLOBRCF_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_DSADC_GLOBRCF;

/** \brief DSADC global run control register for analog modulator   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_GLOBRCM_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_DSADC_GLOBRCM;

/** \brief DSADC boundary mode configuration register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_BNDCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_BNDCFG;

/** \brief DSADC boundary request trigger configuration register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_BNDTRCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_BNDTRCFG;

/** \brief DSADC boundary select register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_BOUNDSEL_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_BOUNDSEL;

/** \brief DSADC boundary status register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_BOUNDST_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_BOUNDST;

/** \brief DSADC carrier generation and rectification status register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_CGRECST_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_CGRECST;

/** \brief DSADC carrier generator synchronization register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_CGSYNC_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_CGSYNC;

/** \brief DSADC channel configuration register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_CHCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_CHCFG;

/** \brief DSADC channel error clear register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_CHERRCL_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_CHERRCL;

/** \brief DSADC channel status register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_CHST_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_CHST;

/** \brief DSADC CIC configuration register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_CICCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_CICCFG;

/** \brief DSADC gain calibration register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_GAINCAL_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_GAINCAL;

/** \brief DSADC gain correction register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_GAINCORR_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_GAINCORR;

/** \brief DSADC gain control register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_GAINCTR_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_GAINCTR;

/** \brief DSADC input mux trigger configuration register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_IMXTRCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_IMXTRCFG;

/** \brief DSADC integrator configuration register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_INTCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_INTCFG;

/** \brief DSADC intermediate integration value register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_INTIVAL_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_INTIVAL;

/** \brief DSADC integrator status register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_INTST_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_INTST;

/** \brief DSADC integrator trigger configuration register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_INTTRCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_INTTRCFG;

/** \brief DSADC offset compensation register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_OFFCOMP_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_OFFCOMP;

/** \brief DSADC rectification configuration register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_RECTCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_RECTCFG;

/** \brief DSADC result register 0 auxiliary   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_RESA_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_RESA;

/** \brief DSADC result register 0 main   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_RESM_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_RESM;

/** \brief DSADC service request configuration register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_SRCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_SRCFG;

/** \brief DSADC service request trigger configuration register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_SRTRCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_SRTRCFG;

/** \brief DSADC timestamp counter 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_TSCNT_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_TSCNT;

/** \brief DSADC timestamp register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_TSTMP_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_TSTMP;

/** \brief DSADC timestamp trigger configuration register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_TSTRCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_TSTRCFG;

/** \brief DSADC common mode voltage register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_IN_VCM_Bits B;      /**< \brief Bitfield access */
} Ifx_ADC_DSADC_IN_VCM;

/** \brief OCDS control and status register for DSADC   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_OCSDSADC_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_OCSDSADC;

/** \brief OCDS control and status register for EXMOD   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_OCSEXMOD_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_OCSEXMOD;

/** \brief DSADC global reference status register clear   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_REFERRCL_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_DSADC_REFERRCL;

/** \brief DSADC global reference status register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_REFST_Bits B;       /**< \brief Bitfield access */
} Ifx_ADC_DSADC_REFST;

/** \brief DSADC event flag register on auxiliary result register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_RESAF_Bits B;       /**< \brief Bitfield access */
} Ifx_ADC_DSADC_RESAF;

/** \brief DSADC result event (auxiliary) flag clear register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_RESAFCL_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_DSADC_RESAFCL;

/** \brief DSADC event flag register on main result register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_RESMF_Bits B;       /**< \brief Bitfield access */
} Ifx_ADC_DSADC_RESMF;

/** \brief DSADC result event (main) flag clear register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_DSADC_RESMFCL_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_DSADC_RESMFCL;

/** \brief ADC to eGTM boundary flag select register, cluster 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_ETBFSEL_Bits B;           /**< \brief Bitfield access */
} Ifx_ADC_ETBFSEL;

/** \brief FCC boundary flag configuration register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_FCC_BFLCFG_Bits B;        /**< \brief Bitfield access */
} Ifx_ADC_FCC_BFLCFG;

/** \brief FCC gate trigger configuration register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_FCC_GATRCFG_Bits B;       /**< \brief Bitfield access */
} Ifx_ADC_FCC_GATRCFG;

/** \brief FCC hyteresis configuration register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_FCC_HYSTCFG_Bits B;       /**< \brief Bitfield access */
} Ifx_ADC_FCC_HYSTCFG;

/** \brief FCC module configuration register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_FCC_MODCFG_Bits B;        /**< \brief Bitfield access */
} Ifx_ADC_FCC_MODCFG;

/** \brief FCC module enable register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_FCC_MODEN_Bits B;         /**< \brief Bitfield access */
} Ifx_ADC_FCC_MODEN;

/** \brief FCC module status register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_FCC_MODSTAT_Bits B;       /**< \brief Bitfield access */
} Ifx_ADC_FCC_MODSTAT;

/** \brief FCC ramp configruation register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_FCC_RMPCFG_Bits B;        /**< \brief Bitfield access */
} Ifx_ADC_FCC_RMPCFG;

/** \brief FCC ramp threhsold register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_FCC_RMPT_Bits B;          /**< \brief Bitfield access */
} Ifx_ADC_FCC_RMPT;

/** \brief FCC ramp trigger configuration register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_FCC_RMPTRCFG_Bits B;      /**< \brief Bitfield access */
} Ifx_ADC_FCC_RMPTRCFG;

/** \brief FCC service request configuration register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_FCC_SRCFG_Bits B;         /**< \brief Bitfield access */
} Ifx_ADC_FCC_SRCFG;

/** \brief FCC threshold trigger configuration register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_FCC_THTRCFG_Bits B;       /**< \brief Bitfield access */
} Ifx_ADC_FCC_THTRCFG;

/** \brief ADC global alarm configuration register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_GLALCFG_Bits B;           /**< \brief Bitfield access */
} Ifx_ADC_GLALCFG;

/** \brief ADC global alarm set register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_GLALSET_Bits B;           /**< \brief Bitfield access */
} Ifx_ADC_GLALSET;

/** \brief ADC global service request configuration register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_GLSRCFG_Bits B;           /**< \brief Bitfield access */
} Ifx_ADC_GLSRCFG;

/** \brief ADC global service request set register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_GLSRSET_Bits B;           /**< \brief Bitfield access */
} Ifx_ADC_GLSRSET;

/** \brief ADC to GTM boundary flag select register, cluster 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_GTBFSEL_Bits B;           /**< \brief Bitfield access */
} Ifx_ADC_GTBFSEL;

/** \brief ADC to GTM service request select register, cluster 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_GTSRSEL_Bits B;           /**< \brief Bitfield access */
} Ifx_ADC_GTSRSEL;

/** \brief Module Identification Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_ID_Bits B;                /**< \brief Bitfield access */
} Ifx_ADC_ID;

/** \brief OCDS control and status register for TMADC   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_OCSTM_Bits B;             /**< \brief Bitfield access */
} Ifx_ADC_OCSTM;

/** \brief ADC pull down diagnostics configuration register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_PDDCFG_Bits B;            /**< \brief Bitfield access */
} Ifx_ADC_PDDCFG;

/** \brief Resource Protection Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_PROT_Bits B;              /**< \brief Bitfield access */
} Ifx_ADC_PROT;

/** \brief    */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_RES_Bits B;               /**< \brief Bitfield access */
} Ifx_ADC_RES;

/** \brief Resource allocation register for CDSP   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_RESALLOC_CDSPA_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_RESALLOC_CDSPA;

/** \brief Resource allocation register for CDSP   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_RESALLOC_CDSPB_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_RESALLOC_CDSPB;

/** \brief Resource allocation register for CDSP   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_RESALLOC_CDSPC_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_RESALLOC_CDSPC;

/** \brief Resource allocation register for DSADC   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_RESALLOC_DSADCA_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_RESALLOC_DSADCA;

/** \brief Resource allocation register for DSADC   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_RESALLOC_DSADCB_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_RESALLOC_DSADCB;

/** \brief Resource allocation register for EXMOD   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_RESALLOC_EXMOD_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_RESALLOC_EXMOD;

/** \brief Resource allocation register for FCC   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_RESALLOC_FCCA_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_RESALLOC_FCCA;

/** \brief Resource allocation register for FCC   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_RESALLOC_FCCB_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_RESALLOC_FCCB;

/** \brief Resource allocation register for Global Rsources   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_RESALLOC_GLOB_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_RESALLOC_GLOB;

/** \brief Resource allocation register for TMADC Resources   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_RESALLOC_TMADC_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_RESALLOC_TMADC;

/** \brief Reset Control Register A   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_RST_CTRLA_Bits B;         /**< \brief Bitfield access */
} Ifx_ADC_RST_CTRLA;

/** \brief Reset Control Register B   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_RST_CTRLB_Bits B;         /**< \brief Bitfield access */
} Ifx_ADC_RST_CTRLB;

/** \brief Reset Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_RST_STAT_Bits B;          /**< \brief Bitfield access */
} Ifx_ADC_RST_STAT;

/** \brief Supply level selection for ADC   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_SUPLLEV_Bits B;           /**< \brief Bitfield access */
} Ifx_ADC_SUPLLEV;

/** \brief TMADC monitor channel 0  result register on LLI (AXI)   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADCRES_MRESAXI_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_TMADCRES_MRESAXI;

/** \brief TMADC result register 0 on LLI (AXI)   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADCRES_RESAXI_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_TMADCRES_RESAXI;

/** \brief TMADC timestamp register 0 on LLI (AXI)   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADCRES_TSAXI_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_TMADCRES_TSAXI;

/** \brief TMADC boundary flag configuration register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_BFL_CFG_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_TMADC_BFL_CFG;

/** \brief TMADC boundary flag status register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_BFL_STAT_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_TMADC_BFL_STAT;

/** \brief TMADC boundary event flag register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_BNDF_Bits B;        /**< \brief Bitfield access */
} Ifx_ADC_TMADC_BNDF;

/** \brief TMADC boundary event flag clear register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_BNDFCLR_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_TMADC_BNDFCLR;

/** \brief TMADC boundary  select register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_BND_SEL_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_TMADC_BND_SEL;

/** \brief TMADC boundary status regsiter   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_BND_STAT_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_TMADC_BND_STAT;

/** \brief TMADC boundary trigger configuration register, boundary register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_BND_TRGCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_TMADC_BND_TRGCFG;

/** \brief TMADC broken wire detection control register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_BWDCFG_Bits B;      /**< \brief Bitfield access */
} Ifx_ADC_TMADC_BWDCFG;

/** \brief TMADC configuration register, channel 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_CH_CFG_Bits B;      /**< \brief Bitfield access */
} Ifx_ADC_TMADC_CH_CFG;

/** \brief TMADC status register, channel 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_CH_STAT_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_TMADC_CH_STAT;

/** \brief TMADC sampling time control register, channel 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_CH_STC_Bits B;      /**< \brief Bitfield access */
} Ifx_ADC_TMADC_CH_STC;

/** \brief TMADC connection matrix configuration register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_CMATCFG_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_TMADC_CMATCFG;

/** \brief TMADC converter self-diagnostics register core-0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_CSD_Bits B;         /**< \brief Bitfield access */
} Ifx_ADC_TMADC_CSD;

/** \brief TMADC EMUX configuration register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_EMUXCFG_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_TMADC_EMUXCFG;

/** \brief TMADC EMUX trigger configuration register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_EMUXTCFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_TMADC_EMUXTCFG;

/** \brief TMADC error event flag register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_ERRF_Bits B;        /**< \brief Bitfield access */
} Ifx_ADC_TMADC_ERRF;

/** \brief TMADC error event flag clear register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_ERRFCLR_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_TMADC_ERRFCLR;

/** \brief TMADC configuration register, monitor channel 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_MCH_CFG_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_TMADC_MCH_CFG;

/** \brief TMADC module configuration register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_MODCFG_Bits B;      /**< \brief Bitfield access */
} Ifx_ADC_TMADC_MODCFG;

/** \brief TMADC module status register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_MODSTAT_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_TMADC_MODSTAT;

/** \brief TMADC monitor channel 0  result register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_MRES_Bits B;        /**< \brief Bitfield access */
} Ifx_ADC_TMADC_MRES;

/** \brief TMADC configuration register, monitor channel 0  result register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_MRSLT_CFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_TMADC_MRSLT_CFG;

/** \brief TMADC result rvent flag register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_RESF_Bits B;        /**< \brief Bitfield access */
} Ifx_ADC_TMADC_RESF;

/** \brief TMADC result event flag clear register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_RESFCLR_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_TMADC_RESFCLR;

/** \brief TMADC result event flag set register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_RESFSET_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_TMADC_RESFSET;

/** \brief TMADC configuration register, result register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_RSLT_CFG_Bits B;    /**< \brief Bitfield access */
} Ifx_ADC_TMADC_RSLT_CFG;

/** \brief TMADC service request configuration register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_SR_CFG_Bits B;      /**< \brief Bitfield access */
} Ifx_ADC_TMADC_SR_CFG;

/** \brief TMADC software trigger configuration register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_SWTRCFG_Bits B;     /**< \brief Bitfield access */
} Ifx_ADC_TMADC_SWTRCFG;

/** \brief TMADC supervision module register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMSMOD_Bits B;            /**< \brief Bitfield access */
} Ifx_ADC_TMSMOD;

/** \brief    */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TS_Bits B;                /**< \brief Bitfield access */
} Ifx_ADC_TS;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_RESALLOC_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief RESALLOC object */
typedef volatile struct _Ifx_ADC_RESALLOC
{
       __IO Ifx_ADC_RESALLOC_GLOB               GLOB;                   /**< \brief 0, Resource allocation register for Global Rsources*/
       __IO Ifx_ADC_RESALLOC_TMADC              TMADC;                  /**< \brief 4, Resource allocation register for TMADC Resources*/
       __IO Ifx_ADC_RESALLOC_FCCA               FCCA;                   /**< \brief 8, Resource allocation register for FCC*/
       __IO Ifx_ADC_RESALLOC_FCCB               FCCB;                   /**< \brief C, Resource allocation register for FCC*/
       __IO Ifx_ADC_RESALLOC_DSADCA             DSADCA;                 /**< \brief 10, Resource allocation register for DSADC*/
       __IO Ifx_ADC_RESALLOC_DSADCB             DSADCB;                 /**< \brief 14, Resource allocation register for DSADC*/
       __IO Ifx_ADC_RESALLOC_EXMOD              EXMOD;                  /**< \brief 18, Resource allocation register for EXMOD*/
       __IO Ifx_ADC_RESALLOC_CDSPA              CDSPA;                  /**< \brief 1C, Resource allocation register for CDSP*/
       __IO Ifx_ADC_RESALLOC_CDSPB              CDSPB;                  /**< \brief 20, Resource allocation register for CDSP*/
       __IO Ifx_ADC_RESALLOC_CDSPC              CDSPC;                  /**< \brief 24, Resource allocation register for CDSP*/
} Ifx_ADC_RESALLOC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_ADC_ACCEN
{
       __IO Ifx_ADC_ACCEN_WRA                   WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_ADC_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_ADC_ACCEN_RDA                   RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_ADC_ACCEN_RDB_FPI               RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_ADC_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_ADC_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_ADC_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_ADC_RST
{
       __IO Ifx_ADC_RST_CTRLA                   CTRLA;                  /**< \brief 0, Reset Control Register A*/
       __IO Ifx_ADC_RST_CTRLB                   CTRLB;                  /**< \brief 4, Reset Control Register B*/
       __I  Ifx_ADC_RST_STAT                    STAT;                   /**< \brief 8, Reset Status Register*/
} Ifx_ADC_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_CLKEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief CLKEN object */
typedef volatile struct _Ifx_ADC_CLKEN
{
       __IO Ifx_ADC_CLKEN_TMADC                 TMADC;                  /**< \brief 0, Clock enable for TMADC*/
       __IO Ifx_ADC_CLKEN_FCC                   FCC;                    /**< \brief 4, Clock enable for FCC*/
       __IO Ifx_ADC_CLKEN_DSINEX                DSINEX;                 /**< \brief 8, Clock enable for DSADC and EXMOD*/
       __IO Ifx_ADC_CLKEN_CDSP                  CDSP;                   /**< \brief C, Clock enable for CDSP*/
} Ifx_ADC_CLKEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADC_CH_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief CH object */
typedef volatile struct _Ifx_ADC_TMADC_CH
{
       __IO Ifx_ADC_TMADC_CH_STC                STC;                    /**< \brief 0, TMADC sampling time control register, channel 0*/
       __IO Ifx_ADC_TMADC_CH_CFG                CFG;                    /**< \brief 4, TMADC configuration register, channel 0*/
       __I  Ifx_ADC_TMADC_CH_STAT               STAT;                   /**< \brief 8, TMADC status register, channel 0*/
} Ifx_ADC_TMADC_CH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADC_MCH_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief MCH object */
typedef volatile struct _Ifx_ADC_TMADC_MCH
{
       __IO Ifx_ADC_TMADC_MCH_CFG               CFG;                    /**< \brief 0, TMADC configuration register, monitor channel 0*/
} Ifx_ADC_TMADC_MCH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADC_BND_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief BND object */
typedef volatile struct _Ifx_ADC_TMADC_BND
{
       __IO Ifx_ADC_TMADC_BND_SEL               SEL;                    /**< \brief 0, TMADC boundary  select register 0*/
       __I  Ifx_ADC_TMADC_BND_STAT              STAT;                   /**< \brief 4, TMADC boundary status regsiter*/
       __IO Ifx_ADC_TMADC_BND_TRGCFG            TRGCFG;                 /**< \brief 8, TMADC boundary trigger configuration register, boundary register 0*/
} Ifx_ADC_TMADC_BND;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADC_BFL_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief BFL object */
typedef volatile struct _Ifx_ADC_TMADC_BFL
{
       __IO Ifx_ADC_TMADC_BFL_CFG               CFG;                    /**< \brief 0, TMADC boundary flag configuration register 0*/
       __I  Ifx_ADC_TMADC_BFL_STAT              STAT;                   /**< \brief 4, TMADC boundary flag status register 0*/
} Ifx_ADC_TMADC_BFL;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADC_RSLT_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief RSLT object */
typedef volatile struct _Ifx_ADC_TMADC_RSLT
{
       __I  Ifx_UReg_8Bit                       reserved_0[4];          /**< \brief 0, \internal Reserved */
       __IO Ifx_ADC_TMADC_RSLT_CFG              CFG;                    /**< \brief 4, TMADC configuration register, result register 0*/
} Ifx_ADC_TMADC_RSLT;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADC_MRSLT_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MRSLT object */
typedef volatile struct _Ifx_ADC_TMADC_MRSLT
{
       __IO Ifx_ADC_TMADC_MRSLT_CFG             CFG;                    /**< \brief 0, TMADC configuration register, monitor channel 0  result register*/
} Ifx_ADC_TMADC_MRSLT;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADC_SR_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief SR object */
typedef volatile struct _Ifx_ADC_TMADC_SR
{
       __IO Ifx_ADC_TMADC_SR_CFG                CFG;                    /**< \brief 0, TMADC service request configuration register 0*/
} Ifx_ADC_TMADC_SR;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADC_AW0_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief AW0 object */
typedef volatile struct _Ifx_ADC_TMADC_AW0
{
       __I  Ifx_ADC_TS                          TS[16];                 /**< \brief 0, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES[16];                /**< \brief 40, Result register 0*/
} Ifx_ADC_TMADC_AW0;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADC_AW1_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief AW1 object */
typedef volatile struct _Ifx_ADC_TMADC_AW1
{
       __I  Ifx_ADC_TS                          TS0;                    /**< \brief 0, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES0;                   /**< \brief 4, Result register 0*/
       __I  Ifx_ADC_TS                          TS1;                    /**< \brief 8, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES1;                   /**< \brief C, Result register 0*/
       __I  Ifx_ADC_TS                          TS2;                    /**< \brief 10, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES2;                   /**< \brief 14, Result register 0*/
       __I  Ifx_ADC_TS                          TS3;                    /**< \brief 18, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES3;                   /**< \brief 1C, Result register 0*/
       __I  Ifx_ADC_TS                          TS4;                    /**< \brief 20, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES4;                   /**< \brief 24, Result register 0*/
       __I  Ifx_ADC_TS                          TS5;                    /**< \brief 28, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES5;                   /**< \brief 2C, Result register 0*/
       __I  Ifx_ADC_TS                          TS6;                    /**< \brief 30, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES6;                   /**< \brief 34, Result register 0*/
       __I  Ifx_ADC_TS                          TS7;                    /**< \brief 38, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES7;                   /**< \brief 3C, Result register 0*/
       __I  Ifx_ADC_TS                          TS8;                    /**< \brief 40, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES8;                   /**< \brief 44, Result register 0*/
       __I  Ifx_ADC_TS                          TS9;                    /**< \brief 48, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES9;                   /**< \brief 4C, Result register 0*/
       __I  Ifx_ADC_TS                          TS10;                   /**< \brief 50, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES10;                  /**< \brief 54, Result register 0*/
       __I  Ifx_ADC_TS                          TS11;                   /**< \brief 58, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES11;                  /**< \brief 5C, Result register 0*/
       __I  Ifx_ADC_TS                          TS12;                   /**< \brief 60, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES12;                  /**< \brief 64, Result register 0*/
       __I  Ifx_ADC_TS                          TS13;                   /**< \brief 68, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES13;                  /**< \brief 6C, Result register 0*/
       __I  Ifx_ADC_TS                          TS14;                   /**< \brief 70, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES14;                  /**< \brief 74, Result register 0*/
       __I  Ifx_ADC_TS                          TS15;                   /**< \brief 78, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES15;                  /**< \brief 7C, Result register 0*/
} Ifx_ADC_TMADC_AW1;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADC_AW2_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief AW2 object */
typedef volatile struct _Ifx_ADC_TMADC_AW2
{
       __I  Ifx_ADC_TS                          TS0;                    /**< \brief 0, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES0;                   /**< \brief 4, Result register 0*/
       __I  Ifx_ADC_RES                         RES1;                   /**< \brief 8, Result register 0*/
       __I  Ifx_ADC_RES                         RES2;                   /**< \brief C, Result register 0*/
       __I  Ifx_ADC_RES                         RES3;                   /**< \brief 10, Result register 0*/
       __I  Ifx_ADC_RES                         RES4;                   /**< \brief 14, Result register 0*/
       __I  Ifx_ADC_RES                         RES5;                   /**< \brief 18, Result register 0*/
       __I  Ifx_ADC_RES                         RES6;                   /**< \brief 1C, Result register 0*/
       __I  Ifx_UReg_8Bit                       reserved_20[32];        /**< \brief 20, \internal Reserved */
       __I  Ifx_ADC_TS                          TS7;                    /**< \brief 40, Time-stamp register 7*/
       __I  Ifx_ADC_RES                         RES7;                   /**< \brief 44, Result register 7*/
       __I  Ifx_ADC_RES                         RES8;                   /**< \brief 48, Result register 7*/
       __I  Ifx_ADC_RES                         RES9;                   /**< \brief 4C, Result register 7*/
       __I  Ifx_ADC_RES                         RES10;                  /**< \brief 50, Result register 7*/
       __I  Ifx_ADC_RES                         RES11;                  /**< \brief 54, Result register 7*/
       __I  Ifx_ADC_RES                         RES12;                  /**< \brief 58, Result register 7*/
       __I  Ifx_ADC_RES                         RES13;                  /**< \brief 5C, Result register 7*/
       __I  Ifx_ADC_TS                          TS14;                   /**< \brief 60, Time-stamp register 14*/
       __I  Ifx_ADC_RES                         RES14;                  /**< \brief 64, Result register 14*/
       __I  Ifx_ADC_RES                         RES15;                  /**< \brief 68, Result register 14*/
} Ifx_ADC_TMADC_AW2;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADC_AW3_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief AW3 object */
typedef volatile struct _Ifx_ADC_TMADC_AW3
{
       __I  Ifx_ADC_RES                         RES0;                   /**< \brief 0, Result register 0*/
       __I  Ifx_ADC_RES                         RES1;                   /**< \brief 4, Result register 0*/
       __I  Ifx_ADC_RES                         RES2;                   /**< \brief 8, Result register 0*/
       __I  Ifx_ADC_RES                         RES3;                   /**< \brief C, Result register 0*/
       __I  Ifx_ADC_RES                         RES4;                   /**< \brief 10, Result register 0*/
} Ifx_ADC_TMADC_AW3;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADC_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief TMADC object */
typedef volatile struct _Ifx_ADC_TMADC
{
       __IO Ifx_ADC_TMADC_MODCFG                MODCFG;                 /**< \brief 0, TMADC module configuration register*/
       __IO Ifx_ADC_TMADC_EMUXCFG               EMUXCFG;                /**< \brief 4, TMADC EMUX configuration register*/
       __IO Ifx_ADC_TMADC_EMUXTCFG              EMUXTCFG;               /**< \brief 8, TMADC EMUX trigger configuration register*/
       __O  Ifx_ADC_TMADC_SWTRCFG               SWTRCFG;                /**< \brief C, TMADC software trigger configuration register*/
       __IO Ifx_ADC_TMADC_CMATCFG               CMATCFG;                /**< \brief 10, TMADC connection matrix configuration register*/
       __I  Ifx_UReg_8Bit                       reserved_14[4];         /**< \brief 14, \internal Reserved */
       __IO Ifx_ADC_TMADC_CH                    CH[16];                 /**< \brief 18, */
       __IO Ifx_ADC_TMADC_MCH                   MCH[2];                 /**< \brief D8, */
       __IO Ifx_ADC_TMADC_BND                   BND[2];                 /**< \brief E0, */
       __IO Ifx_ADC_TMADC_BFL                   BFL[2];                 /**< \brief F8, */
       __IO Ifx_ADC_TMADC_RSLT                  RSLT[16];               /**< \brief 108, */
       __IO Ifx_ADC_TMADC_MRSLT                 MRSLT[2];               /**< \brief 188, Monitor channel result register confguration*/
       __I  Ifx_ADC_TMADC_ERRF                  ERRF;                   /**< \brief 190, TMADC error event flag register*/
       __I  Ifx_ADC_TMADC_RESF                  RESF;                   /**< \brief 194, TMADC result rvent flag register*/
       __I  Ifx_ADC_TMADC_BNDF                  BNDF;                   /**< \brief 198, TMADC boundary event flag register*/
       __I  Ifx_UReg_8Bit                       reserved_19C[4];        /**< \brief 19C, \internal Reserved */
       __O  Ifx_ADC_TMADC_RESFSET               RESFSET;                /**< \brief 1A0, TMADC result event flag set register*/
       __O  Ifx_ADC_TMADC_ERRFCLR               ERRFCLR;                /**< \brief 1A4, TMADC error event flag clear register*/
       __O  Ifx_ADC_TMADC_RESFCLR               RESFCLR;                /**< \brief 1A8, TMADC result event flag clear register*/
       __O  Ifx_ADC_TMADC_BNDFCLR               BNDFCLR;                /**< \brief 1AC, TMADC boundary event flag clear register*/
       __IO Ifx_ADC_TMADC_SR                    SR[7];                  /**< \brief 1B0, */
       __I  Ifx_ADC_TMADC_MRES                  MRES[2];                /**< \brief 1CC, TMADC monitor channel 0  result register*/
       __I  Ifx_ADC_TMADC_MODSTAT               MODSTAT;                /**< \brief 1D4, TMADC module status register*/
       __IO Ifx_ADC_TMADC_BWDCFG                BWDCFG;                 /**< \brief 1D8, TMADC broken wire detection control register*/
       __IO Ifx_ADC_TMADC_CSD                   CSD[2];                 /**< \brief 1DC, TMADC converter self-diagnostics register core-0*/
       __I  Ifx_UReg_8Bit                       reserved_1E4[28];       /**< \brief 1E4, \internal Reserved */
       __IO Ifx_ADC_TMADC_AW0                   AW0;                    /**< \brief 200, */
       __IO Ifx_ADC_TMADC_AW1                   AW1;                    /**< \brief 280, */
       __IO Ifx_ADC_TMADC_AW2                   AW2;                    /**< \brief 300, */
       __IO Ifx_ADC_TMADC_AW3                   AW3;                    /**< \brief 36C, */
       __I  Ifx_UReg_8Bit                       reserved_380[1152];     /**< \brief 380, \internal Reserved */
} Ifx_ADC_TMADC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_FCC_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief FCC object */
typedef volatile struct _Ifx_ADC_FCC
{
       __IO Ifx_ADC_FCC_THTRCFG                 THTRCFG;                /**< \brief 0, FCC threshold trigger configuration register*/
       __IO Ifx_ADC_FCC_GATRCFG                 GATRCFG;                /**< \brief 4, FCC gate trigger configuration register*/
       __IO Ifx_ADC_FCC_RMPTRCFG                RMPTRCFG;               /**< \brief 8, FCC ramp trigger configuration register*/
       __IO Ifx_ADC_FCC_RMPCFG                  RMPCFG;                 /**< \brief C, FCC ramp configruation register*/
       __IO Ifx_ADC_FCC_RMPT                    RMPT;                   /**< \brief 10, FCC ramp threhsold register*/
       __IO Ifx_ADC_FCC_MODEN                   MODEN;                  /**< \brief 14, FCC module enable register*/
       __IO Ifx_ADC_FCC_MODCFG                  MODCFG;                 /**< \brief 18, FCC module configuration register*/
       __IO Ifx_ADC_FCC_HYSTCFG                 HYSTCFG;                /**< \brief 1C, FCC hyteresis configuration register*/
       __IO Ifx_ADC_FCC_BFLCFG                  BFLCFG;                 /**< \brief 20, FCC boundary flag configuration register*/
       __IO Ifx_ADC_FCC_SRCFG                   SRCFG;                  /**< \brief 24, FCC service request configuration register*/
       __I  Ifx_ADC_FCC_MODSTAT                 MODSTAT;                /**< \brief 28, FCC module status register*/
       __I  Ifx_UReg_8Bit                       reserved_2C[980];       /**< \brief 2C, \internal Reserved */
} Ifx_ADC_FCC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_DSADC_IN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief IN object */
typedef volatile struct _Ifx_ADC_DSADC_IN
{
       __IO Ifx_ADC_DSADC_IN_CHCFG              CHCFG;                  /**< \brief 0, DSADC channel configuration register 0*/
       __I  Ifx_ADC_DSADC_IN_CHST               CHST;                   /**< \brief 4, DSADC channel status register 0*/
       __IO Ifx_ADC_DSADC_IN_VCM                VCM;                    /**< \brief 8, DSADC common mode voltage register 0*/
       __IO Ifx_ADC_DSADC_IN_CICCFG             CICCFG;                 /**< \brief C, DSADC CIC configuration register 0*/
       __IO Ifx_ADC_DSADC_IN_INTCFG             INTCFG;                 /**< \brief 10, DSADC integrator configuration register 0*/
       __I  Ifx_ADC_DSADC_IN_INTIVAL            INTIVAL;                /**< \brief 14, DSADC intermediate integration value register 0*/
       __I  Ifx_ADC_DSADC_IN_INTST              INTST;                  /**< \brief 18, DSADC integrator status register 0*/
       __IO Ifx_ADC_DSADC_IN_GAINCAL            GAINCAL;                /**< \brief 1C, DSADC gain calibration register 0*/
       __IO Ifx_ADC_DSADC_IN_GAINCTR            GAINCTR;                /**< \brief 20, DSADC gain control register 0*/
       __IO Ifx_ADC_DSADC_IN_GAINCORR           GAINCORR;               /**< \brief 24, DSADC gain correction register 0*/
       __IO Ifx_ADC_DSADC_IN_OFFCOMP            OFFCOMP;                /**< \brief 28, DSADC offset compensation register 0*/
       __I  Ifx_ADC_DSADC_IN_TSTMP              TSTMP;                  /**< \brief 2C, DSADC timestamp register 0*/
       __I  Ifx_ADC_DSADC_IN_TSCNT              TSCNT;                  /**< \brief 30, DSADC timestamp counter 0*/
       __I  Ifx_ADC_DSADC_IN_RESM               RESM;                   /**< \brief 34, DSADC result register 0 main*/
       __I  Ifx_ADC_DSADC_IN_RESA               RESA;                   /**< \brief 38, DSADC result register 0 auxiliary*/
       __IO Ifx_ADC_DSADC_IN_CGSYNC             CGSYNC;                 /**< \brief 3C, DSADC carrier generator synchronization register 0*/
       __IO Ifx_ADC_DSADC_IN_RECTCFG            RECTCFG;                /**< \brief 40, DSADC rectification configuration register 0*/
       __IO Ifx_ADC_DSADC_IN_BOUNDSEL           BOUNDSEL;               /**< \brief 44, DSADC boundary select register 0*/
       __IO Ifx_ADC_DSADC_IN_INTTRCFG           INTTRCFG;               /**< \brief 48, DSADC integrator trigger configuration register 0*/
       __IO Ifx_ADC_DSADC_IN_TSTRCFG            TSTRCFG;                /**< \brief 4C, DSADC timestamp trigger configuration register 0*/
       __IO Ifx_ADC_DSADC_IN_IMXTRCFG           IMXTRCFG;               /**< \brief 50, DSADC input mux trigger configuration register 0*/
       __IO Ifx_ADC_DSADC_IN_SRTRCFG            SRTRCFG;                /**< \brief 54, DSADC service request trigger configuration register 0*/
       __O  Ifx_ADC_DSADC_IN_CHERRCL            CHERRCL;                /**< \brief 58, DSADC channel error clear register 0*/
       __IO Ifx_ADC_DSADC_IN_SRCFG              SRCFG;                  /**< \brief 5C, DSADC service request configuration register*/
       __I  Ifx_UReg_8Bit                       reserved_60[4];         /**< \brief 60, \internal Reserved */
       __I  Ifx_ADC_DSADC_IN_CGRECST            CGRECST;                /**< \brief 64, DSADC carrier generation and rectification status register 0*/
       __IO Ifx_ADC_DSADC_IN_BNDCFG             BNDCFG;                 /**< \brief 68, DSADC boundary mode configuration register 0*/
       __IO Ifx_ADC_DSADC_IN_BNDTRCFG           BNDTRCFG;               /**< \brief 6C, DSADC boundary request trigger configuration register 0*/
       __I  Ifx_ADC_DSADC_IN_BOUNDST            BOUNDST;                /**< \brief 70, DSADC boundary status register 0*/
       __I  Ifx_UReg_8Bit                       reserved_74[908];       /**< \brief 74, \internal Reserved */
} Ifx_ADC_DSADC_IN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_DSADC_EX_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief EX object */
typedef volatile struct _Ifx_ADC_DSADC_EX
{
       __IO Ifx_ADC_DSADC_EX_CHCFG              CHCFG;                  /**< \brief 0, EXMOD channel configuration register 0*/
       __I  Ifx_ADC_DSADC_EX_CHST               CHST;                   /**< \brief 4, EXMOD channel status register 0*/
       __IO Ifx_ADC_DSADC_EX_CICCFG             CICCFG;                 /**< \brief 8, EXMOD CIC configuration register 0*/
       __I  Ifx_ADC_DSADC_EX_TSTMP              TSTMP;                  /**< \brief C, EXMOD timestamp register 0*/
       __I  Ifx_ADC_DSADC_EX_TSCNT              TSCNT;                  /**< \brief 10, EXMOD timestamp counter 0*/
       __I  Ifx_ADC_DSADC_EX_RESM               RESM;                   /**< \brief 14, EXMOD result register 0 main*/
       __I  Ifx_ADC_DSADC_EX_RESA               RESA;                   /**< \brief 18, EXMOD result register 0 auxiliary*/
       __IO Ifx_ADC_DSADC_EX_BOUNDSEL           BOUNDSEL;               /**< \brief 1C, EXMOD boundary select register 0*/
       __IO Ifx_ADC_DSADC_EX_TSTRCFG            TSTRCFG;                /**< \brief 20, EXMOD timestamp trigger configuration register 0*/
       __IO Ifx_ADC_DSADC_EX_SRTRCFG            SRTRCFG;                /**< \brief 24, EXMOD service request trigger configuration register 0*/
       __O  Ifx_ADC_DSADC_EX_CHERRCL            CHERRCL;                /**< \brief 28, EXMOD channel error clear register 0*/
       __IO Ifx_ADC_DSADC_EX_GAINCORR           GAINCORR;               /**< \brief 2C, EXMOD gain correction register 0*/
       __IO Ifx_ADC_DSADC_EX_SRCFG              SRCFG;                  /**< \brief 30, EXMOD service request configuration register 0*/
       __I  Ifx_UReg_8Bit                       reserved_34[4];         /**< \brief 34, \internal Reserved */
       __IO Ifx_ADC_DSADC_EX_BNDCFG             BNDCFG;                 /**< \brief 38, EXMOD boundary mode configuration register 0*/
       __IO Ifx_ADC_DSADC_EX_BNDTRCFG           BNDTRCFG;               /**< \brief 3C, EXMOD boundary request trigger configuration register 0*/
       __I  Ifx_ADC_DSADC_EX_BOUNDST            BOUNDST;                /**< \brief 40, EXMOD boundary status register 0*/
       __I  Ifx_UReg_8Bit                       reserved_44[956];       /**< \brief 44, \internal Reserved */
} Ifx_ADC_DSADC_EX;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_DSADC_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief DSADC object */
typedef volatile struct _Ifx_ADC_DSADC
{
       __IO Ifx_ADC_DSADC_GLOBCFG               GLOBCFG;                /**< \brief 0, DSADC global configuration register*/
       __IO Ifx_ADC_DSADC_GLOBRCF               GLOBRCF;                /**< \brief 4, DSADC global run control register for filter chain*/
       __IO Ifx_ADC_DSADC_GLOBRCM               GLOBRCM;                /**< \brief 8, DSADC global run control register for analog modulator*/
       __IO Ifx_ADC_DSADC_CGCFG                 CGCFG;                  /**< \brief C, DSADC carrier generator configuration register*/
       __I  Ifx_ADC_DSADC_CGST                  CGST;                   /**< \brief 10, DSADC carrier generator status register*/
       __IO Ifx_ADC_DSADC_RESMF                 RESMF;                  /**< \brief 14, DSADC event flag register on main result register*/
       __IO Ifx_ADC_DSADC_RESAF                 RESAF;                  /**< \brief 18, DSADC event flag register on auxiliary result register*/
       __IO Ifx_ADC_DSADC_BOUNDF                BOUNDF;                 /**< \brief 1C, DSADC boundary flag event register*/
       __O  Ifx_ADC_DSADC_RESMFCL               RESMFCL;                /**< \brief 20, DSADC result event (main) flag clear register*/
       __O  Ifx_ADC_DSADC_RESAFCL               RESAFCL;                /**< \brief 24, DSADC result event (auxiliary) flag clear register*/
       __O  Ifx_ADC_DSADC_BOUNDFCL              BOUNDFCL;               /**< \brief 28, DSADC boundary event flag clear register*/
       __IO Ifx_ADC_DSADC_OCSDSADC              OCSDSADC;               /**< \brief 2C, OCDS control and status register for DSADC*/
       __IO Ifx_ADC_DSADC_OCSEXMOD              OCSEXMOD;               /**< \brief 30, OCDS control and status register for EXMOD*/
       __I  Ifx_ADC_DSADC_REFST                 REFST;                  /**< \brief 34, DSADC global reference status register*/
       __O  Ifx_ADC_DSADC_REFERRCL              REFERRCL;               /**< \brief 38, DSADC global reference status register clear*/
       __I  Ifx_UReg_8Bit                       reserved_3C[1988];      /**< \brief 3C, \internal Reserved */
       __IO Ifx_ADC_DSADC_IN                    IN[14];                 /**< \brief 800, */
       __IO Ifx_ADC_DSADC_EX                    EX[4];                  /**< \brief 4000, */
} Ifx_ADC_DSADC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_CDSP_DB_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief DB object */
typedef volatile struct _Ifx_ADC_CDSP_DB
{
       __IO Ifx_ADC_CDSP_DB_STATUS              STATUS;                 /**< \brief 0, CDSP debug status register*/
       __IO Ifx_ADC_CDSP_DB_CMD                 CMD;                    /**< \brief 4, CDSP debug command register*/
       __IO Ifx_ADC_CDSP_DB_ADDR                ADDR;                   /**< \brief 8, CDSP debug address register*/
       __IO Ifx_ADC_CDSP_DB_DATA                DATA;                   /**< \brief C, CDSP debug data register*/
       __O  Ifx_ADC_CDSP_DB_RESET               RESET;                  /**< \brief 10, CDSP debug reset register*/
} Ifx_ADC_CDSP_DB;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_CDSP_DSP_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief DSP object */
typedef volatile struct _Ifx_ADC_CDSP_DSP
{
       __IO Ifx_ADC_CDSP_DSP_DSPCFG             DSPCFG;                 /**< \brief 0, CDSP configuration of CDSP  0*/
       __IO Ifx_ADC_CDSP_DSP_BNDTRCFG           BNDTRCFG;               /**< \brief 4, CDSP boundary trigger configuration register 0*/
       __IO Ifx_ADC_CDSP_DSP_BNDCFG             BNDCFG;                 /**< \brief 8, CDSP boundary mode configuration register*/
       __I  Ifx_ADC_CDSP_DSP_BOUNDST            BOUNDST;                /**< \brief C, CDSP boundary status register 0*/
       __IO Ifx_ADC_CDSP_DSP_BOUNDSEL           BOUNDSEL;               /**< \brief 10, CDSP boundary select register 0*/
       __IO Ifx_ADC_CDSP_DSP_TSTRCFG            TSTRCFG;                /**< \brief 14, CDSP time stamp trigger configuration register 0*/
       __I  Ifx_ADC_CDSP_DSP_TSTMP              TSTMP;                  /**< \brief 18, CDSP time-stamp register 0*/
       __I  Ifx_ADC_CDSP_DSP_TSCNT              TSCNT;                  /**< \brief 1C, CDSP time-stamp counter 0*/
       __IO Ifx_ADC_CDSP_DSP_SRTRCFG            SRTRCFG;                /**< \brief 20, CDSP service request trigger configuration register*/
       __IO Ifx_ADC_CDSP_DSP_SRCFG              SRCFG;                  /**< \brief 24, CDSP service request configuration register*/
       __IO Ifx_ADC_CDSP_DSP_INTCFG             INTCFG;                 /**< \brief 28, CDSP integrator configuration register 0*/
       __I  Ifx_ADC_CDSP_DSP_INTIVAL            INTIVAL;                /**< \brief 2C, CDSP intermediate integration value*/
       __IO Ifx_ADC_CDSP_DSP_INTTRCFG           INTTRCFG;               /**< \brief 30, CDSP integrator trigger configuration register 0*/
       __O  Ifx_ADC_CDSP_DSP_CHERRCL            CHERRCL;                /**< \brief 34, CDSP channel error clear register 0*/
       __I  Ifx_ADC_CDSP_DSP_DSPST              DSPST;                  /**< \brief 38, CDSP status register*/
       __I  Ifx_ADC_CDSP_DSP_INPUTMON           INPUTMON;               /**< \brief 3C, CDSP input from DSADC, TMADC, EXMOD or CARMAG*/
       __I  Ifx_ADC_CDSP_DSP_RES                RES[3];                 /**< \brief 40, CDSP result register 0*/
       __I  Ifx_UReg_8Bit                       reserved_4C[4020];      /**< \brief 4C, \internal Reserved */
       Ifx_UReg_8Bit                              ICCM[2048];             /**< \brief 1000, Instruction closely coupled memory*/
       Ifx_UReg_8Bit                              DCCM[2048];             /**< \brief 1800, Data closely coupled memory*/
} Ifx_ADC_CDSP_DSP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_CDSP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief CDSP object */
typedef volatile struct _Ifx_ADC_CDSP
{
       __I  Ifx_UReg_8Bit                       reserved_0[4];          /**< \brief 0, \internal Reserved */
       __O  Ifx_ADC_CDSP_GLOBRD                 GLOBRD;                 /**< \brief 4, CDSP global reset control*/
       __IO Ifx_ADC_CDSP_BNDCF                  BNDCF;                  /**< \brief 8, CDSP boudary flag event register*/
       __O  Ifx_ADC_CDSP_BNDCFCL                BNDCFCL;                /**< \brief C, CDSP boundary flag event clear*/
       __I  Ifx_ADC_CDSP_SLPST                  SLPST;                  /**< \brief 10, CDSP sleep status register*/
       __IO Ifx_ADC_CDSP_RESEV                  RESEV[3];               /**< \brief 14, CDSP event flag register 0*/
       __O  Ifx_ADC_CDSP_RESEVCLR               RESEVCLR[3];            /**< \brief 20, CDSP result event flag clear 0*/
       __I  Ifx_UReg_8Bit                       reserved_2C[148];       /**< \brief 2C, \internal Reserved */
       __IO Ifx_ADC_CDSP_GP                     GP[4];                  /**< \brief C0, CDSP input from general purpose register 0*/
       __I  Ifx_ADC_CDSP_WUERREV                WUERREV;                /**< \brief D0, CDSP wake up error flag register*/
       __IO Ifx_ADC_CDSP_WUERRCL                WUERRCL;                /**< \brief D4, CDSP wake up error event clear register*/
       __O  Ifx_ADC_CDSP_GLOBRCD                GLOBRCD;                /**< \brief D8, CDSP global run control register*/
       __O  Ifx_ADC_CDSP_GLOBHCD                GLOBHCD;                /**< \brief DC, CDSP global halt control register*/
       __I  Ifx_ADC_CDSP_GLOBRSD                GLOBRSD;                /**< \brief E0, CDSP global run status register*/
       __I  Ifx_ADC_CDSP_GLOBHSTD               GLOBHSTD;               /**< \brief E4, CDSP global halt status register*/
       __IO Ifx_ADC_CDSP_OCSCDSPA               OCSCDSPA;               /**< \brief E8, OCDS control and status register0 for CDSP0-8*/
       __IO Ifx_ADC_CDSP_OCSCDSPB               OCSCDSPB;               /**< \brief EC, OCDS control and status register1 for CDSP9-17*/
       __I  Ifx_UReg_8Bit                       reserved_F0[784];       /**< \brief F0, \internal Reserved */
       __IO Ifx_ADC_CDSP_DB                     DB[18];                 /**< \brief 400, */
       __I  Ifx_UReg_8Bit                       reserved_568[664];      /**< \brief 568, \internal Reserved */
       __IO Ifx_ADC_CDSP_DSP                    DSP[18];                /**< \brief 800, */
} Ifx_ADC_CDSP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADCRES_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief TMADCRES object */
typedef volatile struct _Ifx_ADC_TMADCRES
{
       __I  Ifx_ADC_TMADCRES_TSAXI              TSAXI[16];              /**< \brief 0, TMADC timestamp register 0 on LLI (AXI)*/
       __I  Ifx_ADC_TMADCRES_RESAXI             RESAXI[16];             /**< \brief 40, TMADC result register 0 on LLI (AXI)*/
       __I  Ifx_ADC_TMADCRES_MRESAXI            MRESAXI[2];             /**< \brief 80, TMADC monitor channel 0  result register on LLI (AXI)*/
       __I  Ifx_UReg_8Bit                       reserved_88[1912];      /**< \brief 88, \internal Reserved */
} Ifx_ADC_TMADCRES;

/******************************************************************************/
/** \addtogroup IfxSfr_Adc_AXI_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief ADC_AXI object */
typedef volatile struct _Ifx_ADC_AXI
{
       __IO Ifx_ADC_TMADCRES                    TMADCRES[8];            /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_4000[2048];    /**< \brief 4000, \internal Reserved */
} Ifx_ADC_AXI;

/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief ADC object */
typedef volatile struct _Ifx_ADC
{
       __IO Ifx_ADC_CLC                         CLC;                    /**< \brief 0, Clock Control Register*/
       __I  Ifx_UReg_8Bit                       reserved_4[4];          /**< \brief 4, \internal Reserved */
       __I  Ifx_ADC_ID                          ID;                     /**< \brief 8, Module Identification Register*/
       __IO Ifx_ADC_PROT                        PROTSE;                 /**< \brief C, PROT Register Safe Endinit*/
       __IO Ifx_ADC_RESALLOC                    RESALLOC;               /**< \brief 10, */
       __I  Ifx_UReg_8Bit                       reserved_38[72];        /**< \brief 38, \internal Reserved */
       __IO Ifx_ADC_PROT                        PROTE[16];              /**< \brief 80, PROT Register Endinit*/
       __IO Ifx_ADC_ACCEN                       ACCEN[16];              /**< \brief C0, */
       __IO Ifx_ADC_RST                         RST[16];                /**< \brief 2C0, */
       __I  Ifx_UReg_8Bit                       reserved_380[1152];     /**< \brief 380, \internal Reserved */
       __IO Ifx_ADC_GLSRCFG                     GLSRCFG[4];             /**< \brief 800, ADC global service request configuration register*/
       __IO Ifx_ADC_GLALCFG                     GLALCFG[8];             /**< \brief 810, ADC global alarm configuration register*/
       __IO Ifx_ADC_GLALSET                     GLALSET;                /**< \brief 830, ADC global alarm set register*/
       __IO Ifx_ADC_GLSRSET                     GLSRSET;                /**< \brief 834, ADC global service request set register*/
       __IO Ifx_ADC_ETBFSEL                     ETBFSEL[3];             /**< \brief 838, ADC to eGTM boundary flag select register, cluster 0*/
       __IO Ifx_ADC_GTBFSEL                     GTBFSEL[8];             /**< \brief 844, ADC to GTM boundary flag select register, cluster 0*/
       __IO Ifx_ADC_GTSRSEL                     GTSRSEL[10];            /**< \brief 864, ADC to GTM service request select register, cluster 0*/
       __IO Ifx_ADC_PDDCFG                      PDDCFG;                 /**< \brief 88C, ADC pull down diagnostics configuration register*/
       __IO Ifx_ADC_CLKEN                       CLKEN;                  /**< \brief 890, Clock enable for ADC Resources*/
       __IO Ifx_ADC_SUPLLEV                     SUPLLEV;                /**< \brief 8A0, Supply level selection for ADC*/
       __IO Ifx_ADC_TMSMOD                      TMSMOD;                 /**< \brief 8A4, TMADC supervision module register*/
       __IO Ifx_ADC_OCSTM                       OCSTM;                  /**< \brief 8A8, OCDS control and status register for TMADC*/
       __I  Ifx_UReg_8Bit                       reserved_8AC[1876];     /**< \brief 8AC, \internal Reserved */
       __I  Ifx_UReg_8Bit                       reserved_1000[4096];    /**< \brief 1000, \internal Reserved */
       __I  Ifx_UReg_8Bit                       reserved_2000[122880];    /**< \brief 2000, \internal Reserved */
       __IO Ifx_ADC_TMADC                       TMADC[8];               /**< \brief 20000, */
       __I  Ifx_UReg_8Bit                       reserved_24000[114688];    /**< \brief 24000, \internal Reserved */
       __IO Ifx_ADC_FCC                         FCC[10];                /**< \brief 40000, */
       __I  Ifx_UReg_8Bit                       reserved_42800[118784];    /**< \brief 42800, \internal Reserved */
       __IO Ifx_ADC_DSADC                       DSADC;                  /**< \brief 5F800, */
       __I  Ifx_UReg_8Bit                       reserved_64800[372736];    /**< \brief 64800, \internal Reserved */
       __IO Ifx_ADC_CDSP                        CDSP;                   /**< \brief BF800, */
} Ifx_ADC;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXADC_REGDEF_H */

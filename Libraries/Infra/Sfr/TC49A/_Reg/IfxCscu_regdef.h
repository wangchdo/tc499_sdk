/**
 * \file IfxCscu_regdef.h
 * \brief
 * \copyright Copyright (c) 2021 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_CSRM/V0.1.3.1.8
 * Specification: latest @ 2021-07-15 instance sheet @ MC_A3G_TC49x : V9.1.6.1.0 
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Cscu_Registers Cscu Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Cscu_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Cscu_Registers
 * 
 * \defgroup IfxSfr_Cscu_Registers_union Register unions
 * \ingroup IfxSfr_Cscu_Registers
 * 
 * \defgroup IfxSfr_Cscu_Registers_struct Memory map
 * \ingroup IfxSfr_Cscu_Registers
 */
#ifndef IFXCSCU_REGDEF_H
#define IFXCSCU_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Cscu_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_CSCU_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_CSCU_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_CSCU_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for master TAG ID q - ENq (rw) */
} Ifx_CSCU_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_CSCU_ACCEN_RDB_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for master TAG ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_CSCU_ACCEN_RDB_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_CSCU_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_CSCU_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_CSCU_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for master TAG ID q - ENq (rw) */
} Ifx_CSCU_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_CSCU_ACCEN_WRB_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for master TAG ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_CSCU_ACCEN_WRB_Bits;

/** \brief Clock control register */
typedef struct _Ifx_CSCU_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module disable request bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module disable status bit - DISS (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] Sleep mode enable control - EDIS (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_CSCU_CLC_Bits;

/** \brief Error communication from CSRM to host */
typedef struct _Ifx_CSCU_CSRM2ERR_Bits
{
    __IO Ifx_UReg_32Bit DATA:32;           /**< \brief [31:0] Data (rw) */
} Ifx_CSCU_CSRM2ERR_Bits;

/** \brief Communication from CSRM to host */
typedef struct _Ifx_CSCU_CSRM2HT_Bits
{
    __IO Ifx_UReg_32Bit DATA:32;           /**< \brief [31:0] Data (rw) */
} Ifx_CSCU_CSRM2HT_Bits;

/** \brief CS_Valid control */
typedef struct _Ifx_CSCU_CSVCTRL_Bits
{
    __IO Ifx_UReg_32Bit CSV:1;             /**< \brief [0:0] Cs_valid state of CPUcs bus transactions (rw) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_CSCU_CSVCTRL_Bits;

/** \brief CS debug control register */
typedef struct _Ifx_CSCU_DBGCTRL_Bits
{
    __IO Ifx_UReg_32Bit CSAV:2;            /**< \brief [1:0] Cyber security activity visibility (rw) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_CSCU_DBGCTRL_Bits;

/** \brief Module identification register */
typedef struct _Ifx_CSCU_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module revision (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module type (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module number (r) */
} Ifx_CSCU_ID_Bits;

/** \brief CS init configuration */
typedef struct _Ifx_CSCU_INIT_Bits
{
    __IO Ifx_UReg_32Bit DONE:1;            /**< \brief [0:0] CS specific INIT_DONE signal (rw) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_CSCU_INIT_Bits;

/** \brief Pin control register */
typedef struct _Ifx_CSCU_PINCTRL_Bits
{
    __IO Ifx_UReg_32Bit LOCK:1;            /**< \brief [0:0] Pin control register lock (rw) */
    __IO Ifx_UReg_32Bit OEN1:1;            /**< \brief [1:1] Pin 1 output enable (rw) */
    __IO Ifx_UReg_32Bit VAL1:1;            /**< \brief [2:2] Pin 1 output value (rw) */
    __IO Ifx_UReg_32Bit OEN0:1;            /**< \brief [3:3] Pin 0 output enable (rw) */
    __IO Ifx_UReg_32Bit VAL0:1;            /**< \brief [4:4] Pin 0 output value (rw) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_CSCU_PINCTRL_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_CSCU_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_CSCU_PROT_Bits;

/** \brief Software-over-the-air related control register */
typedef struct _Ifx_CSCU_SOTACTRL_Bits
{
    __IO Ifx_UReg_32Bit SOTA:3;            /**< \brief [2:0] CS address configuration (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_CSCU_SOTACTRL_Bits;

/** \brief Startup memory register 1 */
typedef struct _Ifx_CSCU_STMEM1_Bits
{
    __IO Ifx_UReg_32Bit FW_RST:8;          /**< \brief [7:0] Reset type (rw) */
    __IO Ifx_UReg_32Bit BV:1;              /**< \brief [8:8] BMHD valid flag (rw) */
    __IO Ifx_UReg_32Bit BP:1;              /**< \brief [9:9] Boot configured from pins (rw) */
    __IO Ifx_UReg_32Bit BCV:1;             /**< \brief [10:10] BMHD copy flag (rw) */
    __IO Ifx_UReg_32Bit BIDX:2;            /**< \brief [12:11] Index of the valid BMHD (rw) */
    __IO Ifx_UReg_32Bit BCFG:3;            /**< \brief [15:13] Boot configuration (rw) */
    __IO Ifx_UReg_32Bit HAR:1;             /**< \brief [16:16] Halt-After-Reset request (rw) */
    __IO Ifx_UReg_32Bit SCFG:2;            /**< \brief [18:17] SWAP configuration (rw) */
    __IO Ifx_UReg_32Bit ST:1;              /**< \brief [19:19] SWAP target (rw) */
    __IO Ifx_UReg_32Bit SIDX:5;            /**< \brief [24:20] Valid SWAP marker index (rw) */
    __IO Ifx_UReg_32Bit R25:4;             /**< \brief [28:25] Reserved (rw) */
    __IO Ifx_UReg_32Bit CON_E:1;           /**< \brief [29:29] User configuration errored (rw) */
    __IO Ifx_UReg_32Bit R30:2;             /**< \brief [31:30] Reserved (rw) */
} Ifx_CSCU_STMEM1_Bits;

/** \brief Startup memory register 2 */
typedef struct _Ifx_CSCU_STMEM2_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __IO Ifx_UReg_32Bit BOOT_ADDR:30;      /**< \brief [31:2] Address of first user-code instruction (rw) */
} Ifx_CSCU_STMEM2_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_cscu_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSCU_ACCEN_PRS_Bits B;        /**< \brief Bitfield access */
} Ifx_CSCU_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSCU_ACCEN_RDA_Bits B;        /**< \brief Bitfield access */
} Ifx_CSCU_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSCU_ACCEN_RDB_Bits B;        /**< \brief Bitfield access */
} Ifx_CSCU_ACCEN_RDB;

/** \brief VM access enable register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSCU_ACCEN_VM_Bits B;         /**< \brief Bitfield access */
} Ifx_CSCU_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSCU_ACCEN_WRA_Bits B;        /**< \brief Bitfield access */
} Ifx_CSCU_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSCU_ACCEN_WRB_Bits B;        /**< \brief Bitfield access */
} Ifx_CSCU_ACCEN_WRB;

/** \brief Clock control register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSCU_CLC_Bits B;              /**< \brief Bitfield access */
} Ifx_CSCU_CLC;

/** \brief Error communication from CSRM to host   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSCU_CSRM2ERR_Bits B;         /**< \brief Bitfield access */
} Ifx_CSCU_CSRM2ERR;

/** \brief Communication from CSRM to host   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSCU_CSRM2HT_Bits B;          /**< \brief Bitfield access */
} Ifx_CSCU_CSRM2HT;

/** \brief CS_Valid control   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSCU_CSVCTRL_Bits B;          /**< \brief Bitfield access */
} Ifx_CSCU_CSVCTRL;

/** \brief CS debug control register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSCU_DBGCTRL_Bits B;          /**< \brief Bitfield access */
} Ifx_CSCU_DBGCTRL;

/** \brief Module identification register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSCU_ID_Bits B;               /**< \brief Bitfield access */
} Ifx_CSCU_ID;

/** \brief CS init configuration   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSCU_INIT_Bits B;             /**< \brief Bitfield access */
} Ifx_CSCU_INIT;

/** \brief Pin control register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSCU_PINCTRL_Bits B;          /**< \brief Bitfield access */
} Ifx_CSCU_PINCTRL;

/** \brief Resource protection register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSCU_PROT_Bits B;             /**< \brief Bitfield access */
} Ifx_CSCU_PROT;

/** \brief Software-over-the-air related control register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSCU_SOTACTRL_Bits B;         /**< \brief Bitfield access */
} Ifx_CSCU_SOTACTRL;

/** \brief Startup memory register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSCU_STMEM1_Bits B;           /**< \brief Bitfield access */
} Ifx_CSCU_STMEM1;

/** \brief Startup memory register 2   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CSCU_STMEM2_Bits B;           /**< \brief Bitfield access */
} Ifx_CSCU_STMEM2;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cscu_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_CSCU_ACCEN
{
       __IO Ifx_CSCU_ACCEN_WRA                  WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_CSCU_ACCEN_WRB                  WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_CSCU_ACCEN_RDA                  RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_CSCU_ACCEN_RDB                  RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_CSCU_ACCEN_VM                   VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_CSCU_ACCEN_PRS                  PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_CSCU_ACCEN;

/******************************************************************************/
/** \addtogroup IfxSfr_Cscu_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief CSCU object */
typedef volatile struct _Ifx_CSCU
{
       __IO Ifx_CSCU_CLC                        CLC;                    /**< \brief 0, Clock control register*/
       __I  Ifx_UReg_8Bit                       reserved_4[4];          /**< \brief 4, \internal Reserved */
       __I  Ifx_CSCU_ID                         ID;                     /**< \brief 8, Module identification register*/
       __I  Ifx_UReg_8Bit                       reserved_C[20];         /**< \brief C, \internal Reserved */
       __IO Ifx_CSCU_PROT                       PROTE;                  /**< \brief 20, PROT register Endinit*/
       __IO Ifx_CSCU_PROT                       PROTSE;                 /**< \brief 24, PROT register Safe Endinit*/
       __I  Ifx_UReg_8Bit                       reserved_28[24];        /**< \brief 28, \internal Reserved */
       __IO Ifx_CSCU_ACCEN                      ACCEN;                  /**< \brief 40, */
       __I  Ifx_UReg_8Bit                       reserved_60[160];       /**< \brief 60, \internal Reserved */
       __IO Ifx_CSCU_CSRM2HT                    CSRM2HT;                /**< \brief 100, Communication from CSRM to host*/
       __IO Ifx_CSCU_CSRM2ERR                   CSRM2ERR;               /**< \brief 104, Error communication from CSRM to host*/
       __I  Ifx_UReg_8Bit                       reserved_108[4];        /**< \brief 108, \internal Reserved */
       __IO Ifx_CSCU_CSVCTRL                    CSVCTRL;                /**< \brief 10C, CS_Valid control*/
       __IO Ifx_CSCU_INIT                       INIT;                   /**< \brief 110, CS init configuration*/
       __IO Ifx_CSCU_DBGCTRL                    DBGCTRL;                /**< \brief 114, CS debug control register*/
       __IO Ifx_CSCU_PINCTRL                    PINCTRL;                /**< \brief 118, Pin control register*/
       __IO Ifx_CSCU_SOTACTRL                   SOTACTRL;               /**< \brief 11C, Software-over-the-air related control register*/
       __I  Ifx_UReg_8Bit                       reserved_120[8];        /**< \brief 120, \internal Reserved */
       __IO Ifx_CSCU_STMEM1                     STMEM1;                 /**< \brief 128, Startup memory register 1*/
       __IO Ifx_CSCU_STMEM2                     STMEM2;                 /**< \brief 12C, Startup memory register 2*/
       __I  Ifx_UReg_8Bit                       reserved_130[208];      /**< \brief 130, \internal Reserved */
} Ifx_CSCU;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXCSCU_REGDEF_H */

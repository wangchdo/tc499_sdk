/**
 * \file IfxScu_regdef.h
 * \brief
 * \copyright Copyright (c) 2021 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_SCU/V0.1.1.16.0
 * Specification: latest @ 2021-08-22 instance sheet @ MC_A3G_TC49x : V9.1.6.1.0 
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Scu_Registers Scu Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Scu_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Scu_Registers
 * 
 * \defgroup IfxSfr_Scu_Registers_union Register unions
 * \ingroup IfxSfr_Scu_Registers
 * 
 * \defgroup IfxSfr_Scu_Registers_struct Memory map
 * \ingroup IfxSfr_Scu_Registers
 */
#ifndef IFXSCU_REGDEF_H
#define IFXSCU_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Scu_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_SCU_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_SCU_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_SCU_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for Master TAG ID q - ENq (rw) */
} Ifx_SCU_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_SCU_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_SCU_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_SCU_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_SCU_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_SCU_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for Master TAG ID q - ENq (rw) */
} Ifx_SCU_ACCEN_WRA_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_SCU_ACCEN_WRA_CS_Bits
{
    __I  Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for Master TAG ID q - ENq (r) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for Master TAG ID of CERBERUS - EN28 (rw) */
    __I  Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for Master TAG ID q - ENq (r) */
} Ifx_SCU_ACCEN_WRA_CS_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_SCU_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_SCU_ACCEN_WRB_FPI_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_SCU_ACCEN_WRB_FPI_CS_Bits
{
    __I  Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (r) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_SCU_ACCEN_WRB_FPI_CS_Bits;

/** \brief Chip information register */
typedef struct _Ifx_SCU_CHIPINFO_Bits
{
    __I  Ifx_UReg_32Bit DEPT:5;            /**< \brief [4:0] Department Identification Number - DEPT (r) */
    __I  Ifx_UReg_32Bit MANUF:11;          /**< \brief [15:5] Manufacturer Identification Number - MANUF (r) */
    __I  Ifx_UReg_32Bit CHREV:6;           /**< \brief [21:16] Chip Revision Number - CHREV (rh) */
    __I  Ifx_UReg_32Bit CHTEC:2;           /**< \brief [23:22] Chip Family - CHTEC (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_SCU_CHIPINFO_Bits;

/** \brief External Input Channel Register 0 */
typedef struct _Ifx_SCU_ERU_EICR_Bits
{
    __IO Ifx_UReg_32Bit EIEN:1;            /**< \brief [0:0] External Input Enable for channel 0 - EIEN (rw) */
    __O  Ifx_UReg_32Bit EIEN_P:1;          /**< \brief [1:1] Write Protection for EIEN - EIEN_P (w) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EISEL:3;           /**< \brief [6:4] External Input Selection - EISEL (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit FEN:1;             /**< \brief [8:8] Falling Edge Enable - FEN (rw) */
    __IO Ifx_UReg_32Bit REN:1;             /**< \brief [9:9] Rising Edge Enable - REN (rw) */
    __IO Ifx_UReg_32Bit LDEN:1;            /**< \brief [10:10] Level Detection Enable - LDEN (rw) */
    __IO Ifx_UReg_32Bit TPEN:1;            /**< \brief [11:11] Trigger Pulse Enable - TPEN (rw) */
    __IO Ifx_UReg_32Bit ONP:3;             /**< \brief [14:12] Output Node Pointer - ONP (rw) */
    __I  Ifx_UReg_32Bit :17;               /**< \brief [31:15] \internal Reserved */
} Ifx_SCU_ERU_EICR_Bits;

/** \brief External Input Filter Register */
typedef struct _Ifx_SCU_ERU_EIFILT_Bits
{
    __IO Ifx_UReg_32Bit FILRQ0A:1;         /**< \brief [0:0] Filter Enable for REQ0A - FILRQ0A (rw) */
    __IO Ifx_UReg_32Bit FILRQ0B:1;         /**< \brief [1:1] Filter Enable for REQ0B - FILRQ0B (rw) */
    __IO Ifx_UReg_32Bit FILRQ0F:1;         /**< \brief [2:2] Filter Enable for REQ0F - FILRQ0F (rw) */
    __IO Ifx_UReg_32Bit FILRQ1A:1;         /**< \brief [3:3] Filter Enable for REQ1A - FILRQ1A (rw) */
    __IO Ifx_UReg_32Bit FILRQ1B:1;         /**< \brief [4:4] Filter Enable for REQ1B - FILRQ1B (rw) */
    __IO Ifx_UReg_32Bit FILRQ1G:1;         /**< \brief [5:5] Filter Enable for REQ1G - FILRQ1G (rw) */
    __IO Ifx_UReg_32Bit FILRQ2A:1;         /**< \brief [6:6] Filter Enable for REQ2A - FILRQ2A (rw) */
    __IO Ifx_UReg_32Bit FILRQ2B:1;         /**< \brief [7:7] Filter Enable for REQ2B - FILRQ2B (rw) */
    __IO Ifx_UReg_32Bit FILRQ2C:1;         /**< \brief [8:8] Filter Enable for REQ2C - FILRQ2C (rw) */
    __IO Ifx_UReg_32Bit FILRQ3A:1;         /**< \brief [9:9] Filter Enable for REQ3A - FILRQ3A (rw) */
    __IO Ifx_UReg_32Bit FILRQ3B:1;         /**< \brief [10:10] Filter Enable for REQ3B - FILRQ3B (rw) */
    __IO Ifx_UReg_32Bit FILRQ3C:1;         /**< \brief [11:11] Filter Enable for REQ3C - FILRQ3C (rw) */
    __IO Ifx_UReg_32Bit FILRQ4A:1;         /**< \brief [12:12] Filter Enable for REQ4A - FILRQ4A (rw) */
    __IO Ifx_UReg_32Bit FILRQ4D:1;         /**< \brief [13:13] Filter Enable for REQ4D - FILRQ4D (rw) */
    __IO Ifx_UReg_32Bit FILRQ4G:1;         /**< \brief [14:14] Filter Enable for REQ4G - FILRQ4G (rw) */
    __IO Ifx_UReg_32Bit FILRQ5A:1;         /**< \brief [15:15] Filter Enable for REQ5A - FILRQ5A (rw) */
    __IO Ifx_UReg_32Bit FILRQ5E:1;         /**< \brief [16:16] Filter Enable for REQ5E - FILRQ5E (rw) */
    __IO Ifx_UReg_32Bit FILRQ5G:1;         /**< \brief [17:17] Filter Enable for REQ5G - FILRQ5G (rw) */
    __IO Ifx_UReg_32Bit FILRQ6A:1;         /**< \brief [18:18] Filter Enable for REQ6A - FILRQ6A (rw) */
    __IO Ifx_UReg_32Bit FILRQ6B:1;         /**< \brief [19:19] Filter Enable for REQ6B - FILRQ6B (rw) */
    __IO Ifx_UReg_32Bit FILRQ6F:1;         /**< \brief [20:20] Filter Enable for REQ6F - FILRQ6F (rw) */
    __IO Ifx_UReg_32Bit FILRQ7A:1;         /**< \brief [21:21] Filter Enable for REQ7A - FILRQ7A (rw) */
    __IO Ifx_UReg_32Bit FILRQ7B:1;         /**< \brief [22:22] Filter Enable for REQ7B - FILRQ7B (rw) */
    __IO Ifx_UReg_32Bit FILRQ7G:1;         /**< \brief [23:23] Filter Enable for REQ7G - FILRQ7G (rw) */
    __IO Ifx_UReg_32Bit FILTDIV:4;         /**< \brief [27:24] Digital Glitch Filter Clock Predivider - FILTDIV (rw) */
    __IO Ifx_UReg_32Bit DEPTH:4;           /**< \brief [31:28] Digital Glitch Filter Depth - DEPTH (rw) */
} Ifx_SCU_ERU_EIFILT_Bits;

/** \brief External Input Flag Register */
typedef struct _Ifx_SCU_ERU_EIFR_Bits
{
    __I  Ifx_UReg_32Bit INTF0:1;           /**< \brief [0:0] External Event Flag of Channel 0 - INTF0 (rh) */
    __I  Ifx_UReg_32Bit INTF1:1;           /**< \brief [1:1] External Event Flag of Channel 1 - INTF1 (rh) */
    __I  Ifx_UReg_32Bit INTF2:1;           /**< \brief [2:2] External Event Flag of Channel 2 - INTF2 (rh) */
    __I  Ifx_UReg_32Bit INTF3:1;           /**< \brief [3:3] External Event Flag of Channel 3 - INTF3 (rh) */
    __I  Ifx_UReg_32Bit INTF4:1;           /**< \brief [4:4] External Event Flag of Channel 4 - INTF4 (rh) */
    __I  Ifx_UReg_32Bit INTF5:1;           /**< \brief [5:5] External Event Flag of Channel 5 - INTF5 (rh) */
    __I  Ifx_UReg_32Bit INTF6:1;           /**< \brief [6:6] External Event Flag of Channel 6 - INTF6 (rh) */
    __I  Ifx_UReg_32Bit INTF7:1;           /**< \brief [7:7] External Event Flag of Channel 7 - INTF7 (rh) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_SCU_ERU_EIFR_Bits;

/** \brief Flag Modification Register */
typedef struct _Ifx_SCU_ERU_FMR_Bits
{
    __O  Ifx_UReg_32Bit FS0:1;             /**< \brief [0:0] Set Flag EIFR.INTFx for Channel 0 - FS0 (w) */
    __O  Ifx_UReg_32Bit FS1:1;             /**< \brief [1:1] Set Flag EIFR.INTFx for Channel 1 - FS1 (w) */
    __O  Ifx_UReg_32Bit FS2:1;             /**< \brief [2:2] Set Flag EIFR.INTFx for Channel 2 - FS2 (w) */
    __O  Ifx_UReg_32Bit FS3:1;             /**< \brief [3:3] Set Flag EIFR.INTFx for Channel 3 - FS3 (w) */
    __O  Ifx_UReg_32Bit FS4:1;             /**< \brief [4:4] Set Flag EIFR.INTFx for Channel 4 - FS4 (w) */
    __O  Ifx_UReg_32Bit FS5:1;             /**< \brief [5:5] Set Flag EIFR.INTFx for Channel 5 - FS5 (w) */
    __O  Ifx_UReg_32Bit FS6:1;             /**< \brief [6:6] Set Flag EIFR.INTFx for Channel 6 - FS6 (w) */
    __O  Ifx_UReg_32Bit FS7:1;             /**< \brief [7:7] Set Flag EIFR.INTFx for Channel 7 - FS7 (w) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __O  Ifx_UReg_32Bit FC0:1;             /**< \brief [16:16] Clear Flag INTFx for Channel 0 - FC0 (w) */
    __O  Ifx_UReg_32Bit FC1:1;             /**< \brief [17:17] Clear Flag INTFx for Channel 1 - FC1 (w) */
    __O  Ifx_UReg_32Bit FC2:1;             /**< \brief [18:18] Clear Flag INTFx for Channel 2 - FC2 (w) */
    __O  Ifx_UReg_32Bit FC3:1;             /**< \brief [19:19] Clear Flag INTFx for Channel 3 - FC3 (w) */
    __O  Ifx_UReg_32Bit FC4:1;             /**< \brief [20:20] Clear Flag INTFx for Channel 4 - FC4 (w) */
    __O  Ifx_UReg_32Bit FC5:1;             /**< \brief [21:21] Clear Flag INTFx for Channel 5 - FC5 (w) */
    __O  Ifx_UReg_32Bit FC6:1;             /**< \brief [22:22] Clear Flag INTFx for Channel 6 - FC6 (w) */
    __O  Ifx_UReg_32Bit FC7:1;             /**< \brief [23:23] Clear Flag INTFx for Channel 7 - FC7 (w) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_SCU_ERU_FMR_Bits;

/** \brief Interrupt Gating Control Register 0 */
typedef struct _Ifx_SCU_ERU_IGCR_Bits
{
    __IO Ifx_UReg_32Bit IPEN0:1;           /**< \brief [0:0] Flag Pattern Enable for Input Channel 0 - IPEN0 (rw) */
    __IO Ifx_UReg_32Bit IPEN1:1;           /**< \brief [1:1] Flag Pattern Enable for Input Channel 1 - IPEN1 (rw) */
    __IO Ifx_UReg_32Bit IPEN2:1;           /**< \brief [2:2] Flag Pattern Enable for Input Channel 2 - IPEN2 (rw) */
    __IO Ifx_UReg_32Bit IPEN3:1;           /**< \brief [3:3] Flag Pattern Enable for Input Channel 3 - IPEN3 (rw) */
    __IO Ifx_UReg_32Bit IPEN4:1;           /**< \brief [4:4] Flag Pattern Enable for Input Channel 4 - IPEN4 (rw) */
    __IO Ifx_UReg_32Bit IPEN5:1;           /**< \brief [5:5] Flag Pattern Enable for Input Channel 5 - IPEN5 (rw) */
    __IO Ifx_UReg_32Bit IPEN6:1;           /**< \brief [6:6] Flag Pattern Enable for Input Channel 6 - IPEN6 (rw) */
    __IO Ifx_UReg_32Bit IPEN7:1;           /**< \brief [7:7] Flag Pattern Enable for Input Channel 7 - IPEN7 (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [12:8] \internal Reserved */
    __IO Ifx_UReg_32Bit GEEN:1;            /**< \brief [13:13] Generate Event Enable - GEEN (rw) */
    __IO Ifx_UReg_32Bit IGP:2;             /**< \brief [15:14] Interrupt Gating Pattern - IGP (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_SCU_ERU_IGCR_Bits;

/** \brief Pattern Detection Result Register */
typedef struct _Ifx_SCU_ERU_PDRR_Bits
{
    __I  Ifx_UReg_32Bit PDR0:1;            /**< \brief [0:0] Pattern Detection Result of Channel 0 - PDR0 (rh) */
    __I  Ifx_UReg_32Bit PDR1:1;            /**< \brief [1:1] Pattern Detection Result of Channel 1 - PDR1 (rh) */
    __I  Ifx_UReg_32Bit PDR2:1;            /**< \brief [2:2] Pattern Detection Result of Channel 2 - PDR2 (rh) */
    __I  Ifx_UReg_32Bit PDR3:1;            /**< \brief [3:3] Pattern Detection Result of Channel 3 - PDR3 (rh) */
    __I  Ifx_UReg_32Bit PDR4:1;            /**< \brief [4:4] Pattern Detection Result of Channel 4 - PDR4 (rh) */
    __I  Ifx_UReg_32Bit PDR5:1;            /**< \brief [5:5] Pattern Detection Result of Channel 5 - PDR5 (rh) */
    __I  Ifx_UReg_32Bit PDR6:1;            /**< \brief [6:6] Pattern Detection Result of Channel 6 - PDR6 (rh) */
    __I  Ifx_UReg_32Bit PDR7:1;            /**< \brief [7:7] Pattern Detection Result of Channel 7 - PDR7 (rh) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_SCU_ERU_PDRR_Bits;

/** \brief Module Identification Register */
typedef struct _Ifx_SCU_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module revision number (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module type (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module number value (r) */
} Ifx_SCU_ID_Bits;

/** \brief Overlay Control Register */
typedef struct _Ifx_SCU_OVCCON_Bits
{
    __O  Ifx_UReg_32Bit CSEL0:1;           /**< \brief [0:0] CPU Select 0 - CSEL0 (w) */
    __O  Ifx_UReg_32Bit CSEL1:1;           /**< \brief [1:1] CPU Select 1 (If product has CPU1) - CSEL1 (w) */
    __O  Ifx_UReg_32Bit CSEL2:1;           /**< \brief [2:2] CPU Select 2 (If product has CPU2) - CSEL2 (w) */
    __O  Ifx_UReg_32Bit CSEL3:1;           /**< \brief [3:3] CPU Select 3 (If product has CPU3) - CSEL3 (w) */
    __O  Ifx_UReg_32Bit CSEL4:1;           /**< \brief [4:4] CPU Select 4 (If product has CPU4) - CSEL4 (w) */
    __O  Ifx_UReg_32Bit CSEL5:1;           /**< \brief [5:5] CPU Select 5 (If product has CPU5) - CSEL5 (w) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [15:6] \internal Reserved */
    __O  Ifx_UReg_32Bit OVSTRT:1;          /**< \brief [16:16] Overlay Start - OVSTRT (w) */
    __O  Ifx_UReg_32Bit OVSTP:1;           /**< \brief [17:17] Overlay Stop - OVSTP (w) */
    __O  Ifx_UReg_32Bit DCINVAL:1;         /**< \brief [18:18] Data Cache Invalidate - DCINVAL (w) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit OVCONF:1;          /**< \brief [24:24] Overlay Configured - OVCONF (rw) */
    __O  Ifx_UReg_32Bit OVCONF_P:1;        /**< \brief [25:25] Write Protection for OVCONF - OVCONF_P (w) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_SCU_OVCCON_Bits;

/** \brief Overlay Enable Register */
typedef struct _Ifx_SCU_OVCENABLE_Bits
{
    __IO Ifx_UReg_32Bit OVEN0:1;           /**< \brief [0:0] Overlay Enable 0 - OVEN0 (rw) */
    __IO Ifx_UReg_32Bit OVEN1:1;           /**< \brief [1:1] Overlay Enable 1 (If product has CPU1) - OVEN1 (rw) */
    __IO Ifx_UReg_32Bit OVEN2:1;           /**< \brief [2:2] Overlay Enable 2 (If product has CPU2) - OVEN2 (rw) */
    __IO Ifx_UReg_32Bit OVEN3:1;           /**< \brief [3:3] Overlay Enable 3 (If product has CPU3) - OVEN3 (rw) */
    __IO Ifx_UReg_32Bit OVEN4:1;           /**< \brief [4:4] Overlay Enable 4 (If product has CPU4) - OVEN4 (rw) */
    __IO Ifx_UReg_32Bit OVEN5:1;           /**< \brief [5:5] Overlay Enable 5 (If product has CPU5) - OVEN5 (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit GOD:1;             /**< \brief [8:8] Global Overlay Disable (rw1s) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_SCU_OVCENABLE_Bits;

/** \brief Resource Protection Register */
typedef struct _Ifx_SCU_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual Machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual Machine definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection Set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection Set definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_SCU_PROT_Bits;

/** \brief Software-over-the-air control register */
typedef struct _Ifx_SCU_SOTACTRL_Bits
{
    __IO Ifx_UReg_32Bit SOTASEL:2;         /**< \brief [1:0] Address Configuration (rw) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_SCU_SOTACTRL_Bits;

/** \brief Control register for traps related to CPU0-5 */
typedef struct _Ifx_SCU_TRAPS_CPU_CTRL_Bits
{
    __IO Ifx_UReg_32Bit TRAPFWDEN:1;       /**< \brief [0:0] Traps forwarding enable (rw) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_SCU_TRAPS_CPU_CTRL_Bits;

/** \brief Trap disable register for single CPU0 */
typedef struct _Ifx_SCU_TRAPS_CPU_DIS_Bits
{
    __IO Ifx_UReg_32Bit ESRT0:1;           /**< \brief [0:0] Disable Trap Request ESRT0 on CPU0 (rw) */
    __IO Ifx_UReg_32Bit ESRT1:1;           /**< \brief [1:1] Disable Trap Request ESRT1 on CPU0 (rw) */
    __IO Ifx_UReg_32Bit ESRT2:1;           /**< \brief [2:2] Disable Trap Request ESRT2 on CPU0 (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit SMUTP0:1;          /**< \brief [4:4] Disable Trap Request SMUTP0 on CPU0 (rw) */
    __IO Ifx_UReg_32Bit SMUTP1:1;          /**< \brief [5:5] Disable Trap Request SMUTP1 on CPU0 (rw) */
    __IO Ifx_UReg_32Bit SMUTP2:1;          /**< \brief [6:6] Disable Trap Request SMUTP2 on CPU0 (rw) */
    __IO Ifx_UReg_32Bit SMUTP3:1;          /**< \brief [7:7] Disable Trap Request SMUTP3 on CPU0 (rw) */
    __IO Ifx_UReg_32Bit GSMUTCS:1;         /**< \brief [8:8] Disable trap request GSMUTCS on CPU0 (rw) */
    __IO Ifx_UReg_32Bit SWT:1;             /**< \brief [9:9] Disable Trap Request SWT on CPU0 (rw) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_SCU_TRAPS_CPU_DIS_Bits;

/** \brief Trap clear register for group 0 for traps related to CPU0-5 */
typedef struct _Ifx_SCU_TRAPS_CPU_SETCLRGRP_CLR_Bits
{
    __O  Ifx_UReg_32Bit ESRT0:1;           /**< \brief [0:0] Clear Trap Request Flag ESRT0 (w) */
    __O  Ifx_UReg_32Bit ESRT1:1;           /**< \brief [1:1] Clear Trap Request Flag ESRT1 (w) */
    __O  Ifx_UReg_32Bit ESRT2:1;           /**< \brief [2:2] Clear Trap Request Flag ESRT2 (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __O  Ifx_UReg_32Bit SMUTP0:1;          /**< \brief [4:4] Clear Trap Request Flag SMUTP0 (w) */
    __O  Ifx_UReg_32Bit SMUTP1:1;          /**< \brief [5:5] Clear Trap Request Flag SMUTP1 (w) */
    __O  Ifx_UReg_32Bit SMUTP2:1;          /**< \brief [6:6] Clear Trap Request Flag SMUTP2 (w) */
    __O  Ifx_UReg_32Bit SMUTP3:1;          /**< \brief [7:7] Clear Trap Request Flag SMUTP3 (w) */
    __O  Ifx_UReg_32Bit GSMUTCS:1;         /**< \brief [8:8] Clear Trap Request Flag GSMUTCS (w) */
    __O  Ifx_UReg_32Bit SWT:1;             /**< \brief [9:9] Clear Trap Request Flag SWT (w) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_SCU_TRAPS_CPU_SETCLRGRP_CLR_Bits;

/** \brief Trap set register for group 0 for traps related to CPU0-5 */
typedef struct _Ifx_SCU_TRAPS_CPU_SETCLRGRP_SET_Bits
{
    __O  Ifx_UReg_32Bit ESRT0:1;           /**< \brief [0:0] Set trap request flag ESRT0 (w) */
    __O  Ifx_UReg_32Bit ESRT1:1;           /**< \brief [1:1] Set trap request flag ESRT1 (w) */
    __O  Ifx_UReg_32Bit ESRT2:1;           /**< \brief [2:2] Set trap request flag ESRT2 (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __O  Ifx_UReg_32Bit SMUTP0:1;          /**< \brief [4:4] Set Trap Request Flag SMUTP0 (w) */
    __O  Ifx_UReg_32Bit SMUTP1:1;          /**< \brief [5:5] Set Trap Request Flag SMUTP1 (w) */
    __O  Ifx_UReg_32Bit SMUTP2:1;          /**< \brief [6:6] Set Trap Request Flag SMUTP2 (w) */
    __O  Ifx_UReg_32Bit SMUTP3:1;          /**< \brief [7:7] Set Trap Request Flag SMUTP3 (w) */
    __O  Ifx_UReg_32Bit GSMUTCS:1;         /**< \brief [8:8] Set Trap Request Flag GSMUTCS (w) */
    __O  Ifx_UReg_32Bit SWT:1;             /**< \brief [9:9] Set Trap Request Flag SWT (w) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_SCU_TRAPS_CPU_SETCLRGRP_SET_Bits;

/** \brief SET/CLR enable register for group 0 for traps related to CPU0-5 */
typedef struct _Ifx_SCU_TRAPS_CPU_SETCLRGRP_SETCLREN_Bits
{
    __IO Ifx_UReg_32Bit ESRT0:1;           /**< \brief [0:0] Enable setting and clearing of ESRT0 for the group 0 (rw) */
    __IO Ifx_UReg_32Bit ESRT1:1;           /**< \brief [1:1] Enable setting and clearing of ESRT1 for the group 0 (rw) */
    __IO Ifx_UReg_32Bit ESRT2:1;           /**< \brief [2:2] Enable setting and clearing of ESRT2 for the group 0 (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit SMUTP0:1;          /**< \brief [4:4] Enable setting and clearing of SMUTP0 for the group 0 (rw) */
    __IO Ifx_UReg_32Bit SMUTP1:1;          /**< \brief [5:5] Enable setting and clearing of SMUTP1 for the group 0 (rw) */
    __IO Ifx_UReg_32Bit SMUTP2:1;          /**< \brief [6:6] Enable setting and clearing of SMUTP2 for the group 0 (rw) */
    __IO Ifx_UReg_32Bit SMUTP3:1;          /**< \brief [7:7] Enable setting and clearing of SMUTP3 for the group 0 (rw) */
    __IO Ifx_UReg_32Bit GSMUTCS:1;         /**< \brief [8:8] Enable setting and clearing of GSMUTCS for the group 0 (rw) */
    __IO Ifx_UReg_32Bit SWT:1;             /**< \brief [9:9] Enable setting and clearing of SWT for the group 0 (rw) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_SCU_TRAPS_CPU_SETCLRGRP_SETCLREN_Bits;

/** \brief Trap status register for traps related to CPU0-5 */
typedef struct _Ifx_SCU_TRAPS_CPU_STAT_Bits
{
    __I  Ifx_UReg_32Bit ESRT0:1;           /**< \brief [0:0] ESR0 Trap Request Flag - ESRT0 (rh) */
    __I  Ifx_UReg_32Bit ESRT1:1;           /**< \brief [1:1] ESR1 Trap Request Flag - ESRT1 (rh) */
    __I  Ifx_UReg_32Bit ESRT2:1;           /**< \brief [2:2] ESR2 Trap Request Flag - ESRT2 (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __I  Ifx_UReg_32Bit SMUTP0:1;          /**< \brief [4:4] SMU Trap Request Flag for SMU Partition 0 - SMUTP0 (rh) */
    __I  Ifx_UReg_32Bit SMUTP1:1;          /**< \brief [5:5] SMU Trap Request Flag for SMU Partition 1 - SMUTP1 (rh) */
    __I  Ifx_UReg_32Bit SMUTP2:1;          /**< \brief [6:6] SMU Trap Request Flag for SMU Partition 2 - SMUTP2 (rh) */
    __I  Ifx_UReg_32Bit SMUTP3:1;          /**< \brief [7:7] SMU Trap Request Flag for SMU Partition 3 - SMUTP3 (rh) */
    __I  Ifx_UReg_32Bit GSMUTCS:1;         /**< \brief [8:8] Gated SMU Trap Request Flag related to Cyber Security - GSMUTCS (rh) */
    __I  Ifx_UReg_32Bit SWT:1;             /**< \brief [9:9] Software Trap Request Flag - SWT (rh) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_SCU_TRAPS_CPU_STAT_Bits;

/** \brief Control register for traps related to CPUcs */
typedef struct _Ifx_SCU_TRAPS_CS_CTRL_Bits
{
    __IO Ifx_UReg_32Bit TRAPFWDEN:1;       /**< \brief [0:0] Traps forwarding enable (rw) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_SCU_TRAPS_CS_CTRL_Bits;

/** \brief Trap disable register for CPUcs */
typedef struct _Ifx_SCU_TRAPS_CS_DIS_Bits
{
    __IO Ifx_UReg_32Bit GESRT0:1;          /**< \brief [0:0] Disable Trap Request GESRT0 on CPUcs (rw) */
    __IO Ifx_UReg_32Bit GESRT1:1;          /**< \brief [1:1] Disable Trap Request GESRT1 on CPUcs (rw) */
    __IO Ifx_UReg_32Bit GESRT2:1;          /**< \brief [2:2] Disable Trap Request GESRT2 on CPUcs (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit GSMUTP0:1;         /**< \brief [4:4] Disable Trap Request GSMUTP0 on CPUcs (rw) */
    __IO Ifx_UReg_32Bit GSMUTP1:1;         /**< \brief [5:5] Disable Trap Request GSMUTP1 on CPUcs (rw) */
    __IO Ifx_UReg_32Bit GSMUTP2:1;         /**< \brief [6:6] Disable Trap Request GSMUTP2 on CPUcs (rw) */
    __IO Ifx_UReg_32Bit GSMUTP3:1;         /**< \brief [7:7] Disable Trap Request GSMUTP3 on CPUcs (rw) */
    __IO Ifx_UReg_32Bit SMUTCS:1;          /**< \brief [8:8] Disable Trap Request SMUTCS on CPUcs (rw) */
    __IO Ifx_UReg_32Bit SWTCS:1;           /**< \brief [9:9] Disable Trap Request SWTCS on CPUcs (rw) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_SCU_TRAPS_CS_DIS_Bits;

/** \brief Trap clear register for traps related to CPUcs */
typedef struct _Ifx_SCU_TRAPS_CS_SETCLR_CLR_Bits
{
    __O  Ifx_UReg_32Bit GESRT0:1;          /**< \brief [0:0] Clear Trap Request Flag GESRT0 (w) */
    __O  Ifx_UReg_32Bit GESRT1:1;          /**< \brief [1:1] Clear Trap Request Flag GESRT1 (w) */
    __O  Ifx_UReg_32Bit GESRT2:1;          /**< \brief [2:2] Clear Trap Request Flag GESRT2 (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __O  Ifx_UReg_32Bit GSMUTP0:1;         /**< \brief [4:4] Clear Trap Request Flag GSMUTP0 (w) */
    __O  Ifx_UReg_32Bit GSMUTP1:1;         /**< \brief [5:5] Clear Trap Request Flag GSMUTP1 (w) */
    __O  Ifx_UReg_32Bit GSMUTP2:1;         /**< \brief [6:6] Clear Trap Request Flag GSMUTP2 (w) */
    __O  Ifx_UReg_32Bit GSMUTP3:1;         /**< \brief [7:7] Clear Trap Request Flag GSMUTP3 (w) */
    __O  Ifx_UReg_32Bit SMUTCS:1;          /**< \brief [8:8] Clear Trap Request Flag SMUTCS (w) */
    __O  Ifx_UReg_32Bit SWTCS:1;           /**< \brief [9:9] Clear Trap Request Flag SWTCS (w) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_SCU_TRAPS_CS_SETCLR_CLR_Bits;

/** \brief Trap set register for traps related to CPUcs */
typedef struct _Ifx_SCU_TRAPS_CS_SETCLR_SET_Bits
{
    __O  Ifx_UReg_32Bit GESRT0:1;          /**< \brief [0:0] Set Trap Request Flag GESRT0 (w) */
    __O  Ifx_UReg_32Bit GESRT1:1;          /**< \brief [1:1] Set Trap Request Flag GESRT1 (w) */
    __O  Ifx_UReg_32Bit GESRT2:1;          /**< \brief [2:2] Set Trap Request Flag GESRT2 (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __O  Ifx_UReg_32Bit GSMUTP0:1;         /**< \brief [4:4] Set Trap Request Flag GSMUTP0 (w) */
    __O  Ifx_UReg_32Bit GSMUTP1:1;         /**< \brief [5:5] Set Trap Request Flag GSMUTP1 (w) */
    __O  Ifx_UReg_32Bit GSMUTP2:1;         /**< \brief [6:6] Set Trap Request Flag GSMUTP2 (w) */
    __O  Ifx_UReg_32Bit GSMUTP3:1;         /**< \brief [7:7] Set Trap Request Flag GSMUTP3 (w) */
    __O  Ifx_UReg_32Bit SMUTCS:1;          /**< \brief [8:8] Set Trap Request Flag SMUTCS (w) */
    __O  Ifx_UReg_32Bit SWTCS:1;           /**< \brief [9:9] Set Trap Request Flag SWTCS (w) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_SCU_TRAPS_CS_SETCLR_SET_Bits;

/** \brief SET/CLR enable register for traps related to CPUcs */
typedef struct _Ifx_SCU_TRAPS_CS_SETCLR_SETCLREN_Bits
{
    __IO Ifx_UReg_32Bit GESRT0:1;          /**< \brief [0:0] Enable setting and clearing of GESRT0 on CPUcs (rw) */
    __IO Ifx_UReg_32Bit GESRT1:1;          /**< \brief [1:1] Enable setting and clearing of GESRT1 on CPUcs (rw) */
    __IO Ifx_UReg_32Bit GESRT2:1;          /**< \brief [2:2] Enable setting and clearing of GESRT2 on CPUcs (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit GSMUTP0:1;         /**< \brief [4:4] Enable setting and clearing of GSMUTP0 on CPUcs (rw) */
    __IO Ifx_UReg_32Bit GSMUTP1:1;         /**< \brief [5:5] Enable setting and clearing of GSMUTP1 on CPUcs (rw) */
    __IO Ifx_UReg_32Bit GSMUTP2:1;         /**< \brief [6:6] Enable setting and clearing of GSMUTP2 on CPUcs (rw) */
    __IO Ifx_UReg_32Bit GSMUTP3:1;         /**< \brief [7:7] Enable setting and clearing of GSMUTP3 on CPUcs (rw) */
    __IO Ifx_UReg_32Bit SMUTCS:1;          /**< \brief [8:8] Enable setting and clearing of SMUTCS on CPUcs (rw) */
    __IO Ifx_UReg_32Bit SWTCS:1;           /**< \brief [9:9] Enable setting and clearing of SWTCS on CPUcs (rw) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_SCU_TRAPS_CS_SETCLR_SETCLREN_Bits;

/** \brief Trap status register for traps related to CPUcs */
typedef struct _Ifx_SCU_TRAPS_CS_STAT_Bits
{
    __I  Ifx_UReg_32Bit GESRT0:1;          /**< \brief [0:0] Gated ESR0 Trap Request Flag - GESRT0 (rh) */
    __I  Ifx_UReg_32Bit GESRT1:1;          /**< \brief [1:1] Gated ESR1 Trap Request Flag - GESRT1 (rh) */
    __I  Ifx_UReg_32Bit GESRT2:1;          /**< \brief [2:2] Gated ESR2 Trap Request Flag - GESRT2 (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __I  Ifx_UReg_32Bit GSMUTP0:1;         /**< \brief [4:4] Gated SMU Alarm Trap Request Flag for SMU Partition 0 - GSMUTP0 (rh) */
    __I  Ifx_UReg_32Bit GSMUTP1:1;         /**< \brief [5:5] Gated SMU Alarm Trap Request Flag for SMU Partition 1 - GSMUTP1 (rh) */
    __I  Ifx_UReg_32Bit GSMUTP2:1;         /**< \brief [6:6] Gated SMU Alarm Trap Request Flag for SMU Partition 2 - GSMUTP2 (rh) */
    __I  Ifx_UReg_32Bit GSMUTP3:1;         /**< \brief [7:7] Gated SMU Alarm Trap Request Flag for SMU Partition 3 - GSMUTP3 (rh) */
    __I  Ifx_UReg_32Bit SMUTCS:1;          /**< \brief [8:8] SMU Cyber Security Alarm Trap Request Flag - SMUTCS (rh) */
    __I  Ifx_UReg_32Bit SWTCS:1;           /**< \brief [9:9] Software Trap Request Flag - SWTCS (rh) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_SCU_TRAPS_CS_STAT_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_scu_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_ACCEN_PRS_Bits B;         /**< \brief Bitfield access */
} Ifx_SCU_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_ACCEN_RDA_Bits B;         /**< \brief Bitfield access */
} Ifx_SCU_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_ACCEN_RDB_FPI_Bits B;     /**< \brief Bitfield access */
} Ifx_SCU_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_ACCEN_VM_Bits B;          /**< \brief Bitfield access */
} Ifx_SCU_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_ACCEN_WRA_Bits B;         /**< \brief Bitfield access */
} Ifx_SCU_ACCEN_WRA;

/** \brief Write access enable register A   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_ACCEN_WRA_CS_Bits B;      /**< \brief Bitfield access */
} Ifx_SCU_ACCEN_WRA_CS;

/** \brief Write access enable register B   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_ACCEN_WRB_FPI_Bits B;     /**< \brief Bitfield access */
} Ifx_SCU_ACCEN_WRB_FPI;

/** \brief Write access enable register B   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_ACCEN_WRB_FPI_CS_Bits B;    /**< \brief Bitfield access */
} Ifx_SCU_ACCEN_WRB_FPI_CS;

/** \brief Chip information register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_CHIPINFO_Bits B;          /**< \brief Bitfield access */
} Ifx_SCU_CHIPINFO;

/** \brief External Input Channel Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_ERU_EICR_Bits B;          /**< \brief Bitfield access */
} Ifx_SCU_ERU_EICR;

/** \brief External Input Filter Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_ERU_EIFILT_Bits B;        /**< \brief Bitfield access */
} Ifx_SCU_ERU_EIFILT;

/** \brief External Input Flag Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_ERU_EIFR_Bits B;          /**< \brief Bitfield access */
} Ifx_SCU_ERU_EIFR;

/** \brief Flag Modification Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_ERU_FMR_Bits B;           /**< \brief Bitfield access */
} Ifx_SCU_ERU_FMR;

/** \brief Interrupt Gating Control Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_ERU_IGCR_Bits B;          /**< \brief Bitfield access */
} Ifx_SCU_ERU_IGCR;

/** \brief Pattern Detection Result Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_ERU_PDRR_Bits B;          /**< \brief Bitfield access */
} Ifx_SCU_ERU_PDRR;

/** \brief Module Identification Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_ID_Bits B;                /**< \brief Bitfield access */
} Ifx_SCU_ID;

/** \brief Overlay Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_OVCCON_Bits B;            /**< \brief Bitfield access */
} Ifx_SCU_OVCCON;

/** \brief Overlay Enable Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_OVCENABLE_Bits B;         /**< \brief Bitfield access */
} Ifx_SCU_OVCENABLE;

/** \brief Resource Protection Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_PROT_Bits B;              /**< \brief Bitfield access */
} Ifx_SCU_PROT;

/** \brief Software-over-the-air control register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_SOTACTRL_Bits B;          /**< \brief Bitfield access */
} Ifx_SCU_SOTACTRL;

/** \brief Control register for traps related to CPU0-5   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_TRAPS_CPU_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_SCU_TRAPS_CPU_CTRL;

/** \brief Trap disable register for single CPU0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_TRAPS_CPU_DIS_Bits B;     /**< \brief Bitfield access */
} Ifx_SCU_TRAPS_CPU_DIS;

/** \brief Trap clear register for group 0 for traps related to CPU0-5   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_TRAPS_CPU_SETCLRGRP_CLR_Bits B;    /**< \brief Bitfield access */
} Ifx_SCU_TRAPS_CPU_SETCLRGRP_CLR;

/** \brief Trap set register for group 0 for traps related to CPU0-5   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_TRAPS_CPU_SETCLRGRP_SET_Bits B;    /**< \brief Bitfield access */
} Ifx_SCU_TRAPS_CPU_SETCLRGRP_SET;

/** \brief SET/CLR enable register for group 0 for traps related to CPU0-5   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_TRAPS_CPU_SETCLRGRP_SETCLREN_Bits B;    /**< \brief Bitfield access */
} Ifx_SCU_TRAPS_CPU_SETCLRGRP_SETCLREN;

/** \brief Trap status register for traps related to CPU0-5   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_TRAPS_CPU_STAT_Bits B;    /**< \brief Bitfield access */
} Ifx_SCU_TRAPS_CPU_STAT;

/** \brief Control register for traps related to CPUcs   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_TRAPS_CS_CTRL_Bits B;     /**< \brief Bitfield access */
} Ifx_SCU_TRAPS_CS_CTRL;

/** \brief Trap disable register for CPUcs   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_TRAPS_CS_DIS_Bits B;      /**< \brief Bitfield access */
} Ifx_SCU_TRAPS_CS_DIS;

/** \brief Trap clear register for traps related to CPUcs   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_TRAPS_CS_SETCLR_CLR_Bits B;    /**< \brief Bitfield access */
} Ifx_SCU_TRAPS_CS_SETCLR_CLR;

/** \brief Trap set register for traps related to CPUcs   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_TRAPS_CS_SETCLR_SET_Bits B;    /**< \brief Bitfield access */
} Ifx_SCU_TRAPS_CS_SETCLR_SET;

/** \brief SET/CLR enable register for traps related to CPUcs   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_TRAPS_CS_SETCLR_SETCLREN_Bits B;    /**< \brief Bitfield access */
} Ifx_SCU_TRAPS_CS_SETCLR_SETCLREN;

/** \brief Trap status register for traps related to CPUcs   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SCU_TRAPS_CS_STAT_Bits B;     /**< \brief Bitfield access */
} Ifx_SCU_TRAPS_CS_STAT;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Scu_ACCENNOM_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENNOM object */
typedef volatile struct _Ifx_SCU_ACCENNOM
{
       __IO Ifx_SCU_ACCEN_WRA                   WRA;                    /**< \brief 0, ACCENNOM write access enable register A*/
       __IO Ifx_SCU_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, ACCENNOM write access enable register B*/
       __IO Ifx_SCU_ACCEN_RDA                   RDA;                    /**< \brief 8, ACCENNOM read access enable register A*/
       __IO Ifx_SCU_ACCEN_RDB_FPI               RDB;                    /**< \brief C, ACCENNOM read access enable register B*/
       __IO Ifx_SCU_ACCEN_VM                    VM;                     /**< \brief 10, ACCENNOM VM access enable register*/
       __IO Ifx_SCU_ACCEN_PRS                   PRS;                    /**< \brief 14, ACCENNOM PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_SCU_ACCENNOM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Scu_ACCENGRP_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENGRP object */
typedef volatile struct _Ifx_SCU_ACCENGRP
{
       __IO Ifx_SCU_ACCEN_WRA                   WRA;                    /**< \brief 0, ACCENGRP0 write access enable register A*/
       __IO Ifx_SCU_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, ACCENGRP0 write access enable register B*/
       __IO Ifx_SCU_ACCEN_RDA                   RDA;                    /**< \brief 8, ACCENGRP0 read access enable register A*/
       __IO Ifx_SCU_ACCEN_RDB_FPI               RDB;                    /**< \brief C, ACCENGRP0 read access enable register B*/
       __IO Ifx_SCU_ACCEN_VM                    VM;                     /**< \brief 10, ACCENGRP0 VM access enable register*/
       __IO Ifx_SCU_ACCEN_PRS                   PRS;                    /**< \brief 14, ACCENGRP0 PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_SCU_ACCENGRP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Scu_ACCENCS_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENCS object */
typedef volatile struct _Ifx_SCU_ACCENCS
{
       __IO Ifx_SCU_ACCEN_WRA_CS                WRA;                    /**< \brief 0, ACCENCS write access enable register A*/
       __I  Ifx_SCU_ACCEN_WRB_FPI_CS            WRB;                    /**< \brief 4, ACCENCS write access enable register B*/
       __IO Ifx_SCU_ACCEN_RDA                   RDA;                    /**< \brief 8, ACCENCS read access enable register A*/
       __IO Ifx_SCU_ACCEN_RDB_FPI               RDB;                    /**< \brief C, ACCENCS read access enable register B*/
       __IO Ifx_SCU_ACCEN_VM                    VM;                     /**< \brief 10, ACCENCS VM access enable register*/
       __IO Ifx_SCU_ACCEN_PRS                   PRS;                    /**< \brief 14, ACCENCS PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_SCU_ACCENCS;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Scu_TRAPS_CPU_SETCLRGRP_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief SETCLRGRP object */
typedef volatile struct _Ifx_SCU_TRAPS_CPU_SETCLRGRP
{
       __IO Ifx_SCU_TRAPS_CPU_SETCLRGRP_SETCLREN SETCLREN;               /**< \brief 0, SET/CLR enable register for group 0 for traps related to CPU0-5*/
       __O  Ifx_SCU_TRAPS_CPU_SETCLRGRP_SET     SET;                    /**< \brief 4, Trap set register for group 0 for traps related to CPU0-5*/
       __O  Ifx_SCU_TRAPS_CPU_SETCLRGRP_CLR     CLR;                    /**< \brief 8, Trap clear register for group 0 for traps related to CPU0-5*/
} Ifx_SCU_TRAPS_CPU_SETCLRGRP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Scu_TRAPS_CPU_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief CPU object */
typedef volatile struct _Ifx_SCU_TRAPS_CPU
{
       __IO Ifx_SCU_TRAPS_CPU_CTRL              CTRL;                   /**< \brief 0, Control register for traps related to CPU0-5*/
       __IO Ifx_SCU_TRAPS_CPU_SETCLRGRP         SETCLRGRP[4];           /**< \brief 4, */
       __I  Ifx_SCU_TRAPS_CPU_STAT              STAT;                   /**< \brief 34, Trap status register for traps related to CPU0-5*/
       __IO Ifx_SCU_TRAPS_CPU_DIS               DIS[6];                 /**< \brief 38, Trap disable register for single CPU0*/
} Ifx_SCU_TRAPS_CPU;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Scu_TRAPS_CS_SETCLR_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief SETCLR object */
typedef volatile struct _Ifx_SCU_TRAPS_CS_SETCLR
{
       __IO Ifx_SCU_TRAPS_CS_SETCLR_SETCLREN    SETCLREN;               /**< \brief 0, SET/CLR enable register for traps related to CPUcs*/
       __O  Ifx_SCU_TRAPS_CS_SETCLR_SET         SET;                    /**< \brief 4, Trap set register for traps related to CPUcs*/
       __O  Ifx_SCU_TRAPS_CS_SETCLR_CLR         CLR;                    /**< \brief 8, Trap clear register for traps related to CPUcs*/
} Ifx_SCU_TRAPS_CS_SETCLR;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Scu_TRAPS_CS_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief CS object */
typedef volatile struct _Ifx_SCU_TRAPS_CS
{
       __IO Ifx_SCU_TRAPS_CS_CTRL               CTRL;                   /**< \brief 0, Control register for traps related to CPUcs*/
       __IO Ifx_SCU_TRAPS_CS_SETCLR             SETCLR;                 /**< \brief 4, */
       __I  Ifx_SCU_TRAPS_CS_STAT               STAT;                   /**< \brief 10, Trap status register for traps related to CPUcs*/
       __IO Ifx_SCU_TRAPS_CS_DIS                DIS;                    /**< \brief 14, Trap disable register for CPUcs*/
} Ifx_SCU_TRAPS_CS;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Scu_TRAPS_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief TRAPS object */
typedef volatile struct _Ifx_SCU_TRAPS
{
       __IO Ifx_SCU_TRAPS_CPU                   CPU;                    /**< \brief 0, */
       __IO Ifx_SCU_TRAPS_CS                    CS;                     /**< \brief 50, */
} Ifx_SCU_TRAPS;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Scu_ERU_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ERU object */
typedef volatile struct _Ifx_SCU_ERU
{
       __IO Ifx_SCU_ERU_EIFILT                  EIFILT;                 /**< \brief 0, External Input Filter Register*/
       __IO Ifx_SCU_ERU_EICR                    EICR[8];                /**< \brief 4, External Input Channel Register 0*/
       __I  Ifx_SCU_ERU_EIFR                    EIFR;                   /**< \brief 24, External Input Flag Register*/
       __O  Ifx_SCU_ERU_FMR                     FMR;                    /**< \brief 28, Flag Modification Register*/
       __IO Ifx_SCU_ERU_IGCR                    IGCR[8];                /**< \brief 2C, Interrupt Gating Control Register 0*/
       __I  Ifx_SCU_ERU_PDRR                    PDRR;                   /**< \brief 4C, Pattern Detection Result Register*/
} Ifx_SCU_ERU;

/******************************************************************************/
/** \addtogroup IfxSfr_Scu_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief SCU object */
typedef volatile struct _Ifx_SCU
{
       __I  Ifx_UReg_8Bit                       reserved_0[8];          /**< \brief 0, \internal Reserved */
       __I  Ifx_SCU_ID                          ID;                     /**< \brief 8, Module Identification Register*/
       __I  Ifx_UReg_8Bit                       reserved_C[12];         /**< \brief C, \internal Reserved */
       __IO Ifx_SCU_PROT                        PROTE;                  /**< \brief 18, PROT Register Endinit*/
       __IO Ifx_SCU_PROT                        PROTSE;                 /**< \brief 1C, PROT Register Safe Endinit*/
       __IO Ifx_SCU_PROT                        PROTCSE;                /**< \brief 20, PROT Register Cyber-Secure Endinit*/
       __IO Ifx_SCU_PROT                        PROTCSAE;               /**< \brief 24, PROT Register Cyber-Secure APU Endinit*/
       __IO Ifx_SCU_ACCENNOM                    ACCENNOM;               /**< \brief 28, SCU APU for general non-secure resources*/
       __IO Ifx_SCU_ACCENGRP                    ACCENGRP[4];            /**< \brief 48, */
       __IO Ifx_SCU_ACCENCS                     ACCENCS;                /**< \brief C8, SCU APU for general cyber-secure resources*/
       __IO Ifx_SCU_TRAPS                       TRAPS;                  /**< \brief E8, */
       __IO Ifx_SCU_ERU                         ERU;                    /**< \brief 150, Pattern Detection Result Register*/
       __IO Ifx_SCU_OVCENABLE                   OVCENABLE;              /**< \brief 1A0, Overlay Enable Register*/
       __IO Ifx_SCU_OVCCON                      OVCCON;                 /**< \brief 1A4, Overlay Control Register*/
       __I  Ifx_SCU_CHIPINFO                    CHIPINFO;               /**< \brief 1A8, Chip information register*/
       __IO Ifx_SCU_SOTACTRL                    SOTACTRL;               /**< \brief 1AC, Software-over-the-air control register*/
       __I  Ifx_UReg_8Bit                       reserved_1B0[592];      /**< \brief 1B0, \internal Reserved */
} Ifx_SCU;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXSCU_REGDEF_H */

/**
 * \file IfxPms_regdef.h
 * \brief
 * \copyright Copyright (c) 2021 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_PMS/V0.1.1.1.37
 * Specification: latest @ 2021-11-17 instance sheet @ MC_A3G_TC49x : V9.1.6.2.0 
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Pms_Registers Pms Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Pms_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Pms_Registers
 * 
 * \defgroup IfxSfr_Pms_Registers_union Register unions
 * \ingroup IfxSfr_Pms_Registers
 * 
 * \defgroup IfxSfr_Pms_Registers_struct Memory map
 * \ingroup IfxSfr_Pms_Registers
 */
#ifndef IFXPMS_REGDEF_H
#define IFXPMS_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Pms_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_PMS_ACCEN_PRS_PMS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PMS_ACCEN_PRS_PMS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_PMS_ACCEN_RDA_PMS_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for Master TAG ID q - ENq (rw) */
} Ifx_PMS_ACCEN_RDA_PMS_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_PMS_ACCEN_RDB_PMS_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_PMS_ACCEN_RDB_PMS_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_PMS_ACCEN_VM_PMS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PMS_ACCEN_VM_PMS_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_PMS_ACCEN_WRA_PMS_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for Master TAG ID q - ENq (rw) */
} Ifx_PMS_ACCEN_WRA_PMS_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_PMS_ACCEN_WRB_PMS_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_PMS_ACCEN_WRB_PMS_Bits;

/** \brief Register to Store User Info in PMS2 Domain and Reset by Cold PORST */
typedef struct _Ifx_PMS_CLDPORSTUSRINFO_Bits
{
    __IO Ifx_UReg_32Bit DATA:32;           /**< \brief [31:0] User data (rw) */
} Ifx_PMS_CLDPORSTUSRINFO_Bits;

/** \brief Cold Reset Configuration Register */
typedef struct _Ifx_PMS_CLDRSTCON_Bits
{
    __O  Ifx_UReg_32Bit CPTRIG:8;          /**< \brief [7:0] Cold PORST trigger (w) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_PMS_CLDRSTCON_Bits;

/** \brief Cold Reset Trigger Register */
typedef struct _Ifx_PMS_CLDRSTRIG_Bits
{
    __I  Ifx_UReg_32Bit VDD:1;             /**< \brief [0:0] VDD Primary Monitor Cold PORST Indication - VDD (rh) */
    __I  Ifx_UReg_32Bit VDDEXT:1;          /**< \brief [1:1] VDDEXT Primary Monitor Cold PORST Indication - VDDEXT (rh) */
    __I  Ifx_UReg_32Bit VSSDCHS:1;         /**< \brief [2:2] DCDC High-Side Supply Primary Monitor Cold PORST Indication (rh) */
    __I  Ifx_UReg_32Bit VDDEXTDC:1;        /**< \brief [3:3] VDDEXTDC Primary Monitor Cold PORST Indication - VDDEXTDC (rh) */
    __I  Ifx_UReg_32Bit VDDDCLS:1;         /**< \brief [4:4] DCDC Low-Side Supply Primary Monitor Cold PORST Indication (rh) */
    __I  Ifx_UReg_32Bit VDDEVRSB:1;        /**< \brief [5:5] VDDEVRSB Primary Monitor Cold PORST Indication - VDDEVRSB (rh) */
    __I  Ifx_UReg_32Bit VDDM:1;            /**< \brief [6:6] VDDM Primary Monitor Cold PORST Indication - VDDM (rh) */
    __I  Ifx_UReg_32Bit VDDPHPHY0:1;       /**< \brief [7:7] VDDPHPHY0 Primary Monitor Cold PORST Indication - VDDPHPHY0 (rh) */
    __I  Ifx_UReg_32Bit VDDPHPHY1:1;       /**< \brief [8:8] VDDPHPHY1 Primary Monitor Cold PORST Indication - VDDPHPHY1 (rh) */
    __I  Ifx_UReg_32Bit VDDPHPHY2:1;       /**< \brief [9:9] VDDPHPHY2 Primary Monitor Cold PORST Indication (rh) */
    __I  Ifx_UReg_32Bit VDDHSIF:1;         /**< \brief [10:10] VDDHSIF Primary Monitor Cold PORST Indication - VDDHSIF (rh) */
    __I  Ifx_UReg_32Bit VDDPAD:1;          /**< \brief [11:11] VDDPAD Primary Monitor Cold PORST Indication (rh) */
    __I  Ifx_UReg_32Bit VDDCPUA:1;         /**< \brief [12:12] VDDCPUA Primary Monitor Cold PORST Indication - VDDCPUA (rh) */
    __I  Ifx_UReg_32Bit VDDCPUB:1;         /**< \brief [13:13] VDDCPUB Primary Monitor Cold PORST Indication - VDDCPUB (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [14:14] \internal Reserved */
    __I  Ifx_UReg_32Bit VDDPPU:1;          /**< \brief [15:15] VDDPPU Primary Monitor Cold PORST Indication - VDDPPU (rh) */
    __I  Ifx_UReg_32Bit VDDLMU:1;          /**< \brief [16:16] VDDLMU Primary Monitor Cold PORST Indication (rh) */
    __I  Ifx_UReg_32Bit VDDPHY0:1;         /**< \brief [17:17] VDDPHY0 Primary Monitor Cold PORST Indication - VDDPHY0 (rh) */
    __I  Ifx_UReg_32Bit VDDPHY1:1;         /**< \brief [18:18] VDDPHY1 Primary Monitor Cold PORST Indication - VDDPHY1 (rh) */
    __I  Ifx_UReg_32Bit VDDPHY2:1;         /**< \brief [19:19] VDDPHY2 Primary Monitor Cold PORST Indication (rh) */
    __I  Ifx_UReg_32Bit PORSTTO:1;         /**< \brief [20:20] Cold PORST reset triggered by a warm PORST time-out (rh) */
    __I  Ifx_UReg_32Bit LBTERM:1;          /**< \brief [21:21] LBIST Was Properly Terminated for Respective Domains - LBTERM (rh) */
    __I  Ifx_UReg_32Bit LBPORST:1;         /**< \brief [22:22] LBIST Termination due to Warm PORST - LBPORST (rh) */
    __I  Ifx_UReg_32Bit PDCOLD:1;          /**< \brief [23:23] Cold Reset due to PD threshold - PDCOLD (rh) */
    __I  Ifx_UReg_32Bit CPSWTRIG:1;        /**< \brief [24:24] Cold PORST software trigger (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_PMS_CLDRSTRIG_Bits;

/** \brief Cold Reset Last Trigger Register */
typedef struct _Ifx_PMS_CLDRSTRIGL_Bits
{
    __I  Ifx_UReg_32Bit VDD:1;             /**< \brief [0:0] VDD Primary Monitor Cold PORST Indication - VDD (rh) */
    __I  Ifx_UReg_32Bit VDDEXT:1;          /**< \brief [1:1] VDDEXT Primary Monitor Cold PORST Indication - VDDEXT (rh) */
    __I  Ifx_UReg_32Bit VSSDCHS:1;         /**< \brief [2:2] DCDC High-Side Supply Primary Monitor Cold PORST Indication (rh) */
    __I  Ifx_UReg_32Bit VDDEXTDC:1;        /**< \brief [3:3] VDDEXTDC Primary Monitor Cold PORST Indication - VDDEXTDC (rh) */
    __I  Ifx_UReg_32Bit VDDDCLS:1;         /**< \brief [4:4] DCDC Low-Side Supply Primary Monitor Cold PORST Indication (rh) */
    __I  Ifx_UReg_32Bit VDDEVRSB:1;        /**< \brief [5:5] VDDEVRSB Primary Monitor Cold PORST Indication - VDDEVRSB (rh) */
    __I  Ifx_UReg_32Bit VDDM:1;            /**< \brief [6:6] VDDM Primary Monitor Cold PORST Indication - VDDM (rh) */
    __I  Ifx_UReg_32Bit VDDPHPHY0:1;       /**< \brief [7:7] VDDPHPHY0 Primary Monitor Cold PORST Indication - VDDPHPHY0 (rh) */
    __I  Ifx_UReg_32Bit VDDPHPHY1:1;       /**< \brief [8:8] VDDPHPHY1 Primary Monitor Cold PORST Indication - VDDPHPHY1 (rh) */
    __I  Ifx_UReg_32Bit VDDPHPHY2:1;       /**< \brief [9:9] VDDPHPHY2 Primary Monitor Cold PORST Indication (rh) */
    __I  Ifx_UReg_32Bit VDDHSIF:1;         /**< \brief [10:10] VDDHSIF Primary Monitor Cold PORST Indication - VDDHSIF (rh) */
    __I  Ifx_UReg_32Bit VDDPAD:1;          /**< \brief [11:11] VDDPAD Primary Monitor Cold PORST Indication (rh) */
    __I  Ifx_UReg_32Bit VDDCPUA:1;         /**< \brief [12:12] VDDCPUA Primary Monitor Cold PORST Indication - VDDCPUA (rh) */
    __I  Ifx_UReg_32Bit VDDCPUB:1;         /**< \brief [13:13] VDDCPUB Primary Monitor Cold PORST Indication - VDDCPUB (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [14:14] \internal Reserved */
    __I  Ifx_UReg_32Bit VDDPPU:1;          /**< \brief [15:15] VDDPPU Primary Monitor Cold PORST Indication - VDDPPU (rh) */
    __I  Ifx_UReg_32Bit VDDLMU:1;          /**< \brief [16:16] VDDLMU Primary Monitor Cold PORST Indication (rh) */
    __I  Ifx_UReg_32Bit VDDPHY0:1;         /**< \brief [17:17] VDDPHY0 Primary Monitor Cold PORST Indication - VDDPHY0 (rh) */
    __I  Ifx_UReg_32Bit VDDPHY1:1;         /**< \brief [18:18] VDDPHY1 Primary Monitor Cold PORST Indication - VDDPHY1 (rh) */
    __I  Ifx_UReg_32Bit VDDPHY2:1;         /**< \brief [19:19] VDDPHY2 Primary Monitor Cold PORST Indication (rh) */
    __I  Ifx_UReg_32Bit PORSTTO:1;         /**< \brief [20:20] Cold PORST reset triggered by a warm PORST time-out (rh) */
    __I  Ifx_UReg_32Bit LBTERM:1;          /**< \brief [21:21] LBIST Was Properly Terminated for Respective Domains - LBTERM (rh) */
    __I  Ifx_UReg_32Bit LBPORST:1;         /**< \brief [22:22] LBIST Termination due to Warm PORST - LBPORST (rh) */
    __I  Ifx_UReg_32Bit PDCOLD:1;          /**< \brief [23:23] Cold Reset due to PD threshold - PDCOLD (rh) */
    __I  Ifx_UReg_32Bit CPSWTRIG:1;        /**< \brief [24:24] Cold PORST software trigger (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_PMS_CLDRSTRIGL_Bits;

/** \brief Cold Reset Status Register */
typedef struct _Ifx_PMS_CLDRSTSTAT_Bits
{
    __I  Ifx_UReg_32Bit LVDANA:1;          /**< \brief [0:0] LVD Reset Status for PMS0-Ana Domain and PSSM0 - LVDANA (rh) */
    __I  Ifx_UReg_32Bit LVDPMS0:1;         /**< \brief [1:1] LVD Reset Status for PMS0 Domain and PSSM0 - LVDPMS0 (rh) */
    __I  Ifx_UReg_32Bit STBY0WKP:1;        /**< \brief [2:2] Transition from Standby0 to RUN mode for PSSM0 - STBY0WKP (rh) */
    __I  Ifx_UReg_32Bit LVDPMS1:1;         /**< \brief [3:3] LVD Reset Status for PMS1 Domain and PSSM1 - LVDPMS1 (rh) */
    __I  Ifx_UReg_32Bit LVDPMS2:1;         /**< \brief [4:4] LVD Reset Status for PMS2 Domain - LVDPMS2 (rh) */
    __I  Ifx_UReg_32Bit STBY1WKP:1;        /**< \brief [5:5] Transition from Standby1 to RUN mode for PSSM1 - STBY1WKP (rh) */
    __I  Ifx_UReg_32Bit CLDPORST:1;        /**< \brief [6:6] Cold PORST Reset Status - CLDPORST (rh) */
    __I  Ifx_UReg_32Bit PDCLDRST:1;        /**< \brief [7:7] Power Domain Cold Reset Status - PDCLDRST (rh) */
    __I  Ifx_UReg_32Bit PORST:1;           /**< \brief [8:8] Warm PORST Status - PORST (rh) */
    __I  Ifx_UReg_32Bit LBIST:1;           /**< \brief [9:9] LBIST Status - LBIST (rh) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_PMS_CLDRSTSTAT_Bits;

/** \brief Cold Reset Status Clear Register */
typedef struct _Ifx_PMS_CLDRSTSTATCLR_Bits
{
    __O  Ifx_UReg_32Bit CLEAR:1;           /**< \brief [0:0] Clear Cold Reset Status Bits - CLEAR (w) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_PMS_CLDRSTSTATCLR_Bits;

/** \brief  */
typedef struct _Ifx_PMS_DRMONCON_Bits
{
    __IO Ifx_UReg_32Bit ENABLE:1;          /**< \brief [0:0] Enable/Disable Drift Monitoring - ENABLE (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [3:1] \internal Reserved */
    __IO Ifx_UReg_32Bit FACTOR:4;          /**< \brief [7:4] Exponent of the Downsampling Factor R - FACTOR (rwh) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_PMS_DRMONCON_Bits;

/** \brief  */
typedef struct _Ifx_PMS_DRMONSTAT_Bits
{
    __I  Ifx_UReg_32Bit AVERAGE:11;        /**< \brief [10:0] Calculated Average Value - AVERAGE (rh) */
    __I  Ifx_UReg_32Bit :21;               /**< \brief [31:11] \internal Reserved */
} Ifx_PMS_DRMONSTAT_Bits;

/** \brief Die Temperature Sensor Control Register */
typedef struct _Ifx_PMS_DTS_CON_Bits
{
    __IO Ifx_UReg_32Bit EN:1;              /**< \brief [0:0] DTS enable (rwh) */
    __IO Ifx_UReg_32Bit START:1;           /**< \brief [1:1] ADC conversion control (rwh) */
    __IO Ifx_UReg_32Bit WRNEN:1;           /**< \brief [2:2] Warning enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit PEAKDETRST:1;      /**< \brief [4:4] DTS peak temperature detector reset (rwh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit LOWERFILT:4;       /**< \brief [11:8] Temperature-sensing mode warning filter (rw) */
    __IO Ifx_UReg_32Bit UPPERFILT:4;       /**< \brief [15:12] Temperature-sensing mode warning filter (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_PMS_DTS_CON_Bits;

/** \brief Die Temperature Sensor Limit Register 1 */
typedef struct _Ifx_PMS_DTS_LIM1_Bits
{
    __IO Ifx_UReg_32Bit LOWER:12;          /**< \brief [11:0] DTS lower warning threshold (rw) */
    __IO Ifx_UReg_32Bit LOWERHYST:3;       /**< \brief [14:12] Temperature-sensing mode warning hysteresis (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit UPPER:12;          /**< \brief [27:16] DTS upper warning threshold (rw) */
    __IO Ifx_UReg_32Bit UPPERHYST:3;       /**< \brief [30:28] Temperature-sensing mode warning hysteresis (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_PMS_DTS_LIM1_Bits;

/** \brief Die Temperature Sensor Limit Register 2 */
typedef struct _Ifx_PMS_DTS_LIM2_Bits
{
    __IO Ifx_UReg_32Bit TSDLIMIT:12;       /**< \brief [11:0] Temperature shut down warning threshold (rw) */
    __IO Ifx_UReg_32Bit TSDHYST:3;         /**< \brief [14:12] Temperature-sensing mode warning hysteresis (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit TSDFILT:4;         /**< \brief [19:16] Temperature-sensing mode warning filter (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_PMS_DTS_LIM2_Bits;

/** \brief Die Temperature Sensor Status Register */
typedef struct _Ifx_PMS_DTS_STAT_Bits
{
    __I  Ifx_UReg_32Bit RESULT:12;         /**< \brief [11:0] DTS result (rh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [14:12] \internal Reserved */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __I  Ifx_UReg_32Bit PEAK:12;           /**< \brief [27:16] DTS peak temperature result (rh) */
    __I  Ifx_UReg_32Bit LLU:1;             /**< \brief [28:28] Low Temperature Warning (rh) */
    __I  Ifx_UReg_32Bit UOF:1;             /**< \brief [29:29] High Temperature Warning (rh) */
    __I  Ifx_UReg_32Bit TSD:1;             /**< \brief [30:30] Thermal Shutdown Warning (rh) */
    __I  Ifx_UReg_32Bit READY:1;           /**< \brief [31:31] Ready indicator (rh) */
} Ifx_PMS_DTS_STAT_Bits;

/** \brief EVRC SD Coefficient Register 0 (for SDFREQ = 0) */
typedef struct _Ifx_PMS_EVRC_COEFF0_Bits
{
    __IO Ifx_UReg_32Bit SMCK1:4;           /**< \brief [3:0] Proportional coefficient for the voltage error in SMC - SMCK1 (rw) */
    __IO Ifx_UReg_32Bit SMCK2:4;           /**< \brief [7:4] Coefficient for the estimated current in SMC - SMCK2 (rw) */
    __IO Ifx_UReg_32Bit SMCK3:4;           /**< \brief [11:8] Coefficient for the integrator in SMC - SMCK3 (rw) */
    __IO Ifx_UReg_32Bit SMCK2FRAC:2;       /**< \brief [13:12] Fractional coefficient for the estimated current in SMC - SMCK2FRAC (rw) */
    __IO Ifx_UReg_32Bit SMCK3FRAC:2;       /**< \brief [15:14] Fractional coefficient for the integrator in SMC - SMCK3FRAC (rw) */
    __IO Ifx_UReg_32Bit FBADCFREQDIV:2;    /**< \brief [17:16] Frequency division factor of the FBADC - FBADCFREQDIV (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [19:18] \internal Reserved */
    __IO Ifx_UReg_32Bit FBADCLPF:3;        /**< \brief [22:20] FBADC output filter coefficient - FBADCLPF (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [23:23] \internal Reserved */
    __IO Ifx_UReg_32Bit FFBLPF:3;          /**< \brief [26:24] Filter coefficient for voltage error - FFBLPF (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [27:27] \internal Reserved */
    __IO Ifx_UReg_32Bit SMCDRIFTKP:4;      /**< \brief [31:28] Proportional term for the drift compensation loop - SMCDRIFTKP (rw) */
} Ifx_PMS_EVRC_COEFF0_Bits;

/** \brief EVRC SD Coefficient Register 1 (for SDFREQ = 0) */
typedef struct _Ifx_PMS_EVRC_COEFF1_Bits
{
    __IO Ifx_UReg_32Bit SMCKRAMP:4;        /**< \brief [3:0] Artificial ramp coefficient - SMCKRAMP (rw) */
    __IO Ifx_UReg_32Bit SMCDRIFTKPFRAC:2;    /**< \brief [5:4] Fractional coefficient for the proportional term of the drift compensation loop - SMCDRIFTKPFRAC (rw) */
    __IO Ifx_UReg_32Bit SMCDRIFTMOD:2;     /**< \brief [7:6] Drift compensation mode - SMCDRIFTMOD (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [19:8] \internal Reserved */
    __IO Ifx_UReg_32Bit CURRESTLPF:3;      /**< \brief [22:20] FBADC output filter coefficient only used in the current estimator - CURRESTLPF (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [23:23] \internal Reserved */
    __IO Ifx_UReg_32Bit FFADCLPF:3;        /**< \brief [26:24] FFADC output filter coefficient - FFADCLPF (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [27:27] \internal Reserved */
    __IO Ifx_UReg_32Bit VERRLPF:3;         /**< \brief [30:28] FBADC output filter coefficient only used in the integrator - VERRLPF (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_PMS_EVRC_COEFF1_Bits;

/** \brief EVRC SD Coefficient Register 2 */
typedef struct _Ifx_PMS_EVRC_COEFF2_Bits
{
    __IO Ifx_UReg_32Bit DRV3V3PSTROFF:4;    /**< \brief [3:0] Strength Setting  Driver External PMOS (turn-off) - DRV3V3PSTROFF (rw) */
    __IO Ifx_UReg_32Bit DRV3V3PSTRON:4;    /**< \brief [7:4] Strength Setting  Driver External PMOS (turn-on) - DRV3V3PSTRON (rw) */
    __IO Ifx_UReg_32Bit DRV3V3PSTRCLAMP:4;    /**< \brief [11:8] Strength Setting  Driver External PMOS (clamping phase) - DRV3V3PSTRCLAMP (rw) */
    __IO Ifx_UReg_32Bit DRV3V3NSTROFF:4;    /**< \brief [15:12] Strength Setting  Driver External NMOS (turn-off) - DRV3V3NSTROFF (rw) */
    __IO Ifx_UReg_32Bit DRV3V3NSTRON:4;    /**< \brief [19:16] Strength Setting  Driver External NMOS (turn-on) - DRV3V3NSTRON (rw) */
    __IO Ifx_UReg_32Bit DRV3V3NSTRCLAMP:4;    /**< \brief [23:20] Strength Setting  Driver External NMOS (clamping phase) - DRV3V3NSTRCLAMP (rw) */
    __IO Ifx_UReg_32Bit DRV3V3NOVLFALL:4;    /**< \brief [27:24] Non-Overlapping Time (falling edge) between n-cmd and p-cmd - DRV3V3NOVLFALL (rw) */
    __IO Ifx_UReg_32Bit DRV3V3NOVLRISE:4;    /**< \brief [31:28] Non-Overlapping Time (rising edge) between n-cmd and p-cmd - DRV3V3NOVLRISE (rw) */
} Ifx_PMS_EVRC_COEFF2_Bits;

/** \brief EVRC SD Coefficient Register 3 */
typedef struct _Ifx_PMS_EVRC_COEFF3_Bits
{
    __IO Ifx_UReg_32Bit DRV5VPSTROFF:4;    /**< \brief [3:0] Strength Setting  Driver External PMOS (turn-off) - DRV5VPSTROFF (rw) */
    __IO Ifx_UReg_32Bit DRV5VPSTRON:4;     /**< \brief [7:4] Strength Setting  Driver External PMOS (turn-on) - DRV5VPSTRON (rw) */
    __IO Ifx_UReg_32Bit DRV5VPSTRCLAMP:4;    /**< \brief [11:8] Strength Setting  Driver External PMOS (clamping phase) - DRV5VPSTRCLAMP (rw) */
    __IO Ifx_UReg_32Bit DRV5VNSTROFF:4;    /**< \brief [15:12] Strength Setting  Driver External NMOS (turn-off) - DRV5VNSTROFF (rw) */
    __IO Ifx_UReg_32Bit DRV5VNSTRON:4;     /**< \brief [19:16] Strength Setting  Driver External NMOS (turn-on) - DRV5VNSTRON (rw) */
    __IO Ifx_UReg_32Bit DRV5VNSTRCLAMP:4;    /**< \brief [23:20] Strength Setting  Driver External NMOS (clamping phase) - DRV5VNSTRCLAMP (rw) */
    __IO Ifx_UReg_32Bit DRV5VNOVLFALL:4;    /**< \brief [27:24] Non-Overlapping Time (falling edge) between n-cmd and p-cmd - DRV5VNOVLFALL (rw) */
    __IO Ifx_UReg_32Bit DRV5VNOVLRISE:4;    /**< \brief [31:28] Non-Overlapping Time (rising edge) between n-cmd and p-cmd - DRV5VNOVLRISE (rw) */
} Ifx_PMS_EVRC_COEFF3_Bits;

/** \brief EVRC SD Coefficient Register 4 */
typedef struct _Ifx_PMS_EVRC_COEFF4_Bits
{
    __IO Ifx_UReg_32Bit DRVPCLAMPDEL:4;    /**< \brief [3:0] Delay for clamping external PMOS - DRVPCLAMPDEL (rw) */
    __IO Ifx_UReg_32Bit DRVNCLAMPDEL:4;    /**< \brief [7:4] Delay for clamping external NMOS - DRVNCLAMPDEL (rw) */
    __IO Ifx_UReg_32Bit DRVFFTHRES:4;      /**< \brief [11:8] Driver Feed-Forward Threshold - DRVFFTHRES (rw) */
    __IO Ifx_UReg_32Bit DRVFFHYS:4;        /**< \brief [15:12] Driver Feed-Forward Hysteresis - DRVFFHYS (rw) */
    __IO Ifx_UReg_32Bit MINTON:4;          /**< \brief [19:16] Minimum On Time During PWM Operation - MINTON (rw) */
    __IO Ifx_UReg_32Bit MINTOFF:4;         /**< \brief [23:20] Minimum Off Time During PWM Operation - MINTOFF (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PMS_EVRC_COEFF4_Bits;

/** \brief EVRC SD Coefficient Register 5 */
typedef struct _Ifx_PMS_EVRC_COEFF5_Bits
{
    __IO Ifx_UReg_32Bit DRV3V3PSTRBOOST:4;    /**< \brief [3:0] Strength Setting  Driver External PMOS (boost phase) - DRV3V3PSTRBOOST (rw) */
    __IO Ifx_UReg_32Bit DRV3V3NSTRBOOST:4;    /**< \brief [7:4] Strength Setting  Driver External NMOS (boost phase) - DRV3V3NSTRBOOST (rw) */
    __IO Ifx_UReg_32Bit DRV5VPSTRBOOST:4;    /**< \brief [11:8] Strength Setting  Driver External PMOS (boost phase) - DRV5VPSTRBOOST (rw) */
    __IO Ifx_UReg_32Bit DRV5VNSTRBOOST:4;    /**< \brief [15:12] Strength Setting  Driver External NMOS (boost phase) - DRV5VNSTRBOOST (rw) */
    __IO Ifx_UReg_32Bit DRVPBOOSTONDEL:2;    /**< \brief [17:16] Boosting-Time of external PMOS (turn-on) - DRVPBOOSTONDEL (rw) */
    __IO Ifx_UReg_32Bit DRVPBOOSTOFFDEL:2;    /**< \brief [19:18] Boosting-Time of external PMOS (turn-off) - DRVPBOOSTOFFDEL (rw) */
    __IO Ifx_UReg_32Bit DRVNBOOSTONDEL:2;    /**< \brief [21:20] Boosting-Time of external NMOS (turn-on) - DRVNBOOSTONDEL (rw) */
    __IO Ifx_UReg_32Bit DRVNBOOSTOFFDEL:2;    /**< \brief [23:22] Boosting-Time of external NMOS (turn-off) - DRVNBOOSTOFFDEL (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PMS_EVRC_COEFF5_Bits;

/** \brief EVRC Configuration Register 0 */
typedef struct _Ifx_PMS_EVRC_CON0_Bits
{
    __IO Ifx_UReg_32Bit SDVOUTSEL:9;       /**< \brief [8:0] EVRC Regulator Output Voltage Target Value - SDVOUTSEL (rw) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [30:9] \internal Reserved */
    __IO Ifx_UReg_32Bit UP:1;              /**< \brief [31:31] Update request for SMPS register values - UP (rw1sh) */
} Ifx_PMS_EVRC_CON0_Bits;

/** \brief EVRC Configuration Register 1 */
typedef struct _Ifx_PMS_EVRC_CON1_Bits
{
    __IO Ifx_UReg_32Bit SDFREQ:9;          /**< \brief [8:0] Regulator Switching Frequency (or oversampling factor in PWM mode) (rw) */
    __IO Ifx_UReg_32Bit SDFREQSPRD:8;      /**< \brief [16:9] Frequency Spreading Configuration - SDFREQSPRD (rw) */
    __IO Ifx_UReg_32Bit SYNCHYST:6;        /**< \brief [22:17] Lock Unlock Hysteresis Window - SYNCHYST (rw) */
    __IO Ifx_UReg_32Bit SYNCMAXDEV:7;      /**< \brief [29:23] Maximum Deviation of the Synchronization Input Frequency - SYNCMAXDEV (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_PMS_EVRC_CON1_Bits;

/** \brief EVRC Configuration Register 2 */
typedef struct _Ifx_PMS_EVRC_CON2_Bits
{
    __IO Ifx_UReg_32Bit SHHEN:1;           /**< \brief [0:0] Short-to-high detection enable (rw) */
    __IO Ifx_UReg_32Bit SHLEN:1;           /**< \brief [1:1] Short-to-low detection enable (rw) */
    __IO Ifx_UReg_32Bit SHOFFEN:1;         /**< \brief [2:2] Enable bit for EVRC switch-off upon short detection (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit SHHTHR:8;          /**< \brief [11:4] Short-to-high detection threshold (rw) */
    __IO Ifx_UReg_32Bit SHLTHR:8;          /**< \brief [19:12] Short-to-low detection threshold (rw) */
    __IO Ifx_UReg_32Bit SHHTIM:4;          /**< \brief [23:20] Timeout for short-to-high detection (rw) */
    __IO Ifx_UReg_32Bit SHLTIM:4;          /**< \brief [27:24] Timeout for short-to-low detection (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_PMS_EVRC_CON2_Bits;

/** \brief EVRC Configuration Register 3 */
typedef struct _Ifx_PMS_EVRC_CON3_Bits
{
    __IO Ifx_UReg_32Bit SYNCIN:1;          /**< \brief [0:0] EVRC Input Synchronization Enable - SYNCIN (rw) */
    __IO Ifx_UReg_32Bit SYNCOUT:1;         /**< \brief [1:1] EVRC DCDCSYNCO Output Synchronization Enable - SYNCOUT (rw) */
    __IO Ifx_UReg_32Bit SYNCMUXSEL:2;      /**< \brief [3:2] Synchronisation Input Multiplexer - SYNCMUXSEL (rw) */
    __IO Ifx_UReg_32Bit SYNCDIVFAC:3;      /**< \brief [6:4] Switching frequency division factor for external synchronisation - SYNCDIVFAC (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit VOLTOKTHR:4;       /**< \brief [11:8] Threshold Level for the Voltage OK Logic - VOLTOKTHR (rw) */
    __IO Ifx_UReg_32Bit VOLTOKLPF:2;       /**< \brief [13:12] Filter Coefficient for the Voltage OK Logic - VOLTOKLPF (rw) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_PMS_EVRC_CON3_Bits;

/** \brief EVRC Configuration Register 4 */
typedef struct _Ifx_PMS_EVRC_CON4_Bits
{
    __IO Ifx_UReg_32Bit SKPLSEN:1;         /**< \brief [0:0] Enable Skip Pulse Feature - SKPLSEN (rw) */
    __IO Ifx_UReg_32Bit RMPFFEN:1;         /**< \brief [1:1] Enable Feed-Forward Correction of Artificial Ramp Slope - RMPFFEN (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __IO Ifx_UReg_32Bit SKPLSTHR:4;        /**< \brief [7:4] Skip Pulse Threshold - SKPLSTHR (rw) */
    __IO Ifx_UReg_32Bit ZEROBIN:4;         /**< \brief [11:8] Zero-Bin Setting - ZEROBIN (rw) */
    __IO Ifx_UReg_32Bit INTGOFFS:4;        /**< \brief [15:12] Initial Offset of the Integrator - INTGOFFS (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_PMS_EVRC_CON4_Bits;

/** \brief EVRC Status Register 0 */
typedef struct _Ifx_PMS_EVRC_STAT0_Bits
{
    __I  Ifx_UReg_32Bit EVRC:1;            /**< \brief [0:0] EVRC Status - EVRC (rh) */
    __I  Ifx_UReg_32Bit SYNCLCK:1;         /**< \brief [1:1] EVRC Synchronization Input Locked status - SYNCLCK (rh) */
    __I  Ifx_UReg_32Bit EVRCSHLV:1;        /**< \brief [2:2] Short to ground - EVRCSHLV (rh) */
    __I  Ifx_UReg_32Bit EVRCSHHV:1;        /**< \brief [3:3] Short to supply - EVRCSHHV (rh) */
    __I  Ifx_UReg_32Bit VDDEXTDCLVL:1;     /**< \brief [4:4] VDDEXTDC External Supply Level Status - VDDEXTDCLVL (rh) */
    __I  Ifx_UReg_32Bit SDVOK:1;           /**< \brief [5:5] EVRC Regulator Voltage OK status - SDVOK (rh) */
    __I  Ifx_UReg_32Bit HWCFGEVRC0:1;      /**< \brief [6:6] EVRC Hardware Configuration Pin 0 status - HWCFGEVRC0 (rh) */
    __I  Ifx_UReg_32Bit HWCFGEVRC1:1;      /**< \brief [7:7] EVRC Hardware Configuration Pin 1 status - HWCFGEVRC1 (rh) */
    __I  Ifx_UReg_32Bit HWCFGEVRC2:1;      /**< \brief [8:8] EVRC Hardware Configuration Pin 2 status - HWCFGEVRC2 (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [15:9] \internal Reserved */
    __I  Ifx_UReg_32Bit SETPOINT:9;        /**< \brief [24:16] EVRC Target Output Voltage - SETPOINT (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_PMS_EVRC_STAT0_Bits;

/** \brief EVRC Status Register 1 */
typedef struct _Ifx_PMS_EVRC_STAT1_Bits
{
    __I  Ifx_UReg_32Bit FFADCV:12;         /**< \brief [11:0] Feed-forward ADC value, after the LPF - FFADCV (rh) */
    __I  Ifx_UReg_32Bit FBADCV:9;          /**< \brief [20:12] Feedback ADC value, after the LPF - FBADCV (rh) */
    __I  Ifx_UReg_32Bit DUTYCYCLE:9;       /**< \brief [29:21] DPWM Control Output Status - DUTYCYCLE (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_PMS_EVRC_STAT1_Bits;

/** \brief HPOSC Configuration Register 1 */
typedef struct _Ifx_PMS_HPOSCCON1_Bits
{
    __IO Ifx_UReg_32Bit OSCFTRIM:9;        /**< \brief [8:0] Back-up Clock Fine Trim Value - OSCFTRIM (rwh) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_PMS_HPOSCCON1_Bits;

/** \brief Identification Register */
typedef struct _Ifx_PMS_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module Number - MOD_NUM (r) */
} Ifx_PMS_ID_Bits;

/** \brief Interrupt Status Clear Register */
typedef struct _Ifx_PMS_INT_CLR_Bits
{
    __O  Ifx_UReg_32Bit RTCCMP0INTCLR:1;    /**< \brief [0:0] RTC CMP0 Interrupt indication flag clear - RTCCMP0INTCLR (w) */
    __O  Ifx_UReg_32Bit RTCCMP1INTCLR:1;    /**< \brief [1:1] RTC CMP1 Interrupt indication flag clear - RTCCMP1INTCLR (w) */
    __O  Ifx_UReg_32Bit WUTINTCLR:1;       /**< \brief [2:2] WUT Interrupt indication flag clear - WUTINTCLR (w) */
    __O  Ifx_UReg_32Bit ESR0INTCLR:1;      /**< \brief [3:3] ESR0 Interrupt indication flag clear - ESR0INTCLR (w) */
    __O  Ifx_UReg_32Bit ESR1INTCLR:1;      /**< \brief [4:4] ESR1 Interrupt indication flag clear - ESR1INTCLR (w) */
    __O  Ifx_UReg_32Bit ESR2INTCLR:1;      /**< \brief [5:5] ESR2 Interrupt indication flag clear - ESR2INTCLR (w) */
    __O  Ifx_UReg_32Bit PINAINTCLR:1;      /**< \brief [6:6] PINA Interrupt indication flag clear - PINAINTCLR (w) */
    __O  Ifx_UReg_32Bit PINBINTCLR:1;      /**< \brief [7:7] PINB Interrupt indication flag clear - PINBINTCLR (w) */
    __O  Ifx_UReg_32Bit PINCINTCLR:1;      /**< \brief [8:8] PINC Interrupt indication flag clear - PINCINTCLR (w) */
    __O  Ifx_UReg_32Bit PINSSBINTCLR:1;    /**< \brief [9:9] VDDEVRSB Pins Interrupt indication flag clear - PINSSBINTCLR (w) */
    __O  Ifx_UReg_32Bit PINSEXTINTCLR:1;    /**< \brief [10:10] VDDEXT Pins Interrupt indication flag clear - PINSEXTINTCLR (w) */
    __I  Ifx_UReg_32Bit :21;               /**< \brief [31:11] \internal Reserved */
} Ifx_PMS_INT_CLR_Bits;

/** \brief Interrupt Configuration Register 0 */
typedef struct _Ifx_PMS_INT_CON0_Bits
{
    __IO Ifx_UReg_32Bit OVVDDEVRSB:1;      /**< \brief [0:0] OVVDDEVRSB Interrupt Enable - OVVDDEVRSB (rw) */
    __IO Ifx_UReg_32Bit UVVDDEVRSB:1;      /**< \brief [1:1] UVVDDEVRSB Interrupt Enable - UVVDDEVRSB (rw) */
    __IO Ifx_UReg_32Bit OVVDDEXT:1;        /**< \brief [2:2] OVVDDEXT Interrupt Enable - OVVDDEXT (rw) */
    __IO Ifx_UReg_32Bit UVVDDEXT:1;        /**< \brief [3:3] UVVDDEXT Interrupt Enable - UVVDDEXT (rw) */
    __IO Ifx_UReg_32Bit OVVDDM:1;          /**< \brief [4:4] OVVDDM Interrupt Enable - OVVDDM (rw) */
    __IO Ifx_UReg_32Bit UVVDDM:1;          /**< \brief [5:5] UVVDDM Interrupt Enable - UVVDDM (rw) */
    __IO Ifx_UReg_32Bit OVVDDFLEX:1;       /**< \brief [6:6] OVVDDFLEX Interrupt Enable - OVVDDFLEX (rw) */
    __IO Ifx_UReg_32Bit UVVDDFLEX:1;       /**< \brief [7:7] UVVDDFLEX Interrupt Enable - UVVDDFLEX (rw) */
    __IO Ifx_UReg_32Bit OVVDD:1;           /**< \brief [8:8] OVVDD Interrupt Enable - OVVDD (rw) */
    __IO Ifx_UReg_32Bit UVVDD:1;           /**< \brief [9:9] UVVDD Interrupt Enable - UVVDD (rw) */
    __IO Ifx_UReg_32Bit OVVDDPMS0:1;       /**< \brief [10:10] OVVDDPMS0 Interrupt Enable - OVVDDPMS0 (rw) */
    __IO Ifx_UReg_32Bit UVVDDPMS0:1;       /**< \brief [11:11] UVVDDPMS0 Interrupt Enable - UVVDDPMS0 (rw) */
    __IO Ifx_UReg_32Bit OVVDDPMS1:1;       /**< \brief [12:12] OVVDDPMS1 Interrupt Enable - OVVDDPMS1 (rw) */
    __IO Ifx_UReg_32Bit UVVDDPMS1:1;       /**< \brief [13:13] UVVDDPMS1 Interrupt Enable - UVVDDPMS1 (rw) */
    __IO Ifx_UReg_32Bit OVVDDPMS2:1;       /**< \brief [14:14] OVVDDPMS2 Interrupt Enable - OVVDDPMS2 (rw) */
    __IO Ifx_UReg_32Bit UVVDDPMS2:1;       /**< \brief [15:15] UVVDDPMS2 Interrupt Enable - UVVDDPMS2 (rw) */
    __IO Ifx_UReg_32Bit OVVDDSBRAM:1;      /**< \brief [16:16] OVVDDSBRAM Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit UVVDDSBRAM:1;      /**< \brief [17:17] UVVDDSBRAM Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit OVVDDPAD:1;        /**< \brief [18:18] OVVDDPAD Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit UVVDDPAD:1;        /**< \brief [19:19] UVVDDPAD Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [21:20] \internal Reserved */
    __IO Ifx_UReg_32Bit OVVDDEXTDC:1;      /**< \brief [22:22] OVVDDEXTDC Interrupt Enable - OVVDDEXTDC (rw) */
    __IO Ifx_UReg_32Bit UVVDDEXTDC:1;      /**< \brief [23:23] UVVDDEXTDC Interrupt Enable - UVVDDEXTDC (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PMS_INT_CON0_Bits;

/** \brief Interrupt Configuration Register 1 */
typedef struct _Ifx_PMS_INT_CON1_Bits
{
    __IO Ifx_UReg_32Bit OVVDDPHPHY0:1;     /**< \brief [0:0] OVVDDPHPHY0 Interrupt Enable - OVVDDPHPHY0 (rw) */
    __IO Ifx_UReg_32Bit UVVDDPHPHY0:1;     /**< \brief [1:1] UVVDDPHPHY0 Interrupt Enable - UVVDDPHPHY0 (rw) */
    __IO Ifx_UReg_32Bit OVVDDPHPHY1:1;     /**< \brief [2:2] OVVDDPHPHY1 Interrupt Enable - OVVDDPHPHY1 (rw) */
    __IO Ifx_UReg_32Bit UVVDDPHPHY1:1;     /**< \brief [3:3] UVVDDPHPHY1 Interrupt Enable - UVVDDPHPHY1 (rw) */
    __IO Ifx_UReg_32Bit OVVDDPHPHY2:1;     /**< \brief [4:4] OVVDDPHPHY2 Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit UVVDDPHPHY2:1;     /**< \brief [5:5] UVVDDPHPHY2 Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit OVVDDHSIF:1;       /**< \brief [6:6] OVVDDHSIF Interrupt Enable - OVVDDHSIF (rw) */
    __IO Ifx_UReg_32Bit UVVDDHSIF:1;       /**< \brief [7:7] UVVDDHSIF Interrupt Enable - UVVDDHSIF (rw) */
    __IO Ifx_UReg_32Bit OVVDDPHY0:1;       /**< \brief [8:8] OVVDDPHY0 Interrupt Enable - OVVDDPHY0 (rw) */
    __IO Ifx_UReg_32Bit UVVDDPHY0:1;       /**< \brief [9:9] UVVDDPHY0 Interrupt Enable - UVVDDPHY0 (rw) */
    __IO Ifx_UReg_32Bit OVVDDPHY1:1;       /**< \brief [10:10] OVVDDPHY1 Interrupt Enable - OVVDDPHY1 (rw) */
    __IO Ifx_UReg_32Bit UVVDDPHY1:1;       /**< \brief [11:11] UVVDDPHY1 Interrupt Enable - UVVDDPHY1 (rw) */
    __IO Ifx_UReg_32Bit OVVDDPHY2:1;       /**< \brief [12:12] OVVDDPHY2 Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit UVVDDPHY2:1;       /**< \brief [13:13] UVVDDPHY2 Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit OVVDDCPUA:1;       /**< \brief [14:14] OVVDDCPUA Interrupt Enable - OVVDDCPUA (rw) */
    __IO Ifx_UReg_32Bit UVVDDCPUA:1;       /**< \brief [15:15] UVVDDCPUA Interrupt Enable - UVVDDCPUA (rw) */
    __IO Ifx_UReg_32Bit OVVDDCPUB:1;       /**< \brief [16:16] OVVDDCPUB Interrupt Enable - OVVDDCPUB (rw) */
    __IO Ifx_UReg_32Bit UVVDDCPUB:1;       /**< \brief [17:17] UVVDDCPUB Interrupt Enable - UVVDDCPUB (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [19:18] \internal Reserved */
    __IO Ifx_UReg_32Bit OVVDDPPU:1;        /**< \brief [20:20] OVVDDPPU Interrupt Enable - OVVDDPPU (rw) */
    __IO Ifx_UReg_32Bit UVVDDPPU:1;        /**< \brief [21:21] UVVDDPPU Interrupt Enable - UVVDDPPU (rw) */
    __IO Ifx_UReg_32Bit OVVDDLMU:1;        /**< \brief [22:22] OVVDDLMU Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit UVVDDLMU:1;        /**< \brief [23:23] UVVDDLMU Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PMS_INT_CON1_Bits;

/** \brief Interrupt Configuration Register 2 */
typedef struct _Ifx_PMS_INT_CON2_Bits
{
    __IO Ifx_UReg_32Bit RTCCMP0:1;         /**< \brief [0:0] RTC CMP0 Interrupt Enable - RTCCMP0 (rw) */
    __IO Ifx_UReg_32Bit RTCCMP1:1;         /**< \brief [1:1] RTC CMP1 Interrupt Enable - RTCCMP1 (rw) */
    __IO Ifx_UReg_32Bit WUTWKP:1;          /**< \brief [2:2] WUTWKP Interrupt Enable - WUTWKP (rw) */
    __IO Ifx_UReg_32Bit ESR0WKP:1;         /**< \brief [3:3] ESR0WKP Interrupt Enable - ESR0WKP (rw) */
    __IO Ifx_UReg_32Bit ESR1WKP:1;         /**< \brief [4:4] ESR1WKP Interrupt Enable - ESR1WKP (rw) */
    __IO Ifx_UReg_32Bit ESR2WKP:1;         /**< \brief [5:5] ESR2WKP Interrupt Enable - ESR2WKP (rw) */
    __IO Ifx_UReg_32Bit PINAWKP:1;         /**< \brief [6:6] PINAWKP Interrupt Enable - PINAWKP (rw) */
    __IO Ifx_UReg_32Bit PINBWKP:1;         /**< \brief [7:7] PINBWKP Interrupt Enable - PINBWKP (rw) */
    __IO Ifx_UReg_32Bit PINCWKP:1;         /**< \brief [8:8] PINCWKP Interrupt Enable - PINCWKP (rw) */
    __IO Ifx_UReg_32Bit PINSSBWKP:1;       /**< \brief [9:9] PINSSBWKP Interrupt Enable - PINSSBWKP (rw) */
    __IO Ifx_UReg_32Bit PINSEXTWKP:1;      /**< \brief [10:10] PINSEXTWKP Interrupt Enable - PINSEXTWKP (rw) */
    __IO Ifx_UReg_32Bit SCRINT0:1;         /**< \brief [11:11] SCRINT0 Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit SCRINT1:1;         /**< \brief [12:12] SCRINT1 Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit SCRRST:1;          /**< \brief [13:13] SCRRST Interrupt Enable - SCRRST (rw) */
    __IO Ifx_UReg_32Bit SCRECC:1;          /**< \brief [14:14] SCRECC Interrupt Enable - SCRECC (rw) */
    __IO Ifx_UReg_32Bit SCRWDT:1;          /**< \brief [15:15] SCRWDT Interrupt Enable - SCRWDT (rw) */
    __IO Ifx_UReg_32Bit SCRPINRST:1;       /**< \brief [16:16] SCRPINRST Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit DCDCVOK:1;         /**< \brief [17:17] SDVOK Interrupt Enable - DCDCVOK (rw) */
    __IO Ifx_UReg_32Bit DCDCSYNCLCK:1;     /**< \brief [18:18] EVRC SYNCLCK Interrupt Enable - DCDCSYNCLCK (rw) */
    __IO Ifx_UReg_32Bit VDDEXTDCLVL:1;     /**< \brief [19:19] VDDEXTDCLVL Interrupt Enable - VDDEXTDCLVL (rw) */
    __IO Ifx_UReg_32Bit FIFOFULL:1;        /**< \brief [20:20] FIFOFULL Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit FIFOEMPTY:1;       /**< \brief [21:21] FIFOEMPTY Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [31:22] \internal Reserved */
} Ifx_PMS_INT_CON2_Bits;

/** \brief Interrupt Status Register */
typedef struct _Ifx_PMS_INT_STAT_Bits
{
    __IO Ifx_UReg_32Bit RTCCMP0:1;         /**< \brief [0:0] RTC CMP0 Interrupt Flag - RTCCMP0 (rw1sh) */
    __IO Ifx_UReg_32Bit RTCCMP1:1;         /**< \brief [1:1] RTC CMP1 Interrupt Flag - RTCCMP1 (rw1sh) */
    __I  Ifx_UReg_32Bit WUTWKP:1;          /**< \brief [2:2] WUTWKP Interrupt Flag - WUTWKP (rh) */
    __I  Ifx_UReg_32Bit ESR0WKP:1;         /**< \brief [3:3] ESR0WKP Interrupt Flag - ESR0WKP (rh) */
    __I  Ifx_UReg_32Bit ESR1WKP:1;         /**< \brief [4:4] ESR1WKP Interrupt Flag - ESR1WKP (rh) */
    __I  Ifx_UReg_32Bit ESR2WKP:1;         /**< \brief [5:5] ESR2WKP Interrupt Flag - ESR2WKP (rh) */
    __I  Ifx_UReg_32Bit PINAWKP:1;         /**< \brief [6:6] PINAWKP Interrupt Flag - PINAWKP (rh) */
    __I  Ifx_UReg_32Bit PINBWKP:1;         /**< \brief [7:7] PINBWKP Interrupt Flag - PINBWKP (rh) */
    __I  Ifx_UReg_32Bit PINCWKP:1;         /**< \brief [8:8] PINCWKP Interrupt Flag - PINCWKP (rh) */
    __I  Ifx_UReg_32Bit PINSSBWKP:1;       /**< \brief [9:9] PINSSBWKP Interrupt Flag - PINSSBWKP (rh) */
    __I  Ifx_UReg_32Bit PINSEXTWKP:1;      /**< \brief [10:10] PINSEXTWKP Interrupt Flag - PINSEXTWKP (rh) */
    __I  Ifx_UReg_32Bit :21;               /**< \brief [31:11] \internal Reserved */
} Ifx_PMS_INT_STAT_Bits;

/** \brief Register to Store User Info in PMS1 Domain and Reset by LVDPMS1 */
typedef struct _Ifx_PMS_LVDPMS1USRINFO_Bits
{
    __IO Ifx_UReg_32Bit DATA:32;           /**< \brief [31:0] User data (rw) */
} Ifx_PMS_LVDPMS1USRINFO_Bits;

/** \brief OCDS Trigger Set Control 0 Register */
typedef struct _Ifx_PMS_OTSC0_Bits
{
    __IO Ifx_UReg_32Bit B0PMS:8;           /**< \brief [7:0] OTGB0 PMS trigger set selection (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit B1PMS:8;           /**< \brief [23:16] OTGB0 PMS trigger set selection (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PMS_OTSC0_Bits;

/** \brief OCDS Trigger Set Control 1 Register */
typedef struct _Ifx_PMS_OTSC1_Bits
{
    __IO Ifx_UReg_32Bit B0EVRC:4;          /**< \brief [3:0] OTGB0 EVRC trigger set selection (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __IO Ifx_UReg_32Bit B1EVRC:4;          /**< \brief [11:8] OTGB1 EVRC trigger set selection (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __IO Ifx_UReg_32Bit EVRCOUT:5;         /**< \brief [20:16] EVRC signal set selection (rw) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_PMS_OTSC1_Bits;

/** \brief OCDS Trigger Set Select Register */
typedef struct _Ifx_PMS_OTSS_Bits
{
    __IO Ifx_UReg_32Bit OTGB0:2;           /**< \brief [1:0] Trigger Set for OTGB0 - OTGB0 (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [7:2] \internal Reserved */
    __IO Ifx_UReg_32Bit OTGB1:2;           /**< \brief [9:8] Trigger Set for OTGB1 - OTGB1 (rw) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_PMS_OTSS_Bits;

/** \brief Pad Configuration Register */
typedef struct _Ifx_PMS_PAD_CON_Bits
{
    __IO Ifx_UReg_32Bit ALLTRIST:1;        /**< \brief [0:0] Tristate Enable for all Pads - ALLTRIST (rwh) */
    __O  Ifx_UReg_32Bit ALLTRIST_P:1;      /**< \brief [1:1] Bit Protection for ALLTRIST - ALLTRIST_P (w) */
    __IO Ifx_UReg_32Bit SBTRIST:1;         /**< \brief [2:2] Tristate Enable for Standby Pads - SBTRIST (rwh) */
    __O  Ifx_UReg_32Bit SBTRIST_P:1;       /**< \brief [3:3] Bit Protection for SBTRIST - SBTRIST_P (w) */
    __IO Ifx_UReg_32Bit ESR0PD:1;          /**< \brief [4:4] ESR0 Pull-Down Enable - ESR0PD (rw) */
    __IO Ifx_UReg_32Bit ESR2WKPRUNPD:1;    /**< \brief [5:5] ESR2 is Pulled Down in Case of STBY to RUN Transition - ESR2WKPRUNPD (rw) */
    __IO Ifx_UReg_32Bit PORSTDFEN:2;       /**< \brief [7:6] PORST Digital Filter Enable - PORSTDFEN (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_PMS_PAD_CON_Bits;

/** \brief ESR2 Pad Configuration Register */
typedef struct _Ifx_PMS_PAD_ESR2CON_Bits
{
    __IO Ifx_UReg_32Bit ESR2ROEN:1;        /**< \brief [0:0] ESR Reset Output Elongation in Case of Warm PORST Enabled. - ESR2ROEN (rw) */
    __IO Ifx_UReg_32Bit ESR2ROAPP:1;       /**< \brief [1:1] ESR Reset Output Elongation in Case of Application Enabled. - ESR2ROEN (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [15:2] \internal Reserved */
    __IO Ifx_UReg_32Bit RSTECNT:12;        /**< \brief [27:16] Reload Value for Reset and ESR2 Output Elongation Counter (rw) */
    __IO Ifx_UReg_32Bit CLKDIV:4;          /**< \brief [31:28] Clock divider for 100MHz base clock (rw) */
} Ifx_PMS_PAD_ESR2CON_Bits;

/** \brief Pad Status Register */
typedef struct _Ifx_PMS_PAD_STAT_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __I  Ifx_UReg_32Bit HWCFG1:1;          /**< \brief [1:1] Hardware Configuration Pin 1 status - HWCFG1 (rh) */
    __I  Ifx_UReg_32Bit HWCFG2:1;          /**< \brief [2:2] Hardware Configuration Pin 2 status - HWCFG2 (rh) */
    __I  Ifx_UReg_32Bit HWCFG3:1;          /**< \brief [3:3] Hardware Configuration Pin 3 status - HWCFG3 (rh) */
    __I  Ifx_UReg_32Bit HWCFG4:1;          /**< \brief [4:4] Hardware Configuration Pin 4 status - HWCFG4 (rh) */
    __I  Ifx_UReg_32Bit HWCFG5:1;          /**< \brief [5:5] Hardware Configuration Pin 5 status - HWCFG5 (rh) */
    __I  Ifx_UReg_32Bit ALLTRIST:1;        /**< \brief [6:6] Pad Tristate / Pull-up status - ALLTRIST (rh) */
    __I  Ifx_UReg_32Bit SBTRIST:1;         /**< \brief [7:7] Standby Pad Tristate / Pull-up status - SBTRIST (rh) */
    __I  Ifx_UReg_32Bit TESTMODE:1;        /**< \brief [8:8] TESTMODE Pin status - TESTMODE (rh) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_PMS_PAD_STAT_Bits;

/** \brief Power Domain Configuration Register 0 */
typedef struct _Ifx_PMS_PD_CON0_Bits
{
    __IO Ifx_UReg_32Bit CPUAPDEN:1;        /**< \brief [0:0] Enable to Power Down CPUA Power Domain (Power Down Enable) - CPUAPDEN (rw) */
    __O  Ifx_UReg_32Bit CPUAPDEN_P:1;      /**< \brief [1:1] Bit Protection for CPUAPDEN - CPUAPDEN_P (w) */
    __IO Ifx_UReg_32Bit CPUBPDEN:1;        /**< \brief [2:2] Enable to Power Down CPUB Power Domain (Power Down Enable) - CPUBPDEN (rw) */
    __O  Ifx_UReg_32Bit CPUBPDEN_P:1;      /**< \brief [3:3] Bit Protection for CPUBPDEN - CPUBPDEN_P (w) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [5:4] \internal Reserved */
    __IO Ifx_UReg_32Bit PPUPDEN:1;         /**< \brief [6:6] Enable to Power Down PPU Power Domain (Power Down Enable) - PPUPDEN (rw) */
    __O  Ifx_UReg_32Bit PPUPDEN_P:1;       /**< \brief [7:7] Bit Protection for PPUPDEN - PPUPDEN_P (w) */
    __IO Ifx_UReg_32Bit EMEMAPDEN:1;       /**< \brief [8:8] Enable to Power Down EMEMA Power Domain (Power Down Enable) - EMEMAPDEN (rw) */
    __O  Ifx_UReg_32Bit EMEMAPDEN_P:1;     /**< \brief [9:9] Bit Protection for EMEMAPDEN - EMEMAPDEN_P (w) */
    __IO Ifx_UReg_32Bit EMEMBPDEN:1;       /**< \brief [10:10] Enable to Power Down EMEMB Power Domain (Power Down Enable) - EMEMBPDEN (rw) */
    __O  Ifx_UReg_32Bit EMEMBPDEN_P:1;     /**< \brief [11:11] Bit Protection for EMEMBPDEN - EMEMBPDEN_P (w) */
    __IO Ifx_UReg_32Bit EMEMCPDEN:1;       /**< \brief [12:12] Enable to Power Down EMEMC Power Domain (Power Down Enable) - EMEMCPDEN (rw) */
    __O  Ifx_UReg_32Bit EMEMCPDEN_P:1;     /**< \brief [13:13] Bit Protection for EMEMCPDEN - EMEMCPDEN_P (w) */
    __IO Ifx_UReg_32Bit EMEMDPDEN:1;       /**< \brief [14:14] Enable to Power Down EMEMD Power Domain (Power Down Enable) - EMEMDPDEN (rw) */
    __O  Ifx_UReg_32Bit EMEMDPDEN_P:1;     /**< \brief [15:15] Bit Protection for EMEMDPDEN - EMEMDPDEN_P (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [16:16] \internal Reserved */
    __IO Ifx_UReg_32Bit CLKCPU:3;          /**< \brief [19:17] CPU power switch rate clock divider - CLKCPU (rw) */
    __IO Ifx_UReg_32Bit CLKPPU:3;          /**< \brief [22:20] PPU power switch rate clock divider - CLKPPU (rw) */
    __IO Ifx_UReg_32Bit CLKEMEM:3;         /**< \brief [25:23] EMEM power switch rate clock divider - CLKEMEM (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_PMS_PD_CON0_Bits;

/** \brief Power Domain Configuration Register 1 */
typedef struct _Ifx_PMS_PD_CON1_Bits
{
    __IO Ifx_UReg_32Bit CPUAOFFREQ:1;      /**< \brief [0:0] Request CPUA Power Domain Switch Off - CPUAOFFREQ (rw) */
    __O  Ifx_UReg_32Bit CPUAOFFREQ_P:1;    /**< \brief [1:1] Bit Protection for CPUAOFFREQ - CPUAOFFREQ_P (w) */
    __IO Ifx_UReg_32Bit CPUBOFFREQ:1;      /**< \brief [2:2] Request CPUB Power Domain Switch Off - CPUBOFFREQ (rw) */
    __O  Ifx_UReg_32Bit CPUBOFFREQ_P:1;    /**< \brief [3:3] Bit Protection for CPUBOFFREQ - CPUBOFFREQ_P (w) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [5:4] \internal Reserved */
    __IO Ifx_UReg_32Bit PPUOFFREQ:1;       /**< \brief [6:6] Request PPU Power Domain Switch Off - PPUOFFREQ (rw) */
    __O  Ifx_UReg_32Bit PPUOFFREQ_P:1;     /**< \brief [7:7] Bit Protection for PPUOFFREQ - PPUOFFREQ_P (w) */
    __IO Ifx_UReg_32Bit EMEMAOFFREQ:1;     /**< \brief [8:8] Request EMEMA Power Domain Switch Off - EMEMAOFFREQ (rw) */
    __O  Ifx_UReg_32Bit EMEMAOFFREQ_P:1;    /**< \brief [9:9] Bit Protection for EMEMAOFFREQ - EMEMAOFFREQ_P (w) */
    __IO Ifx_UReg_32Bit EMEMBOFFREQ:1;     /**< \brief [10:10] Request EMEMB Power Domain Switch Off - EMEMBOFFREQ (rw) */
    __O  Ifx_UReg_32Bit EMEMBOFFREQ_P:1;    /**< \brief [11:11] Bit Protection for EMEMBOFFREQ - EMEMBOFFREQ_P (w) */
    __IO Ifx_UReg_32Bit EMEMCOFFREQ:1;     /**< \brief [12:12] Request EMEMC Power Domain Switch Off - EMEMCOFFREQ (rw) */
    __O  Ifx_UReg_32Bit EMEMCOFFREQ_P:1;    /**< \brief [13:13] Bit Protection for EMEMCOFFREQ - EMEMCOFFREQ_P (w) */
    __IO Ifx_UReg_32Bit EMEMDOFFREQ:1;     /**< \brief [14:14] Request EMEMD Power Domain Switch Off - EMEMDOFFREQ (rw) */
    __O  Ifx_UReg_32Bit EMEMDOFFREQ_P:1;    /**< \brief [15:15] Bit Protection for EMEMDOFFREQ - EMEMDOFFREQ_P (w) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_PMS_PD_CON1_Bits;

/** \brief Power Domain Status Register 0 */
typedef struct _Ifx_PMS_PD_STAT0_Bits
{
    __I  Ifx_UReg_32Bit CPUAREQ:1;         /**< \brief [0:0] CPUA power domain switch off was requested after last cold PORST - CPUAREQ (rh) */
    __I  Ifx_UReg_32Bit CPUASWSTAT:1;      /**< \brief [1:1] CPUA Switch Status - CPUASWSTAT (rh) */
    __I  Ifx_UReg_32Bit CPUBREQ:1;         /**< \brief [2:2] CPUB power domain switch off was requested after last cold PORST - CPUBREQ (rh) */
    __I  Ifx_UReg_32Bit CPUBSWSTAT:1;      /**< \brief [3:3] CPUB Switch Status - CPUBSWSTAT (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [5:4] \internal Reserved */
    __I  Ifx_UReg_32Bit PPUREQ:1;          /**< \brief [6:6] PPU power domain switch off was requested after last cold PORST - PPUREQ (rh) */
    __I  Ifx_UReg_32Bit PPUSWSTAT:1;       /**< \brief [7:7] PPU Switch Status - PPUSWSTAT (rh) */
    __I  Ifx_UReg_32Bit EMEMAREQ:1;        /**< \brief [8:8] EMEMA power domain switch off was requested after last cold PORST - EMEMAREQ (rh) */
    __I  Ifx_UReg_32Bit EMEMASWSTAT:1;     /**< \brief [9:9] EMEMA Switch Status - EMEMASWSTAT (rh) */
    __I  Ifx_UReg_32Bit EMEMBREQ:1;        /**< \brief [10:10] EMEMB power domain switch off was requested after last cold PORST - EMEMBREQ (rh) */
    __I  Ifx_UReg_32Bit EMEMBSWSTAT:1;     /**< \brief [11:11] EMEMB Switch Status - EMEMBSWSTAT (rh) */
    __I  Ifx_UReg_32Bit EMEMCREQ:1;        /**< \brief [12:12] EMEMC power domain switch off was requested after last cold PORST - EMEMCREQ (rh) */
    __I  Ifx_UReg_32Bit EMEMCSWSTAT:1;     /**< \brief [13:13] EMEMC Switch Status - EMEMCSWSTAT (rh) */
    __I  Ifx_UReg_32Bit EMEMDREQ:1;        /**< \brief [14:14] EMEMD power domain switch off was requested after last cold PORST - EMEMDREQ (rh) */
    __I  Ifx_UReg_32Bit EMEMDSWSTAT:1;     /**< \brief [15:15] EMEMD Switch Status - EMEMDSWSTAT (rh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_PMS_PD_STAT0_Bits;

/** \brief Resource Protection Register */
typedef struct _Ifx_PMS_PROT_PMS_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual Machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual Machine definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection Set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection Set definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_PMS_PROT_PMS_Bits;

/** \brief  */
typedef struct _Ifx_PMS_PVDCON_Bits
{
    __IO Ifx_UReg_32Bit ENABLE:1;          /**< \brief [0:0] Enable/Disable Peak Voltage Detection for Respective Supply - ENABLE (rw) */
    __IO Ifx_UReg_32Bit THRESHOLD:11;      /**< \brief [11:1] Threshold Value Configured by SW for Peak Voltage Detection - THRESHOLD (rw) */
    __IO Ifx_UReg_32Bit LPFENABLE:1;       /**< \brief [12:12] Enable/Disable the Low-Pass Filtering of the recorded peak values - ENABLE (rw) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [30:13] \internal Reserved */
    __O  Ifx_UReg_32Bit RESET:1;           /**< \brief [31:31] SW Reset Bit for Peak Voltage Detection - RESET (w) */
} Ifx_PMS_PVDCON_Bits;

/** \brief  */
typedef struct _Ifx_PMS_PVDHISTSTAT_Bits
{
    __I  Ifx_UReg_32Bit PEAKVOLT:11;       /**< \brief [10:0] Peak Voltage Detected Value - PEAKVOLT (rh) */
    __I  Ifx_UReg_32Bit THRESCOUNT:21;     /**< \brief [31:11] Detected Sample Count Above Configured Threshold Value - THRESCOUNT (rh) */
} Ifx_PMS_PVDHISTSTAT_Bits;

/** \brief  */
typedef struct _Ifx_PMS_PVDSTAT_Bits
{
    __I  Ifx_UReg_32Bit PEAKVOLT:11;       /**< \brief [10:0] Peak Voltage Detected Value - PEAKVOLT (rh) */
    __I  Ifx_UReg_32Bit THRESCOUNT:21;     /**< \brief [31:11] Detected Sample Count Above Configured Threshold Value - THRESCOUNT (rh) */
} Ifx_PMS_PVDSTAT_Bits;

/** \brief Register Access Status Register */
typedef struct _Ifx_PMS_REGACCSTAT_Bits
{
    __I  Ifx_UReg_32Bit FIFOFULL:1;        /**< \brief [0:0] RAI FIFO Full Status - FIFOFULL (rh) */
    __I  Ifx_UReg_32Bit FIFOEMPTY:1;       /**< \brief [1:1] RAI FIFO Empty Status - FIFOEMPTY (rh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_PMS_REGACCSTAT_Bits;

/** \brief RTC Compare Register 0 */
typedef struct _Ifx_PMS_RTC_CMP0_Bits
{
    __IO Ifx_UReg_32Bit CMPVAL0:32;        /**< \brief [31:0] Compare Value [31:0] - CMPVAL0 (rw) */
} Ifx_PMS_RTC_CMP0_Bits;

/** \brief RTC Compare Register 1 */
typedef struct _Ifx_PMS_RTC_CMP1_Bits
{
    __IO Ifx_UReg_32Bit CMPVAL1:32;        /**< \brief [31:0] Compare Value [63:32] - CMPVAL1 (rwh) */
} Ifx_PMS_RTC_CMP1_Bits;

/** \brief RTC Configuration Register 0 */
typedef struct _Ifx_PMS_RTC_CON0_Bits
{
    __IO Ifx_UReg_32Bit RTCOSCEN:1;        /**< \brief [0:0] RTC Oscillator Enable (rw) */
    __IO Ifx_UReg_32Bit REGEN:1;           /**< \brief [1:1] Amplitude Regulation (rw) */
    __IO Ifx_UReg_32Bit GAINSEL:2;         /**< \brief [3:2] Gain Control (rw) */
    __IO Ifx_UReg_32Bit HYSEN:1;           /**< \brief [4:4] Hysteresis Enable (rw) */
    __IO Ifx_UReg_32Bit RTCCLKSEL:1;       /**< \brief [5:5] Clock Source Selection (rwh) */
    __IO Ifx_UReg_32Bit RTCEN:1;           /**< \brief [6:6] Clock Enable for RTC Digital Module (rw) */
    __IO Ifx_UReg_32Bit RTCOUTSEL:2;       /**< \brief [8:7] RTC Output to Pins and Timers (rw) */
    __IO Ifx_UReg_32Bit RTCWKPSEL:1;       /**< \brief [9:9] RTC Wakeup Selection (rw) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_PMS_RTC_CON0_Bits;

/** \brief RTC Configuration Register 1 */
typedef struct _Ifx_PMS_RTC_CON1_Bits
{
    __IO Ifx_UReg_32Bit DIV:16;            /**< \brief [15:0] Clock Divider - DIV (rw) */
    __IO Ifx_UReg_32Bit OFFSET:16;         /**< \brief [31:16] Signed Offset Value - OFFSET (rwh) */
} Ifx_PMS_RTC_CON1_Bits;

/** \brief RTC Configuration Register 2 */
typedef struct _Ifx_PMS_RTC_CON2_Bits
{
    __IO Ifx_UReg_32Bit MSIZE0:5;          /**< \brief [4:0] Compare Register Size for CMP0 - MSIZE0 (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit MSTART0:5;         /**< \brief [12:8] Start Bit Location for CMP0 - MSTART0 (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __IO Ifx_UReg_32Bit MSIZE1:5;          /**< \brief [20:16] Compare Register Size for CMP1 - MSIZE1 (rwh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit MSTART1:5;         /**< \brief [28:24] Start Bit Location for CMP1 - MSTART1 (rwh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_PMS_RTC_CON2_Bits;

/** \brief RTC Timer Counter Register 0 */
typedef struct _Ifx_PMS_RTC_TIM0_Bits
{
    __I  Ifx_UReg_32Bit TIMER:32;          /**< \brief [31:0] Timer[31:0] - TIMER (rh) */
} Ifx_PMS_RTC_TIM0_Bits;

/** \brief RTC Timer Capture Register */
typedef struct _Ifx_PMS_RTC_TIM1CAP_Bits
{
    __I  Ifx_UReg_32Bit TIMER:32;          /**< \brief [31:0] Timer[63:32] - TIMER (rh) */
} Ifx_PMS_RTC_TIM1CAP_Bits;

/** \brief SCR Configuration Register 0 */
typedef struct _Ifx_PMS_SCR_CON0_Bits
{
    __IO Ifx_UReg_32Bit SCREN:1;           /**< \brief [0:0] Standby Controller Enable request - SCREN (rw) */
    __O  Ifx_UReg_32Bit SCREN_P:1;         /**< \brief [1:1] Standby Controller Reset request enable - SCREN_P (w) */
    __IO Ifx_UReg_32Bit PORSTREQ:1;        /**< \brief [2:2] SCR Reset behavior on warm PORST in Normal RUN / SLEEP mode - PORSTREQ (rw) */
    __O  Ifx_UReg_32Bit PORSTREQ_P:1;      /**< \brief [3:3] Bit Protection for PORSTREQ - PORSTREQ_P (w) */
    __IO Ifx_UReg_32Bit SCRCLKSEL:1;       /**< \brief [4:4] Default Clock selection on Standby Mode Entry - SCRCLKSEL (rw) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [15:5] \internal Reserved */
    __IO Ifx_UReg_32Bit SCRCFG:3;          /**< \brief [18:16] Hardware configuration of the 8 bit SCR controller. - SCRCFG (rw) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [31:19] \internal Reserved */
} Ifx_PMS_SCR_CON0_Bits;

/** \brief SCR Configuration Register 1 */
typedef struct _Ifx_PMS_SCR_CON1_Bits
{
    __IO Ifx_UReg_32Bit TCINT:8;           /**< \brief [7:0] Data exchange from PMS main domain to Standby Controller - TCINT (rw) */
    __IO Ifx_UReg_32Bit TCINTREQ:1;        /**< \brief [8:8] SW Interrupt request from PMS to Standby Controller - TCINTREQ (rwh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [15:9] \internal Reserved */
    __IO Ifx_UReg_32Bit SCRSTREQ:1;        /**< \brief [16:16] Standby Controller Reset request - SCRSTREQ (rwh) */
    __O  Ifx_UReg_32Bit SCRSTREQ_P:1;      /**< \brief [17:17] Standby Controller Reset request enable - SCRSTREQ_P (w) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_PMS_SCR_CON1_Bits;

/** \brief SCR Status Register */
typedef struct _Ifx_PMS_SCR_STAT_Bits
{
    __I  Ifx_UReg_32Bit SCRINT:8;          /**< \brief [7:0] Data exchange from Standby Controller to PMS main domain - SCRINT (rh) */
    __IO Ifx_UReg_32Bit SCRECC:1;          /**< \brief [8:8] SCR RAM ECC error / reset flag - SCRECC (rw0ch) */
    __IO Ifx_UReg_32Bit SCRWDT:1;          /**< \brief [9:9] SCR Watchdog Timer error / reset flag - SCRWDT (rw0ch) */
    __IO Ifx_UReg_32Bit SCRPINRST:1;       /**< \brief [10:10] SCR pin reset flag (rw0ch) */
    __IO Ifx_UReg_32Bit SCRRST:1;          /**< \brief [11:11] SCR Software reset flag - SCRRST (rw0ch) */
    __IO Ifx_UReg_32Bit SCRST:1;           /**< \brief [12:12] Standby Controller Reset Indication flag - SCRST (rw0ch) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_PMS_SCR_STAT_Bits;

/** \brief Standby Configuration Register 0 */
typedef struct _Ifx_PMS_STANDBY_CON0_Bits
{
    __IO Ifx_UReg_32Bit SCRSTBY0EN:1;      /**< \brief [0:0] Enable that SCR can trigger a transition from STBY1 to STBY0 - SCRSTBY0EN (rw) */
    __IO Ifx_UReg_32Bit VDDEXTSBEN:1;      /**< \brief [1:1] Standby Entry on VDDEXT Supply ramp-down - VDDEXTSBEN (rw) */
    __IO Ifx_UReg_32Bit ESR2DFEN:1;        /**< \brief [2:2] ESR2 Digital Filter Enable - ESR2DFEN (rw) */
    __IO Ifx_UReg_32Bit VDDEXTDCPWRDN:1;    /**< \brief [3:3] Enable powering down of VDDEXTDC during standby modes (rw) */
    __IO Ifx_UReg_32Bit ESR2SBEN:1;        /**< \brief [4:4] Standby Entry on ESR2 Trigger (rw) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [15:5] \internal Reserved */
    __IO Ifx_UReg_32Bit SBRAMSEL:8;        /**< \brief [23:16] Standby RAM supply in Standby Mode - SBRAMSEL (rw) */
    __IO Ifx_UReg_32Bit SCRRAMSEL:1;       /**< \brief [24:24] SCR RAM Supply in STANDBY0 Mode - SCRRAMSEL (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_PMS_STANDBY_CON0_Bits;

/** \brief Standby Configuration Register 1 */
typedef struct _Ifx_PMS_STANDBY_CON1_Bits
{
    __IO Ifx_UReg_32Bit SBMODSEL:1;        /**< \brief [0:0] Standby Mode Selection: STDBY0 or STBY1 State - SBMODSEL (rw) */
    __IO Ifx_UReg_32Bit VDDSBEN:1;         /**< \brief [1:1] Standby Entry on VDD Supply ramp-down - VDDSBEN (rw) */
    __IO Ifx_UReg_32Bit SWESRSBEN:1;       /**< \brief [2:2] Standby Entry Allowed by STBEV SW Trigger on ESR Events - SWESRSBEN (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_PMS_STANDBY_CON1_Bits;

/** \brief Voltage ID (VID) Configuration Register */
typedef struct _Ifx_PMS_VID_CON_Bits
{
    __IO Ifx_UReg_32Bit IDDLEAK:16;        /**< \brief [15:0] Leakage current at 127\xb0C (rw) */
    __IO Ifx_UReg_32Bit VDDNOM:9;          /**< \brief [24:16] Nominal VDD voltage level (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_PMS_VID_CON_Bits;

/** \brief  */
typedef struct _Ifx_PMS_VMONPCON_Bits
{
    __IO Ifx_UReg_32Bit UVVAL:11;          /**< \brief [10:0] Primary Monitor Alarm Under-Voltage Threshold - UVVAL (rw) */
    __IO Ifx_UReg_32Bit UVENABLE:1;        /**< \brief [11:11] Primary Monitor Under-Voltage Alarm Enable - UVENABLE (rw) */
    __IO Ifx_UReg_32Bit FILTER:5;          /**< \brief [16:12] Primary Monitor Alarm Spike Filter - FILTER (rw) */
    __IO Ifx_UReg_32Bit OVVAL:11;          /**< \brief [27:17] Primary Monitor Alarm Over-Voltage Threshold - OVVAL (rw) */
    __IO Ifx_UReg_32Bit OVENABLE:1;        /**< \brief [28:28] Primary Monitor Over-Voltage Alarm Enable - OVENABLE (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_PMS_VMONPCON_Bits;

/** \brief  */
typedef struct _Ifx_PMS_VMONPRST_Bits
{
    __IO Ifx_UReg_32Bit RESETTRIM:11;      /**< \brief [10:0] Supply Reset Trim Value - RESETTRIM (rw) */
    __IO Ifx_UReg_32Bit RESETPTRIM:4;      /**< \brief [14:11] Signed Reset Trim Value - RESETPTRIM (rw) */
    __IO Ifx_UReg_32Bit RESETHYS:8;        /**< \brief [22:15] Supply Reset Hysteresis Trim Value - RESETHYS (rw) */
    __IO Ifx_UReg_32Bit RESETHYSEN:1;      /**< \brief [23:23] Reset Release Hysteresis Enable - RESETHYSEN (rw) */
    __IO Ifx_UReg_32Bit RESETOFF:1;        /**< \brief [24:24] Reset Enable - RESETOFF (rw) */
    __O  Ifx_UReg_32Bit RESETOFF_P:1;      /**< \brief [25:25] RESETOFF Bit Protection - RESETOFF_P (w) */
    __IO Ifx_UReg_32Bit LPF:2;             /**< \brief [27:26] Primary Monitor Reset LPF Coefficient - LPF (rw) */
    __IO Ifx_UReg_32Bit FILTER:4;          /**< \brief [31:28] Primary Monitor Reset Spike Filter - FILTER (rw) */
} Ifx_PMS_VMONPRST_Bits;

/** \brief  */
typedef struct _Ifx_PMS_VMONPSTAT_Bits
{
    __I  Ifx_UReg_32Bit RESULT:11;         /**< \brief [10:0] Primary Monitor ADC Conversion Result - RESULT (rh) */
    __I  Ifx_UReg_32Bit OV:1;              /**< \brief [11:11] Primary Monitor Over-Voltage Event Flag - OV (rh) */
    __I  Ifx_UReg_32Bit UV:1;              /**< \brief [12:12] Primary Monitor Under-Voltage Event Flag - UV (rh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __I  Ifx_UReg_32Bit RESETVAL:11;       /**< \brief [26:16] Supply Reset Value Status - RESETVAL (rh) */
    __I  Ifx_UReg_32Bit RESETOFF:1;        /**< \brief [27:27] Reset Enable Status - RESETOFF (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_PMS_VMONPSTAT_Bits;

/** \brief Power Domain Cold Reset Configuration Register */
typedef struct _Ifx_PMS_VMONP_VDDCLDRST_Bits
{
    __IO Ifx_UReg_32Bit VDDPDCLDUV:11;     /**< \brief [10:0] Hard PD Reset Generation Level (rw) */
    __IO Ifx_UReg_32Bit VDDPDCLDOFF:1;     /**< \brief [11:11] Reset disable bit for test and debug purpose (rw) */
    __O  Ifx_UReg_32Bit VDDPDCLDOFF_P:1;    /**< \brief [12:12] Bit Protection for VDDPDCLDOFF (w) */
    __IO Ifx_UReg_32Bit FILTER:5;          /**< \brief [17:13] Primary Monitor Reset Spike Filter (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_PMS_VMONP_VDDCLDRST_Bits;

/** \brief  */
typedef struct _Ifx_PMS_VMONSCON_Bits
{
    __IO Ifx_UReg_32Bit UVVAL:11;          /**< \brief [10:0] Secondary Monitor Under-Voltage Threshold - UVVAL (rw) */
    __IO Ifx_UReg_32Bit UVMOD:2;           /**< \brief [12:11] Under-Voltage Monitoring Mode - UVMOD (rw) */
    __IO Ifx_UReg_32Bit OVVAL:11;          /**< \brief [23:13] Secondary Monitor Over-Voltage Threshold - OVVAL (rw) */
    __IO Ifx_UReg_32Bit OVMOD:2;           /**< \brief [25:24] Over-Voltage Monitoring Mode - OVMOD (rw) */
    __IO Ifx_UReg_32Bit FILTER:4;          /**< \brief [29:26] Secondary ADC Supply Filter - FILTER (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_PMS_VMONSCON_Bits;

/** \brief  */
typedef struct _Ifx_PMS_VMONSSTAT_Bits
{
    __I  Ifx_UReg_32Bit RESULT:11;         /**< \brief [10:0] Secondary ADC Conversion Result (Unfiltered) - RESULT (rh) */
    __I  Ifx_UReg_32Bit OV:1;              /**< \brief [11:11] Secondary Monitor Over-Voltage Event Flag After Filtering - OV (rh) */
    __I  Ifx_UReg_32Bit UV:1;              /**< \brief [12:12] Secondary Monitor Under-Voltage Event Flag After Filtering - UV (rh) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [25:13] \internal Reserved */
    __I  Ifx_UReg_32Bit ACTIVITY:6;        /**< \brief [31:26] Secondary Monitor Activity Counter - ACTIVITY (rh) */
} Ifx_PMS_VMONSSTAT_Bits;

/** \brief Secondary Monitor Level Selection Register */
typedef struct _Ifx_PMS_VMONS_LVLSEL_Bits
{
    __IO Ifx_UReg_32Bit VDDMLVLSEL:9;      /**< \brief [8:0] VDDM Level Select - VDDMLVLSEL (rw) */
    __IO Ifx_UReg_32Bit VDDEXTLVLSEL:9;    /**< \brief [17:9] VDDEXT Level Select - VDDEXTLVLSEL (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_PMS_VMONS_LVLSEL_Bits;

/** \brief Secondary Monitor Level Selection Status Register */
typedef struct _Ifx_PMS_VMONS_LVLSTAT_Bits
{
    __I  Ifx_UReg_32Bit VDDMLVL:1;         /**< \brief [0:0] VDDM Level Status - VDDMLVL (rh) */
    __I  Ifx_UReg_32Bit VDDEXTLVL:1;       /**< \brief [1:1] VDDEXT Level Status - VDDEXTLVL (rh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_PMS_VMONS_LVLSTAT_Bits;

/** \brief Standby and Wake-Up Status Clear Register 0 */
typedef struct _Ifx_PMS_WAKEUP_CLR0_Bits
{
    __O  Ifx_UReg_32Bit ESR2WKPCLR:1;      /**< \brief [0:0] ESR2 Wake-up indication flag clear - ESR2WKPCLR (w) */
    __O  Ifx_UReg_32Bit PINBWKPCLR:1;      /**< \brief [1:1] PINB Wake-up indication flag clear - PINBWKPCLR (w) */
    __O  Ifx_UReg_32Bit PINCWKPCLR:1;      /**< \brief [2:2] PINC Wake-up indication flag clear - PINCWKPCLR (w) */
    __O  Ifx_UReg_32Bit PINSEXTWKPCLR:1;    /**< \brief [3:3] VDDEXT Pins Wake-up indication flag clear - PINSEXTWKPCLR (w) */
    __O  Ifx_UReg_32Bit PINSSBWKPCLR:1;    /**< \brief [4:4] VDDEVRSB Pins Wake-up indication flag clear - PINSSBWKPCLR (w) */
    __O  Ifx_UReg_32Bit RTCWKPCLR:1;       /**< \brief [5:5] RTC Wake-up indication flag clear - RTCWKPCLR (w) */
    __O  Ifx_UReg_32Bit WUTWKPCLR:1;       /**< \brief [6:6] WUT Wake-up indication flag clear - WUTWKPCLR (w) */
    __O  Ifx_UReg_32Bit PWRWKPCLR:1;       /**< \brief [7:7] PWRWKP Wake-up indication flag clear - PWRWKPCLR (w) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __O  Ifx_UReg_32Bit ESR2OVRUNCLR:1;    /**< \brief [16:16] ESR2 Overrun status indication flag clear - ESR2OVRUNCLR (w) */
    __O  Ifx_UReg_32Bit PINBOVRUNCLR:1;    /**< \brief [17:17] PINB Overrun status indication flag clear - PINBOVRUNCLR (w) */
    __O  Ifx_UReg_32Bit PINCOVRUNCLR:1;    /**< \brief [18:18] PINC Overrun status indication flag clear - PINCOVRUNCLR (w) */
    __O  Ifx_UReg_32Bit RTCOVRUNCLR:1;     /**< \brief [19:19] RTC Overrun status indication flag clear - RTCOVRUNCLR (w) */
    __O  Ifx_UReg_32Bit WUTOVRUNCLR:1;     /**< \brief [20:20] WUT Overrun status indication flag clear - WUTOVRUNCLR (w) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_PMS_WAKEUP_CLR0_Bits;

/** \brief Standby and Wake-Up Status Clear Register 1 */
typedef struct _Ifx_PMS_WAKEUP_CLR1_Bits
{
    __O  Ifx_UReg_32Bit ESR0WKPCLR:1;      /**< \brief [0:0] ESR0 Wake-up indication flag clear - ESR0WKPCLR (w) */
    __O  Ifx_UReg_32Bit ESR1WKPCLR:1;      /**< \brief [1:1] ESR1 Wake-up indication flag clear - ESR1WKPCLR (w) */
    __O  Ifx_UReg_32Bit PINAWKPCLR:1;      /**< \brief [2:2] PINA Wake-up indication flag clear - PINAWKPCLR (w) */
    __O  Ifx_UReg_32Bit SCRWKPCLR:1;       /**< \brief [3:3] SCR Wake-up indication flag clear - SCRWKPCLR (w) */
    __O  Ifx_UReg_32Bit PORSTWKPCLR:1;     /**< \brief [4:4] PORST Wake-up indication flag clear - PORSTWKPCLR (w) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [15:5] \internal Reserved */
    __O  Ifx_UReg_32Bit ESR0OVRUNCLR:1;    /**< \brief [16:16] ESR0 Overrun status indication flag clear - ESR0OVRUNCLR (w) */
    __O  Ifx_UReg_32Bit ESR1OVRUNCLR:1;    /**< \brief [17:17] ESR1 Overrun status indication flag clear - ESR1OVRUNCLR (w) */
    __O  Ifx_UReg_32Bit PINAOVRUNCLR:1;    /**< \brief [18:18] PINA Overrun status indication flag clear - PINAOVRUNCLR (w) */
    __O  Ifx_UReg_32Bit SCROVRUNCLR:1;     /**< \brief [19:19] SCR Overrun status indication flag clear - SCROVRUNCLR (w) */
    __O  Ifx_UReg_32Bit PORSTOVRUNCLR:1;    /**< \brief [20:20] PORST Overrun status indication flag clear - PORSTOVRUNCLR (w) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_PMS_WAKEUP_CLR1_Bits;

/** \brief Wake-Up Configuration Register 0 */
typedef struct _Ifx_PMS_WAKEUP_CON0_Bits
{
    __IO Ifx_UReg_32Bit ESR2WKEN:2;        /**< \brief [1:0] ESR2 Wake-up enable from Standby - ESR2WKEN (rw) */
    __IO Ifx_UReg_32Bit ESR2DFEN:1;        /**< \brief [2:2] ESR2 Digital Filter Enable - ESR2DFEN (rw) */
    __IO Ifx_UReg_32Bit ESR2EDCON:2;       /**< \brief [4:3] ESR2 Edge Detection Control - ESR2EDCON (rw) */
    __IO Ifx_UReg_32Bit PINBWKEN:2;        /**< \brief [6:5] Pin B Wake-up enable from Standby - PINBWKEN (rw) */
    __IO Ifx_UReg_32Bit PINBDFEN:1;        /**< \brief [7:7] PINB Digital Filter Enable - PINBDFEN (rw) */
    __IO Ifx_UReg_32Bit PINBEDCON:2;       /**< \brief [9:8] PINB Edge Detection Control - PINBEDCON (rw) */
    __IO Ifx_UReg_32Bit PINCWKEN:2;        /**< \brief [11:10] Pin C Wake-Up Enable from Standby - PINCWKEN (rw) */
    __IO Ifx_UReg_32Bit PINCDFEN:1;        /**< \brief [12:12] PINC Digital Filter Enable - PINCDFEN (rw) */
    __IO Ifx_UReg_32Bit PINCEDCON:2;       /**< \brief [14:13] PINC Edge Detection Control - PINCEDCON (rw) */
    __IO Ifx_UReg_32Bit PINSEXTWKEN:1;     /**< \brief [15:15] VDDEXT Pins Wake-Up Enable from Standby - PINSEXTWKEN (rw) */
    __IO Ifx_UReg_32Bit PINSSBWKEN:1;      /**< \brief [16:16] VDDEVRSB Pins Wake-Up Enable from Standby - PINSSBWKEN (rw) */
    __IO Ifx_UReg_32Bit RTCWKEN:2;         /**< \brief [18:17] RTC Wake-Up Enable from Standby - RTCWKEN (rw) */
    __IO Ifx_UReg_32Bit WUTWKEN:2;         /**< \brief [20:19] WUT Wake-up enable from Standby - WUTWKEN (rw) */
    __IO Ifx_UReg_32Bit PWRWKEN:2;         /**< \brief [22:21] Standby Wake-up Enable on VDDEXT Supply ramp-up - PWRWKEN (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [27:23] \internal Reserved */
    __IO Ifx_UReg_32Bit BLNKFIL:4;         /**< \brief [31:28] Blanking Filter delay for Wake-up - BLNKFIL (rw) */
} Ifx_PMS_WAKEUP_CON0_Bits;

/** \brief Wake-Up Configuration Register 1 */
typedef struct _Ifx_PMS_WAKEUP_CON1_Bits
{
    __IO Ifx_UReg_32Bit ESR0WKEN:1;        /**< \brief [0:0] ESR0 Wake-up enable from Standby - ESR0WKEN (rw) */
    __IO Ifx_UReg_32Bit ESR0DFEN:1;        /**< \brief [1:1] ESR0 Digital Filter Enable - ESR0DFEN (rw) */
    __IO Ifx_UReg_32Bit ESR0EDCON:2;       /**< \brief [3:2] ESR0 Edge Detection Control - ESR0EDCON (rw) */
    __IO Ifx_UReg_32Bit ESR1WKEN:1;        /**< \brief [4:4] ESR1 Wake-up enable from Standby - ESR1WKEN (rw) */
    __IO Ifx_UReg_32Bit ESR1DFEN:1;        /**< \brief [5:5] ESR1 Digital Filter Enable - ESR1DFEN (rw) */
    __IO Ifx_UReg_32Bit ESR1EDCON:2;       /**< \brief [7:6] ESR1 Edge Detection Control - ESR1EDCON (rw) */
    __IO Ifx_UReg_32Bit PINAWKEN:1;        /**< \brief [8:8] Pin A Wake-up enable from Standby - PINAWKEN (rw) */
    __IO Ifx_UReg_32Bit PINADFEN:1;        /**< \brief [9:9] PINA Digital Filter Enable - PINADFEN (rw) */
    __IO Ifx_UReg_32Bit PINAEDCON:2;       /**< \brief [11:10] PINA Edge Detection Control - PINAEDCON (rw) */
    __IO Ifx_UReg_32Bit SCRWKEN:1;         /**< \brief [12:12] Standby Controller Wake-up enable from Standby - SCRWKEN (rw) */
    __IO Ifx_UReg_32Bit PORSTWKEN:1;       /**< \brief [13:13] PORST Pin Wake-Up Enable from Standby - PORSTWKEN (rw) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_PMS_WAKEUP_CON1_Bits;

/** \brief Wake-Up Status Register 0 */
typedef struct _Ifx_PMS_WAKEUP_STAT0_Bits
{
    __I  Ifx_UReg_32Bit ESR2WKP:1;         /**< \brief [0:0] ESR2 Wake-up flag - ESR2WKP (rh) */
    __I  Ifx_UReg_32Bit PINBWKP:1;         /**< \brief [1:1] Pin B Wake-up flag - PINBWKP (rh) */
    __I  Ifx_UReg_32Bit PINCWKP:1;         /**< \brief [2:2] Pin C Wake-up flag - PINCWKP (rh) */
    __I  Ifx_UReg_32Bit PINSEXTWKP:1;      /**< \brief [3:3] VDDEXT Pins Wake-Up Flag - PINSEXTWKP (rh) */
    __I  Ifx_UReg_32Bit PINSSBWKP:1;       /**< \brief [4:4] VDDEVRSB Pins Wake-Up Flag - PINSSBWKP (rh) */
    __I  Ifx_UReg_32Bit RTCWKP:1;          /**< \brief [5:5] RTC Wake-up flag - RTCWKP (rh) */
    __I  Ifx_UReg_32Bit WUTWKP:1;          /**< \brief [6:6] WUT Wake-up flag - WUTWKP (rh) */
    __I  Ifx_UReg_32Bit PWRWKP:1;          /**< \brief [7:7] Wake-up event on VDDEXT Supply ramp-up - PWRWKP (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __I  Ifx_UReg_32Bit ESR2OVRUN:1;       /**< \brief [16:16] ESR2 Overrun status flag - ESR2OVRUN (rh) */
    __I  Ifx_UReg_32Bit PINBOVRUN:1;       /**< \brief [17:17] Pin B Overrun status flag - PINBOVRUN (rh) */
    __I  Ifx_UReg_32Bit PINCOVRUN:1;       /**< \brief [18:18] Pin C Overrun status flag - PINCOVRUN (rh) */
    __I  Ifx_UReg_32Bit RTCOVRUN:1;        /**< \brief [19:19] RTC Overrun status flag - RTCOVRUN (rh) */
    __I  Ifx_UReg_32Bit WUTOVRUN:1;        /**< \brief [20:20] WUT Overrun status flag - WUTOVRUN (rh) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_PMS_WAKEUP_STAT0_Bits;

/** \brief Wake-Up Status Register 1 */
typedef struct _Ifx_PMS_WAKEUP_STAT1_Bits
{
    __I  Ifx_UReg_32Bit ESR0WKP:1;         /**< \brief [0:0] ESR0 Wake-up flag - ESR0WKP (rh) */
    __I  Ifx_UReg_32Bit ESR1WKP:1;         /**< \brief [1:1] ESR1 Wake-up flag - ESR1WKP (rh) */
    __I  Ifx_UReg_32Bit PINAWKP:1;         /**< \brief [2:2] Pin Wake-up flag - PINAWKP (rh) */
    __I  Ifx_UReg_32Bit SCRWKP:1;          /**< \brief [3:3] SCR Wake-up flag - SCRWKP (rh) */
    __I  Ifx_UReg_32Bit PORSTWKP:1;        /**< \brief [4:4] PORST Wake-up flag - PORSTWKP (rh) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [15:5] \internal Reserved */
    __I  Ifx_UReg_32Bit ESR0OVRUN:1;       /**< \brief [16:16] ESR0 Overrun status flag - ESR0OVRUN (rh) */
    __I  Ifx_UReg_32Bit ESR1OVRUN:1;       /**< \brief [17:17] ESR1 Overrun status flag - ESR1OVRUN (rh) */
    __I  Ifx_UReg_32Bit PINAOVRUN:1;       /**< \brief [18:18] Pin A Overrun status flag - PINAOVRUN (rh) */
    __I  Ifx_UReg_32Bit SCROVRUN:1;        /**< \brief [19:19] SCR Overrun status flag - SCROVRUN (rh) */
    __I  Ifx_UReg_32Bit PORSTOVRUN:1;      /**< \brief [20:20] PORST Overrun status flag - PORSTOVRUN (rh) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_PMS_WAKEUP_STAT1_Bits;

/** \brief Register to Store User Info in PMS2 Domain and Reset by Warm PORST */
typedef struct _Ifx_PMS_WRMPORSTUSRINFO_Bits
{
    __IO Ifx_UReg_32Bit DATA:32;           /**< \brief [31:0] User data (rw) */
} Ifx_PMS_WRMPORSTUSRINFO_Bits;

/** \brief Wake-Up Timer Configuration Register */
typedef struct _Ifx_PMS_WUT_CON_Bits
{
    __IO Ifx_UReg_32Bit RELOAD:24;         /**< \brief [23:0] WUT reload value. - RELOAD (rw) */
    __IO Ifx_UReg_32Bit ENABLE:1;          /**< \brief [24:24] WUT enable - ENABLE (rw) */
    __IO Ifx_UReg_32Bit DIV:1;             /**< \brief [25:25] WUT clock divider - WUTDIV (rw) */
    __IO Ifx_UReg_32Bit MODE:2;            /**< \brief [27:26] WUT mode selection - WUTMODE (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_PMS_WUT_CON_Bits;

/** \brief Wake-Up Timer Status Register */
typedef struct _Ifx_PMS_WUT_STAT_Bits
{
    __I  Ifx_UReg_32Bit COUNTER:24;        /**< \brief [23:0] WUT counter value - COUNTER (rh) */
    __I  Ifx_UReg_32Bit ENABLE:1;          /**< \brief [24:24] WUT Enable status - ENABLE (rh) */
    __I  Ifx_UReg_32Bit RUN:1;             /**< \brief [25:25] WUT Run status - RUN (rh) */
    __I  Ifx_UReg_32Bit MODE:2;            /**< \brief [27:26] WUT Mode status - MODE (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_PMS_WUT_STAT_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_pms_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_ACCEN_PRS_PMS_Bits B;     /**< \brief Bitfield access */
} Ifx_PMS_ACCEN_PRS_PMS;

/** \brief Read access enable register A   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_ACCEN_RDA_PMS_Bits B;     /**< \brief Bitfield access */
} Ifx_PMS_ACCEN_RDA_PMS;

/** \brief Read access enable register B   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_ACCEN_RDB_PMS_Bits B;     /**< \brief Bitfield access */
} Ifx_PMS_ACCEN_RDB_PMS;

/** \brief VM access enable register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_ACCEN_VM_PMS_Bits B;      /**< \brief Bitfield access */
} Ifx_PMS_ACCEN_VM_PMS;

/** \brief Write access enable register A   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_ACCEN_WRA_PMS_Bits B;     /**< \brief Bitfield access */
} Ifx_PMS_ACCEN_WRA_PMS;

/** \brief Write access enable register B   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_ACCEN_WRB_PMS_Bits B;     /**< \brief Bitfield access */
} Ifx_PMS_ACCEN_WRB_PMS;

/** \brief Register to Store User Info in PMS2 Domain and Reset by Cold PORST   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_CLDPORSTUSRINFO_Bits B;    /**< \brief Bitfield access */
} Ifx_PMS_CLDPORSTUSRINFO;

/** \brief Cold Reset Configuration Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_CLDRSTCON_Bits B;         /**< \brief Bitfield access */
} Ifx_PMS_CLDRSTCON;

/** \brief Cold Reset Trigger Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_CLDRSTRIG_Bits B;         /**< \brief Bitfield access */
} Ifx_PMS_CLDRSTRIG;

/** \brief Cold Reset Last Trigger Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_CLDRSTRIGL_Bits B;        /**< \brief Bitfield access */
} Ifx_PMS_CLDRSTRIGL;

/** \brief Cold Reset Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_CLDRSTSTAT_Bits B;        /**< \brief Bitfield access */
} Ifx_PMS_CLDRSTSTAT;

/** \brief Cold Reset Status Clear Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_CLDRSTSTATCLR_Bits B;     /**< \brief Bitfield access */
} Ifx_PMS_CLDRSTSTATCLR;

/** \brief    */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_DRMONCON_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_DRMONCON;

/** \brief    */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_DRMONSTAT_Bits B;         /**< \brief Bitfield access */
} Ifx_PMS_DRMONSTAT;

/** \brief Die Temperature Sensor Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_DTS_CON_Bits B;           /**< \brief Bitfield access */
} Ifx_PMS_DTS_CON;

/** \brief Die Temperature Sensor Limit Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_DTS_LIM1_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_DTS_LIM1;

/** \brief Die Temperature Sensor Limit Register 2   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_DTS_LIM2_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_DTS_LIM2;

/** \brief Die Temperature Sensor Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_DTS_STAT_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_DTS_STAT;

/** \brief EVRC SD Coefficient Register 0 (for SDFREQ = 0)   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_COEFF0_Bits B;       /**< \brief Bitfield access */
} Ifx_PMS_EVRC_COEFF0;

/** \brief EVRC SD Coefficient Register 1 (for SDFREQ = 0)   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_COEFF1_Bits B;       /**< \brief Bitfield access */
} Ifx_PMS_EVRC_COEFF1;

/** \brief EVRC SD Coefficient Register 2   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_COEFF2_Bits B;       /**< \brief Bitfield access */
} Ifx_PMS_EVRC_COEFF2;

/** \brief EVRC SD Coefficient Register 3   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_COEFF3_Bits B;       /**< \brief Bitfield access */
} Ifx_PMS_EVRC_COEFF3;

/** \brief EVRC SD Coefficient Register 4   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_COEFF4_Bits B;       /**< \brief Bitfield access */
} Ifx_PMS_EVRC_COEFF4;

/** \brief EVRC SD Coefficient Register 5   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_COEFF5_Bits B;       /**< \brief Bitfield access */
} Ifx_PMS_EVRC_COEFF5;

/** \brief EVRC Configuration Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_CON0_Bits B;         /**< \brief Bitfield access */
} Ifx_PMS_EVRC_CON0;

/** \brief EVRC Configuration Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_CON1_Bits B;         /**< \brief Bitfield access */
} Ifx_PMS_EVRC_CON1;

/** \brief EVRC Configuration Register 2   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_CON2_Bits B;         /**< \brief Bitfield access */
} Ifx_PMS_EVRC_CON2;

/** \brief EVRC Configuration Register 3   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_CON3_Bits B;         /**< \brief Bitfield access */
} Ifx_PMS_EVRC_CON3;

/** \brief EVRC Configuration Register 4   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_CON4_Bits B;         /**< \brief Bitfield access */
} Ifx_PMS_EVRC_CON4;

/** \brief EVRC Status Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_STAT0_Bits B;        /**< \brief Bitfield access */
} Ifx_PMS_EVRC_STAT0;

/** \brief EVRC Status Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_STAT1_Bits B;        /**< \brief Bitfield access */
} Ifx_PMS_EVRC_STAT1;

/** \brief HPOSC Configuration Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_HPOSCCON1_Bits B;         /**< \brief Bitfield access */
} Ifx_PMS_HPOSCCON1;

/** \brief Identification Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_ID_Bits B;                /**< \brief Bitfield access */
} Ifx_PMS_ID;

/** \brief Interrupt Status Clear Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_INT_CLR_Bits B;           /**< \brief Bitfield access */
} Ifx_PMS_INT_CLR;

/** \brief Interrupt Configuration Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_INT_CON0_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_INT_CON0;

/** \brief Interrupt Configuration Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_INT_CON1_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_INT_CON1;

/** \brief Interrupt Configuration Register 2   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_INT_CON2_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_INT_CON2;

/** \brief Interrupt Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_INT_STAT_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_INT_STAT;

/** \brief Register to Store User Info in PMS1 Domain and Reset by LVDPMS1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_LVDPMS1USRINFO_Bits B;    /**< \brief Bitfield access */
} Ifx_PMS_LVDPMS1USRINFO;

/** \brief OCDS Trigger Set Control 0 Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_OTSC0_Bits B;             /**< \brief Bitfield access */
} Ifx_PMS_OTSC0;

/** \brief OCDS Trigger Set Control 1 Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_OTSC1_Bits B;             /**< \brief Bitfield access */
} Ifx_PMS_OTSC1;

/** \brief OCDS Trigger Set Select Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_OTSS_Bits B;              /**< \brief Bitfield access */
} Ifx_PMS_OTSS;

/** \brief Pad Configuration Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_PAD_CON_Bits B;           /**< \brief Bitfield access */
} Ifx_PMS_PAD_CON;

/** \brief ESR2 Pad Configuration Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_PAD_ESR2CON_Bits B;       /**< \brief Bitfield access */
} Ifx_PMS_PAD_ESR2CON;

/** \brief Pad Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_PAD_STAT_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_PAD_STAT;

/** \brief Power Domain Configuration Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_PD_CON0_Bits B;           /**< \brief Bitfield access */
} Ifx_PMS_PD_CON0;

/** \brief Power Domain Configuration Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_PD_CON1_Bits B;           /**< \brief Bitfield access */
} Ifx_PMS_PD_CON1;

/** \brief Power Domain Status Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_PD_STAT0_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_PD_STAT0;

/** \brief Resource Protection Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_PROT_PMS_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_PROT_PMS;

/** \brief    */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_PVDCON_Bits B;            /**< \brief Bitfield access */
} Ifx_PMS_PVDCON;

/** \brief    */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_PVDHISTSTAT_Bits B;       /**< \brief Bitfield access */
} Ifx_PMS_PVDHISTSTAT;

/** \brief    */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_PVDSTAT_Bits B;           /**< \brief Bitfield access */
} Ifx_PMS_PVDSTAT;

/** \brief Register Access Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_REGACCSTAT_Bits B;        /**< \brief Bitfield access */
} Ifx_PMS_REGACCSTAT;

/** \brief RTC Compare Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_RTC_CMP0_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_RTC_CMP0;

/** \brief RTC Compare Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_RTC_CMP1_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_RTC_CMP1;

/** \brief RTC Configuration Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_RTC_CON0_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_RTC_CON0;

/** \brief RTC Configuration Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_RTC_CON1_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_RTC_CON1;

/** \brief RTC Configuration Register 2   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_RTC_CON2_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_RTC_CON2;

/** \brief RTC Timer Counter Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_RTC_TIM0_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_RTC_TIM0;

/** \brief RTC Timer Capture Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_RTC_TIM1CAP_Bits B;       /**< \brief Bitfield access */
} Ifx_PMS_RTC_TIM1CAP;

/** \brief SCR Configuration Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_SCR_CON0_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_SCR_CON0;

/** \brief SCR Configuration Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_SCR_CON1_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_SCR_CON1;

/** \brief SCR Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_SCR_STAT_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_SCR_STAT;

/** \brief Standby Configuration Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_STANDBY_CON0_Bits B;      /**< \brief Bitfield access */
} Ifx_PMS_STANDBY_CON0;

/** \brief Standby Configuration Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_STANDBY_CON1_Bits B;      /**< \brief Bitfield access */
} Ifx_PMS_STANDBY_CON1;

/** \brief Voltage ID (VID) Configuration Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_VID_CON_Bits B;           /**< \brief Bitfield access */
} Ifx_PMS_VID_CON;

/** \brief    */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_VMONPCON_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_VMONPCON;

/** \brief    */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_VMONPRST_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_VMONPRST;

/** \brief    */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_VMONPSTAT_Bits B;         /**< \brief Bitfield access */
} Ifx_PMS_VMONPSTAT;

/** \brief Power Domain Cold Reset Configuration Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_VMONP_VDDCLDRST_Bits B;    /**< \brief Bitfield access */
} Ifx_PMS_VMONP_VDDCLDRST;

/** \brief    */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_VMONSCON_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_VMONSCON;

/** \brief    */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_VMONSSTAT_Bits B;         /**< \brief Bitfield access */
} Ifx_PMS_VMONSSTAT;

/** \brief Secondary Monitor Level Selection Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_VMONS_LVLSEL_Bits B;      /**< \brief Bitfield access */
} Ifx_PMS_VMONS_LVLSEL;

/** \brief Secondary Monitor Level Selection Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_VMONS_LVLSTAT_Bits B;     /**< \brief Bitfield access */
} Ifx_PMS_VMONS_LVLSTAT;

/** \brief Standby and Wake-Up Status Clear Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_WAKEUP_CLR0_Bits B;       /**< \brief Bitfield access */
} Ifx_PMS_WAKEUP_CLR0;

/** \brief Standby and Wake-Up Status Clear Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_WAKEUP_CLR1_Bits B;       /**< \brief Bitfield access */
} Ifx_PMS_WAKEUP_CLR1;

/** \brief Wake-Up Configuration Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_WAKEUP_CON0_Bits B;       /**< \brief Bitfield access */
} Ifx_PMS_WAKEUP_CON0;

/** \brief Wake-Up Configuration Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_WAKEUP_CON1_Bits B;       /**< \brief Bitfield access */
} Ifx_PMS_WAKEUP_CON1;

/** \brief Wake-Up Status Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_WAKEUP_STAT0_Bits B;      /**< \brief Bitfield access */
} Ifx_PMS_WAKEUP_STAT0;

/** \brief Wake-Up Status Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_WAKEUP_STAT1_Bits B;      /**< \brief Bitfield access */
} Ifx_PMS_WAKEUP_STAT1;

/** \brief Register to Store User Info in PMS2 Domain and Reset by Warm PORST   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_WRMPORSTUSRINFO_Bits B;    /**< \brief Bitfield access */
} Ifx_PMS_WRMPORSTUSRINFO;

/** \brief Wake-Up Timer Configuration Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_WUT_CON_Bits B;           /**< \brief Bitfield access */
} Ifx_PMS_WUT_CON;

/** \brief Wake-Up Timer Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_WUT_STAT_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_WUT_STAT;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_PMS_ACCEN
{
       __IO Ifx_PMS_ACCEN_WRA_PMS               WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_PMS_ACCEN_WRB_PMS               WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_PMS_ACCEN_RDA_PMS               RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_PMS_ACCEN_RDB_PMS               RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_PMS_ACCEN_VM_PMS                VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_PMS_ACCEN_PRS_PMS               PRS;                    /**< \brief 14, PRS access enable register*/
} Ifx_PMS_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_VMONP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief VMONP object */
typedef volatile struct _Ifx_PMS_VMONP
{
       __IO Ifx_PMS_VMONPCON                    VDDCON;                 /**< \brief 0, VDD Primary Voltage Monitor Configuration Register*/
       __IO Ifx_PMS_VMONPRST                    VDDRST;                 /**< \brief 4, VDD Primary Voltage Monitor Reset Configuration Register*/
       __IO Ifx_PMS_VMONP_VDDCLDRST             VDDCLDRST;              /**< \brief 8, Power Domain Cold Reset Configuration Register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDSTAT;                /**< \brief C, VDD Primary Voltage Monitor Status Register*/
       __IO Ifx_PMS_VMONPCON                    VDDEXTCON;              /**< \brief 10, VDDEXT Primary Voltage Monitor Configuration Register*/
       __IO Ifx_PMS_VMONPRST                    VDDEXTRST;              /**< \brief 14, VDDEXT Primary Voltage Monitor Reset Configuration Register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDEXTSTAT;             /**< \brief 18, VDDEXT Primary Voltage Monitor Status Register*/
       __IO Ifx_PMS_VMONPCON                    VSSDCHSCON;             /**< \brief 1C, Primary Voltage Monitor Configuration Register for the (VDDEXTDC - VSSDCHS) Voltage Difference*/
       __IO Ifx_PMS_VMONPRST                    VSSDCHSRST;             /**< \brief 20, Primary Voltage Monitor Reset Configuration Register for the (VDDEXTDC - VSSDCHS) Voltage Difference*/
       __I  Ifx_PMS_VMONPSTAT                   VSSDCHSSTAT;            /**< \brief 24, Primary Voltage Monitor Status Register  for the (VDDEXTDC - VSSDCHS) Voltage Difference*/
       __IO Ifx_PMS_VMONPCON                    VDDEXTDCCON;            /**< \brief 28, VDDEXTDC Primary Voltage Monitor Configuration Register*/
       __IO Ifx_PMS_VMONPRST                    VDDEXTDCRST;            /**< \brief 2C, VDDEXTDC Primary Voltage Monitor Reset Configuration Register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDEXTDCSTAT;           /**< \brief 30, VDDEXTDC Primary Voltage Monitor Status Register*/
       __IO Ifx_PMS_VMONPCON                    VDDDCLSCON;             /**< \brief 34, VDDDCLS Primary Voltage Monitor Configuration Register*/
       __IO Ifx_PMS_VMONPRST                    VDDDCLSRST;             /**< \brief 38, VDDDCLS Primary Voltage Monitor Reset Configuration Register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDDCLSSTAT;            /**< \brief 3C, VDDDCLS Primary Voltage Monitor Status Register*/
       __IO Ifx_PMS_VMONPCON                    VDDEVRSBCON;            /**< \brief 40, VDDEVRSB Primary Voltage Monitor Configuration Register*/
       __IO Ifx_PMS_VMONPRST                    VDDEVRSBRST;            /**< \brief 44, VDDEVRSB Primary Voltage Monitor Reset Configuration Register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDEVRSBSTAT;           /**< \brief 48, VDDEVRSB Primary Voltage Monitor Status Register*/
       __IO Ifx_PMS_VMONPCON                    VDDMCON;                /**< \brief 4C, VDDM Primary Voltage Monitor Configuration Register*/
       __IO Ifx_PMS_VMONPRST                    VDDMRST;                /**< \brief 50, VDDM Primary Voltage Monitor Reset Configuration Register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDMSTAT;               /**< \brief 54, VDDM Primary Voltage Monitor Status Register*/
       __IO Ifx_PMS_VMONPCON                    VDDPHPHY0CON;           /**< \brief 58, VDDPHPHY0 Primary Voltage Monitor Configuration Register*/
       __IO Ifx_PMS_VMONPRST                    VDDPHPHY0RST;           /**< \brief 5C, VDDPHPHY0 Primary Voltage Monitor Reset Configuration Register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDPHPHY0STAT;          /**< \brief 60, VDDPHPHY0 Primary Voltage Monitor Status Register*/
       __IO Ifx_PMS_VMONPCON                    VDDPHPHY1CON;           /**< \brief 64, VDDPHPHY1 Primary Voltage Monitor Configuration Register*/
       __IO Ifx_PMS_VMONPRST                    VDDPHPHY1RST;           /**< \brief 68, VDDPHPHY1 Primary Voltage Monitor Reset Configuration Register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDPHPHY1STAT;          /**< \brief 6C, VDDPHPHY1 Primary Voltage Monitor Status Register*/
       __IO Ifx_PMS_VMONPCON                    VDDPHPHY2CON;           /**< \brief 70, VDDPHPHY2 Primary Voltage Monitor Configuration Register*/
       __IO Ifx_PMS_VMONPRST                    VDDPHPHY2RST;           /**< \brief 74, VDDPHPHY2 Primary Voltage Monitor Reset Configuration Register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDPHPHY2STAT;          /**< \brief 78, VDDPHPHY2 Primary Voltage Monitor Status Register*/
       __IO Ifx_PMS_VMONPCON                    VDDHSIFCON;             /**< \brief 7C, VDDHSIF Primary Voltage Monitor Configuration Register*/
       __IO Ifx_PMS_VMONPRST                    VDDHSIFRST;             /**< \brief 80, VDDHSIF Primary Voltage Monitor Reset Configuration Register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDHSIFSTAT;            /**< \brief 84, VDDHSIF Primary Voltage Monitor Status Register*/
       __IO Ifx_PMS_VMONPCON                    VDDPADCON;              /**< \brief 88, VDDPAD Primary Voltage Monitor Configuration Register*/
       __IO Ifx_PMS_VMONPRST                    VDDPADRST;              /**< \brief 8C, VDDPAD Primary Voltage Monitor Reset Configuration Register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDPADSTAT;             /**< \brief 90, VDDPAD Primary Voltage Monitor Status Register*/
       __IO Ifx_PMS_VMONPCON                    VDDCPUACON;             /**< \brief 94, VDDCPUA Primary Voltage Monitor Configuration Register*/
       __IO Ifx_PMS_VMONPRST                    VDDCPUARST;             /**< \brief 98, VDDCPUA Primary Voltage Monitor Reset Configuration Register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDCPUASTAT;            /**< \brief 9C, VDDCPUA Primary Voltage Monitor Status Register*/
       __IO Ifx_PMS_VMONPCON                    VDDCPUBCON;             /**< \brief A0, VDDCPUB Primary Voltage Monitor Configuration Register*/
       __IO Ifx_PMS_VMONPRST                    VDDCPUBRST;             /**< \brief A4, VDDCPUB Primary Voltage Monitor Reset Configuration Register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDCPUBSTAT;            /**< \brief A8, VDDCPUB Primary Voltage Monitor Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_AC[12];        /**< \brief AC, \internal Reserved */
       __IO Ifx_PMS_VMONPCON                    VDDPPUCON;              /**< \brief B8, VDDPPU Primary Voltage Monitor Configuration Register*/
       __IO Ifx_PMS_VMONPRST                    VDDPPURST;              /**< \brief BC, VDDPPU Primary Voltage Monitor Reset Configuration Register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDPPUSTAT;             /**< \brief C0, VDDPPU Primary Voltage Monitor Status Register*/
       __IO Ifx_PMS_VMONPCON                    VDDLMUCON;              /**< \brief C4, VDDLMU Primary Voltage Monitor Configuration Register*/
       __IO Ifx_PMS_VMONPRST                    VDDLMURST;              /**< \brief C8, VDDLMU Primary Voltage Monitor Reset Configuration Register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDLMUSTAT;             /**< \brief CC, VDDLMU Primary Voltage Monitor Status Register*/
       __IO Ifx_PMS_VMONPCON                    VDDPHY0CON;             /**< \brief D0, VDDPHY0 Primary Voltage Monitor Configuration Register*/
       __IO Ifx_PMS_VMONPRST                    VDDPHY0RST;             /**< \brief D4, VDDPHY0 Primary Voltage Monitor Reset Configuration Register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDPHY0STAT;            /**< \brief D8, VDDPHY0 Primary Voltage Monitor Status Register*/
       __IO Ifx_PMS_VMONPCON                    VDDPHY1CON;             /**< \brief DC, VDDPHY1 Primary Voltage Monitor Configuration Register*/
       __IO Ifx_PMS_VMONPRST                    VDDPHY1RST;             /**< \brief E0, VDDPHY1 Primary Voltage Monitor Reset Configuration Register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDPHY1STAT;            /**< \brief E4, VDDPHY1 Primary Voltage Monitor Status Register*/
       __IO Ifx_PMS_VMONPCON                    VDDPHY2CON;             /**< \brief E8, VDDPHY2 Primary Voltage Monitor Configuration Register*/
       __IO Ifx_PMS_VMONPRST                    VDDPHY2RST;             /**< \brief EC, VDDPHY2 Primary Voltage Monitor Reset Configuration Register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDPHY2STAT;            /**< \brief F0, VDDPHY2 Primary Voltage Monitor Status Register*/
} Ifx_PMS_VMONP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_VMONS_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief VMONS object */
typedef volatile struct _Ifx_PMS_VMONS
{
       __IO Ifx_PMS_VMONSCON                    VDDEVRSBCON;            /**< \brief 0, VDDEVRSB Secondary Monitor Configuration Register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDEVRSBSTAT;           /**< \brief 4, VDDEVRSB Secondary Monitor Status Register*/
       __IO Ifx_PMS_VMONSCON                    VDDEXTCON;              /**< \brief 8, VDDEXT Secondary Monitor Configuration Register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDEXTSTAT;             /**< \brief C, VDDEXT Secondary Monitor Status Register*/
       __IO Ifx_PMS_VMONSCON                    VDDMCON;                /**< \brief 10, VDDM Secondary Monitor Configuration Register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDMSTAT;               /**< \brief 14, VDDM Secondary Monitor Status Register*/
       __IO Ifx_PMS_VMONSCON                    VDDFLEXCON;             /**< \brief 18, VDDFLEX Secondary Monitor Configuration Register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDFLEXSTAT;            /**< \brief 1C, VDDFLEX Secondary Monitor Status Register*/
       __IO Ifx_PMS_VMONSCON                    VDDCON;                 /**< \brief 20, VDD Secondary Monitor Configuration Register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDSTAT;                /**< \brief 24, VDD Secondary Monitor Status Register*/
       __IO Ifx_PMS_VMONSCON                    VDDPMS0CON;             /**< \brief 28, VDDPMS0 Secondary Monitor Configuration Register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDPMS0STAT;            /**< \brief 2C, VDDPMS0 Secondary Monitor Status Register*/
       __IO Ifx_PMS_VMONSCON                    VDDPMS1CON;             /**< \brief 30, VDDPMS1 Secondary Monitor Configuration Register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDPMS1STAT;            /**< \brief 34, VDDPMS1 Secondary Monitor Status Register*/
       __IO Ifx_PMS_VMONSCON                    VDDPMS2CON;             /**< \brief 38, VDDPMS2 Secondary Monitor Configuration Register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDPMS2STAT;            /**< \brief 3C, VDDPMS2 Secondary Monitor Status Register*/
       __IO Ifx_PMS_VMONSCON                    VDDSBRAMCON;            /**< \brief 40, VDDSBRAM Secondary Monitor Configuration Register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDSBRAMSTAT;           /**< \brief 44, VDDSBRAM Secondary Monitor Status Register*/
       __IO Ifx_PMS_VMONSCON                    VDDPADCON;              /**< \brief 48, VDDPAD Secondary Monitor Configuration Register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDPADSTAT;             /**< \brief 4C, VDDPAD Secondary Monitor Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_50[8];         /**< \brief 50, \internal Reserved */
       __IO Ifx_PMS_VMONSCON                    VDDPHPHY0CON;           /**< \brief 58, VDDPHPHY0 Secondary Monitor Configuration Register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDPHPHY0STAT;          /**< \brief 5C, VDDPHPHY0 Secondary Monitor Status Register*/
       __IO Ifx_PMS_VMONSCON                    VDDPHPHY1CON;           /**< \brief 60, VDDPHPHY1 Secondary Monitor Configuration Register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDPHPHY1STAT;          /**< \brief 64, VDDPHPHY1 Secondary Monitor Status Register*/
       __IO Ifx_PMS_VMONSCON                    VDDPHPHY2CON;           /**< \brief 68, VDDPHPHY2 Secondary Monitor Configuration Register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDPHPHY2STAT;          /**< \brief 6C, VDDPHPHY2 Secondary Monitor Status Register*/
       __IO Ifx_PMS_VMONSCON                    VDDHSIFCON;             /**< \brief 70, VDDHSIF Secondary Monitor Configuration Register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDHSIFSTAT;            /**< \brief 74, VDDHSIF Secondary Monitor Status Register*/
       __IO Ifx_PMS_VMONSCON                    VDDPHY0CON;             /**< \brief 78, VDDPHY0 Secondary Monitor Configuration Register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDPHY0STAT;            /**< \brief 7C, VDDPHY0 Secondary Monitor Status Register*/
       __IO Ifx_PMS_VMONSCON                    VDDPHY1CON;             /**< \brief 80, VDDPHY1 Secondary Monitor Configuration Register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDPHY1STAT;            /**< \brief 84, VDDPHY1 Secondary Monitor Status Register*/
       __IO Ifx_PMS_VMONSCON                    VDDPHY2CON;             /**< \brief 88, VDDPHY2 Secondary Monitor Configuration Register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDPHY2STAT;            /**< \brief 8C, VDDPHY2 Secondary Monitor Status Register*/
       __IO Ifx_PMS_VMONSCON                    VDDCPUACON;             /**< \brief 90, VDDCPUA Secondary Monitor Configuration Register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDCPUASTAT;            /**< \brief 94, VDDCPUA Secondary Monitor Status Register*/
       __IO Ifx_PMS_VMONSCON                    VDDCPUBCON;             /**< \brief 98, VDDCPUB Secondary Monitor Configuration Register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDCPUBSTAT;            /**< \brief 9C, VDDCPUB Secondary Monitor Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_A0[8];         /**< \brief A0, \internal Reserved */
       __IO Ifx_PMS_VMONSCON                    VDDPPUCON;              /**< \brief A8, VDDPPU Secondary Monitor Configuration Register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDPPUSTAT;             /**< \brief AC, VDDPPU Secondary Monitor Status Register*/
       __IO Ifx_PMS_VMONSCON                    VDDLMUCON;              /**< \brief B0, VDDLMU Secondary Monitor Configuration Register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDLMUSTAT;             /**< \brief B4, VDDLMU Secondary Monitor Status Register*/
       __IO Ifx_PMS_VMONSCON                    VDDEXTDCCON;            /**< \brief B8, VDDEXTDC Secondary Monitor Configuration Register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDEXTDCSTAT;           /**< \brief BC, VDDEXTDC Secondary Monitor Status Register*/
       __IO Ifx_PMS_VMONS_LVLSEL                LVLSEL;                 /**< \brief C0, Secondary Monitor Level Selection Register*/
       __I  Ifx_PMS_VMONS_LVLSTAT               LVLSTAT;                /**< \brief C4, Secondary Monitor Level Selection Status Register*/
} Ifx_PMS_VMONS;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_PEAK_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief PEAK object */
typedef volatile struct _Ifx_PMS_PEAK
{
       __IO Ifx_PMS_PVDCON                      VDD;                    /**< \brief 0, VDD Peak Voltage Detection Configuration Register*/
       __IO Ifx_PMS_PVDCON                      VDDEXT;                 /**< \brief 4, VDDEXT Peak Voltage Detection Configuration Register*/
       __IO Ifx_PMS_PVDCON                      VDDEXTDC;               /**< \brief 8, VDDEXTDC Peak Voltage Detection Configuration Register*/
       __I  Ifx_PMS_PVDSTAT                     VDDSTAT;                /**< \brief C, VDD Peak Voltage Detection Status Register*/
       __I  Ifx_PMS_PVDSTAT                     VDDEXTSTAT;             /**< \brief 10, VDDEXT Peak Voltage Detection Status Register*/
       __I  Ifx_PMS_PVDSTAT                     VDDEXTDCSTAT;           /**< \brief 14, VDDEXTDC Peak Voltage Detection Status Register*/
       __I  Ifx_PMS_PVDHISTSTAT                 VDDHISTSTAT;            /**< \brief 18, VDD Peak Voltage Detection History Status Register*/
       __I  Ifx_PMS_PVDHISTSTAT                 VDDEXTHISTSTAT;         /**< \brief 1C, VDDEXT Peak Voltage Detection History Status Register*/
       __I  Ifx_PMS_PVDHISTSTAT                 VDDEXTDCHISTSTAT;       /**< \brief 20, VDDEXTDC Peak Voltage Detection History Status Register*/
} Ifx_PMS_PEAK;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_DRMON_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief DRMON object */
typedef volatile struct _Ifx_PMS_DRMON
{
       __IO Ifx_PMS_DRMONCON                    VDD;                    /**< \brief 0, VDD Drift Monitoring Configuration Register*/
       __I  Ifx_PMS_DRMONSTAT                   VDDSTAT;                /**< \brief 4, VDD Drift Monitor Status Register*/
       __IO Ifx_PMS_DRMONCON                    VDDEXT;                 /**< \brief 8, VDDEXT Drift Monitoring Configuration Register*/
       __I  Ifx_PMS_DRMONSTAT                   VDDEXTSTAT;             /**< \brief C, VDDEXT Drift Monitor Status Register*/
       __IO Ifx_PMS_DRMONCON                    VDDEXTDC;               /**< \brief 10, VDDEXTDC Drift Monitoring Configuration Register*/
       __I  Ifx_PMS_DRMONSTAT                   VDDEXTDCSTAT;           /**< \brief 14, VDDEXTDC Drift Monitor Status Register*/
       __IO Ifx_PMS_DRMONCON                    VDDM;                   /**< \brief 18, VDDM Drift Monitoring Configuration Register*/
       __I  Ifx_PMS_DRMONSTAT                   VDDMSTAT;               /**< \brief 1C, VDDM Drift Monitor Status Register*/
       __IO Ifx_PMS_DRMONCON                    VDDPMS0;                /**< \brief 20, VDDPMS0 Drift Monitoring Configuration Register*/
       __I  Ifx_PMS_DRMONSTAT                   VDDPMS0STAT;            /**< \brief 24, VDDPMS0 Drift Monitor Status Register*/
       __IO Ifx_PMS_DRMONCON                    VDDPMS2;                /**< \brief 28, VDDPMS2 Drift Monitoring Configuration Register*/
       __I  Ifx_PMS_DRMONSTAT                   VDDPMS2STAT;            /**< \brief 2C, VDDPMS2 Drift Monitor Status Register*/
} Ifx_PMS_DRMON;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_VID_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief VID object */
typedef volatile struct _Ifx_PMS_VID
{
       __IO Ifx_PMS_VID_CON                     CON;                    /**< \brief 0, Voltage ID (VID) Configuration Register*/
} Ifx_PMS_VID;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_PD_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief PD object */
typedef volatile struct _Ifx_PMS_PD
{
       __IO Ifx_PMS_PD_CON0                     CON0;                   /**< \brief 0, Power Domain Configuration Register 0*/
       __IO Ifx_PMS_PD_CON1                     CON1;                   /**< \brief 4, Power Domain Configuration Register 1*/
       __I  Ifx_PMS_PD_STAT0                    STAT0;                  /**< \brief 8, Power Domain Status Register 0*/
} Ifx_PMS_PD;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_INT_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief INT object */
typedef volatile struct _Ifx_PMS_INT
{
       __IO Ifx_PMS_INT_CON0                    CON0;                   /**< \brief 0, Interrupt Configuration Register 0*/
       __IO Ifx_PMS_INT_CON1                    CON1;                   /**< \brief 4, Interrupt Configuration Register 1*/
       __IO Ifx_PMS_INT_CON2                    CON2;                   /**< \brief 8, Interrupt Configuration Register 2*/
       __IO Ifx_PMS_INT_STAT                    STAT;                   /**< \brief C, Interrupt Status Register*/
       __O  Ifx_PMS_INT_CLR                     CLR;                    /**< \brief 10, Interrupt Status Clear Register*/
} Ifx_PMS_INT;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_PAD_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief PAD object */
typedef volatile struct _Ifx_PMS_PAD
{
       __IO Ifx_PMS_PAD_CON                     CON;                    /**< \brief 0, Pad Configuration Register*/
       __I  Ifx_PMS_PAD_STAT                    STAT;                   /**< \brief 4, Pad Status Register*/
       __IO Ifx_PMS_PAD_ESR2CON                 ESR2CON;                /**< \brief 8, ESR2 Pad Configuration Register*/
} Ifx_PMS_PAD;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_WAKEUP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief WAKEUP object */
typedef volatile struct _Ifx_PMS_WAKEUP
{
       __IO Ifx_PMS_WAKEUP_CON0                 CON0;                   /**< \brief 0, Wake-Up Configuration Register 0*/
       __I  Ifx_PMS_WAKEUP_STAT0                STAT0;                  /**< \brief 4, Wake-Up Status Register 0*/
       __O  Ifx_PMS_WAKEUP_CLR0                 CLR0;                   /**< \brief 8, Standby and Wake-Up Status Clear Register 0*/
       __IO Ifx_PMS_WAKEUP_CON1                 CON1;                   /**< \brief C, Wake-Up Configuration Register 1*/
       __I  Ifx_PMS_WAKEUP_STAT1                STAT1;                  /**< \brief 10, Wake-Up Status Register 1*/
       __O  Ifx_PMS_WAKEUP_CLR1                 CLR1;                   /**< \brief 14, Standby and Wake-Up Status Clear Register 1*/
} Ifx_PMS_WAKEUP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_STANDBY_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief STANDBY object */
typedef volatile struct _Ifx_PMS_STANDBY
{
       __IO Ifx_PMS_STANDBY_CON0                CON0;                   /**< \brief 0, Standby Configuration Register 0*/
       __IO Ifx_PMS_STANDBY_CON1                CON1;                   /**< \brief 4, Standby Configuration Register 1*/
} Ifx_PMS_STANDBY;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_WUT_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief WUT object */
typedef volatile struct _Ifx_PMS_WUT
{
       __IO Ifx_PMS_WUT_CON                     CON;                    /**< \brief 0, Wake-Up Timer Configuration Register*/
       __I  Ifx_PMS_WUT_STAT                    STAT;                   /**< \brief 4, Wake-Up Timer Status Register*/
} Ifx_PMS_WUT;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_SCR_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief SCR object */
typedef volatile struct _Ifx_PMS_SCR
{
       __IO Ifx_PMS_SCR_CON0                    CON0;                   /**< \brief 0, SCR Configuration Register 0*/
       __IO Ifx_PMS_SCR_CON1                    CON1;                   /**< \brief 4, SCR Configuration Register 1*/
       __IO Ifx_PMS_SCR_STAT                    STAT;                   /**< \brief 8, SCR Status Register*/
} Ifx_PMS_SCR;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_EVRC_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief EVRC object */
typedef volatile struct _Ifx_PMS_EVRC
{
       __I  Ifx_PMS_EVRC_STAT0                  STAT0;                  /**< \brief 0, EVRC Status Register 0*/
       __I  Ifx_PMS_EVRC_STAT1                  STAT1;                  /**< \brief 4, EVRC Status Register 1*/
       __I  Ifx_UReg_8Bit                       reserved_8[4];          /**< \brief 8, \internal Reserved */
       __IO Ifx_PMS_EVRC_CON0                   CON0;                   /**< \brief C, EVRC Configuration Register 0*/
       __IO Ifx_PMS_EVRC_CON1                   CON1;                   /**< \brief 10, EVRC Configuration Register 1*/
       __IO Ifx_PMS_EVRC_CON2                   CON2;                   /**< \brief 14, EVRC Configuration Register 2*/
       __IO Ifx_PMS_EVRC_CON3                   CON3;                   /**< \brief 18, EVRC Configuration Register 3*/
       __IO Ifx_PMS_EVRC_CON4                   CON4;                   /**< \brief 1C, EVRC Configuration Register 4*/
       __IO Ifx_PMS_EVRC_COEFF0                 COEFF0;                 /**< \brief 20, EVRC SD Coefficient Register 0 (for SDFREQ = 0)*/
       __IO Ifx_PMS_EVRC_COEFF1                 COEFF1;                 /**< \brief 24, EVRC SD Coefficient Register 1 (for SDFREQ = 0)*/
       __IO Ifx_PMS_EVRC_COEFF2                 COEFF2;                 /**< \brief 28, EVRC SD Coefficient Register 2*/
       __IO Ifx_PMS_EVRC_COEFF3                 COEFF3;                 /**< \brief 2C, EVRC SD Coefficient Register 3*/
       __IO Ifx_PMS_EVRC_COEFF4                 COEFF4;                 /**< \brief 30, EVRC SD Coefficient Register 4*/
       __IO Ifx_PMS_EVRC_COEFF5                 COEFF5;                 /**< \brief 34, EVRC SD Coefficient Register 5*/
} Ifx_PMS_EVRC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_RTC_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RTC object */
typedef volatile struct _Ifx_PMS_RTC
{
       __IO Ifx_PMS_RTC_CON0                    CON0;                   /**< \brief 0, RTC Configuration Register 0*/
       __IO Ifx_PMS_RTC_CON1                    CON1;                   /**< \brief 4, RTC Configuration Register 1*/
       __IO Ifx_PMS_RTC_CON2                    CON2;                   /**< \brief 8, RTC Configuration Register 2*/
       __IO Ifx_PMS_RTC_CMP0                    CMP0;                   /**< \brief C, RTC Compare Register 0*/
       __IO Ifx_PMS_RTC_CMP1                    CMP1;                   /**< \brief 10, RTC Compare Register 1*/
       __I  Ifx_PMS_RTC_TIM0                    TIM0;                   /**< \brief 14, RTC Timer Counter Register 0*/
       __I  Ifx_PMS_RTC_TIM1CAP                 TIM1CAP;                /**< \brief 18, RTC Timer Capture Register*/
} Ifx_PMS_RTC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_DTS_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief DTS object */
typedef volatile struct _Ifx_PMS_DTS
{
       __IO Ifx_PMS_DTS_CON                     CON;                    /**< \brief 0, Die Temperature Sensor Control Register*/
       __IO Ifx_PMS_DTS_LIM1                    LIM1;                   /**< \brief 4, Die Temperature Sensor Limit Register 1*/
       __IO Ifx_PMS_DTS_LIM2                    LIM2;                   /**< \brief 8, Die Temperature Sensor Limit Register 2*/
       __I  Ifx_PMS_DTS_STAT                    STAT;                   /**< \brief C, Die Temperature Sensor Status Register*/
} Ifx_PMS_DTS;

/******************************************************************************/
/** \addtogroup IfxSfr_Pms_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief PMS object */
typedef volatile struct _Ifx_PMS
{
       Ifx_UReg_32Bit                      XRAM[8192];            /**< \brief 0, Standby Controller Extension RAM*/
       __I  Ifx_UReg_8Bit                       reserved_8000[4096];    /**< \brief 8000, \internal Reserved */
       __IO Ifx_PMS_PROT_PMS                    PROTE;                  /**< \brief 9000, PROT Register Endinit (E)*/
       __IO Ifx_PMS_PROT_PMS                    PROTSE;                 /**< \brief 9004, PROT Register Safe Endinit (SE)*/
       __I  Ifx_PMS_ID                          ID;                     /**< \brief 9008, Identification Register*/
       __IO Ifx_PMS_ACCEN                       ACCEN;                  /**< \brief 900C, */
       __I  Ifx_PMS_REGACCSTAT                  REGACCSTAT;             /**< \brief 9024, Register Access Status Register*/
       __IO Ifx_PMS_VMONP                       VMONP;                  /**< \brief 9028, */
       __I  Ifx_UReg_8Bit                       reserved_911C[12];      /**< \brief 911C, \internal Reserved */
       __IO Ifx_PMS_VMONS                       VMONS;                  /**< \brief 9128, */
       __IO Ifx_PMS_PEAK                        PEAK;                   /**< \brief 91F0, */
       __IO Ifx_PMS_DRMON                       DRMON;                  /**< \brief 9214, */
       __IO Ifx_PMS_VID                         VID;                    /**< \brief 9244, Voltage ID (VID) Configuration Register*/
       __IO Ifx_PMS_PD                          PD;                     /**< \brief 9248, Power Domain Status Register 0*/
       __IO Ifx_PMS_INT                         INT;                    /**< \brief 9254, Interrupt Status Clear Register*/
       __IO Ifx_PMS_PAD                         PAD;                    /**< \brief 9268, */
       __I  Ifx_UReg_8Bit                       reserved_9274[8];       /**< \brief 9274, \internal Reserved */
       __IO Ifx_PMS_HPOSCCON1                   HPOSCCON1;              /**< \brief 927C, HPOSC Configuration Register 1*/
       __I  Ifx_UReg_8Bit                       reserved_9280[8];       /**< \brief 9280, \internal Reserved */
       __IO Ifx_PMS_WAKEUP                      WAKEUP;                 /**< \brief 9288, Standby and Wake-Up Status Clear Register 1*/
       __IO Ifx_PMS_STANDBY                     STANDBY;                /**< \brief 92A0, */
       __IO Ifx_PMS_WUT                         WUT;                    /**< \brief 92A8, Wake-Up Timer Status Register*/
       __IO Ifx_PMS_SCR                         SCR;                    /**< \brief 92B0, SCR Status Register*/
       __IO Ifx_PMS_EVRC                        EVRC;                   /**< \brief 92BC, */
       __IO Ifx_PMS_RTC                         RTC;                    /**< \brief 92F4, */
       __IO Ifx_PMS_DTS                         DTS;                    /**< \brief 9310, Die Temperature Sensor Trim Register*/
       __I  Ifx_UReg_8Bit                       reserved_9320[12];      /**< \brief 9320, \internal Reserved */
       __O  Ifx_PMS_CLDRSTCON                   CLDRSTCON;              /**< \brief 932C, Cold Reset Configuration Register*/
       __I  Ifx_PMS_CLDRSTSTAT                  CLDRSTSTAT;             /**< \brief 9330, Cold Reset Status Register*/
       __I  Ifx_PMS_CLDRSTRIG                   CLDRSTRIG;              /**< \brief 9334, Cold Reset Trigger Register*/
       __I  Ifx_PMS_CLDRSTRIGL                  CLDRSTRIGL;             /**< \brief 9338, Cold Reset Last Trigger Register*/
       __O  Ifx_PMS_CLDRSTSTATCLR               CLDRSTSTATCLR;          /**< \brief 933C, Cold Reset Status Clear Register*/
       __IO Ifx_PMS_OTSS                        OTSS;                   /**< \brief 9340, OCDS Trigger Set Select Register*/
       __IO Ifx_PMS_OTSC0                       OTSC0;                  /**< \brief 9344, OCDS Trigger Set Control 0 Register*/
       __IO Ifx_PMS_OTSC1                       OTSC1;                  /**< \brief 9348, OCDS Trigger Set Control 1 Register*/
       __IO Ifx_PMS_LVDPMS1USRINFO              LVDPMS1USRINFO;         /**< \brief 934C, Register to Store User Info in PMS1 Domain and Reset by LVDPMS1*/
       __IO Ifx_PMS_CLDPORSTUSRINFO             CLDPORSTUSRINFO;        /**< \brief 9350, Register to Store User Info in PMS2 Domain and Reset by Cold PORST*/
       __IO Ifx_PMS_WRMPORSTUSRINFO             WRMPORSTUSRINFO;        /**< \brief 9354, Register to Store User Info in PMS2 Domain and Reset by Warm PORST*/
       __I  Ifx_UReg_8Bit                       reserved_9358[3240];    /**< \brief 9358, \internal Reserved */
} Ifx_PMS;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXPMS_REGDEF_H */

/**
 * \file IfxTri_regdef.h
 * \brief
 * \copyright Copyright (c) 2021 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_DFT/V0.1.1.2.2
 * Specification: latest @ 2021-08-22 instance sheet @ MC_A3G_TC49x : V9.1.6.1.0 
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Tri_Registers Tri Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Tri_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Tri_Registers
 * 
 * \defgroup IfxSfr_Tri_Registers_union Register unions
 * \ingroup IfxSfr_Tri_Registers
 * 
 * \defgroup IfxSfr_Tri_Registers_struct Memory map
 * \ingroup IfxSfr_Tri_Registers
 */
#ifndef IFXTRI_REGDEF_H
#define IFXTRI_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Tri_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_TRI_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_TRI_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_TRI_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for Master TAG ID q - ENq (rw) */
} Ifx_TRI_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_TRI_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_TRI_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_TRI_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_TRI_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_TRI_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for Master TAG ID q - ENq (rw) */
} Ifx_TRI_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_TRI_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_TRI_ACCEN_WRB_FPI_Bits;

/** \brief Clock Control Register */
typedef struct _Ifx_TRI_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module Disable Request Bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module Disable Status Bit - DISS (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] Sleep Mode Enable Control - EDIS (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_TRI_CLC_Bits;

/** \brief Module Identification Register */
typedef struct _Ifx_TRI_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module Number - MOD_NUM (r) */
} Ifx_TRI_ID_Bits;

/** \brief Logic BIST Configuration Register A */
typedef struct _Ifx_TRI_LBIST_CTRL_CFGA_Bits
{
    __IO Ifx_UReg_32Bit PATTERNS:18;       /**< \brief [17:0] LBIST Pattern Number - PATTERNS (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [18:18] \internal Reserved */
    __IO Ifx_UReg_32Bit TFREQU:2;          /**< \brief [20:19] LBIST Transaction Frequency Selection - TFREQU (rw) */
    __IO Ifx_UReg_32Bit SAFESEL:1;         /**< \brief [21:21] Safety LBIST Test Indicator - SAFESEL (rw) */
    __IO Ifx_UReg_32Bit ENPARA:1;          /**< \brief [22:22] Parallel LBIST Execution Indicator - ENPARA (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [23:23] \internal Reserved */
    __IO Ifx_UReg_32Bit KEYOFF:1;          /**< \brief [24:24] Key-off Indicator - KEYOFF (rw) */
    __IO Ifx_UReg_32Bit SPLITSH:2;         /**< \brief [26:25] LBIST Split-Shift Selection - SPLITSH (rw) */
    __IO Ifx_UReg_32Bit BODY:1;            /**< \brief [27:27] Body Application Indicator - BODY (rw) */
    __IO Ifx_UReg_32Bit FREQU:4;           /**< \brief [31:28] LBIST Frequency Selection - FREQU (rw) */
} Ifx_TRI_LBIST_CTRL_CFGA_Bits;

/** \brief Logic BIST Configuration Register B */
typedef struct _Ifx_TRI_LBIST_CTRL_CFGB_Bits
{
    __IO Ifx_UReg_32Bit LENGTH0:8;         /**< \brief [7:0] LBIST Maximum Scan-Chain Length for Scan Domain #0 - LENGTH0 (rw) */
    __IO Ifx_UReg_32Bit SLENGTH0:8;        /**< \brief [15:8] LBIST Maximum Safety Scan-Chain Length for Scan Domain #0 - SLENGTH0 (rw) */
    __IO Ifx_UReg_32Bit LENGTH1:8;         /**< \brief [23:16] LBIST Maximum Scan-Chain Length for Scan Domain #1 - LENGTH1 (rw) */
    __IO Ifx_UReg_32Bit SLENGTH1:8;        /**< \brief [31:24] LBIST Maximum Safety Scan-Chain Length for Scan Domain #1 - SLENGTH1 (rw) */
} Ifx_TRI_LBIST_CTRL_CFGB_Bits;

/** \brief Logic BIST Configuration Register C */
typedef struct _Ifx_TRI_LBIST_CTRL_CFGC_Bits
{
    __IO Ifx_UReg_32Bit LENGTH2:8;         /**< \brief [7:0] LBIST Maximum Scan-Chain Length for Scan Domain #2 - LENGTH2 (rw) */
    __IO Ifx_UReg_32Bit SLENGTH2:8;        /**< \brief [15:8] LBIST Maximum Safety Scan-Chain Length for Scan Domain #2 - SLENGTH2 (rw) */
    __IO Ifx_UReg_32Bit LENGTH3:8;         /**< \brief [23:16] LBIST Maximum Scan-Chain Length for Scan Domain #3 - LENGTH3 (rw) */
    __IO Ifx_UReg_32Bit SLENGTH3:8;        /**< \brief [31:24] LBIST Maximum Safety Scan-Chain Length for Scan Domain #3 - SLENGTH3 (rw) */
} Ifx_TRI_LBIST_CTRL_CFGC_Bits;

/** \brief Logic BIST Configuration Register D */
typedef struct _Ifx_TRI_LBIST_CTRL_CFGD_Bits
{
    __IO Ifx_UReg_32Bit LENGTH4:8;         /**< \brief [7:0] LBIST Maximum Scan-Chain Length for Scan Domain #4 - LENGTH4 (rw) */
    __IO Ifx_UReg_32Bit SLENGTH4:8;        /**< \brief [15:8] LBIST Maximum Safety Scan-Chain Length for Scan Domain #4 - SLENGTH4 (rw) */
    __IO Ifx_UReg_32Bit LENGTH5:8;         /**< \brief [23:16] LBIST Maximum Scan-Chain Length for Scan Domain #5 - LENGTH5 (rw) */
    __IO Ifx_UReg_32Bit SLENGTH5:8;        /**< \brief [31:24] LBIST Maximum Safety Scan-Chain Length for Scan Domain #5 - SLENGTH5 (rw) */
} Ifx_TRI_LBIST_CTRL_CFGD_Bits;

/** \brief Logic BIST Configuration Register E */
typedef struct _Ifx_TRI_LBIST_CTRL_CFGE_Bits
{
    __IO Ifx_UReg_32Bit LENGTH6:8;         /**< \brief [7:0] LBIST Maximum Scan-Chain Length for Scan Domain #6 - LENGTH6 (rw) */
    __IO Ifx_UReg_32Bit SLENGTH6:8;        /**< \brief [15:8] LBIST Maximum Safety Scan-Chain Length for Scan Domain #6 - SLENGTH6 (rw) */
    __IO Ifx_UReg_32Bit LENGTH7:8;         /**< \brief [23:16] LBIST Maximum Scan-Chain Length for Scan Domain #7 - LENGTH7 (rw) */
    __IO Ifx_UReg_32Bit SLENGTH7:8;        /**< \brief [31:24] LBIST Maximum Safety Scan-Chain Length for Scan Domain #7 - SLENGTH7 (rw) */
} Ifx_TRI_LBIST_CTRL_CFGE_Bits;

/** \brief Logic BIST Configuration Register F */
typedef struct _Ifx_TRI_LBIST_CTRL_CFGF_Bits
{
    __IO Ifx_UReg_32Bit LBCGTRAN:2;        /**< \brief [1:0] (LBIST) Clock Gate Transparency Control - LBCGTRAN (rw) */
    __IO Ifx_UReg_32Bit TPOBSDIS:1;        /**< \brief [2:2] Test Observe Point Disabling - TPOBSDIS (rw) */
    __IO Ifx_UReg_32Bit TPCTRDIS:1;        /**< \brief [3:3] Test Control Point Disabling - TPCTRDIS (rw) */
    __IO Ifx_UReg_32Bit OBSSCDIS:1;        /**< \brief [4:4] Scan Shift Observation Disabling - OBSSCDIS (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [11:5] \internal Reserved */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_TRI_LBIST_CTRL_CFGF_Bits;

/** \brief Logic BIST Domain Selection */
typedef struct _Ifx_TRI_LBIST_CTRL_DOM_Bits
{
    __IO Ifx_UReg_32Bit SEL0:1;            /**< \brief [0:0] LBIST Hierarchical Scan Domain 0 Selection - SEL0 (rw) */
    __IO Ifx_UReg_32Bit SEL1:1;            /**< \brief [1:1] LBIST Hierarchical Scan Domain 1 Selection - SEL1 (rw) */
    __IO Ifx_UReg_32Bit SEL2:1;            /**< \brief [2:2] LBIST Hierarchical Scan Domain 2 Selection - SEL2 (rw) */
    __IO Ifx_UReg_32Bit SEL3:1;            /**< \brief [3:3] LBIST Hierarchical Scan Domain 3 Selection - SEL3 (rw) */
    __IO Ifx_UReg_32Bit SEL4:1;            /**< \brief [4:4] LBIST Hierarchical Scan Domain 4 Selection - SEL4 (rw) */
    __IO Ifx_UReg_32Bit SEL5:1;            /**< \brief [5:5] LBIST Hierarchical Scan Domain 5 Selection - SEL5 (rw) */
    __IO Ifx_UReg_32Bit SEL6:1;            /**< \brief [6:6] LBIST Hierarchical Scan Domain 6 Selection - SEL6 (rw) */
    __IO Ifx_UReg_32Bit SEL7:1;            /**< \brief [7:7] LBIST Hierarchical Scan Domain 7 Selection - SEL7 (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_TRI_LBIST_CTRL_DOM_Bits;

/** \brief Logic BIST Request Register */
typedef struct _Ifx_TRI_LBIST_CTRL_REQ_Bits
{
    __IO Ifx_UReg_32Bit REQ:1;             /**< \brief [0:0] LBIST Request - REQ (rw1sh) */
    __O  Ifx_UReg_32Bit RESET:1;           /**< \brief [1:1] LBIST-Reset - RESET (w) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [12:2] \internal Reserved */
    __IO Ifx_UReg_32Bit FAILCIN:3;         /**< \brief [15:13] Fail Counter Input - FAILCIN (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [29:16] \internal Reserved */
    __IO Ifx_UReg_32Bit ERRINJ:1;          /**< \brief [30:30] LBIST / Test-Mode Alarm Error Injection - ERRINJ (rwh) */
    __IO Ifx_UReg_32Bit REQ_RED:1;         /**< \brief [31:31] LBIST Request Redundancy - REQ_RED (rw1sh) */
} Ifx_TRI_LBIST_CTRL_REQ_Bits;

/** \brief Logic BIST Result 0 Register */
typedef struct _Ifx_TRI_LBIST_STAT_RES_SIG_Bits
{
    __I  Ifx_UReg_32Bit SIGNATURE:32;      /**< \brief [31:0] LBIST Domain 0 Signature - SIGNATURE (rh) */
} Ifx_TRI_LBIST_STAT_RES_SIG_Bits;

/** \brief Logic BIST Status Register */
typedef struct _Ifx_TRI_LBIST_STAT_TEST_Bits
{
    __I  Ifx_UReg_32Bit DONE:1;            /**< \brief [0:0] LBIST Execution Indicator - DONE (rh) */
    __I  Ifx_UReg_32Bit SAFEIND:1;         /**< \brief [1:1] Safety LBIST Memory Bit - SAFEIND (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __I  Ifx_UReg_32Bit KEYIND:1;          /**< \brief [3:3] Key-off LBIST Memory Bit - KEYIND (rh) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [12:4] \internal Reserved */
    __I  Ifx_UReg_32Bit FAILCOUT:3;        /**< \brief [15:13] Fail Counter Output - FAILCOUT (rh) */
    __I  Ifx_UReg_32Bit DOMDONE0:1;        /**< \brief [16:16] LBIST Hierarchical Scan Domain 0 Execution Status Indicator - DOMDONE0 (rh) */
    __I  Ifx_UReg_32Bit DOMDONE1:1;        /**< \brief [17:17] LBIST Hierarchical Scan Domain 1 Execution Status Indicator - DOMDONE1 (rh) */
    __I  Ifx_UReg_32Bit DOMDONE2:1;        /**< \brief [18:18] LBIST Hierarchical Scan Domain 2 Execution Status Indicator - DOMDONE2 (rh) */
    __I  Ifx_UReg_32Bit DOMDONE3:1;        /**< \brief [19:19] LBIST Hierarchical Scan Domain 3 Execution Status Indicator - DOMDONE3 (rh) */
    __I  Ifx_UReg_32Bit DOMDONE4:1;        /**< \brief [20:20] LBIST Hierarchical Scan Domain 4 Execution Status Indicator - DOMDONE4 (rh) */
    __I  Ifx_UReg_32Bit DOMDONE5:1;        /**< \brief [21:21] LBIST Hierarchical Scan Domain 5 Execution Status Indicator - DOMDONE5 (rh) */
    __I  Ifx_UReg_32Bit DOMDONE6:1;        /**< \brief [22:22] LBIST Hierarchical Scan Domain 6 Execution Status Indicator - DOMDONE6 (rh) */
    __I  Ifx_UReg_32Bit DOMDONE7:1;        /**< \brief [23:23] LBIST Hierarchical Scan Domain 7 Execution Status Indicator - DOMDONE7 (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_TRI_LBIST_STAT_TEST_Bits;

/** \brief OCDS Control and Status Register */
typedef struct _Ifx_TRI_OCS_Bits
{
    __IO Ifx_UReg_32Bit TGS:2;             /**< \brief [1:0] Trigger Set for OTGB0/1 - TGS (rw) */
    __IO Ifx_UReg_32Bit TGB:1;             /**< \brief [2:2] OTGB0/1 Bus Select - TGB (rw) */
    __O  Ifx_UReg_32Bit TG_P:1;            /**< \brief [3:3] TGS, TGB Write Protection - TG_P (w) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [23:4] \internal Reserved */
    __IO Ifx_UReg_32Bit SUS:4;             /**< \brief [27:24] OCDS Suspend Control - SUS (rw) */
    __O  Ifx_UReg_32Bit SUS_P:1;           /**< \brief [28:28] SUS Write Protection - SUS_P (w) */
    __I  Ifx_UReg_32Bit SUSSTA:1;          /**< \brief [29:29] Suspend State - SUSSTA (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_TRI_OCS_Bits;

/** \brief Resource Protection Register */
typedef struct _Ifx_TRI_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual Machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual Machine definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection Set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection Set definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_TRI_PROT_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_tri_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRI_ACCEN_PRS_Bits B;         /**< \brief Bitfield access */
} Ifx_TRI_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRI_ACCEN_RDA_Bits B;         /**< \brief Bitfield access */
} Ifx_TRI_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRI_ACCEN_RDB_FPI_Bits B;     /**< \brief Bitfield access */
} Ifx_TRI_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRI_ACCEN_VM_Bits B;          /**< \brief Bitfield access */
} Ifx_TRI_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRI_ACCEN_WRA_Bits B;         /**< \brief Bitfield access */
} Ifx_TRI_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRI_ACCEN_WRB_FPI_Bits B;     /**< \brief Bitfield access */
} Ifx_TRI_ACCEN_WRB_FPI;

/** \brief Clock Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRI_CLC_Bits B;               /**< \brief Bitfield access */
} Ifx_TRI_CLC;

/** \brief Module Identification Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRI_ID_Bits B;                /**< \brief Bitfield access */
} Ifx_TRI_ID;

/** \brief Logic BIST Configuration Register A   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRI_LBIST_CTRL_CFGA_Bits B;    /**< \brief Bitfield access */
} Ifx_TRI_LBIST_CTRL_CFGA;

/** \brief Logic BIST Configuration Register B   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRI_LBIST_CTRL_CFGB_Bits B;    /**< \brief Bitfield access */
} Ifx_TRI_LBIST_CTRL_CFGB;

/** \brief Logic BIST Configuration Register C   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRI_LBIST_CTRL_CFGC_Bits B;    /**< \brief Bitfield access */
} Ifx_TRI_LBIST_CTRL_CFGC;

/** \brief Logic BIST Configuration Register D   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRI_LBIST_CTRL_CFGD_Bits B;    /**< \brief Bitfield access */
} Ifx_TRI_LBIST_CTRL_CFGD;

/** \brief Logic BIST Configuration Register E   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRI_LBIST_CTRL_CFGE_Bits B;    /**< \brief Bitfield access */
} Ifx_TRI_LBIST_CTRL_CFGE;

/** \brief Logic BIST Configuration Register F   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRI_LBIST_CTRL_CFGF_Bits B;    /**< \brief Bitfield access */
} Ifx_TRI_LBIST_CTRL_CFGF;

/** \brief Logic BIST Domain Selection   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRI_LBIST_CTRL_DOM_Bits B;    /**< \brief Bitfield access */
} Ifx_TRI_LBIST_CTRL_DOM;

/** \brief Logic BIST Request Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRI_LBIST_CTRL_REQ_Bits B;    /**< \brief Bitfield access */
} Ifx_TRI_LBIST_CTRL_REQ;

/** \brief Logic BIST Result 0 Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRI_LBIST_STAT_RES_SIG_Bits B;    /**< \brief Bitfield access */
} Ifx_TRI_LBIST_STAT_RES_SIG;

/** \brief Logic BIST Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRI_LBIST_STAT_TEST_Bits B;    /**< \brief Bitfield access */
} Ifx_TRI_LBIST_STAT_TEST;

/** \brief OCDS Control and Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRI_OCS_Bits B;               /**< \brief Bitfield access */
} Ifx_TRI_OCS;

/** \brief Resource Protection Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRI_PROT_Bits B;              /**< \brief Bitfield access */
} Ifx_TRI_PROT;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Tri_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_TRI_ACCEN
{
       __IO Ifx_TRI_ACCEN_WRA                   WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_TRI_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_TRI_ACCEN_RDA                   RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_TRI_ACCEN_RDB_FPI               RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_TRI_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_TRI_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_TRI_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Tri_LBIST_CTRL_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief CTRL object */
typedef volatile struct _Ifx_TRI_LBIST_CTRL
{
       __IO Ifx_TRI_LBIST_CTRL_REQ              REQ;                    /**< \brief 0, Logic BIST Request Register*/
       __IO Ifx_TRI_LBIST_CTRL_CFGA             CFGA;                   /**< \brief 4, Logic BIST Configuration Register A*/
       __IO Ifx_TRI_LBIST_CTRL_CFGB             CFGB;                   /**< \brief 8, Logic BIST Configuration Register B*/
       __IO Ifx_TRI_LBIST_CTRL_CFGC             CFGC;                   /**< \brief C, Logic BIST Configuration Register C*/
       __IO Ifx_TRI_LBIST_CTRL_CFGD             CFGD;                   /**< \brief 10, Logic BIST Configuration Register D*/
       __IO Ifx_TRI_LBIST_CTRL_CFGE             CFGE;                   /**< \brief 14, Logic BIST Configuration Register E*/
       __IO Ifx_TRI_LBIST_CTRL_CFGF             CFGF;                   /**< \brief 18, Logic BIST Configuration Register F*/
       __IO Ifx_TRI_LBIST_CTRL_DOM              DOM;                    /**< \brief 1C, Logic BIST Domain Selection*/
} Ifx_TRI_LBIST_CTRL;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Tri_LBIST_STAT_RES_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief RES object */
typedef volatile struct _Ifx_TRI_LBIST_STAT_RES
{
       __I  Ifx_TRI_LBIST_STAT_RES_SIG          SIG;                    /**< \brief 0, Logic BIST Result 0 Register*/
} Ifx_TRI_LBIST_STAT_RES;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Tri_LBIST_STAT_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief STAT object */
typedef volatile struct _Ifx_TRI_LBIST_STAT
{
       __I  Ifx_TRI_LBIST_STAT_TEST             TEST;                   /**< \brief 0, Logic BIST Status Register*/
       __IO Ifx_TRI_LBIST_STAT_RES              RES[8];                 /**< \brief 4, */
} Ifx_TRI_LBIST_STAT;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Tri_LBIST_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief LBIST object */
typedef volatile struct _Ifx_TRI_LBIST
{
       __IO Ifx_TRI_LBIST_CTRL                  CTRL;                   /**< \brief 0, LBIST control registers*/
       __IO Ifx_TRI_LBIST_STAT                  STAT;                   /**< \brief 20, LBIST Status registers*/
} Ifx_TRI_LBIST;

/******************************************************************************/
/** \addtogroup IfxSfr_Tri_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief TRI object */
typedef volatile struct _Ifx_TRI
{
       __IO Ifx_TRI_CLC                         CLC;                    /**< \brief 0, Clock Control Register*/
       __IO Ifx_TRI_OCS                         OCS;                    /**< \brief 4, OCDS Control and Status Register*/
       __I  Ifx_TRI_ID                          ID;                     /**< \brief 8, Module Identification Register*/
       __I  Ifx_UReg_8Bit                       reserved_C[20];         /**< \brief C, \internal Reserved */
       __IO Ifx_TRI_PROT                        PROTE;                  /**< \brief 20, PROT Register Endinit*/
       __IO Ifx_TRI_PROT                        PROTSE;                 /**< \brief 24, PROT Register Safe Endinit*/
       __I  Ifx_UReg_8Bit                       reserved_28[24];        /**< \brief 28, \internal Reserved */
       __IO Ifx_TRI_ACCEN                       ACCEN;                  /**< \brief 40, */
       __IO Ifx_TRI_LBIST                       LBIST;                  /**< \brief 60, LBIST Status registers*/
       __I  Ifx_UReg_8Bit                       reserved_A4[92];        /**< \brief A4, \internal Reserved */
} Ifx_TRI;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXTRI_REGDEF_H */

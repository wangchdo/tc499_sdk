/**
 * \file IfxDom_regdef.h
 * \brief
 * \copyright Copyright (c) 2021 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_SRI/V9.1.1.1.0
 * Specification: latest @ 2021-08-22 instance sheet @ MC_A3G_TC49x : V9.1.6.1.0 
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Dom_Registers Dom Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Dom_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Dom_Registers
 * 
 * \defgroup IfxSfr_Dom_Registers_union Register unions
 * \ingroup IfxSfr_Dom_Registers
 * 
 * \defgroup IfxSfr_Dom_Registers_struct Memory map
 * \ingroup IfxSfr_Dom_Registers
 */
#ifndef IFXDOM_REGDEF_H
#define IFXDOM_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Dom_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_DOM_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_DOM_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_DOM_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for Master TAG ID q - ENq (rw) */
} Ifx_DOM_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_DOM_ACCEN_RDB_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN40:1;            /**< \brief [8:8] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN41:1;            /**< \brief [9:9] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN42:1;            /**< \brief [10:10] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN43:1;            /**< \brief [11:11] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN44:1;            /**< \brief [12:12] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN45:1;            /**< \brief [13:13] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN46:1;            /**< \brief [14:14] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN47:1;            /**< \brief [15:15] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN48:1;            /**< \brief [16:16] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN49:1;            /**< \brief [17:17] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN50:1;            /**< \brief [18:18] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN51:1;            /**< \brief [19:19] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN52:1;            /**< \brief [20:20] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN53:1;            /**< \brief [21:21] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN54:1;            /**< \brief [22:22] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN55:1;            /**< \brief [23:23] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN56:1;            /**< \brief [24:24] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN57:1;            /**< \brief [25:25] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN58:1;            /**< \brief [26:26] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN59:1;            /**< \brief [27:27] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN60:1;            /**< \brief [28:28] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN61:1;            /**< \brief [29:29] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN62:1;            /**< \brief [30:30] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN63:1;            /**< \brief [31:31] Read access enable for Master TAG ID q - ENq (rw) */
} Ifx_DOM_ACCEN_RDB_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_DOM_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_DOM_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_DOM_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for Master TAG ID q - ENq (rw) */
} Ifx_DOM_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_DOM_ACCEN_WRB_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN40:1;            /**< \brief [8:8] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN41:1;            /**< \brief [9:9] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN42:1;            /**< \brief [10:10] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN43:1;            /**< \brief [11:11] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN44:1;            /**< \brief [12:12] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN45:1;            /**< \brief [13:13] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN46:1;            /**< \brief [14:14] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN47:1;            /**< \brief [15:15] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN48:1;            /**< \brief [16:16] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN49:1;            /**< \brief [17:17] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN50:1;            /**< \brief [18:18] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN51:1;            /**< \brief [19:19] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN52:1;            /**< \brief [20:20] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN53:1;            /**< \brief [21:21] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN54:1;            /**< \brief [22:22] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN55:1;            /**< \brief [23:23] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN56:1;            /**< \brief [24:24] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN57:1;            /**< \brief [25:25] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN58:1;            /**< \brief [26:26] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN59:1;            /**< \brief [27:27] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN60:1;            /**< \brief [28:28] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN61:1;            /**< \brief [29:29] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN62:1;            /**< \brief [30:30] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN63:1;            /**< \brief [31:31] Write access enable for Master TAG ID q - ENq (rw) */
} Ifx_DOM_ACCEN_WRB_Bits;

/** \brief Bridge Control Register */
typedef struct _Ifx_DOM_BRCON_Bits
{
    __IO Ifx_Strict_32Bit OLDAEN:1;        /**< \brief [0:0] Online Data Acquisition Enable - OLDAEN (rw) */
    __I  Ifx_Strict_32Bit :31;             /**< \brief [31:1] \internal Reserved */
} Ifx_DOM_BRCON_Bits;

/** \brief Identification Register */
typedef struct _Ifx_DOM_ID_Bits
{
    __I  Ifx_Strict_32Bit MOD_REV:8;       /**< \brief [7:0] Module Revision Number - MOD_REV (r) */
    __I  Ifx_Strict_32Bit MOD_TYPE:8;      /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_Strict_32Bit MOD_NUM:16;      /**< \brief [31:16] Module Number Value - MOD_NUM (r) */
} Ifx_DOM_ID_Bits;

/** \brief Protocol Error Status Register */
typedef struct _Ifx_DOM_PESTAT_Bits
{
    __I  Ifx_Strict_32Bit :16;             /**< \brief [15:0] \internal Reserved */
    __IO Ifx_Strict_32Bit PESCI0:1;        /**< \brief [16:16] Protocol Error status of SCI0 - PESCI0 (rwh) */
    __IO Ifx_Strict_32Bit PESCI1:1;        /**< \brief [17:17] Protocol Error status of SCI1 - PESCI1 (rwh) */
    __IO Ifx_Strict_32Bit PESCI2:1;        /**< \brief [18:18] Protocol Error status of SCI2 - PESCI2 (rwh) */
    __IO Ifx_Strict_32Bit PESCI3:1;        /**< \brief [19:19] Protocol Error status of SCI3 - PESCI3 (rwh) */
    __IO Ifx_Strict_32Bit PESCI4:1;        /**< \brief [20:20] Protocol Error status of SCI4 - PESCI4 (rwh) */
    __IO Ifx_Strict_32Bit PESCI5:1;        /**< \brief [21:21] Protocol Error status of SCI5 - PESCI5 (rwh) */
    __IO Ifx_Strict_32Bit PESCI6:1;        /**< \brief [22:22] Protocol Error status of SCI6 - PESCI6 (rwh) */
    __IO Ifx_Strict_32Bit PESCI7:1;        /**< \brief [23:23] Protocol Error status of SCI7 - PESCI7 (rwh) */
    __IO Ifx_Strict_32Bit PESCI8:1;        /**< \brief [24:24] Protocol Error status of SCI8 - PESCI8 (rwh) */
    __IO Ifx_Strict_32Bit PESCI9:1;        /**< \brief [25:25] Protocol Error status of SCI9 - PESCI9 (rwh) */
    __IO Ifx_Strict_32Bit PESCI10:1;       /**< \brief [26:26] Protocol Error status of SCI10 - PESCI10 (rwh) */
    __IO Ifx_Strict_32Bit PESCI11:1;       /**< \brief [27:27] Protocol Error status of SCI11 - PESCI11 (rwh) */
    __IO Ifx_Strict_32Bit PESCI12:1;       /**< \brief [28:28] Protocol Error status of SCI12 - PESCI12 (rwh) */
    __IO Ifx_Strict_32Bit PESCI13:1;       /**< \brief [29:29] Protocol Error status of SCI13 - PESCI13 (rwh) */
    __IO Ifx_Strict_32Bit PESCI14:1;       /**< \brief [30:30] Protocol Error status of SCI14 - PESCI14 (rwh) */
    __IO Ifx_Strict_32Bit PESCI15:1;       /**< \brief [31:31] Protocol Error status of SCI15 - PESCI15 (rwh) */
} Ifx_DOM_PESTAT_Bits;

/** \brief Resource Protection Register */
typedef struct _Ifx_DOM_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual Machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual Machine definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection Set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection Set definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_DOM_PROT_Bits;

/** \brief SCI 0 Error Capture Register */
typedef struct _Ifx_DOM_SCICTRL_ERR_Bits
{
    __I  Ifx_Strict_32Bit RD_N:1;          /**< \brief [0:0] Read Status - RD (rh) */
    __I  Ifx_Strict_32Bit WR_N:1;          /**< \brief [1:1] Write Status - WR (rh) */
    __I  Ifx_Strict_32Bit SVM:1;           /**< \brief [2:2] Supervisor Mode Status - SVM (rh) */
    __I  Ifx_Strict_32Bit LOCK_N:1;        /**< \brief [3:3] Lock Status - LK (rh) */
    __I  Ifx_Strict_32Bit OPC:3;           /**< \brief [6:4] Operation Code - OPC (rh) */
    __I  Ifx_Strict_32Bit SM:1;            /**< \brief [7:7] Special Master - SM (rh) */
    __I  Ifx_Strict_32Bit TR_ID:8;         /**< \brief [15:8] Transaction ID - TR_ID (rh) */
    __I  Ifx_Strict_32Bit ADDR_EDC:8;      /**< \brief [23:16] Address Phase Error Detection Information - ADDR_EDC (rh) */
    __I  Ifx_Strict_32Bit PRS:3;           /**< \brief [26:24] Protection Register Set - PRS (rh) */
    __I  Ifx_Strict_32Bit PRS_EN:1;        /**< \brief [27:27] PRS Enable (rh) */
    __I  Ifx_Strict_32Bit VM:3;            /**< \brief [30:28] Virtual Machine - VM (rh) */
    __I  Ifx_Strict_32Bit VM_EN:1;         /**< \brief [31:31] VM Enable (rh) */
} Ifx_DOM_SCICTRL_ERR_Bits;

/** \brief SCI 0 Error Address Capture Register */
typedef struct _Ifx_DOM_SCICTRL_ERRADDR_Bits
{
    __I  Ifx_Strict_32Bit ADDR:32;         /**< \brief [31:0] Transaction Address - ADDR (rh) */
} Ifx_DOM_SCICTRL_ERRADDR_Bits;

/** \brief Protocol Error Control Register 0 */
typedef struct _Ifx_DOM_SCICTRL_PECON_Bits
{
    __IO Ifx_Strict_32Bit PEEN:1;          /**< \brief [0:0] Protocol Error Enable - PEEN (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [1:1] \internal Reserved */
    __IO Ifx_Strict_32Bit SETPE:1;         /**< \brief [2:2] Set Protocol Error - SETPE (rwh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [3:3] \internal Reserved */
    __IO Ifx_Strict_32Bit PEACK:1;         /**< \brief [4:4] Protocol Error Acknowledge - PEACK (rwh) */
    __I  Ifx_Strict_32Bit :27;             /**< \brief [31:5] \internal Reserved */
} Ifx_DOM_SCICTRL_PECON_Bits;

/** \brief SCI0 Arbiter Priority Register */
typedef struct _Ifx_DOM_SCICTRL_PRIORITY_Bits
{
    __IO Ifx_Strict_32Bit MCI0_P:1;        /**< \brief [0:0] MCI0 Priority - MCI0_P (rw) */
    __IO Ifx_Strict_32Bit MCI1_P:1;        /**< \brief [1:1] MCI1 Priority - MCI1_P (rw) */
    __IO Ifx_Strict_32Bit MCI2_P:1;        /**< \brief [2:2] MCI2 Priority - MCI2_P (rw) */
    __IO Ifx_Strict_32Bit MCI3_P:1;        /**< \brief [3:3] MCI3 Priority - MCI3_P (rw) */
    __IO Ifx_Strict_32Bit MCI4_P:1;        /**< \brief [4:4] MCI4 Priority - MCI4_P (rw) */
    __IO Ifx_Strict_32Bit MCI5_P:1;        /**< \brief [5:5] MCI5 Priority - MCI5_P (rw) */
    __IO Ifx_Strict_32Bit MCI6_P:1;        /**< \brief [6:6] MCI6 Priority - MCI6_P (rw) */
    __IO Ifx_Strict_32Bit MCI7_P:1;        /**< \brief [7:7] MCI7 Priority - MCI7_P (rw) */
    __IO Ifx_Strict_32Bit MCI8_P:1;        /**< \brief [8:8] MCI8 Priority - MCI8_P (rw) */
    __IO Ifx_Strict_32Bit MCI9_P:1;        /**< \brief [9:9] MCI9 Priority - MCI9_P (rw) */
    __IO Ifx_Strict_32Bit MCI10_P:1;       /**< \brief [10:10] MCI10 Priority - MCI10_P (rw) */
    __IO Ifx_Strict_32Bit MCI11_P:1;       /**< \brief [11:11] MCI11 Priority - MCI11_P (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [15:12] \internal Reserved */
    __IO Ifx_Strict_32Bit HPRS:4;          /**< \brief [19:16] High Priority Round Share - HPRS (rw) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [31:20] \internal Reserved */
} Ifx_DOM_SCICTRL_PRIORITY_Bits;

/** \brief Transaction ID Enable Register */
typedef struct _Ifx_DOM_TIDEN_Bits
{
    __IO Ifx_Strict_32Bit ENSCI0:1;        /**< \brief [0:0] E0able Transaction ID Error from SCIn - ENSCI0 (rw) */
    __IO Ifx_Strict_32Bit ENSCI1:1;        /**< \brief [1:1] E1able Transaction ID Error from SCIn - ENSCI1 (rw) */
    __IO Ifx_Strict_32Bit ENSCI2:1;        /**< \brief [2:2] E2able Transaction ID Error from SCIn - ENSCI2 (rw) */
    __IO Ifx_Strict_32Bit ENSCI3:1;        /**< \brief [3:3] E3able Transaction ID Error from SCIn - ENSCI3 (rw) */
    __IO Ifx_Strict_32Bit ENSCI4:1;        /**< \brief [4:4] E4able Transaction ID Error from SCIn - ENSCI4 (rw) */
    __IO Ifx_Strict_32Bit ENSCI5:1;        /**< \brief [5:5] E5able Transaction ID Error from SCIn - ENSCI5 (rw) */
    __IO Ifx_Strict_32Bit ENSCI6:1;        /**< \brief [6:6] E6able Transaction ID Error from SCIn - ENSCI6 (rw) */
    __IO Ifx_Strict_32Bit ENSCI7:1;        /**< \brief [7:7] E7able Transaction ID Error from SCIn - ENSCI7 (rw) */
    __IO Ifx_Strict_32Bit ENSCI8:1;        /**< \brief [8:8] E8able Transaction ID Error from SCIn - ENSCI8 (rw) */
    __IO Ifx_Strict_32Bit ENSCI9:1;        /**< \brief [9:9] E9able Transaction ID Error from SCIn - ENSCI9 (rw) */
    __IO Ifx_Strict_32Bit ENSCI10:1;       /**< \brief [10:10] E10able Transaction ID Error from SCIn - ENSCI10 (rw) */
    __IO Ifx_Strict_32Bit ENSCI11:1;       /**< \brief [11:11] E11able Transaction ID Error from SCIn - ENSCI11 (rw) */
    __IO Ifx_Strict_32Bit ENSCI12:1;       /**< \brief [12:12] E12able Transaction ID Error from SCIn - ENSCI12 (rw) */
    __IO Ifx_Strict_32Bit ENSCI13:1;       /**< \brief [13:13] E13able Transaction ID Error from SCIn - ENSCI13 (rw) */
    __IO Ifx_Strict_32Bit ENSCI14:1;       /**< \brief [14:14] E14able Transaction ID Error from SCIn - ENSCI14 (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [15:15] \internal Reserved */
    __IO Ifx_Strict_32Bit ENMCI0:1;        /**< \brief [16:16] E0able Transaction ID Error from MCIn - ENMCI0 (rw) */
    __IO Ifx_Strict_32Bit ENMCI1:1;        /**< \brief [17:17] E1able Transaction ID Error from MCIn - ENMCI1 (rw) */
    __IO Ifx_Strict_32Bit ENMCI2:1;        /**< \brief [18:18] E2able Transaction ID Error from MCIn - ENMCI2 (rw) */
    __IO Ifx_Strict_32Bit ENMCI3:1;        /**< \brief [19:19] E3able Transaction ID Error from MCIn - ENMCI3 (rw) */
    __IO Ifx_Strict_32Bit ENMCI4:1;        /**< \brief [20:20] E4able Transaction ID Error from MCIn - ENMCI4 (rw) */
    __IO Ifx_Strict_32Bit ENMCI5:1;        /**< \brief [21:21] E5able Transaction ID Error from MCIn - ENMCI5 (rw) */
    __IO Ifx_Strict_32Bit ENMCI6:1;        /**< \brief [22:22] E6able Transaction ID Error from MCIn - ENMCI6 (rw) */
    __IO Ifx_Strict_32Bit ENMCI7:1;        /**< \brief [23:23] E7able Transaction ID Error from MCIn - ENMCI7 (rw) */
    __IO Ifx_Strict_32Bit ENMCI8:1;        /**< \brief [24:24] E8able Transaction ID Error from MCIn - ENMCI8 (rw) */
    __IO Ifx_Strict_32Bit ENMCI9:1;        /**< \brief [25:25] E9able Transaction ID Error from MCIn - ENMCI9 (rw) */
    __IO Ifx_Strict_32Bit ENMCI10:1;       /**< \brief [26:26] E10able Transaction ID Error from MCIn - ENMCI10 (rw) */
    __IO Ifx_Strict_32Bit ENMCI11:1;       /**< \brief [27:27] E11able Transaction ID Error from MCIn - ENMCI11 (rw) */
    __IO Ifx_Strict_32Bit ENMCI12:1;       /**< \brief [28:28] E12able Transaction ID Error from MCIn - ENMCI12 (rw) */
    __IO Ifx_Strict_32Bit ENMCI13:1;       /**< \brief [29:29] E13able Transaction ID Error from MCIn - ENMCI13 (rw) */
    __IO Ifx_Strict_32Bit ENMCI14:1;       /**< \brief [30:30] E14able Transaction ID Error from MCIn - ENMCI14 (rw) */
    __IO Ifx_Strict_32Bit ENMCI15:1;       /**< \brief [31:31] E15able Transaction ID Error from MCIn - ENMCI15 (rw) */
    __I  Ifx_Strict_32Bit :0;              /**< \brief [31:32] \internal Reserved */
} Ifx_DOM_TIDEN_Bits;

/** \brief Transaction ID Status Register */
typedef struct _Ifx_DOM_TIDSTAT_Bits
{
    __IO Ifx_Strict_32Bit TIDSCI0:1;       /**< \brief [0:0] Tra0saction ID Error from SCIn Status - TIDSCI0 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI1:1;       /**< \brief [1:1] Tra1saction ID Error from SCIn Status - TIDSCI1 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI2:1;       /**< \brief [2:2] Tra2saction ID Error from SCIn Status - TIDSCI2 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI3:1;       /**< \brief [3:3] Tra3saction ID Error from SCIn Status - TIDSCI3 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI4:1;       /**< \brief [4:4] Tra4saction ID Error from SCIn Status - TIDSCI4 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI5:1;       /**< \brief [5:5] Tra5saction ID Error from SCIn Status - TIDSCI5 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI6:1;       /**< \brief [6:6] Tra6saction ID Error from SCIn Status - TIDSCI6 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI7:1;       /**< \brief [7:7] Tra7saction ID Error from SCIn Status - TIDSCI7 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI8:1;       /**< \brief [8:8] Tra8saction ID Error from SCIn Status - TIDSCI8 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI9:1;       /**< \brief [9:9] Tra9saction ID Error from SCIn Status - TIDSCI9 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI10:1;      /**< \brief [10:10] Tra10saction ID Error from SCIn Status - TIDSCI10 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI11:1;      /**< \brief [11:11] Tra11saction ID Error from SCIn Status - TIDSCI11 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI12:1;      /**< \brief [12:12] Tra12saction ID Error from SCIn Status - TIDSCI12 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI13:1;      /**< \brief [13:13] Tra13saction ID Error from SCIn Status - TIDSCI13 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI14:1;      /**< \brief [14:14] Tra14saction ID Error from SCIn Status - TIDSCI14 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI15:1;      /**< \brief [15:15] Tra15saction ID Error from SCIn Status - TIDSCI15 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI0:1;       /**< \brief [16:16] Tra0saction ID Error from MCIn Status - TIDMCI0 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI1:1;       /**< \brief [17:17] Tra1saction ID Error from MCIn Status - TIDMCI1 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI2:1;       /**< \brief [18:18] Tra2saction ID Error from MCIn Status - TIDMCI2 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI3:1;       /**< \brief [19:19] Tra3saction ID Error from MCIn Status - TIDMCI3 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI4:1;       /**< \brief [20:20] Tra4saction ID Error from MCIn Status - TIDMCI4 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI5:1;       /**< \brief [21:21] Tra5saction ID Error from MCIn Status - TIDMCI5 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI6:1;       /**< \brief [22:22] Tra6saction ID Error from MCIn Status - TIDMCI6 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI7:1;       /**< \brief [23:23] Tra7saction ID Error from MCIn Status - TIDMCI7 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI8:1;       /**< \brief [24:24] Tra8saction ID Error from MCIn Status - TIDMCI8 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI9:1;       /**< \brief [25:25] Tra9saction ID Error from MCIn Status - TIDMCI9 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI10:1;      /**< \brief [26:26] Tra10saction ID Error from MCIn Status - TIDMCI10 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI11:1;      /**< \brief [27:27] Tra11saction ID Error from MCIn Status - TIDMCI11 (rwh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_DOM_TIDSTAT_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_dom_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_ACCEN_PRS_Bits B;         /**< \brief Bitfield access */
} Ifx_DOM_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_ACCEN_RDA_Bits B;         /**< \brief Bitfield access */
} Ifx_DOM_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_ACCEN_RDB_Bits B;         /**< \brief Bitfield access */
} Ifx_DOM_ACCEN_RDB;

/** \brief VM access enable register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_ACCEN_VM_Bits B;          /**< \brief Bitfield access */
} Ifx_DOM_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_ACCEN_WRA_Bits B;         /**< \brief Bitfield access */
} Ifx_DOM_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_ACCEN_WRB_Bits B;         /**< \brief Bitfield access */
} Ifx_DOM_ACCEN_WRB;

/** \brief Bridge Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_BRCON_Bits B;             /**< \brief Bitfield access */
} Ifx_DOM_BRCON;

/** \brief Identification Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_ID_Bits B;                /**< \brief Bitfield access */
} Ifx_DOM_ID;

/** \brief Protocol Error Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_PESTAT_Bits B;            /**< \brief Bitfield access */
} Ifx_DOM_PESTAT;

/** \brief Resource Protection Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_PROT_Bits B;              /**< \brief Bitfield access */
} Ifx_DOM_PROT;

/** \brief SCI 0 Error Capture Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_SCICTRL_ERR_Bits B;       /**< \brief Bitfield access */
} Ifx_DOM_SCICTRL_ERR;

/** \brief SCI 0 Error Address Capture Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_SCICTRL_ERRADDR_Bits B;    /**< \brief Bitfield access */
} Ifx_DOM_SCICTRL_ERRADDR;

/** \brief Protocol Error Control Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_SCICTRL_PECON_Bits B;     /**< \brief Bitfield access */
} Ifx_DOM_SCICTRL_PECON;

/** \brief SCI0 Arbiter Priority Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_SCICTRL_PRIORITY_Bits B;    /**< \brief Bitfield access */
} Ifx_DOM_SCICTRL_PRIORITY;

/** \brief Transaction ID Enable Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_TIDEN_Bits B;             /**< \brief Bitfield access */
} Ifx_DOM_TIDEN;

/** \brief Transaction ID Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_TIDSTAT_Bits B;           /**< \brief Bitfield access */
} Ifx_DOM_TIDSTAT;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dom_SCICTRL_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief SCICTRL object */
typedef volatile struct _Ifx_DOM_SCICTRL
{
       __IO Ifx_DOM_SCICTRL_PECON               PECON;                  /**< \brief 0, Protocol Error Control Register 0*/
       __I  Ifx_UReg_8Bit                       reserved_4[4];          /**< \brief 4, \internal Reserved */
       __IO Ifx_DOM_SCICTRL_PRIORITY            PRIORITY;               /**< \brief 8, SCI0 Arbiter Priority Register*/
       __I  Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
       __I  Ifx_DOM_SCICTRL_ERRADDR             ERRADDR;                /**< \brief 10, SCI 0 Error Address Capture Register*/
       __I  Ifx_UReg_8Bit                       reserved_14[4];         /**< \brief 14, \internal Reserved */
       __I  Ifx_DOM_SCICTRL_ERR                 ERR;                    /**< \brief 18, SCI 0 Error Capture Register*/
       __I  Ifx_UReg_8Bit                       reserved_1C[4];         /**< \brief 1C, \internal Reserved */
} Ifx_DOM_SCICTRL;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dom_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_DOM_ACCEN
{
       __IO Ifx_DOM_ACCEN_WRA                   WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_DOM_ACCEN_WRB                   WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_DOM_ACCEN_RDA                   RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_DOM_ACCEN_RDB                   RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_DOM_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_DOM_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[4];         /**< \brief 18, \internal Reserved */
} Ifx_DOM_ACCEN;

/******************************************************************************/
/** \addtogroup IfxSfr_Dom_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief DOM object */
typedef volatile struct _Ifx_DOM
{
       __IO Ifx_DOM_SCICTRL                     SCICTRL[16];            /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_200[520];      /**< \brief 200, \internal Reserved */
       __I  Ifx_DOM_ID                          ID;                     /**< \brief 408, Identification Register*/
       __I  Ifx_UReg_8Bit                       reserved_40C[4];        /**< \brief 40C, \internal Reserved */
       __IO Ifx_DOM_PESTAT                      PESTAT;                 /**< \brief 410, Protocol Error Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_414[4];        /**< \brief 414, \internal Reserved */
       __IO Ifx_DOM_TIDSTAT                     TIDSTAT;                /**< \brief 418, Transaction ID Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_41C[4];        /**< \brief 41C, \internal Reserved */
       __IO Ifx_DOM_TIDEN                       TIDEN;                  /**< \brief 420, Transaction ID Enable Register*/
       __I  Ifx_UReg_8Bit                       reserved_424[12];       /**< \brief 424, \internal Reserved */
       __IO Ifx_DOM_BRCON                       BRCON;                  /**< \brief 430, Bridge Control Register*/
       __I  Ifx_UReg_8Bit                       reserved_434[140];      /**< \brief 434, \internal Reserved */
       __IO Ifx_DOM_ACCEN                       ACCEN;                  /**< \brief 4C0, */
       __I  Ifx_UReg_8Bit                       reserved_4DC[4];        /**< \brief 4DC, \internal Reserved */
       __IO Ifx_DOM_PROT                        PROTSE;                 /**< \brief 4E0, Resource Protection Register*/
       __I  Ifx_UReg_8Bit                       reserved_4E4[64284];    /**< \brief 4E4, \internal Reserved */
} Ifx_DOM;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXDOM_REGDEF_H */

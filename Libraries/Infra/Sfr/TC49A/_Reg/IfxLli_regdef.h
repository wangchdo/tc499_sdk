/**
 * \file IfxLli_regdef.h
 * \brief
 * \copyright Copyright (c) 2021 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_LLI/V0.1.1.1.1
 * Specification: latest @ 2021-08-22 instance sheet @ MC_A3G_TC49x : V9.1.6.1.0 
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Lli_Registers Lli Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Lli_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Lli_Registers
 * 
 * \defgroup IfxSfr_Lli_Registers_union Register unions
 * \ingroup IfxSfr_Lli_Registers
 * 
 * \defgroup IfxSfr_Lli_Registers_struct Memory map
 * \ingroup IfxSfr_Lli_Registers
 */
#ifndef IFXLLI_REGDEF_H
#define IFXLLI_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Lli_Registers_Bitfields
 * \{  */
/** \brief Alarm Clear */
typedef struct _Ifx_LLI_LLI_ALCLR_Bits
{
    __O  Ifx_UReg_32Bit WPMS2L:1;          /**< \brief [0:0] Clear alarm event for LLI master port connected with S2L bridge (w) */
    __O  Ifx_UReg_32Bit WPMPPU:1;          /**< \brief [1:1] Clear alarm event for LLI master port connected with PPU LBU (w) */
    __O  Ifx_UReg_32Bit WPSTMADC:1;        /**< \brief [2:2] Clear alarm event for LLI slave port connected with TMADC (w) */
    __O  Ifx_UReg_32Bit WPSHRPWM:1;        /**< \brief [3:3] Clear alarm event for LLI slave port connected with eGTM wrapper (w) */
    __O  Ifx_UReg_32Bit WPSEGTM:1;         /**< \brief [4:4] Clear alarm event for LLI slave port connected with eGTM slave interface (w) */
    __O  Ifx_UReg_32Bit WPSTUDMI:1;        /**< \brief [5:5] Clear alarm event for LLI slave port connected with PPU STUDMI interface (w) */
    __O  Ifx_UReg_32Bit WPSPPUD:1;         /**< \brief [6:6] Clear alarm event for LLI slave port connected with PPU debug interface (w) */
    __O  Ifx_UReg_32Bit WPSPPUSFR:1;       /**< \brief [7:7] Clear alarm event for LLI slave port connected with PPU SFRs (w) */
    __O  Ifx_UReg_32Bit WPSPPUSM:1;        /**< \brief [8:8] Clear alarm event for LLI slave port connected with PPU safety monitor interface (w) */
    __O  Ifx_UReg_32Bit MS2L:1;            /**< \brief [9:9] Clear alarm event for AXI  master interface on S2L bridge (w) */
    __O  Ifx_UReg_32Bit STMADC:1;          /**< \brief [10:10] Clear alarm event for LLI slave port connected with TMADC (w) */
    __O  Ifx_UReg_32Bit SEGTMWP:1;         /**< \brief [11:11] Clear alarm event for LLI slave port connected with eGTM wrapper (w) */
    __O  Ifx_UReg_32Bit SEGTM:1;           /**< \brief [12:12] Clear alarm event for LLI slave port connected with eGTM slave interface (w) */
    __O  Ifx_UReg_32Bit SPPUD:1;           /**< \brief [13:13] Clear alarm event for LLI slave port connected with PPU debug interface (w) */
    __O  Ifx_UReg_32Bit SPPUSFR:1;         /**< \brief [14:14] Clear alarm event for LLI slave port connected with PPU SFRs (w) */
    __O  Ifx_UReg_32Bit SPPUSM:1;          /**< \brief [15:15] Clear alarm event for LLI slave port connected with PPU safety monitor interface (w) */
    __O  Ifx_UReg_32Bit OW:1;              /**< \brief [16:16] Clear overflow bit in register ALEV (w) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_LLI_LLI_ALCLR_Bits;

/** \brief Alarm Event */
typedef struct _Ifx_LLI_LLI_ALEV_Bits
{
    __I  Ifx_UReg_32Bit WPMS2L:1;          /**< \brief [0:0] Alarm event for LLI master port connected with S2L bridge (rh) */
    __I  Ifx_UReg_32Bit WPMPPU:1;          /**< \brief [1:1] Alarm event for LLI master port connected with PPU LBU (rh) */
    __I  Ifx_UReg_32Bit WPSTMADC:1;        /**< \brief [2:2] Alarm event for LLI slave port connected with TMADC (rh) */
    __I  Ifx_UReg_32Bit WPSEGTMWP:1;       /**< \brief [3:3] Alarm event for LLI slave port connected with eGTM wrapper (rh) */
    __I  Ifx_UReg_32Bit WPSEGTM:1;         /**< \brief [4:4] Alarm event for LLI slave port connected with eGTM slave interface (rh) */
    __I  Ifx_UReg_32Bit WPSTUDMI:1;        /**< \brief [5:5] Alarm event for LLI slave port connected with PPU STUDMI interface (rh) */
    __I  Ifx_UReg_32Bit WPSPPUD:1;         /**< \brief [6:6] Alarm event for LLI slave port connected with PPU debug interface (rh) */
    __I  Ifx_UReg_32Bit WPSPPUSFR:1;       /**< \brief [7:7] Alarm event for LLI slave port connected with PPU SFRs (rh) */
    __I  Ifx_UReg_32Bit WPSPPUSM:1;        /**< \brief [8:8] Alarm event for LLI slave port connected with PPU safety monitor interface (rh) */
    __I  Ifx_UReg_32Bit MS2L:1;            /**< \brief [9:9] Alarm event for AXI  master interface on S2L bridge (rh) */
    __I  Ifx_UReg_32Bit STMADC:1;          /**< \brief [10:10] Alarm event for AXI slave interface on TMADC (rh) */
    __I  Ifx_UReg_32Bit SEGTMWP:1;         /**< \brief [11:11] Alarm event for AXI slave interface on eGTM wrapper (rh) */
    __I  Ifx_UReg_32Bit SEGTM:1;           /**< \brief [12:12] Alarm event for AXI slave interface on eGTM slave interface (rh) */
    __I  Ifx_UReg_32Bit SPPUD:1;           /**< \brief [13:13] Alarm event for AXI slave interface on PPU debug interface (rh) */
    __I  Ifx_UReg_32Bit SPPUSFR:1;         /**< \brief [14:14] Alarm event for AXI slave interface on PPU SFRs (rh) */
    __I  Ifx_UReg_32Bit SPPUSM:1;          /**< \brief [15:15] Alarm event for AXI slave interface on PPU safety monitor interface (rh) */
    __I  Ifx_UReg_32Bit OW:1;              /**< \brief [16:16] Overflow bit (rh) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_LLI_LLI_ALEV_Bits;

/** \brief Error injection from S2L master interface */
typedef struct _Ifx_LLI_LLI_MEGEN_Bits
{
    __IO Ifx_UReg_32Bit WPAR:1;            /**< \brief [0:0] Error Injection on master interface S2L for LLI wrapper EDC error on AR channel (rwh) */
    __IO Ifx_UReg_32Bit WPAW:1;            /**< \brief [1:1] Error injection on master interface S2L for LLI wrapper EDC error on AW channel (rwh) */
    __IO Ifx_UReg_32Bit WPW:1;             /**< \brief [2:2] Error injection on master interface S2L for LLI wrapper EDC error on W channel (rwh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [5:3] \internal Reserved */
    __IO Ifx_UReg_32Bit ARVALID:1;         /**< \brief [6:6] Error injection on master interface S2L for parity error on ARVALID signal (rwh) */
    __IO Ifx_UReg_32Bit ARCTRL1:1;         /**< \brief [7:7] Error injection on master interface S2L for parity error on ARID signal (rwh) */
    __IO Ifx_UReg_32Bit ARCTRL2:1;         /**< \brief [8:8] Error injection on master interface S2L for parity error on ARLEN signal (rwh) */
    __IO Ifx_UReg_32Bit ARCTRL3:1;         /**< \brief [9:9] Error injection on master interface S2L for parity error on ARBURST, ARLOCK, ARSIZE signal (rwh) */
    __IO Ifx_UReg_32Bit ARCTRL4:1;         /**< \brief [10:10] Error injection on master interface S2L for parity error on ARCACHE, ARPROT signal (rwh) */
    __IO Ifx_UReg_32Bit ARADDR1:1;         /**< \brief [11:11] Error injection on master interface S2L for parity error on ARADDR 0-8bit signal (rwh) */
    __IO Ifx_UReg_32Bit ARADDR2:1;         /**< \brief [12:12] Error injection on master interface S2L for parity error on ARADDR 8-16bit signal (rwh) */
    __IO Ifx_UReg_32Bit ARADDR3:1;         /**< \brief [13:13] Error injection on master interface S2L for parity error on ARADDR 16-24bit signal (rwh) */
    __IO Ifx_UReg_32Bit ARADDR4:1;         /**< \brief [14:14] Error injection on master interface S2L for parity error on ARADDR 24-32bit signal (rwh) */
    __IO Ifx_UReg_32Bit AWCTRL1:1;         /**< \brief [15:15] Error injection on master interface S2L for parity error on AWID signal (rwh) */
    __IO Ifx_UReg_32Bit AWCTRL2:1;         /**< \brief [16:16] Error injection on master interface S2L for parity error on AWLEN signal (rwh) */
    __IO Ifx_UReg_32Bit AWCTRL3:1;         /**< \brief [17:17] Error injection on master interface S2L for parity error on AWBURST, AWLOCK, AWSIZE signal (rwh) */
    __IO Ifx_UReg_32Bit AWCTRL4:1;         /**< \brief [18:18] Error injection on master interface S2L for parity error on AWCACHE, AWPROT signal (rwh) */
    __IO Ifx_UReg_32Bit AWADDR1:1;         /**< \brief [19:19] Error injection on master interface S2L for parity error on AWADDR 0-8bits signal (rwh) */
    __IO Ifx_UReg_32Bit AWADDR2:1;         /**< \brief [20:20] Error injection on master interface S2L for parity error on AWADDR 8-16bits signal (rwh) */
    __IO Ifx_UReg_32Bit AWADDR3:1;         /**< \brief [21:21] Error injection on master interface S2L for parity error on AWADDR 16-24bits signal (rwh) */
    __IO Ifx_UReg_32Bit AWADDR4:1;         /**< \brief [22:22] Error injection on master interface S2L for parity error on AWADDR 24-32bits signal (rwh) */
    __IO Ifx_UReg_32Bit WCTRL1:1;          /**< \brief [23:23] Error injection on master interface S2L for parity error on WID signal (rwh) */
    __IO Ifx_UReg_32Bit WCTRL2:1;          /**< \brief [24:24] Error injection on master interface S2L for parity error on WSTRB signal (rwh) */
    __IO Ifx_UReg_32Bit WCTRL3:1;          /**< \brief [25:25] Error injection on master interface S2L for parity error on WLAST signal (rwh) */
    __IO Ifx_UReg_32Bit AWVALID:1;         /**< \brief [26:26] Error injection on master interface S2L for parity error on AWVALID signal (rwh) */
    __IO Ifx_UReg_32Bit BREADY:1;          /**< \brief [27:27] Error injection on master interface S2L for parity error on BREADY signal (rwh) */
    __IO Ifx_UReg_32Bit RREADY:1;          /**< \brief [28:28] Error injection on master interface S2L for parity error on RREADY signal (rwh) */
    __IO Ifx_UReg_32Bit WVALID:1;          /**< \brief [29:29] Error injection on master interface S2L for parity error on WVALID signal (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [30:30] \internal Reserved */
    __IO Ifx_UReg_32Bit WDATA:1;           /**< \brief [31:31] Error injection on master interface S2L for ECC error on WDATA signal (rwh) */
} Ifx_LLI_LLI_MEGEN_Bits;

/** \brief Error injection from eGTM wrapper slave interface */
typedef struct _Ifx_LLI_LLI_SEGEN_Bits
{
    __IO Ifx_UReg_32Bit WPR:1;             /**< \brief [0:0] Error Injection on slave interface eGTM for LLI wrapper EDC error on R channel (rwh) */
    __IO Ifx_UReg_32Bit WPWR:1;            /**< \brief [1:1] Error Injection on slave interface eGTM for LLI wrapper EDC error on WR channel (rwh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [5:2] \internal Reserved */
    __IO Ifx_UReg_32Bit ARREADY:1;         /**< \brief [6:6] Error injection on slave interface eGTM for parity error on ARREADY signal (rwh) */
    __IO Ifx_UReg_32Bit AWREADY:1;         /**< \brief [7:7] Error injection on slave interface eGTM for parity error on AWREADY signal (rwh) */
    __IO Ifx_UReg_32Bit WREADY:1;          /**< \brief [8:8] Error injection on slave interface eGTM for parity error on WREADY signal (rwh) */
    __IO Ifx_UReg_32Bit RVALID:1;          /**< \brief [9:9] Error injection on slave interface eGTM for parity error on RVALID signal (rwh) */
    __IO Ifx_UReg_32Bit BVALID:1;          /**< \brief [10:10] Error injection on slave interface eGTM for parity error on BVALID signal (rwh) */
    __IO Ifx_UReg_32Bit RCTRL1:1;          /**< \brief [11:11] Error injection on slave interface eGTM for parity error on RID signal (rwh) */
    __IO Ifx_UReg_32Bit RCTRL2:1;          /**< \brief [12:12] Error injection on slave interface eGTM for parity error on RRESP, RLAST signal (rwh) */
    __IO Ifx_UReg_32Bit BCTRL1:1;          /**< \brief [13:13] Error injection on slave interface eGTM for parity error on BID signal (rwh) */
    __IO Ifx_UReg_32Bit BCTRL2:1;          /**< \brief [14:14] Error injection on slave interface eGTM for parity error on BRESP signal (rwh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [18:15] \internal Reserved */
    __IO Ifx_UReg_32Bit RDATA:1;           /**< \brief [19:19] Error injection on slave interface eGTM for ECC error on RDATA signal (rwh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [27:20] \internal Reserved */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_LLI_LLI_SEGEN_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_lli_Registers_union
 * \{   */
/** \brief Alarm Clear   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LLI_LLI_ALCLR_Bits B;         /**< \brief Bitfield access */
} Ifx_LLI_LLI_ALCLR;

/** \brief Alarm Event   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LLI_LLI_ALEV_Bits B;          /**< \brief Bitfield access */
} Ifx_LLI_LLI_ALEV;

/** \brief Error injection from S2L master interface   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LLI_LLI_MEGEN_Bits B;         /**< \brief Bitfield access */
} Ifx_LLI_LLI_MEGEN;

/** \brief Error injection from eGTM wrapper slave interface   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LLI_LLI_SEGEN_Bits B;         /**< \brief Bitfield access */
} Ifx_LLI_LLI_SEGEN;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Lli_LLI_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief LLI object */
typedef volatile struct _Ifx_LLI_LLI
{
       __I  Ifx_UReg_8Bit                       reserved_0[12];         /**< \brief 0, \internal Reserved */
       __I  Ifx_LLI_LLI_ALEV                    ALEV;                   /**< \brief C, Alarm Event*/
       __O  Ifx_LLI_LLI_ALCLR                   ALCLR;                  /**< \brief 10, Alarm Clear*/
       __IO Ifx_LLI_LLI_MEGEN                   MEGEN;                  /**< \brief 14, Error injection from S2L master interface*/
       __IO Ifx_LLI_LLI_SEGEN                   SEGEN;                  /**< \brief 18, Error injection from eGTM wrapper slave interface*/
} Ifx_LLI_LLI;

/******************************************************************************/
/** \addtogroup IfxSfr_Lli_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief LLI object */
typedef volatile struct _Ifx_LLI
{
       __IO Ifx_LLI_LLI                         LLI;                    /**< \brief 0, Error injection from eGTM wrapper slave interface*/
       __I  Ifx_UReg_8Bit                       reserved_1C[32740];     /**< \brief 1C, \internal Reserved */
} Ifx_LLI;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXLLI_REGDEF_H */

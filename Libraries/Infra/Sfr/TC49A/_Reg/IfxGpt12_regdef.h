/**
 * \file IfxGpt12_regdef.h
 * \brief
 * \copyright Copyright (c) 2021 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_GPT12/V0.1.1.1.6
 * Specification: latest @ 2021-11-17 instance sheet @ MC_A3G_TC49x : V9.1.6.2.0 
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Gpt12_Registers Gpt12 Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Gpt12_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Gpt12_Registers
 * 
 * \defgroup IfxSfr_Gpt12_Registers_union Register unions
 * \ingroup IfxSfr_Gpt12_Registers
 * 
 * \defgroup IfxSfr_Gpt12_Registers_struct Memory map
 * \ingroup IfxSfr_Gpt12_Registers
 */
#ifndef IFXGPT12_REGDEF_H
#define IFXGPT12_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Gpt12_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_GPT12_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_GPT12_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_GPT12_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for Master TAG ID q - ENq (rw) */
} Ifx_GPT12_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_GPT12_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GPT12_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_GPT12_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_GPT12_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_GPT12_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for Master TAG ID q - ENq (rw) */
} Ifx_GPT12_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_GPT12_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GPT12_ACCEN_WRB_FPI_Bits;

/** \brief Capture and Reload Register */
typedef struct _Ifx_GPT12_CAPREL_Bits
{
    __IO Ifx_UReg_32Bit CAPREL:16;         /**< \brief [15:0] Current reload value or Captured value - CAPREL (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GPT12_CAPREL_Bits;

/** \brief Clock Control Register */
typedef struct _Ifx_GPT12_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module Disable Request Bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module Disable Status Bit - DISS (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] Sleep Mode Enable Control - EDIS (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_GPT12_CLC_Bits;

/** \brief Module Identification Register */
typedef struct _Ifx_GPT12_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module Number - MOD_NUMBER (r) */
} Ifx_GPT12_ID_Bits;

/** \brief OCDS Control and Status Register */
typedef struct _Ifx_GPT12_OCS_Bits
{
    __I  Ifx_UReg_32Bit :24;               /**< \brief [23:0] \internal Reserved */
    __IO Ifx_UReg_32Bit SUS:4;             /**< \brief [27:24] OCDS Suspend Control - SUS (rw) */
    __O  Ifx_UReg_32Bit SUS_P:1;           /**< \brief [28:28] SUS Write Protection - SUS_P (w) */
    __I  Ifx_UReg_32Bit SUSSTA:1;          /**< \brief [29:29] Suspend State - SUSSTA (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_GPT12_OCS_Bits;

/** \brief Port Input Select Register */
typedef struct _Ifx_GPT12_PISEL_Bits
{
    __IO Ifx_UReg_32Bit IST2IN:1;          /**< \brief [0:0] Input Select for T2IN - IST2IN (rw) */
    __IO Ifx_UReg_32Bit IST2EUD:1;         /**< \brief [1:1] Input Select for T2EUD - IST2EUD (rw) */
    __IO Ifx_UReg_32Bit IST3IN:2;          /**< \brief [3:2] Input Select for T3IN - IST3IN (rw) */
    __IO Ifx_UReg_32Bit IST3EUD:2;         /**< \brief [5:4] Input Select for T3EUD - IST3EUD (rw) */
    __IO Ifx_UReg_32Bit IST4IN:2;          /**< \brief [7:6] Input Select for T4IN - IST4IN (rw) */
    __IO Ifx_UReg_32Bit IST4EUD:2;         /**< \brief [9:8] Input Select for T4EUD - IST4EUD (rw) */
    __IO Ifx_UReg_32Bit IST5IN:1;          /**< \brief [10:10] Input Select for T5IN - IST5IN (rw) */
    __IO Ifx_UReg_32Bit IST5EUD:1;         /**< \brief [11:11] Input Select for T5EUD - IST5EUD (rw) */
    __IO Ifx_UReg_32Bit IST6IN:1;          /**< \brief [12:12] Input Select for T6IN - IST6IN (rw) */
    __IO Ifx_UReg_32Bit IST6EUD:1;         /**< \brief [13:13] Input Select for T6EUD - IST6EUD (rw) */
    __IO Ifx_UReg_32Bit ISCAPIN:2;         /**< \brief [15:14] Input Select for CAPIN - ISCAPIN (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GPT12_PISEL_Bits;

/** \brief Port Input Select Register for CAPINB and T3IND */
typedef struct _Ifx_GPT12_PISELB_Bits
{
    __IO Ifx_UReg_32Bit ISCAPINB:2;        /**< \brief [1:0] Input Select for CAPINB (rw) */
    __IO Ifx_UReg_32Bit IST3IND:1;         /**< \brief [2:2] Input Select for T3IND (rw) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [15:3] \internal Reserved */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GPT12_PISELB_Bits;

/** \brief Resource Protection Register */
typedef struct _Ifx_GPT12_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual Machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual Machine definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection Set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection Set definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_GPT12_PROT_Bits;

/** \brief Reset Control Register A */
typedef struct _Ifx_GPT12_RST_CTRLA_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit GRSTEN0:1;         /**< \brief [8:8] Enable for Global Module Reset Group 0 - GRSTEN0 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN1:1;         /**< \brief [9:9] Enable for Global Module Reset Group 1 - GRSTEN1 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN2:1;         /**< \brief [10:10] Enable for Global Module Reset Group 2 - GRSTEN2 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN3:1;         /**< \brief [11:11] Enable for Global Module Reset Group 3 - GRSTEN3 (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GPT12_RST_CTRLA_Bits;

/** \brief Reset Control Register B */
typedef struct _Ifx_GPT12_RST_CTRLB_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [30:1] \internal Reserved */
    __O  Ifx_UReg_32Bit STATCLR:1;         /**< \brief [31:31] Kernel Reset Status Clear - STATCLR (w) */
} Ifx_GPT12_RST_CTRLB_Bits;

/** \brief Reset Status Register */
typedef struct _Ifx_GPT12_RST_STAT_Bits
{
    __I  Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset Status - KRST (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __I  Ifx_UReg_32Bit GRST0:1;           /**< \brief [8:8] Status for Global Module Reset Group 0 - GRST0 (rh) */
    __I  Ifx_UReg_32Bit GRST1:1;           /**< \brief [9:9] Status for Global Module Reset Group 1 - GRST1 (rh) */
    __I  Ifx_UReg_32Bit GRST2:1;           /**< \brief [10:10] Status for Global Module Reset Group 2 - GRST2 (rh) */
    __I  Ifx_UReg_32Bit GRST3:1;           /**< \brief [11:11] Status for Global Module Reset Group 3 - GRST3 (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GPT12_RST_STAT_Bits;

/** \brief Timer T2 Register */
typedef struct _Ifx_GPT12_T2_Bits
{
    __IO Ifx_UReg_32Bit T2:16;             /**< \brief [15:0] Timer T2 - T2 (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GPT12_T2_Bits;

/** \brief Timer T2 Control Register */
typedef struct _Ifx_GPT12_T2CON_Bits
{
    __IO Ifx_UReg_32Bit T2I:3;             /**< \brief [2:0] Timer T2 Input Parameter Selection - T2I (rw) */
    __IO Ifx_UReg_32Bit T2M:3;             /**< \brief [5:3] Timer T2 Mode Control (Basic Operating Mode) - T2M (rw) */
    __IO Ifx_UReg_32Bit T2R:1;             /**< \brief [6:6] Timer T2 Run Bit - T2R (rw) */
    __IO Ifx_UReg_32Bit T2UD:1;            /**< \brief [7:7] Timer T2 Up or Down Control - T2UD (rw) */
    __IO Ifx_UReg_32Bit T2UDE:1;           /**< \brief [8:8] Timer T2 External Up or Down Enable - T2UDE (rw) */
    __IO Ifx_UReg_32Bit T2RC:1;            /**< \brief [9:9] Timer T2 Remote Control - T2RC (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [11:10] \internal Reserved */
    __IO Ifx_UReg_32Bit T2IRDIS:1;         /**< \brief [12:12] Timer T2 Interrupt Disable - T2IRDIS (rw) */
    __IO Ifx_UReg_32Bit T2EDGE:1;          /**< \brief [13:13] Timer T2 Edge Detection - T2EDGE (rwh) */
    __IO Ifx_UReg_32Bit T2CHDIR:1;         /**< \brief [14:14] Timer T2 Count Direction Change - T2CHDIR (rwh) */
    __I  Ifx_UReg_32Bit T2RDIR:1;          /**< \brief [15:15] Timer T2 Rotation Direction - T2RDIR (rh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GPT12_T2CON_Bits;

/** \brief Timer T3 Register */
typedef struct _Ifx_GPT12_T3_Bits
{
    __IO Ifx_UReg_32Bit T3:16;             /**< \brief [15:0] Timer T3 - T3 (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GPT12_T3_Bits;

/** \brief Timer T3 Control Register */
typedef struct _Ifx_GPT12_T3CON_Bits
{
    __IO Ifx_UReg_32Bit T3I:3;             /**< \brief [2:0] Timer T3 Input Parameter Selection - T3I (rw) */
    __IO Ifx_UReg_32Bit T3M:3;             /**< \brief [5:3] Timer T3 Mode Control - T3M (rw) */
    __IO Ifx_UReg_32Bit T3R:1;             /**< \brief [6:6] Timer T3 Run Bit - T3R (rw) */
    __IO Ifx_UReg_32Bit T3UD:1;            /**< \brief [7:7] Timer T3 Up or Down Control - T3UD (rw) */
    __IO Ifx_UReg_32Bit T3UDE:1;           /**< \brief [8:8] Timer T3 External Up or Down Enable - T3UDE (rw) */
    __IO Ifx_UReg_32Bit T3OE:1;            /**< \brief [9:9] Overflow or Underflow Output Enable - T3OE (rw) */
    __IO Ifx_UReg_32Bit T3OTL:1;           /**< \brief [10:10] Timer T3 Overflow Toggle Latch - T3OTL (rwh) */
    __IO Ifx_UReg_32Bit BPS1:2;            /**< \brief [12:11] GPT1 Block Prescaler Control - BPS1 (rw) */
    __IO Ifx_UReg_32Bit T3EDGE:1;          /**< \brief [13:13] Timer T3 Edge Detection Flag - T3EDGE (rwh) */
    __IO Ifx_UReg_32Bit T3CHDIR:1;         /**< \brief [14:14] Timer T3 Count Direction Change Flag - T3CHDIR (rwh) */
    __I  Ifx_UReg_32Bit T3RDIR:1;          /**< \brief [15:15] Timer T3 Rotation Direction Flag - T3RDIR (rh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GPT12_T3CON_Bits;

/** \brief Timer T4 Register */
typedef struct _Ifx_GPT12_T4_Bits
{
    __IO Ifx_UReg_32Bit T4:16;             /**< \brief [15:0] Timer T4 - T4 (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GPT12_T4_Bits;

/** \brief Timer T4 Control Register */
typedef struct _Ifx_GPT12_T4CON_Bits
{
    __IO Ifx_UReg_32Bit T4I:3;             /**< \brief [2:0] Timer T4 Input Parameter Selection - T4I (rw) */
    __IO Ifx_UReg_32Bit T4M:3;             /**< \brief [5:3] Timer T4 Mode Control (Basic Operating Mode) - T4M (rw) */
    __IO Ifx_UReg_32Bit T4R:1;             /**< \brief [6:6] Timer T4 Run Bit - T4R (rw) */
    __IO Ifx_UReg_32Bit T4UD:1;            /**< \brief [7:7] Timer T4 Up or Down Control - T4UD (rw) */
    __IO Ifx_UReg_32Bit T4UDE:1;           /**< \brief [8:8] Timer T4 External Up or Down Enable - T4UDE (rw) */
    __IO Ifx_UReg_32Bit T4RC:1;            /**< \brief [9:9] Timer T4 Remote Control - T4RC (rw) */
    __IO Ifx_UReg_32Bit CLRT2EN:1;         /**< \brief [10:10] Clear Timer T2 Enable - CLRT2EN (rw) */
    __IO Ifx_UReg_32Bit CLRT3EN:1;         /**< \brief [11:11] Clear Timer T3 Enable - CLRT3EN (rw) */
    __IO Ifx_UReg_32Bit T4IRDIS:1;         /**< \brief [12:12] Timer T4 Interrupt Disable - T4IRDIS (rw) */
    __IO Ifx_UReg_32Bit T4EDGE:1;          /**< \brief [13:13] Timer T4 Edge Detection - T4EDGE (rwh) */
    __IO Ifx_UReg_32Bit T4CHDIR:1;         /**< \brief [14:14] Timer T4 Count Direction Change - T4CHDIR (rwh) */
    __I  Ifx_UReg_32Bit T4RDIR:1;          /**< \brief [15:15] Timer T4 Rotation Direction - T4RDIR (rh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GPT12_T4CON_Bits;

/** \brief Timer T5 Register */
typedef struct _Ifx_GPT12_T5_Bits
{
    __IO Ifx_UReg_32Bit T5:16;             /**< \brief [15:0] Timer T5 - T5 (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GPT12_T5_Bits;

/** \brief Timer T5 Control Register */
typedef struct _Ifx_GPT12_T5CON_Bits
{
    __IO Ifx_UReg_32Bit T5I:3;             /**< \brief [2:0] Timer T5 Input Parameter Selection - T5I (rw) */
    __IO Ifx_UReg_32Bit T5M:3;             /**< \brief [5:3] Timer T5 Mode Control (Basic Operating Mode) - T5M (rw) */
    __IO Ifx_UReg_32Bit T5R:1;             /**< \brief [6:6] Timer T5 Run Bit - T5R (rw) */
    __IO Ifx_UReg_32Bit T5UD:1;            /**< \brief [7:7] Timer T5 Up or Down Control - T5UD (rw) */
    __IO Ifx_UReg_32Bit T5UDE:1;           /**< \brief [8:8] Timer T5 External Up or Down Enable - T5UDE (rw) */
    __IO Ifx_UReg_32Bit T5RC:1;            /**< \brief [9:9] Timer T5 Remote Control - T5RC (rw) */
    __IO Ifx_UReg_32Bit CT3:1;             /**< \brief [10:10] Timer T3 Capture Trigger Enable - CT3 (rw) */
    __IO Ifx_UReg_32Bit RESERVED:1;        /**< \brief [11:11] Reserved (rw) */
    __IO Ifx_UReg_32Bit CI:2;              /**< \brief [13:12] Register CAPREL Capture Trigger Selection - CI (rw) */
    __IO Ifx_UReg_32Bit T5CLR:1;           /**< \brief [14:14] Timer T5 Clear Enable Bit - T5CLR (rw) */
    __IO Ifx_UReg_32Bit T5SC:1;            /**< \brief [15:15] Timer T5 Capture Mode Enable - T5SC (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GPT12_T5CON_Bits;

/** \brief Timer T6 Register */
typedef struct _Ifx_GPT12_T6_Bits
{
    __IO Ifx_UReg_32Bit T6:16;             /**< \brief [15:0] Timer T6 - T6 (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GPT12_T6_Bits;

/** \brief Timer T6 Control Register */
typedef struct _Ifx_GPT12_T6CON_Bits
{
    __IO Ifx_UReg_32Bit T6I:3;             /**< \brief [2:0] Timer T6 Input Parameter Selection - T6I (rw) */
    __IO Ifx_UReg_32Bit T6M:3;             /**< \brief [5:3] Timer T6 Mode Control (Basic Operating Mode) - T6M (rw) */
    __IO Ifx_UReg_32Bit T6R:1;             /**< \brief [6:6] Timer T6 Run Bit - T6R (rw) */
    __IO Ifx_UReg_32Bit T6UD:1;            /**< \brief [7:7] Timer T6 Up or Down Control - T6UD (rw) */
    __IO Ifx_UReg_32Bit T6UDE:1;           /**< \brief [8:8] Timer T6 External Up or Down Enable - T6UDE (rw) */
    __IO Ifx_UReg_32Bit T6OE:1;            /**< \brief [9:9] Overflow or Underflow Output Enable - T6OE (rw) */
    __IO Ifx_UReg_32Bit T6OTL:1;           /**< \brief [10:10] Timer T6 Overflow Toggle Latch - T6OTL (rwh) */
    __IO Ifx_UReg_32Bit BPS2:2;            /**< \brief [12:11] GPT2 Block Prescaler Control - BPS2 (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [13:13] \internal Reserved */
    __IO Ifx_UReg_32Bit T6CLR:1;           /**< \brief [14:14] Timer T6 Clear Enable Bit - T6CLR (rw) */
    __IO Ifx_UReg_32Bit T6SR:1;            /**< \brief [15:15] Timer T6 Reload Mode Enable - T6SR (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GPT12_T6CON_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_gpt12_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_ACCEN_PRS_Bits B;       /**< \brief Bitfield access */
} Ifx_GPT12_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_ACCEN_RDA_Bits B;       /**< \brief Bitfield access */
} Ifx_GPT12_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_ACCEN_RDB_FPI_Bits B;    /**< \brief Bitfield access */
} Ifx_GPT12_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_ACCEN_VM_Bits B;        /**< \brief Bitfield access */
} Ifx_GPT12_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_ACCEN_WRA_Bits B;       /**< \brief Bitfield access */
} Ifx_GPT12_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_ACCEN_WRB_FPI_Bits B;    /**< \brief Bitfield access */
} Ifx_GPT12_ACCEN_WRB_FPI;

/** \brief Capture and Reload Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_CAPREL_Bits B;          /**< \brief Bitfield access */
} Ifx_GPT12_CAPREL;

/** \brief Clock Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_CLC_Bits B;             /**< \brief Bitfield access */
} Ifx_GPT12_CLC;

/** \brief Module Identification Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_ID_Bits B;              /**< \brief Bitfield access */
} Ifx_GPT12_ID;

/** \brief OCDS Control and Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_OCS_Bits B;             /**< \brief Bitfield access */
} Ifx_GPT12_OCS;

/** \brief Port Input Select Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_PISEL_Bits B;           /**< \brief Bitfield access */
} Ifx_GPT12_PISEL;

/** \brief Port Input Select Register for CAPINB and T3IND   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_PISELB_Bits B;          /**< \brief Bitfield access */
} Ifx_GPT12_PISELB;

/** \brief Resource Protection Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_PROT_Bits B;            /**< \brief Bitfield access */
} Ifx_GPT12_PROT;

/** \brief Reset Control Register A   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_RST_CTRLA_Bits B;       /**< \brief Bitfield access */
} Ifx_GPT12_RST_CTRLA;

/** \brief Reset Control Register B   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_RST_CTRLB_Bits B;       /**< \brief Bitfield access */
} Ifx_GPT12_RST_CTRLB;

/** \brief Reset Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_RST_STAT_Bits B;        /**< \brief Bitfield access */
} Ifx_GPT12_RST_STAT;

/** \brief Timer T2 Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_T2_Bits B;              /**< \brief Bitfield access */
} Ifx_GPT12_T2;

/** \brief Timer T2 Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_T2CON_Bits B;           /**< \brief Bitfield access */
} Ifx_GPT12_T2CON;

/** \brief Timer T3 Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_T3_Bits B;              /**< \brief Bitfield access */
} Ifx_GPT12_T3;

/** \brief Timer T3 Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_T3CON_Bits B;           /**< \brief Bitfield access */
} Ifx_GPT12_T3CON;

/** \brief Timer T4 Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_T4_Bits B;              /**< \brief Bitfield access */
} Ifx_GPT12_T4;

/** \brief Timer T4 Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_T4CON_Bits B;           /**< \brief Bitfield access */
} Ifx_GPT12_T4CON;

/** \brief Timer T5 Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_T5_Bits B;              /**< \brief Bitfield access */
} Ifx_GPT12_T5;

/** \brief Timer T5 Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_T5CON_Bits B;           /**< \brief Bitfield access */
} Ifx_GPT12_T5CON;

/** \brief Timer T6 Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_T6_Bits B;              /**< \brief Bitfield access */
} Ifx_GPT12_T6;

/** \brief Timer T6 Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GPT12_T6CON_Bits B;           /**< \brief Bitfield access */
} Ifx_GPT12_T6CON;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gpt12_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_GPT12_RST
{
       __IO Ifx_GPT12_RST_CTRLA                 CTRLA;                  /**< \brief 0, Reset Control Register A*/
       __IO Ifx_GPT12_RST_CTRLB                 CTRLB;                  /**< \brief 4, Reset Control Register B*/
       __I  Ifx_GPT12_RST_STAT                  STAT;                   /**< \brief 8, Reset Status Register*/
} Ifx_GPT12_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gpt12_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_GPT12_ACCEN
{
       __IO Ifx_GPT12_ACCEN_WRA                 WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_GPT12_ACCEN_WRB_FPI             WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_GPT12_ACCEN_RDA                 RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_GPT12_ACCEN_RDB_FPI             RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_GPT12_ACCEN_VM                  VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_GPT12_ACCEN_PRS                 PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_GPT12_ACCEN;

/******************************************************************************/
/** \addtogroup IfxSfr_Gpt12_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief GPT12 object */
typedef volatile struct _Ifx_GPT12
{
       __IO Ifx_GPT12_CLC                       CLC;                    /**< \brief 0, Clock Control Register*/
       __IO Ifx_GPT12_OCS                       OCS;                    /**< \brief 4, OCDS Control and Status Register*/
       __I  Ifx_GPT12_ID                        ID;                     /**< \brief 8, Module Identification Register*/
       __IO Ifx_GPT12_RST                       RST;                    /**< \brief C, Reset Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
       __IO Ifx_GPT12_PROT                      PROTE;                  /**< \brief 20, PROT Register Endinit*/
       __IO Ifx_GPT12_PROT                      PROTSE;                 /**< \brief 24, PROT Register Safe Endinit*/
       __I  Ifx_UReg_8Bit                       reserved_28[24];        /**< \brief 28, \internal Reserved */
       __IO Ifx_GPT12_ACCEN                     ACCEN;                  /**< \brief 40, */
       __I  Ifx_UReg_8Bit                       reserved_60[164];       /**< \brief 60, \internal Reserved */
       __IO Ifx_GPT12_PISEL                     PISEL;                  /**< \brief 104, Port Input Select Register*/
       __IO Ifx_GPT12_PISELB                    PISELB;                 /**< \brief 108, Port Input Select Register for CAPINB and T3IND*/
       __I  Ifx_UReg_8Bit                       reserved_10C[4];        /**< \brief 10C, \internal Reserved */
       __IO Ifx_GPT12_T2CON                     T2CON;                  /**< \brief 110, Timer T2 Control Register*/
       __IO Ifx_GPT12_T3CON                     T3CON;                  /**< \brief 114, Timer T3 Control Register*/
       __IO Ifx_GPT12_T4CON                     T4CON;                  /**< \brief 118, Timer T4 Control Register*/
       __IO Ifx_GPT12_T5CON                     T5CON;                  /**< \brief 11C, Timer T5 Control Register*/
       __IO Ifx_GPT12_T6CON                     T6CON;                  /**< \brief 120, Timer T6 Control Register*/
       __I  Ifx_UReg_8Bit                       reserved_124[12];       /**< \brief 124, \internal Reserved */
       __IO Ifx_GPT12_CAPREL                    CAPREL;                 /**< \brief 130, Capture and Reload Register*/
       __IO Ifx_GPT12_T2                        T2;                     /**< \brief 134, Timer T2 Register*/
       __IO Ifx_GPT12_T3                        T3;                     /**< \brief 138, Timer T3 Register*/
       __IO Ifx_GPT12_T4                        T4;                     /**< \brief 13C, Timer T4 Register*/
       __IO Ifx_GPT12_T5                        T5;                     /**< \brief 140, Timer T5 Register*/
       __IO Ifx_GPT12_T6                        T6;                     /**< \brief 144, Timer T6 Register*/
       __I  Ifx_UReg_8Bit                       reserved_148[184];      /**< \brief 148, \internal Reserved */
} Ifx_GPT12;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXGPT12_REGDEF_H */

/**
 * \file IfxDre_regdef.h
 * \brief
 * \copyright Copyright (c) 2021 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_DRE/V0.1.1.1.11
 * Specification: latest @ 2021-08-22 instance sheet @ MC_A3G_TC49x : V9.1.6.1.0 
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Dre_Registers Dre Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Dre_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Dre_Registers
 * 
 * \defgroup IfxSfr_Dre_Registers_union Register unions
 * \ingroup IfxSfr_Dre_Registers
 * 
 * \defgroup IfxSfr_Dre_Registers_struct Memory map
 * \ingroup IfxSfr_Dre_Registers
 */
#ifndef IFXDRE_REGDEF_H
#define IFXDRE_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

/******************************************************************************/
#if defined (__TASKING__)
#pragma warning 586
#endif
/******************************************************************************/

/** \addtogroup IfxSfr_Dre_Registers_Bitfields
 * \{  */
/** \brief PRS Access Enable Register */
typedef struct _Ifx_DRE_ACCEN_PRS_Bits
{
    __IO Ifx_Strict_32Bit RD00:1;          /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD01:1;          /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD02:1;          /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD03:1;          /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD04:1;          /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD05:1;          /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD06:1;          /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD07:1;          /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit WR00:1;          /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR01:1;          /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR02:1;          /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR03:1;          /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR04:1;          /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR05:1;          /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR06:1;          /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR07:1;          /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_DRE_ACCEN_PRS_Bits;

/** \brief Read Access Enable Register A */
typedef struct _Ifx_DRE_ACCEN_RDA_Bits
{
    __IO Ifx_Strict_32Bit EN00:1;          /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN01:1;          /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN02:1;          /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN03:1;          /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN04:1;          /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN05:1;          /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN06:1;          /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN07:1;          /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN08:1;          /**< \brief [8:8] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN09:1;          /**< \brief [9:9] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN10:1;          /**< \brief [10:10] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN11:1;          /**< \brief [11:11] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN14:1;          /**< \brief [14:14] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN15:1;          /**< \brief [15:15] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN24:1;          /**< \brief [24:24] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN25:1;          /**< \brief [25:25] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN26:1;          /**< \brief [26:26] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN27:1;          /**< \brief [27:27] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN29:1;          /**< \brief [29:29] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN30:1;          /**< \brief [30:30] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN31:1;          /**< \brief [31:31] Read access enable for Master TAG ID q - ENq (rw) */
} Ifx_DRE_ACCEN_RDA_Bits;

/** \brief Read Access Enable Register B */
typedef struct _Ifx_DRE_ACCEN_RDB_SRI_Bits
{
    __IO Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN40:1;          /**< \brief [8:8] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN41:1;          /**< \brief [9:9] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN42:1;          /**< \brief [10:10] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN43:1;          /**< \brief [11:11] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN44:1;          /**< \brief [12:12] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN45:1;          /**< \brief [13:13] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN46:1;          /**< \brief [14:14] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN47:1;          /**< \brief [15:15] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN48:1;          /**< \brief [16:16] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN49:1;          /**< \brief [17:17] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN50:1;          /**< \brief [18:18] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN51:1;          /**< \brief [19:19] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN52:1;          /**< \brief [20:20] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN53:1;          /**< \brief [21:21] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN54:1;          /**< \brief [22:22] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN55:1;          /**< \brief [23:23] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN56:1;          /**< \brief [24:24] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN57:1;          /**< \brief [25:25] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN58:1;          /**< \brief [26:26] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN59:1;          /**< \brief [27:27] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN60:1;          /**< \brief [28:28] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN61:1;          /**< \brief [29:29] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN62:1;          /**< \brief [30:30] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN63:1;          /**< \brief [31:31] Read access enable for Master TAG ID q - ENq (rw) */
} Ifx_DRE_ACCEN_RDB_SRI_Bits;

/** \brief Region Lower Address Register */
typedef struct _Ifx_DRE_ACCEN_RGNLA_Bits
{
    __I  Ifx_Strict_32Bit :6;              /**< \brief [5:0] \internal Reserved */
    __IO Ifx_Strict_32Bit ADDR:26;         /**< \brief [31:6]  (rw) */
} Ifx_DRE_ACCEN_RGNLA_Bits;

/** \brief Region Upper Address Register */
typedef struct _Ifx_DRE_ACCEN_RGNUA_Bits
{
    __I  Ifx_Strict_32Bit :6;              /**< \brief [5:0] \internal Reserved */
    __IO Ifx_Strict_32Bit ADDR:26;         /**< \brief [31:6]  (rw) */
} Ifx_DRE_ACCEN_RGNUA_Bits;

/** \brief VM Access Enable Register */
typedef struct _Ifx_DRE_ACCEN_VM_Bits
{
    __IO Ifx_Strict_32Bit RD00:1;          /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD01:1;          /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD02:1;          /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD03:1;          /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD04:1;          /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD05:1;          /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD06:1;          /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD07:1;          /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit WR00:1;          /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR01:1;          /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR02:1;          /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR03:1;          /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR04:1;          /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR05:1;          /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR06:1;          /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR07:1;          /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_DRE_ACCEN_VM_Bits;

/** \brief Write Access Enable Register A */
typedef struct _Ifx_DRE_ACCEN_WRA_Bits
{
    __IO Ifx_Strict_32Bit EN00:1;          /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN01:1;          /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN02:1;          /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN03:1;          /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN04:1;          /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN05:1;          /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN06:1;          /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN07:1;          /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN08:1;          /**< \brief [8:8] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN09:1;          /**< \brief [9:9] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN10:1;          /**< \brief [10:10] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN11:1;          /**< \brief [11:11] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN14:1;          /**< \brief [14:14] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN15:1;          /**< \brief [15:15] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN24:1;          /**< \brief [24:24] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN25:1;          /**< \brief [25:25] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN26:1;          /**< \brief [26:26] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN27:1;          /**< \brief [27:27] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN29:1;          /**< \brief [29:29] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN30:1;          /**< \brief [30:30] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN31:1;          /**< \brief [31:31] Write access enable for Master TAG ID q - ENq (rw) */
} Ifx_DRE_ACCEN_WRA_Bits;

/** \brief Write Access Enable Rregister B */
typedef struct _Ifx_DRE_ACCEN_WRB_SRI_Bits
{
    __IO Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN40:1;          /**< \brief [8:8] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN41:1;          /**< \brief [9:9] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN42:1;          /**< \brief [10:10] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN43:1;          /**< \brief [11:11] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN44:1;          /**< \brief [12:12] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN45:1;          /**< \brief [13:13] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN46:1;          /**< \brief [14:14] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN47:1;          /**< \brief [15:15] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN48:1;          /**< \brief [16:16] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN49:1;          /**< \brief [17:17] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN50:1;          /**< \brief [18:18] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN51:1;          /**< \brief [19:19] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN52:1;          /**< \brief [20:20] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN53:1;          /**< \brief [21:21] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN54:1;          /**< \brief [22:22] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN55:1;          /**< \brief [23:23] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN56:1;          /**< \brief [24:24] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN57:1;          /**< \brief [25:25] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN58:1;          /**< \brief [26:26] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN59:1;          /**< \brief [27:27] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN60:1;          /**< \brief [28:28] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN61:1;          /**< \brief [29:29] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN62:1;          /**< \brief [30:30] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN63:1;          /**< \brief [31:31] Write access enable for Master TAG ID q - ENq (rw) */
} Ifx_DRE_ACCEN_WRB_SRI_Bits;

/** \brief RAM CAN Address Database CRE Start Address */
typedef struct _Ifx_DRE_CAD_CAN_CRESA_Bits
{
    __IO Ifx_UReg_32Bit ADR:32;            /**< \brief [31:0] Address (rw) */
} Ifx_DRE_CAD_CAN_CRESA_Bits;

/** \brief RAM CAN Address Database CRE Buffer Length Configuration */
typedef struct _Ifx_DRE_CAD_CAN_LC_Bits
{
    __IO Ifx_UReg_32Bit RH0LM:1;           /**< \brief [0:0] Receive Host Buffer 0 Length Mode (rw) */
    __IO Ifx_UReg_32Bit RH0S:5;            /**< \brief [5:1] Receive Host Buffer 0 Size (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit RH1LM:1;           /**< \brief [8:8] Receive Host Buffer 1 Length Mode (rw) */
    __IO Ifx_UReg_32Bit RH1S:5;            /**< \brief [13:9] Receive Host Buffer 1 Size (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit THLM:1;            /**< \brief [16:16] Transmit Host Buffer Length Mode (rw) */
    __IO Ifx_UReg_32Bit THS:5;             /**< \brief [21:17] Transmit Host Buffer Size (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [31:22] \internal Reserved */
} Ifx_DRE_CAD_CAN_LC_Bits;

/** \brief CAN Receive Request 0 */
typedef struct _Ifx_DRE_CANRXR0_Bits
{
    __I  Ifx_Strict_32Bit C0_RH0R:1;       /**< \brief [0:0] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C0_RH1R:1;       /**< \brief [1:1] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C1_RH0R:1;       /**< \brief [2:2] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C1_RH1R:1;       /**< \brief [3:3] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C2_RH0R:1;       /**< \brief [4:4] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C2_RH1R:1;       /**< \brief [5:5] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C3_RH0R:1;       /**< \brief [6:6] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C3_RH1R:1;       /**< \brief [7:7] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C4_RH0R:1;       /**< \brief [8:8] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C4_RH1R:1;       /**< \brief [9:9] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C5_RH0R:1;       /**< \brief [10:10] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C5_RH1R:1;       /**< \brief [11:11] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C6_RH0R:1;       /**< \brief [12:12] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C6_RH1R:1;       /**< \brief [13:13] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C7_RH0R:1;       /**< \brief [14:14] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C7_RH1R:1;       /**< \brief [15:15] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C8_RH0R:1;       /**< \brief [16:16] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C8_RH1R:1;       /**< \brief [17:17] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C9_RH0R:1;       /**< \brief [18:18] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C9_RH1R:1;       /**< \brief [19:19] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C10_RH0R:1;      /**< \brief [20:20] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C10_RH1R:1;      /**< \brief [21:21] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C11_RH0R:1;      /**< \brief [22:22] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C11_RH1R:1;      /**< \brief [23:23] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C12_RH0R:1;      /**< \brief [24:24] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C12_RH1R:1;      /**< \brief [25:25] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C13_RH0R:1;      /**< \brief [26:26] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C13_RH1R:1;      /**< \brief [27:27] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C14_RH0R:1;      /**< \brief [28:28] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C14_RH1R:1;      /**< \brief [29:29] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C15_RH0R:1;      /**< \brief [30:30] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C15_RH1R:1;      /**< \brief [31:31] CANi Receive Host Buffer 0 Pending Request (rh) */
} Ifx_DRE_CANRXR0_Bits;

/** \brief CAN Receive Request 1 */
typedef struct _Ifx_DRE_CANRXR1_Bits
{
    __I  Ifx_Strict_32Bit C16_RH0R:1;      /**< \brief [0:0] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C16_RH1R:1;      /**< \brief [1:1] CANi Receive Host Buffer 1 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C17_RH0R:1;      /**< \brief [2:2] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C17_RH1R:1;      /**< \brief [3:3] CANi Receive Host Buffer 1 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C18_RH0R:1;      /**< \brief [4:4] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C18_RH1R:1;      /**< \brief [5:5] CANi Receive Host Buffer 1 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C19_RH0R:1;      /**< \brief [6:6] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C19_RH1R:1;      /**< \brief [7:7] CANi Receive Host Buffer 1 Pending Request (rh) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_DRE_CANRXR1_Bits;

/** \brief CAN Transmit Buffer Available Request */
typedef struct _Ifx_DRE_CANTXR_Bits
{
    __I  Ifx_Strict_32Bit C0_THR:1;        /**< \brief [0:0] CANi Transmit Host Buffer Request (rh) */
    __I  Ifx_Strict_32Bit C1_THR:1;        /**< \brief [1:1] CANi Transmit Host Buffer Request (rh) */
    __I  Ifx_Strict_32Bit C2_THR:1;        /**< \brief [2:2] CANi Transmit Host Buffer Request (rh) */
    __I  Ifx_Strict_32Bit C3_THR:1;        /**< \brief [3:3] CANi Transmit Host Buffer Request (rh) */
    __I  Ifx_Strict_32Bit C4_THR:1;        /**< \brief [4:4] CANi Transmit Host Buffer Request (rh) */
    __I  Ifx_Strict_32Bit C5_THR:1;        /**< \brief [5:5] CANi Transmit Host Buffer Request (rh) */
    __I  Ifx_Strict_32Bit C6_THR:1;        /**< \brief [6:6] CANi Transmit Host Buffer Request (rh) */
    __I  Ifx_Strict_32Bit C7_THR:1;        /**< \brief [7:7] CANi Transmit Host Buffer Request (rh) */
    __I  Ifx_Strict_32Bit C8_THR:1;        /**< \brief [8:8] CANi Transmit Host Buffer Request (rh) */
    __I  Ifx_Strict_32Bit C9_THR:1;        /**< \brief [9:9] CANi Transmit Host Buffer Request (rh) */
    __I  Ifx_Strict_32Bit C10_THR:1;       /**< \brief [10:10] CANi Transmit Host Buffer Request (rh) */
    __I  Ifx_Strict_32Bit C11_THR:1;       /**< \brief [11:11] CANi Transmit Host Buffer Request (rh) */
    __I  Ifx_Strict_32Bit C12_THR:1;       /**< \brief [12:12] CANi Transmit Host Buffer Request (rh) */
    __I  Ifx_Strict_32Bit C13_THR:1;       /**< \brief [13:13] CANi Transmit Host Buffer Request (rh) */
    __I  Ifx_Strict_32Bit C14_THR:1;       /**< \brief [14:14] CANi Transmit Host Buffer Request (rh) */
    __I  Ifx_Strict_32Bit C15_THR:1;       /**< \brief [15:15] CANi Transmit Host Buffer Request (rh) */
    __I  Ifx_Strict_32Bit C16_THR:1;       /**< \brief [16:16] CANi Transmit Host Buffer Request (rh) */
    __I  Ifx_Strict_32Bit C17_THR:1;       /**< \brief [17:17] CANi Transmit Host Buffer Request (rh) */
    __I  Ifx_Strict_32Bit C18_THR:1;       /**< \brief [18:18] CANi Transmit Host Buffer Request (rh) */
    __I  Ifx_Strict_32Bit C19_THR:1;       /**< \brief [19:19] CANi Transmit Host Buffer Request (rh) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [31:20] \internal Reserved */
} Ifx_DRE_CANTXR_Bits;

/** \brief CAN Resource Partition */
typedef struct _Ifx_DRE_CAN_RP_Bits
{
    __IO Ifx_Strict_32Bit RPI:3;           /**< \brief [2:0] CAN Resource Partition Index (rw) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_DRE_CAN_RP_Bits;

/** \brief CAN Input Buffer Pending Request */
typedef struct _Ifx_DRE_CIBL_BPR_Bits
{
    __IO Ifx_Strict_32Bit PR0:1;           /**< \brief [0:0] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR1:1;           /**< \brief [1:1] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR2:1;           /**< \brief [2:2] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR3:1;           /**< \brief [3:3] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR4:1;           /**< \brief [4:4] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR5:1;           /**< \brief [5:5] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR6:1;           /**< \brief [6:6] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR7:1;           /**< \brief [7:7] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR8:1;           /**< \brief [8:8] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR9:1;           /**< \brief [9:9] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR10:1;          /**< \brief [10:10] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR11:1;          /**< \brief [11:11] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR12:1;          /**< \brief [12:12] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR13:1;          /**< \brief [13:13] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR14:1;          /**< \brief [14:14] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR15:1;          /**< \brief [15:15] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR16:1;          /**< \brief [16:16] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR17:1;          /**< \brief [17:17] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR18:1;          /**< \brief [18:18] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR19:1;          /**< \brief [19:19] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR20:1;          /**< \brief [20:20] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR21:1;          /**< \brief [21:21] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR22:1;          /**< \brief [22:22] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR23:1;          /**< \brief [23:23] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR24:1;          /**< \brief [24:24] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR25:1;          /**< \brief [25:25] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR26:1;          /**< \brief [26:26] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR27:1;          /**< \brief [27:27] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR28:1;          /**< \brief [28:28] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR29:1;          /**< \brief [29:29] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR30:1;          /**< \brief [30:30] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR31:1;          /**< \brief [31:31] Buffer Pending Request (rw1ch) */
} Ifx_DRE_CIBL_BPR_Bits;

/** \brief CAN Input Buffer List Configuration */
typedef struct _Ifx_DRE_CIBL_CONFIG_Bits
{
    __IO Ifx_Strict_32Bit NCIB:6;          /**< \brief [5:0] Number of CAN input buffers (rw) */
    __I  Ifx_Strict_32Bit :10;             /**< \brief [15:6] \internal Reserved */
    __IO Ifx_Strict_32Bit DFS:3;           /**< \brief [18:16] Data Field Size (rw) */
    __I  Ifx_Strict_32Bit :13;             /**< \brief [31:19] \internal Reserved */
} Ifx_DRE_CIBL_CONFIG_Bits;

/** \brief CAN Input Buffer List Start Address */
typedef struct _Ifx_DRE_CIBL_SA_Bits
{
    __IO Ifx_Strict_32Bit ADR:16;          /**< \brief [15:0] Start Address (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_DRE_CIBL_SA_Bits;

/** \brief CAN Input Buffer List Status */
typedef struct _Ifx_DRE_CIBL_STATUS_Bits
{
    __I  Ifx_Strict_32Bit PIDX:6;          /**< \brief [5:0] Put Index (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [7:6] \internal Reserved */
    __I  Ifx_Strict_32Bit CBI:6;           /**< \brief [13:8] Current CAN Input Buffer Index (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [15:14] \internal Reserved */
    __I  Ifx_Strict_32Bit BF:1;            /**< \brief [16:16] Buffer Full (rh) */
    __I  Ifx_Strict_32Bit BE:1;            /**< \brief [17:17] Buffer Empty (rh) */
    __I  Ifx_Strict_32Bit :14;             /**< \brief [31:18] \internal Reserved */
} Ifx_DRE_CIBL_STATUS_Bits;

/** \brief RAM CIBUF Data Byte m */
typedef struct _Ifx_DRE_CIBUF_DB_Bits
{
    __IO Ifx_UReg_8Bit DB:8;               /**< \brief [7:0] Data Byte m (rwh) */
} Ifx_DRE_CIBUF_DB_Bits;

/** \brief RAM CIBUF Register 0 */
typedef struct _Ifx_DRE_CIBUF_R0_Bits
{
    __I  Ifx_UReg_32Bit ID:29;             /**< \brief [28:0] CAN Identifier (rh) */
    __I  Ifx_UReg_32Bit RTR:1;             /**< \brief [29:29] Remote Transmission Request (rh) */
    __I  Ifx_UReg_32Bit XTD:1;             /**< \brief [30:30] Extended Identifier (rh) */
    __I  Ifx_UReg_32Bit ESI:1;             /**< \brief [31:31] Error State Indicator (rh) */
} Ifx_DRE_CIBUF_R0_Bits;

/** \brief RAM CIBUF Register 1 */
typedef struct _Ifx_DRE_CIBUF_R1_Bits
{
    __I  Ifx_UReg_32Bit :16;               /**< \brief [15:0] \internal Reserved */
    __IO Ifx_UReg_32Bit DLC:4;             /**< \brief [19:16] Data Length Code (rwh) */
    __IO Ifx_UReg_32Bit BRS:1;             /**< \brief [20:20] Bit Rate Switch (rwh) */
    __IO Ifx_UReg_32Bit FDF:1;             /**< \brief [21:21] Frame Data Format (rwh) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [31:22] \internal Reserved */
} Ifx_DRE_CIBUF_R1_Bits;

/** \brief RAM CIBUF Routing Header */
typedef struct _Ifx_DRE_CIBUF_RHEAD_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __I  Ifx_UReg_32Bit SCBID:6;           /**< \brief [7:2] Source CAN Bus ID (rh) */
    __I  Ifx_UReg_32Bit ETHD0:6;           /**< \brief [13:8] Ethernet Destination 0 (rh) */
    __I  Ifx_UReg_32Bit ETHD1:6;           /**< \brief [19:14] Ethernet Destination 1 (rh) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_DRE_CIBUF_RHEAD_Bits;

/** \brief Clock Control Register */
typedef struct _Ifx_DRE_CLC_Bits
{
    __IO Ifx_Strict_32Bit DISR:1;          /**< \brief [0:0] Module Disable Request Bit - DISR (rw) */
    __I  Ifx_Strict_32Bit DISS:1;          /**< \brief [1:1] Module Disable Status Bit - DISS (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [2:2] \internal Reserved */
    __IO Ifx_Strict_32Bit EDIS:1;          /**< \brief [3:3] Sleep Mode Enable Control - EDIS (rw) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_DRE_CLC_Bits;

/** \brief CAN Output Buffer Pending Request 0 */
typedef struct _Ifx_DRE_COBL_BPR0_Bits
{
    __I  Ifx_Strict_32Bit PR0:1;           /**< \brief [0:0] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR1:1;           /**< \brief [1:1] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR2:1;           /**< \brief [2:2] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR3:1;           /**< \brief [3:3] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR4:1;           /**< \brief [4:4] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR5:1;           /**< \brief [5:5] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR6:1;           /**< \brief [6:6] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR7:1;           /**< \brief [7:7] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR8:1;           /**< \brief [8:8] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR9:1;           /**< \brief [9:9] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR10:1;          /**< \brief [10:10] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR11:1;          /**< \brief [11:11] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR12:1;          /**< \brief [12:12] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR13:1;          /**< \brief [13:13] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR14:1;          /**< \brief [14:14] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR15:1;          /**< \brief [15:15] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR16:1;          /**< \brief [16:16] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR17:1;          /**< \brief [17:17] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR18:1;          /**< \brief [18:18] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR19:1;          /**< \brief [19:19] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR20:1;          /**< \brief [20:20] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR21:1;          /**< \brief [21:21] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR22:1;          /**< \brief [22:22] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR23:1;          /**< \brief [23:23] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR24:1;          /**< \brief [24:24] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR25:1;          /**< \brief [25:25] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR26:1;          /**< \brief [26:26] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR27:1;          /**< \brief [27:27] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR28:1;          /**< \brief [28:28] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR29:1;          /**< \brief [29:29] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR30:1;          /**< \brief [30:30] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR31:1;          /**< \brief [31:31] Buffer Pending Request (rh) */
} Ifx_DRE_COBL_BPR0_Bits;

/** \brief CAN Output Buffer Pending Request 1 */
typedef struct _Ifx_DRE_COBL_BPR1_Bits
{
    __I  Ifx_Strict_32Bit PR32:1;          /**< \brief [0:0] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR33:1;          /**< \brief [1:1] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR34:1;          /**< \brief [2:2] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR35:1;          /**< \brief [3:3] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR36:1;          /**< \brief [4:4] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR37:1;          /**< \brief [5:5] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR38:1;          /**< \brief [6:6] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR39:1;          /**< \brief [7:7] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR40:1;          /**< \brief [8:8] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR41:1;          /**< \brief [9:9] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR42:1;          /**< \brief [10:10] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR43:1;          /**< \brief [11:11] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR44:1;          /**< \brief [12:12] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR45:1;          /**< \brief [13:13] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR46:1;          /**< \brief [14:14] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR47:1;          /**< \brief [15:15] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR48:1;          /**< \brief [16:16] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR49:1;          /**< \brief [17:17] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR50:1;          /**< \brief [18:18] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR51:1;          /**< \brief [19:19] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR52:1;          /**< \brief [20:20] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR53:1;          /**< \brief [21:21] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR54:1;          /**< \brief [22:22] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR55:1;          /**< \brief [23:23] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR56:1;          /**< \brief [24:24] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR57:1;          /**< \brief [25:25] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR58:1;          /**< \brief [26:26] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR59:1;          /**< \brief [27:27] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR60:1;          /**< \brief [28:28] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR61:1;          /**< \brief [29:29] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR62:1;          /**< \brief [30:30] Buffer Pending Request (rh) */
    __I  Ifx_Strict_32Bit PR63:1;          /**< \brief [31:31] Buffer Pending Request (rh) */
} Ifx_DRE_COBL_BPR1_Bits;

/** \brief CAN Output Buffer List Configuration */
typedef struct _Ifx_DRE_COBL_CONFIG_Bits
{
    __IO Ifx_Strict_32Bit NCOB:7;          /**< \brief [6:0] Number of CAN Output Buffers (rw) */
    __I  Ifx_Strict_32Bit :9;              /**< \brief [15:7] \internal Reserved */
    __IO Ifx_Strict_32Bit DFS:3;           /**< \brief [18:16] Data Field Size (rw) */
    __I  Ifx_Strict_32Bit :13;             /**< \brief [31:19] \internal Reserved */
} Ifx_DRE_COBL_CONFIG_Bits;

/** \brief CAN Output Buffer List Start Address */
typedef struct _Ifx_DRE_COBL_SA_Bits
{
    __IO Ifx_Strict_32Bit ADR:16;          /**< \brief [15:0] Start Address Offset (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_DRE_COBL_SA_Bits;

/** \brief CAN Output Buffer List Status */
typedef struct _Ifx_DRE_COBL_STATUS_Bits
{
    __I  Ifx_Strict_32Bit PIDX:7;          /**< \brief [6:0] Put Index (rh) */
    __I  Ifx_Strict_32Bit :9;              /**< \brief [15:7] \internal Reserved */
    __I  Ifx_Strict_32Bit BF:1;            /**< \brief [16:16] Buffer Full (rh) */
    __I  Ifx_Strict_32Bit BE:1;            /**< \brief [17:17] Buffer Empty (rh) */
    __I  Ifx_Strict_32Bit :14;             /**< \brief [31:18] \internal Reserved */
} Ifx_DRE_COBL_STATUS_Bits;

/** \brief RAM COBUF Data Byte m */
typedef struct _Ifx_DRE_COBUF_DB_Bits
{
    __I  Ifx_UReg_8Bit DB:8;               /**< \brief [7:0] Data Byte m (rh) */
} Ifx_DRE_COBUF_DB_Bits;

/** \brief RAM Multi-cast Routing Header */
typedef struct _Ifx_DRE_COBUF_MCRH_Bits
{
    __I  Ifx_UReg_32Bit MODE:2;            /**< \brief [1:0] Routing Rule Mode (rh) */
    __I  Ifx_UReg_32Bit SID:6;             /**< \brief [7:2] Source ID (rh) */
    __I  Ifx_UReg_32Bit DID0:6;            /**< \brief [13:8] Destination ID 1 (rh) */
    __I  Ifx_UReg_32Bit DID1:6;            /**< \brief [19:14] Destination ID 2 (rh) */
    __I  Ifx_UReg_32Bit DID2:6;            /**< \brief [25:20] Destination ID 3 (rh) */
    __I  Ifx_UReg_32Bit DID3:6;            /**< \brief [31:26] Destination ID 4 (rh) */
} Ifx_DRE_COBUF_MCRH_Bits;

/** \brief RAM COBUF Register 0 */
typedef struct _Ifx_DRE_COBUF_R0_Bits
{
    __I  Ifx_UReg_32Bit ID:29;             /**< \brief [28:0] CAN Identifier (rh) */
    __I  Ifx_UReg_32Bit RTR:1;             /**< \brief [29:29] Remote Transmission Request (rh) */
    __I  Ifx_UReg_32Bit XTD:1;             /**< \brief [30:30] Extended Identifier (rh) */
    __I  Ifx_UReg_32Bit ESI:1;             /**< \brief [31:31] Error State Indicator (rh) */
} Ifx_DRE_COBUF_R0_Bits;

/** \brief RAM COBUF Register 1 */
typedef struct _Ifx_DRE_COBUF_R1_Bits
{
    __I  Ifx_UReg_32Bit :16;               /**< \brief [15:0] \internal Reserved */
    __I  Ifx_UReg_32Bit DLC:4;             /**< \brief [19:16] Data Length Code (rh) */
    __I  Ifx_UReg_32Bit BRS:1;             /**< \brief [20:20] Bit Rate Switch (rh) */
    __I  Ifx_UReg_32Bit FDF:1;             /**< \brief [21:21] Frame Data Format (rh) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [31:22] \internal Reserved */
} Ifx_DRE_COBUF_R1_Bits;

/** \brief RAM Uni-cast Routing Header */
typedef struct _Ifx_DRE_COBUF_UCRH_Bits
{
    __I  Ifx_UReg_32Bit MODE:2;            /**< \brief [1:0] Routing Rule Mode (rh) */
    __I  Ifx_UReg_32Bit SID:6;             /**< \brief [7:2] Source ID (rh) */
    __I  Ifx_UReg_32Bit DID:6;             /**< \brief [13:8] Destination ID (rh) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_DRE_COBUF_UCRH_Bits;

/** \brief Destination Memory Configuration */
typedef struct _Ifx_DRE_DMEM_CONFIG_Bits
{
    __IO Ifx_Strict_32Bit EN:1;            /**< \brief [0:0] Enable Memory Destination (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [1:1] \internal Reserved */
    __IO Ifx_Strict_32Bit AST:1;           /**< \brief [2:2] Append Status Information (rw) */
    __IO Ifx_Strict_32Bit ATH:1;           /**< \brief [3:3] Append Timing Header (rw) */
    __IO Ifx_Strict_32Bit INP:4;           /**< \brief [7:4] Interrupt Node Pointer (rw) */
    __IO Ifx_Strict_32Bit OA:8;            /**< \brief [15:8] Offset Address (rw) */
    __IO Ifx_Strict_32Bit WML:8;           /**< \brief [23:16] Watermark Level (rw) */
    __IO Ifx_Strict_32Bit WAL:8;           /**< \brief [31:24] Address Wrap Around Level (rw) */
} Ifx_DRE_DMEM_CONFIG_Bits;

/** \brief Destination Memory Resource Partition */
typedef struct _Ifx_DRE_DMEM_RP_Bits
{
    __IO Ifx_Strict_32Bit RPI:3;           /**< \brief [2:0] Resource Partition Index (rw) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_DRE_DMEM_RP_Bits;

/** \brief Destination Memory Start address */
typedef struct _Ifx_DRE_DMEM_SA_Bits
{
    __IO Ifx_Strict_32Bit ADR:32;          /**< \brief [31:0] Absolute Start Address (rw) */
} Ifx_DRE_DMEM_SA_Bits;

/** \brief Destination Memory Status */
typedef struct _Ifx_DRE_DMEM_STATUS_Bits
{
    __IO Ifx_Strict_32Bit NM:1;            /**< \brief [0:0] New Message (rw1ch) */
    __I  Ifx_Strict_32Bit SID:6;           /**< \brief [6:1] Source ID (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [7:7] \internal Reserved */
    __I  Ifx_Strict_32Bit BC:8;            /**< \brief [15:8] Buffer Counter (rh) */
    __IO Ifx_Strict_32Bit WMF:1;           /**< \brief [16:16] Watermark Flag (rw1ch) */
    __IO Ifx_Strict_32Bit WAF:1;           /**< \brief [17:17] Wrap Around Flag (rw1ch) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [19:18] \internal Reserved */
    __IO Ifx_Strict_32Bit MC:12;           /**< \brief [31:20] Message Counter (rw1ch) */
} Ifx_DRE_DMEM_STATUS_Bits;

/** \brief Ethernet Input Buffer Configuration */
typedef struct _Ifx_DRE_EIBUF_CONFIG_Bits
{
    __IO Ifx_Strict_32Bit NTSCF_SA:16;     /**< \brief [15:0] Start Address of the NTSCF Header (rw) */
    __IO Ifx_Strict_32Bit SIZE:11;         /**< \brief [26:16] EIBUF Size (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [27:27] \internal Reserved */
    __IO Ifx_Strict_32Bit RRF:1;           /**< \brief [28:28] Reject Remote Frame (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [31:29] \internal Reserved */
} Ifx_DRE_EIBUF_CONFIG_Bits;

/** \brief Ethernet Input Buffer Start Address */
typedef struct _Ifx_DRE_EIBUF_SA_Bits
{
    __IO Ifx_Strict_32Bit ADR:16;          /**< \brief [15:0] Start Address (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_DRE_EIBUF_SA_Bits;

/** \brief Ethernet Input Buffer Status */
typedef struct _Ifx_DRE_EIBUF_STATUS_Bits
{
    __I  Ifx_Strict_32Bit LE_ACF_CAN_ADDR:9;    /**< \brief [8:0] Last Error ACF CAN Address Pointer (rh) */
    __IO Ifx_Strict_32Bit FE:1;            /**< \brief [9:9] Ethernet Frame Error (rw1ch) */
    __IO Ifx_Strict_32Bit IFT:1;           /**< \brief [10:10] Invalid Frame Type (rw1ch) */
    __IO Ifx_Strict_32Bit ISID:1;          /**< \brief [11:11] Invalid Stream ID (rw1ch) */
    __IO Ifx_Strict_32Bit LME:1;           /**< \brief [12:12] AVTP Length Mismatch Error (rw1ch) */
    __IO Ifx_Strict_32Bit CFE:1;           /**< \brief [13:13] CAN Format Error (rw1ch) */
    __IO Ifx_Strict_32Bit RFE:1;           /**< \brief [14:14] Remote Frame Error (rw1ch) */
    __IO Ifx_Strict_32Bit FC:1;            /**< \brief [15:15] Ethernet Frame Complete (rw1ch) */
    __I  Ifx_Strict_32Bit ACF_CAN_ADDR:9;    /**< \brief [24:16] ACF CAN Address Pointer (rh) */
    __I  Ifx_Strict_32Bit MSFE:4;          /**< \brief [28:25] Matched Stream ID Filter Element (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [29:29] \internal Reserved */
    __IO Ifx_Strict_32Bit BPRC:1;          /**< \brief [30:30] Buffer Pending Request Clear (rw1sh) */
    __IO Ifx_Strict_32Bit BPR:1;           /**< \brief [31:31] Buffer Pending Request (rwh) */
} Ifx_DRE_EIBUF_STATUS_Bits;

/** \brief Ethernet Output Buffer Configuration */
typedef struct _Ifx_DRE_EOBUF_CONFIG_Bits
{
    __IO Ifx_Strict_32Bit PL:11;           /**< \brief [10:0] ACF Payload Length (rw) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [15:11] \internal Reserved */
    __IO Ifx_Strict_32Bit DID:6;           /**< \brief [21:16] Destination ID of the Buffer (rw) */
    __IO Ifx_Strict_32Bit HE:1;            /**< \brief [22:22] Header Enable (rw) */
    __IO Ifx_Strict_32Bit TTM:3;           /**< \brief [25:23] Transmit Trigger Mode (rw) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [31:26] \internal Reserved */
} Ifx_DRE_EOBUF_CONFIG_Bits;

/** \brief MAC Header 0 */
typedef struct _Ifx_DRE_EOBUF_MAC_H0_Bits
{
    __I  Ifx_Strict_32Bit :16;             /**< \brief [15:0] \internal Reserved */
    __IO Ifx_Strict_32Bit DA0:8;           /**< \brief [23:16] MAC Destination Address 0 (rw) */
    __IO Ifx_Strict_32Bit DA1:8;           /**< \brief [31:24] MAC Destination Address 1 (rw) */
} Ifx_DRE_EOBUF_MAC_H0_Bits;

/** \brief MAC Header 1 */
typedef struct _Ifx_DRE_EOBUF_MAC_H1_Bits
{
    __IO Ifx_Strict_32Bit DA2:8;           /**< \brief [7:0] MAC Destination Address 2 (rw) */
    __IO Ifx_Strict_32Bit DA3:8;           /**< \brief [15:8] MAC Destination Address 3 (rw) */
    __IO Ifx_Strict_32Bit DA4:8;           /**< \brief [23:16] MAC Destination Address 4 (rw) */
    __IO Ifx_Strict_32Bit DA5:8;           /**< \brief [31:24] MAC Destination Address 5 (rw) */
} Ifx_DRE_EOBUF_MAC_H1_Bits;

/** \brief MAC Header 2 */
typedef struct _Ifx_DRE_EOBUF_MAC_H2_Bits
{
    __IO Ifx_Strict_32Bit SA0:8;           /**< \brief [7:0] MAC Source Address (rw) */
    __IO Ifx_Strict_32Bit SA1:8;           /**< \brief [15:8] MAC Source Address (rw) */
    __IO Ifx_Strict_32Bit SA2:8;           /**< \brief [23:16] MAC Source Address (rw) */
    __IO Ifx_Strict_32Bit SA3:8;           /**< \brief [31:24] MAC Source Address (rw) */
} Ifx_DRE_EOBUF_MAC_H2_Bits;

/** \brief MAC Header 3 */
typedef struct _Ifx_DRE_EOBUF_MAC_H3_Bits
{
    __IO Ifx_Strict_32Bit SA4:8;           /**< \brief [7:0] MAC Source Address (rw) */
    __IO Ifx_Strict_32Bit SA5:8;           /**< \brief [15:8] MAC Source Address (rw) */
    __IO Ifx_Strict_32Bit TPID_H:8;        /**< \brief [23:16] Tagged Protocol Identifier High (rw) */
    __IO Ifx_Strict_32Bit TPID_L:8;        /**< \brief [31:24] Tagged Protocol Identifier Low (rw) */
} Ifx_DRE_EOBUF_MAC_H3_Bits;

/** \brief MAC Header 4 */
typedef struct _Ifx_DRE_EOBUF_MAC_H4_Bits
{
    __IO Ifx_Strict_32Bit VTAG_H:8;        /**< \brief [7:0] VLAN Tag High (rw) */
    __IO Ifx_Strict_32Bit VTAG_L:8;        /**< \brief [15:8] VLAN Tag Low (rw) */
    __IO Ifx_Strict_32Bit AVTPET_H:8;      /**< \brief [23:16] AVTP Ethertype High (rw) */
    __IO Ifx_Strict_32Bit AVTPET_L:8;      /**< \brief [31:24] AVTP Ethertype Low (rw) */
} Ifx_DRE_EOBUF_MAC_H4_Bits;

/** \brief NTSCF Header */
typedef struct _Ifx_DRE_EOBUF_NTSCF_H0_Bits
{
    __I  Ifx_Strict_32Bit SUBTYPE:8;       /**< \brief [7:0] Subtype of AVTP Frame (r) */
    __I  Ifx_Strict_32Bit NTSCFDL_H:3;     /**< \brief [10:8] NTSCF Data Length High (rh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [14:11] \internal Reserved */
    __IO Ifx_Strict_32Bit SV:1;            /**< \brief [15:15] Stream ID Valid (rw) */
    __I  Ifx_Strict_32Bit NTSCFDL_L:8;     /**< \brief [23:16] NTSCF Data Length Low (rh) */
    __IO Ifx_Strict_32Bit SN:8;            /**< \brief [31:24] Sequence Number (rwh) */
} Ifx_DRE_EOBUF_NTSCF_H0_Bits;

/** \brief Stream ID Configuration 0 */
typedef struct _Ifx_DRE_EOBUF_NTSCF_STREAM0_ID_Bits
{
    __IO Ifx_Strict_32Bit ID0:8;           /**< \brief [7:0] Stream ID (rw) */
    __IO Ifx_Strict_32Bit ID1:8;           /**< \brief [15:8] Stream ID (rw) */
    __IO Ifx_Strict_32Bit ID2:8;           /**< \brief [23:16] Stream ID (rw) */
    __IO Ifx_Strict_32Bit ID3:8;           /**< \brief [31:24] Stream ID (rw) */
} Ifx_DRE_EOBUF_NTSCF_STREAM0_ID_Bits;

/** \brief Stream ID Configuration 1 */
typedef struct _Ifx_DRE_EOBUF_NTSCF_STREAM1_ID_Bits
{
    __IO Ifx_Strict_32Bit ID4:8;           /**< \brief [7:0] Stream ID (rw) */
    __IO Ifx_Strict_32Bit ID5:8;           /**< \brief [15:8] Stream ID (rw) */
    __IO Ifx_Strict_32Bit ID6:8;           /**< \brief [23:16] Stream ID (rw) */
    __IO Ifx_Strict_32Bit ID7:8;           /**< \brief [31:24] Stream ID (rw) */
} Ifx_DRE_EOBUF_NTSCF_STREAM1_ID_Bits;

/** \brief Ethernet Output Buffer Start Address */
typedef struct _Ifx_DRE_EOBUF_SA_Bits
{
    __IO Ifx_Strict_32Bit ADR:16;          /**< \brief [15:0] Start Address (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_DRE_EOBUF_SA_Bits;

/** \brief Ethernet Output Buffer Status */
typedef struct _Ifx_DRE_EOBUF_STATUS_Bits
{
    __IO Ifx_Strict_32Bit TXREQ:1;         /**< \brief [0:0] Ethernet Output Buffer Transmit Request (rw1ch) */
    __IO Ifx_Strict_32Bit TXRDY:1;         /**< \brief [1:1] Ethernet Output Buffer Transmit Ready (rw1sh) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [7:2] \internal Reserved */
    __IO Ifx_Strict_32Bit BF:1;            /**< \brief [8:8] Buffer Full (rw1ch) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [9:9] \internal Reserved */
    __IO Ifx_Strict_32Bit TTL:1;           /**< \brief [10:10] Transmit Trigger Lost (rw1ch) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [15:11] \internal Reserved */
    __I  Ifx_Strict_32Bit ACF_CAN_ADDR:9;    /**< \brief [24:16] ACF CAN Address Offset (rh) */
    __I  Ifx_Strict_32Bit ACFL:5;          /**< \brief [29:25] ACF CAN Fill Level (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [31:30] \internal Reserved */
} Ifx_DRE_EOBUF_STATUS_Bits;

/** \brief Transmit Trigger Configuration */
typedef struct _Ifx_DRE_EOBUF_TTC_Bits
{
    __IO Ifx_Strict_32Bit BUFT:11;         /**< \brief [10:0] Buffer Threshold (rw) */
    __IO Ifx_Strict_32Bit TFL:5;           /**< \brief [15:11] Trigger Fill Level (rw) */
    __IO Ifx_Strict_32Bit CLKSEL:2;        /**< \brief [17:16] Clock Select for Timer (rw) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [23:18] \internal Reserved */
    __IO Ifx_Strict_32Bit TP:5;            /**< \brief [28:24] Pre-scale for Timer (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [31:29] \internal Reserved */
} Ifx_DRE_EOBUF_TTC_Bits;

/** \brief Timer Threshold and Status */
typedef struct _Ifx_DRE_EOBUF_TTS_Bits
{
    __I  Ifx_Strict_32Bit CTV:16;          /**< \brief [15:0] Current Timer Value (rh) */
    __IO Ifx_Strict_32Bit TRV:16;          /**< \brief [31:16] Timer Reload Value (rw) */
} Ifx_DRE_EOBUF_TTS_Bits;

/** \brief DRE Identification Register */
typedef struct _Ifx_DRE_ID_Bits
{
    __I  Ifx_Strict_32Bit MOD_REV:8;       /**< \brief [7:0] Module Revision Number - MOD_REV (r) */
    __I  Ifx_Strict_32Bit MOD_TYPE:8;      /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_Strict_32Bit MOD_NUM:16;      /**< \brief [31:16] Module Number Value - MOD_NUMBER (r) */
} Ifx_DRE_ID_Bits;

/** \brief Interrupt Line Enable */
typedef struct _Ifx_DRE_IE_Bits
{
    __IO Ifx_Strict_32Bit IE0:1;           /**< \brief [0:0] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE1:1;           /**< \brief [1:1] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE2:1;           /**< \brief [2:2] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE3:1;           /**< \brief [3:3] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE4:1;           /**< \brief [4:4] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE5:1;           /**< \brief [5:5] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE6:1;           /**< \brief [6:6] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE7:1;           /**< \brief [7:7] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE8:1;           /**< \brief [8:8] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE9:1;           /**< \brief [9:9] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE10:1;          /**< \brief [10:10] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE11:1;          /**< \brief [11:11] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE12:1;          /**< \brief [12:12] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE13:1;          /**< \brief [13:13] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE14:1;          /**< \brief [14:14] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE15:1;          /**< \brief [15:15] Interrupt Line i Enabled (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_DRE_IE_Bits;

/** \brief Interrupt Signal */
typedef struct _Ifx_DRE_INTSIG_Bits
{
    __I  Ifx_Strict_32Bit INT0:1;          /**< \brief [0:0] Interrupt Line i (rh) */
    __I  Ifx_Strict_32Bit INT1:1;          /**< \brief [1:1] Interrupt Line i (rh) */
    __I  Ifx_Strict_32Bit INT2:1;          /**< \brief [2:2] Interrupt Line i (rh) */
    __I  Ifx_Strict_32Bit INT3:1;          /**< \brief [3:3] Interrupt Line i (rh) */
    __I  Ifx_Strict_32Bit INT4:1;          /**< \brief [4:4] Interrupt Line i (rh) */
    __I  Ifx_Strict_32Bit INT5:1;          /**< \brief [5:5] Interrupt Line i (rh) */
    __I  Ifx_Strict_32Bit INT6:1;          /**< \brief [6:6] Interrupt Line i (rh) */
    __I  Ifx_Strict_32Bit INT7:1;          /**< \brief [7:7] Interrupt Line i (rh) */
    __I  Ifx_Strict_32Bit INT8:1;          /**< \brief [8:8] CAN Input Buffer Full Interrupt (rh) */
    __I  Ifx_Strict_32Bit INT9:1;          /**< \brief [9:9] CAN Output Buffer Full Interrupt (rh) */
    __I  Ifx_Strict_32Bit INT10:1;         /**< \brief [10:10] Input Ethernet Frame Error Interrupt (rh) */
    __I  Ifx_Strict_32Bit INT11:1;         /**< \brief [11:11] Input ACF_CAN_BRIEF Frame Error Interrupt (rh) */
    __I  Ifx_Strict_32Bit INT12:1;         /**< \brief [12:12] Routing Table Error Interrupt (rh) */
    __I  Ifx_Strict_32Bit INT13:1;         /**< \brief [13:13] Routing Transaction Lost Interrupt (rh) */
    __I  Ifx_Strict_32Bit INT14:1;         /**< \brief [14:14] Ethernet Input Frame Completed Interrupt (rh) */
    __I  Ifx_Strict_32Bit INT15:1;         /**< \brief [15:15] Ethernet Output Frame Transmit Request Interrupt (rh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_DRE_INTSIG_Bits;

/** \brief Multi-cast Routing Header */
typedef struct _Ifx_DRE_MCRH_Bits
{
    __I  Ifx_Strict_32Bit MODE:2;          /**< \brief [1:0] Routing Rule Mode (rh) */
    __I  Ifx_Strict_32Bit SID:6;           /**< \brief [7:2] Source ID (rh) */
    __I  Ifx_Strict_32Bit DID0:6;          /**< \brief [13:8] Destination ID 1 (rh) */
    __I  Ifx_Strict_32Bit DID1:6;          /**< \brief [19:14] Destination ID 2 (rh) */
    __I  Ifx_Strict_32Bit DID2:6;          /**< \brief [25:20] Destination ID 3 (rh) */
    __I  Ifx_Strict_32Bit DID3:6;          /**< \brief [31:26] Destination ID 4 (rh) */
} Ifx_DRE_MCRH_Bits;

/** \brief Move Engine Destination Address */
typedef struct _Ifx_DRE_ME_DESTA_Bits
{
    __I  Ifx_Strict_32Bit ADR:32;          /**< \brief [31:0] Destination Address (rh) */
} Ifx_DRE_ME_DESTA_Bits;

/** \brief Move Engine Last Error Destination Address */
typedef struct _Ifx_DRE_ME_LEDESTA_Bits
{
    __I  Ifx_Strict_32Bit ADR:32;          /**< \brief [31:0] Last Error Destination Address (rh) */
} Ifx_DRE_ME_LEDESTA_Bits;

/** \brief Move Engine Last Error Source Address */
typedef struct _Ifx_DRE_ME_LESRCA_Bits
{
    __I  Ifx_Strict_32Bit ADR:32;          /**< \brief [31:0] Last Error Source Address (rh) */
} Ifx_DRE_ME_LESRCA_Bits;

/** \brief Move Engine Source Address */
typedef struct _Ifx_DRE_ME_SRCA_Bits
{
    __I  Ifx_Strict_32Bit ADR:32;          /**< \brief [31:0] Source Address (rh) */
} Ifx_DRE_ME_SRCA_Bits;

/** \brief Move Engine State */
typedef struct _Ifx_DRE_ME_STATE_Bits
{
    __I  Ifx_Strict_32Bit SPBR:1;          /**< \brief [0:0] SPB Read (rh) */
    __I  Ifx_Strict_32Bit SPBW:1;          /**< \brief [1:1] SPB Write (rh) */
    __I  Ifx_Strict_32Bit SRIR:1;          /**< \brief [2:2] SRI Read (rh) */
    __I  Ifx_Strict_32Bit SRIW:1;          /**< \brief [3:3] SRI Write (rh) */
    __I  Ifx_Strict_32Bit SID:6;           /**< \brief [9:4] Source ID (rh) */
    __I  Ifx_Strict_32Bit DID:6;           /**< \brief [15:10] Destination ID (rh) */
    __IO Ifx_Strict_32Bit SPBBE:1;         /**< \brief [16:16] SPB Bus Transaction error (rw1ch) */
    __IO Ifx_Strict_32Bit SRIBE:1;         /**< \brief [17:17] SRI Transaction Error (rw1ch) */
    __IO Ifx_Strict_32Bit DBOE:1;          /**< \brief [18:18] Destination Buffer Overflow Error (rw1ch) */
    __IO Ifx_Strict_32Bit IRDE:1;          /**< \brief [19:19] Invalid Routing Destination Error (rw1ch) */
    __I  Ifx_Strict_32Bit LESID:6;         /**< \brief [25:20] Last Error Source ID (rh) */
    __I  Ifx_Strict_32Bit LEDID:6;         /**< \brief [31:26] Last Error Destination ID (rh) */
} Ifx_DRE_ME_STATE_Bits;

/** \brief Resource Protection Register */
typedef struct _Ifx_DRE_PROT_Bits
{
    __IO Ifx_Strict_32Bit STATE:3;         /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_Strict_32Bit SWEN:1;          /**< \brief [3:3] State write enable (w) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [15:4] \internal Reserved */
    __IO Ifx_Strict_32Bit VM:3;            /**< \brief [18:16] Virtual Machine definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit VMEN:1;          /**< \brief [19:19] Virtual Machine definition Enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRS:3;           /**< \brief [22:20] Protection Set definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRSEN:1;         /**< \brief [23:23] Protection Set definition Enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit TAGID:6;         /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit ODEF:1;          /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_Strict_32Bit OWEN:1;          /**< \brief [31:31] Owner write enable (w) */
} Ifx_DRE_PROT_Bits;

/** \brief RP 0 Mode Register */
typedef struct _Ifx_DRE_RP_MODE_Bits
{
    __IO Ifx_Strict_32Bit MODE:1;          /**< \brief [0:0] Resource Partition Supervisor Mode - MODE (rw) */
    __I  Ifx_Strict_32Bit :15;             /**< \brief [15:1] \internal Reserved */
    __IO Ifx_Strict_32Bit VM:3;            /**< \brief [18:16] Virtual Machine (rw) */
    __IO Ifx_Strict_32Bit VMEN:1;          /**< \brief [19:19] Virtual Machine Enable (rw) */
    __IO Ifx_Strict_32Bit PRS:3;           /**< \brief [22:20] Protection Set (rw) */
    __IO Ifx_Strict_32Bit PRSEN:1;         /**< \brief [23:23] Protection Set Enable (rw) */
    __IO Ifx_Strict_32Bit TAGOFF:1;        /**< \brief [24:24] Tag Offset (rw) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [31:25] \internal Reserved */
} Ifx_DRE_RP_MODE_Bits;

/** \brief CAN ID Request */
typedef struct _Ifx_DRE_RREQ_CID_Bits
{
    __I  Ifx_Strict_32Bit ID:29;           /**< \brief [28:0] CAN Identifier (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [30:29] \internal Reserved */
    __I  Ifx_Strict_32Bit XTD:1;           /**< \brief [31:31] Extended Identifier (rh) */
} Ifx_DRE_RREQ_CID_Bits;

/** \brief Routing Request Configuration */
typedef struct _Ifx_DRE_RREQ_CONFIG_Bits
{
    __I  Ifx_Strict_32Bit REQ:1;           /**< \brief [0:0] New Routing Request (rh) */
    __I  Ifx_Strict_32Bit :15;             /**< \brief [15:1] \internal Reserved */
    __I  Ifx_Strict_32Bit RTI:3;           /**< \brief [18:16] Routing Table Index (rh) */
    __I  Ifx_Strict_32Bit :13;             /**< \brief [31:19] \internal Reserved */
} Ifx_DRE_RREQ_CONFIG_Bits;

/** \brief Routing Status */
typedef struct _Ifx_DRE_RS_Bits
{
    __I  Ifx_Strict_32Bit RE:9;            /**< \brief [8:0] Routing Element (rh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [15:9] \internal Reserved */
    __IO Ifx_Strict_32Bit IRT:1;           /**< \brief [16:16] Invalid Routing Table (rw1ch) */
    __IO Ifx_Strict_32Bit NMFE:1;          /**< \brief [17:17] Non-Matching Filter Element Error (rw1ch) */
    __I  Ifx_Strict_32Bit :14;             /**< \brief [31:18] \internal Reserved */
} Ifx_DRE_RS_Bits;

/** \brief Reset Control Register A */
typedef struct _Ifx_DRE_RST_CTRLA_Bits
{
    __IO Ifx_Strict_32Bit KRST:1;          /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [7:1] \internal Reserved */
    __IO Ifx_Strict_32Bit GRSTEN0:1;       /**< \brief [8:8] Enable for Global Module Reset Group 0 - GRSTEN0 (rw) */
    __IO Ifx_Strict_32Bit GRSTEN1:1;       /**< \brief [9:9] Enable for Global Module Reset Group 1 - GRSTEN1 (rw) */
    __IO Ifx_Strict_32Bit GRSTEN2:1;       /**< \brief [10:10] Enable for Global Module Reset Group 2 - GRSTEN2 (rw) */
    __IO Ifx_Strict_32Bit GRSTEN3:1;       /**< \brief [11:11] Enable for Global Module Reset Group 3 - GRSTEN3 (rw) */
    __I  Ifx_Strict_32Bit :20;             /**< \brief [31:12] \internal Reserved */
} Ifx_DRE_RST_CTRLA_Bits;

/** \brief Reset Control Register B */
typedef struct _Ifx_DRE_RST_CTRLB_Bits
{
    __IO Ifx_Strict_32Bit KRST:1;          /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [30:1] \internal Reserved */
    __O  Ifx_Strict_32Bit STATCLR:1;       /**< \brief [31:31] Kernel Reset Status Clear - STATCLR (w) */
} Ifx_DRE_RST_CTRLB_Bits;

/** \brief Reset Status Register */
typedef struct _Ifx_DRE_RST_STAT_Bits
{
    __I  Ifx_Strict_32Bit KRST:1;          /**< \brief [0:0] Kernel Reset Status - KRST (rh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [7:1] \internal Reserved */
    __I  Ifx_Strict_32Bit GRST0:1;         /**< \brief [8:8] Status for Global Module Reset Group 0 - GRST0 (rh) */
    __I  Ifx_Strict_32Bit GRST1:1;         /**< \brief [9:9] Status for Global Module Reset Group 1 - GRST1 (rh) */
    __I  Ifx_Strict_32Bit GRST2:1;         /**< \brief [10:10] Status for Global Module Reset Group 2 - GRST2 (rh) */
    __I  Ifx_Strict_32Bit GRST3:1;         /**< \brief [11:11] Status for Global Module Reset Group 3 - GRST3 (rh) */
    __I  Ifx_Strict_32Bit :20;             /**< \brief [31:12] \internal Reserved */
} Ifx_DRE_RST_STAT_Bits;

/** \brief CAN Transmit Routing Table Configuration */
typedef struct _Ifx_DRE_RT_CONFIG_Bits
{
    __IO Ifx_Strict_32Bit NRULES:8;        /**< \brief [7:0] Number of routing rules (rw) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_DRE_RT_CONFIG_Bits;

/** \brief RAM Routing table CAN ID Filter Configuration */
typedef struct _Ifx_DRE_RT_RE_CIDFC_Bits
{
    __IO Ifx_UReg_32Bit CANID1:13;         /**< \brief [12:0] CAN ID 1 (rw) */
    __IO Ifx_UReg_32Bit IDS:3;             /**< \brief [15:13] ID Shift (rw) */
    __IO Ifx_UReg_32Bit CANID2:13;         /**< \brief [28:16] CAN ID 2 (rw) */
    __IO Ifx_UReg_32Bit MODE:2;            /**< \brief [30:29] Filter Mode (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_DRE_RT_RE_CIDFC_Bits;

/** \brief RAM Routing table Multi-cast Routing */
typedef struct _Ifx_DRE_RT_RE_MCR_Bits
{
    __IO Ifx_UReg_32Bit MODE:2;            /**< \brief [1:0] Routing Rule Mode (rw) */
    __IO Ifx_UReg_32Bit SID:6;             /**< \brief [7:2] Source ID (rw) */
    __IO Ifx_UReg_32Bit DID0:6;            /**< \brief [13:8] Destination ID 1 (rw) */
    __IO Ifx_UReg_32Bit DID1:6;            /**< \brief [19:14] Destination ID 2 (rw) */
    __IO Ifx_UReg_32Bit DID2:6;            /**< \brief [25:20] Destination ID 3 (rw) */
    __IO Ifx_UReg_32Bit DID3:6;            /**< \brief [31:26] Destination ID 4 (rw) */
} Ifx_DRE_RT_RE_MCR_Bits;

/** \brief RAM Routing table Uni-cast Routing */
typedef struct _Ifx_DRE_RT_RE_UCR_Bits
{
    __IO Ifx_UReg_32Bit MODE:2;            /**< \brief [1:0] Routing Rule Mode (rw) */
    __IO Ifx_UReg_32Bit SID:6;             /**< \brief [7:2] Source ID (rw) */
    __IO Ifx_UReg_32Bit DID:6;             /**< \brief [13:8] Destination ID (rw) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_DRE_RT_RE_UCR_Bits;

/** \brief CAN Transmit Routing Table Start Address */
typedef struct _Ifx_DRE_RT_SA_Bits
{
    __IO Ifx_Strict_32Bit ADR:16;          /**< \brief [15:0] Start Address (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_DRE_RT_SA_Bits;

/** \brief Stream ID Filter Configuration */
typedef struct _Ifx_DRE_SIDF_FC_Bits
{
    __IO Ifx_Strict_32Bit FE:1;            /**< \brief [0:0] Filter Enable (rw) */
    __IO Ifx_Strict_32Bit MODE:2;          /**< \brief [2:1] Filter Mode (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [3:3] \internal Reserved */
    __IO Ifx_Strict_32Bit RTI:3;           /**< \brief [6:4] Routing Table Index (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [7:7] \internal Reserved */
    __IO Ifx_Strict_32Bit SID:6;           /**< \brief [13:8] Source ID (rw) */
    __I  Ifx_Strict_32Bit :18;             /**< \brief [31:14] \internal Reserved */
} Ifx_DRE_SIDF_FC_Bits;

/** \brief Stream ID Filter 1 Higher */
typedef struct _Ifx_DRE_SIDF_FIL1_H_Bits
{
    __IO Ifx_Strict_32Bit F1H:32;          /**< \brief [31:0] Higher Filter 1 Stream ID (rw) */
} Ifx_DRE_SIDF_FIL1_H_Bits;

/** \brief Stream ID Filter 1 Lower */
typedef struct _Ifx_DRE_SIDF_FIL1_L_Bits
{
    __IO Ifx_Strict_32Bit F1L:32;          /**< \brief [31:0] Lower Filter 1 Stream ID (rw) */
} Ifx_DRE_SIDF_FIL1_L_Bits;

/** \brief Stream ID Filter 2 Higher */
typedef struct _Ifx_DRE_SIDF_FIL2_H_Bits
{
    __IO Ifx_Strict_32Bit F2H:32;          /**< \brief [31:0] Higher Filter 2 Stream ID (rw) */
} Ifx_DRE_SIDF_FIL2_H_Bits;

/** \brief Stream ID Filter 2 Lower */
typedef struct _Ifx_DRE_SIDF_FIL2_L_Bits
{
    __IO Ifx_Strict_32Bit F2L:32;          /**< \brief [31:0] Lower Filter 2 Stream ID (rw) */
} Ifx_DRE_SIDF_FIL2_L_Bits;

/** \brief Uni-cast Routing Header */
typedef struct _Ifx_DRE_UCRH_Bits
{
    __I  Ifx_Strict_32Bit MODE:2;          /**< \brief [1:0] Routing Rule Mode (rh) */
    __I  Ifx_Strict_32Bit SID:6;           /**< \brief [7:2] Source ID (rh) */
    __I  Ifx_Strict_32Bit DID:6;           /**< \brief [13:8] Destination ID (rh) */
    __I  Ifx_Strict_32Bit :18;             /**< \brief [31:14] \internal Reserved */
} Ifx_DRE_UCRH_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_dre_Registers_union
 * \{   */
/** \brief PRS Access Enable Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ACCEN_PRS_Bits B;         /**< \brief Bitfield access */
} Ifx_DRE_ACCEN_PRS;

/** \brief Read Access Enable Register A   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ACCEN_RDA_Bits B;         /**< \brief Bitfield access */
} Ifx_DRE_ACCEN_RDA;

/** \brief Read Access Enable Register B   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ACCEN_RDB_SRI_Bits B;     /**< \brief Bitfield access */
} Ifx_DRE_ACCEN_RDB_SRI;

/** \brief Region Lower Address Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ACCEN_RGNLA_Bits B;       /**< \brief Bitfield access */
} Ifx_DRE_ACCEN_RGNLA;

/** \brief Region Upper Address Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ACCEN_RGNUA_Bits B;       /**< \brief Bitfield access */
} Ifx_DRE_ACCEN_RGNUA;

/** \brief VM Access Enable Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ACCEN_VM_Bits B;          /**< \brief Bitfield access */
} Ifx_DRE_ACCEN_VM;

/** \brief Write Access Enable Register A   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ACCEN_WRA_Bits B;         /**< \brief Bitfield access */
} Ifx_DRE_ACCEN_WRA;

/** \brief Write Access Enable Rregister B   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ACCEN_WRB_SRI_Bits B;     /**< \brief Bitfield access */
} Ifx_DRE_ACCEN_WRB_SRI;

/** \brief RAM CAN Address Database CRE Start Address   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CAD_CAN_CRESA_Bits B;     /**< \brief Bitfield access */
} Ifx_DRE_CAD_CAN_CRESA;

/** \brief RAM CAN Address Database CRE Buffer Length Configuration   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CAD_CAN_LC_Bits B;        /**< \brief Bitfield access */
} Ifx_DRE_CAD_CAN_LC;

/** \brief CAN Receive Request 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CANRXR0_Bits B;           /**< \brief Bitfield access */
} Ifx_DRE_CANRXR0;

/** \brief CAN Receive Request 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CANRXR1_Bits B;           /**< \brief Bitfield access */
} Ifx_DRE_CANRXR1;

/** \brief CAN Transmit Buffer Available Request   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CANTXR_Bits B;            /**< \brief Bitfield access */
} Ifx_DRE_CANTXR;

/** \brief CAN Resource Partition   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CAN_RP_Bits B;            /**< \brief Bitfield access */
} Ifx_DRE_CAN_RP;

/** \brief CAN Input Buffer Pending Request   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CIBL_BPR_Bits B;          /**< \brief Bitfield access */
} Ifx_DRE_CIBL_BPR;

/** \brief CAN Input Buffer List Configuration   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CIBL_CONFIG_Bits B;       /**< \brief Bitfield access */
} Ifx_DRE_CIBL_CONFIG;

/** \brief CAN Input Buffer List Start Address   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CIBL_SA_Bits B;           /**< \brief Bitfield access */
} Ifx_DRE_CIBL_SA;

/** \brief CAN Input Buffer List Status   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CIBL_STATUS_Bits B;       /**< \brief Bitfield access */
} Ifx_DRE_CIBL_STATUS;

/** \brief RAM CIBUF Data Byte m   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_DRE_CIBUF_DB_Bits B;          /**< \brief Bitfield access */
} Ifx_DRE_CIBUF_DB;

/** \brief RAM CIBUF Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CIBUF_R0_Bits B;          /**< \brief Bitfield access */
} Ifx_DRE_CIBUF_R0;

/** \brief RAM CIBUF Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CIBUF_R1_Bits B;          /**< \brief Bitfield access */
} Ifx_DRE_CIBUF_R1;

/** \brief RAM CIBUF Routing Header   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CIBUF_RHEAD_Bits B;       /**< \brief Bitfield access */
} Ifx_DRE_CIBUF_RHEAD;

/** \brief Clock Control Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CLC_Bits B;               /**< \brief Bitfield access */
} Ifx_DRE_CLC;

/** \brief CAN Output Buffer Pending Request 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_COBL_BPR0_Bits B;         /**< \brief Bitfield access */
} Ifx_DRE_COBL_BPR0;

/** \brief CAN Output Buffer Pending Request 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_COBL_BPR1_Bits B;         /**< \brief Bitfield access */
} Ifx_DRE_COBL_BPR1;

/** \brief CAN Output Buffer List Configuration   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_COBL_CONFIG_Bits B;       /**< \brief Bitfield access */
} Ifx_DRE_COBL_CONFIG;

/** \brief CAN Output Buffer List Start Address   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_COBL_SA_Bits B;           /**< \brief Bitfield access */
} Ifx_DRE_COBL_SA;

/** \brief CAN Output Buffer List Status   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_COBL_STATUS_Bits B;       /**< \brief Bitfield access */
} Ifx_DRE_COBL_STATUS;

/** \brief RAM COBUF Data Byte m   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_DRE_COBUF_DB_Bits B;          /**< \brief Bitfield access */
} Ifx_DRE_COBUF_DB;

/** \brief RAM Multi-cast Routing Header   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_COBUF_MCRH_Bits B;        /**< \brief Bitfield access */
} Ifx_DRE_COBUF_MCRH;

/** \brief RAM COBUF Register 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_COBUF_R0_Bits B;          /**< \brief Bitfield access */
} Ifx_DRE_COBUF_R0;

/** \brief RAM COBUF Register 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_COBUF_R1_Bits B;          /**< \brief Bitfield access */
} Ifx_DRE_COBUF_R1;

/** \brief RAM Uni-cast Routing Header   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_COBUF_UCRH_Bits B;        /**< \brief Bitfield access */
} Ifx_DRE_COBUF_UCRH;

/** \brief Destination Memory Configuration   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_DMEM_CONFIG_Bits B;       /**< \brief Bitfield access */
} Ifx_DRE_DMEM_CONFIG;

/** \brief Destination Memory Resource Partition   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_DMEM_RP_Bits B;           /**< \brief Bitfield access */
} Ifx_DRE_DMEM_RP;

/** \brief Destination Memory Start address   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_DMEM_SA_Bits B;           /**< \brief Bitfield access */
} Ifx_DRE_DMEM_SA;

/** \brief Destination Memory Status   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_DMEM_STATUS_Bits B;       /**< \brief Bitfield access */
} Ifx_DRE_DMEM_STATUS;

/** \brief Ethernet Input Buffer Configuration   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EIBUF_CONFIG_Bits B;      /**< \brief Bitfield access */
} Ifx_DRE_EIBUF_CONFIG;

/** \brief Ethernet Input Buffer Start Address   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EIBUF_SA_Bits B;          /**< \brief Bitfield access */
} Ifx_DRE_EIBUF_SA;

/** \brief Ethernet Input Buffer Status   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EIBUF_STATUS_Bits B;      /**< \brief Bitfield access */
} Ifx_DRE_EIBUF_STATUS;

/** \brief Ethernet Output Buffer Configuration   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_CONFIG_Bits B;      /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_CONFIG;

/** \brief MAC Header 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_MAC_H0_Bits B;      /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_MAC_H0;

/** \brief MAC Header 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_MAC_H1_Bits B;      /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_MAC_H1;

/** \brief MAC Header 2   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_MAC_H2_Bits B;      /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_MAC_H2;

/** \brief MAC Header 3   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_MAC_H3_Bits B;      /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_MAC_H3;

/** \brief MAC Header 4   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_MAC_H4_Bits B;      /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_MAC_H4;

/** \brief NTSCF Header   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_NTSCF_H0_Bits B;    /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_NTSCF_H0;

/** \brief Stream ID Configuration 0   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_NTSCF_STREAM0_ID_Bits B;    /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_NTSCF_STREAM0_ID;

/** \brief Stream ID Configuration 1   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_NTSCF_STREAM1_ID_Bits B;    /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_NTSCF_STREAM1_ID;

/** \brief Ethernet Output Buffer Start Address   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_SA_Bits B;          /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_SA;

/** \brief Ethernet Output Buffer Status   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_STATUS_Bits B;      /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_STATUS;

/** \brief Transmit Trigger Configuration   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_TTC_Bits B;         /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_TTC;

/** \brief Timer Threshold and Status   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_TTS_Bits B;         /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_TTS;

/** \brief DRE Identification Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ID_Bits B;                /**< \brief Bitfield access */
} Ifx_DRE_ID;

/** \brief Interrupt Line Enable   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_IE_Bits B;                /**< \brief Bitfield access */
} Ifx_DRE_IE;

/** \brief Interrupt Signal   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_INTSIG_Bits B;            /**< \brief Bitfield access */
} Ifx_DRE_INTSIG;

/** \brief Multi-cast Routing Header   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_MCRH_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_MCRH;

/** \brief Move Engine Destination Address   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ME_DESTA_Bits B;          /**< \brief Bitfield access */
} Ifx_DRE_ME_DESTA;

/** \brief Move Engine Last Error Destination Address   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ME_LEDESTA_Bits B;        /**< \brief Bitfield access */
} Ifx_DRE_ME_LEDESTA;

/** \brief Move Engine Last Error Source Address   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ME_LESRCA_Bits B;         /**< \brief Bitfield access */
} Ifx_DRE_ME_LESRCA;

/** \brief Move Engine Source Address   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ME_SRCA_Bits B;           /**< \brief Bitfield access */
} Ifx_DRE_ME_SRCA;

/** \brief Move Engine State   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ME_STATE_Bits B;          /**< \brief Bitfield access */
} Ifx_DRE_ME_STATE;

/** \brief Resource Protection Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_PROT_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_PROT;

/** \brief RP 0 Mode Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RP_MODE_Bits B;           /**< \brief Bitfield access */
} Ifx_DRE_RP_MODE;

/** \brief CAN ID Request   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RREQ_CID_Bits B;          /**< \brief Bitfield access */
} Ifx_DRE_RREQ_CID;

/** \brief Routing Request Configuration   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RREQ_CONFIG_Bits B;       /**< \brief Bitfield access */
} Ifx_DRE_RREQ_CONFIG;

/** \brief Routing Status   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RS_Bits B;                /**< \brief Bitfield access */
} Ifx_DRE_RS;

/** \brief Reset Control Register A   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RST_CTRLA_Bits B;         /**< \brief Bitfield access */
} Ifx_DRE_RST_CTRLA;

/** \brief Reset Control Register B   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RST_CTRLB_Bits B;         /**< \brief Bitfield access */
} Ifx_DRE_RST_CTRLB;

/** \brief Reset Status Register   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RST_STAT_Bits B;          /**< \brief Bitfield access */
} Ifx_DRE_RST_STAT;

/** \brief CAN Transmit Routing Table Configuration   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RT_CONFIG_Bits B;         /**< \brief Bitfield access */
} Ifx_DRE_RT_CONFIG;

/** \brief RAM Routing table CAN ID Filter Configuration   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RT_RE_CIDFC_Bits B;       /**< \brief Bitfield access */
} Ifx_DRE_RT_RE_CIDFC;

/** \brief RAM Routing table Multi-cast Routing   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RT_RE_MCR_Bits B;         /**< \brief Bitfield access */
} Ifx_DRE_RT_RE_MCR;

/** \brief RAM Routing table Uni-cast Routing   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RT_RE_UCR_Bits B;         /**< \brief Bitfield access */
} Ifx_DRE_RT_RE_UCR;

/** \brief CAN Transmit Routing Table Start Address   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RT_SA_Bits B;             /**< \brief Bitfield access */
} Ifx_DRE_RT_SA;

/** \brief Stream ID Filter Configuration   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_SIDF_FC_Bits B;           /**< \brief Bitfield access */
} Ifx_DRE_SIDF_FC;

/** \brief Stream ID Filter 1 Higher   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_SIDF_FIL1_H_Bits B;       /**< \brief Bitfield access */
} Ifx_DRE_SIDF_FIL1_H;

/** \brief Stream ID Filter 1 Lower   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_SIDF_FIL1_L_Bits B;       /**< \brief Bitfield access */
} Ifx_DRE_SIDF_FIL1_L;

/** \brief Stream ID Filter 2 Higher   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_SIDF_FIL2_H_Bits B;       /**< \brief Bitfield access */
} Ifx_DRE_SIDF_FIL2_H;

/** \brief Stream ID Filter 2 Lower   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_SIDF_FIL2_L_Bits B;       /**< \brief Bitfield access */
} Ifx_DRE_SIDF_FIL2_L;

/** \brief Uni-cast Routing Header   */
typedef union
{
    Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_UCRH_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_UCRH;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_DRE_RST
{
       __IO Ifx_DRE_RST_CTRLA                   CTRLA;                  /**< \brief 0, Reset Control Register A*/
       __IO Ifx_DRE_RST_CTRLB                   CTRLB;                  /**< \brief 4, Reset Control Register B*/
       __I  Ifx_DRE_RST_STAT                    STAT;                   /**< \brief 8, Reset Status Register*/
} Ifx_DRE_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_DRE_ACCEN
{
       __IO Ifx_DRE_ACCEN_WRA                   WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_DRE_ACCEN_WRB_SRI               WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_DRE_ACCEN_RDA                   RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_DRE_ACCEN_RDB_SRI               RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_DRE_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_DRE_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable register*/
       __IO Ifx_DRE_ACCEN_RGNLA                 RGNLA;                  /**< \brief 18, Region lower address register*/
       __IO Ifx_DRE_ACCEN_RGNUA                 RGNUA;                  /**< \brief 1C, Region upper address register*/
} Ifx_DRE_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_RP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RP object */
typedef volatile struct _Ifx_DRE_RP
{
       __IO Ifx_DRE_RP_MODE                     MODE;                   /**< \brief 0, RP 0 Mode Register*/
} Ifx_DRE_RP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_CAN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief CAN object */
typedef volatile struct _Ifx_DRE_CAN
{
       __IO Ifx_DRE_CAN_RP                      RP;                     /**< \brief 0, CAN Resource Partition*/
} Ifx_DRE_CAN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_CIBL_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief CIBL object */
typedef volatile struct _Ifx_DRE_CIBL
{
       __IO Ifx_DRE_CIBL_SA                     SA;                     /**< \brief 0, CAN Input Buffer List Start Address*/
       __IO Ifx_DRE_CIBL_CONFIG                 CONFIG;                 /**< \brief 4, CAN Input Buffer List Configuration*/
       __IO Ifx_DRE_CIBL_BPR                    BPR;                    /**< \brief 8, CAN Input Buffer Pending Request*/
       __I  Ifx_DRE_CIBL_STATUS                 STATUS;                 /**< \brief C, CAN Input Buffer List Status*/
} Ifx_DRE_CIBL;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_COBL_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief COBL object */
typedef volatile struct _Ifx_DRE_COBL
{
       __IO Ifx_DRE_COBL_SA                     SA;                     /**< \brief 0, CAN Output Buffer List Start Address*/
       __IO Ifx_DRE_COBL_CONFIG                 CONFIG;                 /**< \brief 4, CAN Output Buffer List Configuration*/
       __I  Ifx_DRE_COBL_BPR0                   BPR0;                   /**< \brief 8, CAN Output Buffer Pending Request 0*/
       __I  Ifx_DRE_COBL_BPR1                   BPR1;                   /**< \brief C, CAN Output Buffer Pending Request 1*/
       __I  Ifx_DRE_COBL_STATUS                 STATUS;                 /**< \brief 10, CAN Output Buffer List Status*/
} Ifx_DRE_COBL;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_EIBUF_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief EIBUF object */
typedef volatile struct _Ifx_DRE_EIBUF
{
       __IO Ifx_DRE_EIBUF_SA                    SA;                     /**< \brief 0, Ethernet Input Buffer Start Address*/
       __IO Ifx_DRE_EIBUF_CONFIG                CONFIG;                 /**< \brief 4, Ethernet Input Buffer Configuration*/
       __IO Ifx_DRE_EIBUF_STATUS                STATUS;                 /**< \brief 8, Ethernet Input Buffer Status*/
} Ifx_DRE_EIBUF;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_EOBUF_MAC_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief MAC object */
typedef volatile struct _Ifx_DRE_EOBUF_MAC
{
       __IO Ifx_DRE_EOBUF_MAC_H0                H0;                     /**< \brief 0, MAC Header 0*/
       __IO Ifx_DRE_EOBUF_MAC_H1                H1;                     /**< \brief 4, MAC Header 1*/
       __IO Ifx_DRE_EOBUF_MAC_H2                H2;                     /**< \brief 8, MAC Header 2*/
       __IO Ifx_DRE_EOBUF_MAC_H3                H3;                     /**< \brief C, MAC Header 3*/
       __IO Ifx_DRE_EOBUF_MAC_H4                H4;                     /**< \brief 10, MAC Header 4*/
} Ifx_DRE_EOBUF_MAC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_EOBUF_NTSCF_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief NTSCF object */
typedef volatile struct _Ifx_DRE_EOBUF_NTSCF
{
       __IO Ifx_DRE_EOBUF_NTSCF_H0              H0;                     /**< \brief 0, NTSCF Header*/
       __IO Ifx_DRE_EOBUF_NTSCF_STREAM0_ID      STREAM0_ID;             /**< \brief 4, Stream ID Configuration 0*/
       __IO Ifx_DRE_EOBUF_NTSCF_STREAM1_ID      STREAM1_ID;             /**< \brief 8, Stream ID Configuration 1*/
} Ifx_DRE_EOBUF_NTSCF;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_EOBUF_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief EOBUF object */
typedef volatile struct _Ifx_DRE_EOBUF
{
       __IO Ifx_DRE_EOBUF_SA                    SA;                     /**< \brief 0, Ethernet Output Buffer Start Address*/
       __IO Ifx_DRE_EOBUF_CONFIG                CONFIG;                 /**< \brief 4, Ethernet Output Buffer Configuration*/
       __IO Ifx_DRE_EOBUF_MAC                   MAC;                    /**< \brief 8, MAC Header*/
       __IO Ifx_DRE_EOBUF_NTSCF                 NTSCF;                  /**< \brief 1C, NTSCF Header*/
       __IO Ifx_DRE_EOBUF_STATUS                STATUS;                 /**< \brief 28, Ethernet Output Buffer Status*/
       __IO Ifx_DRE_EOBUF_TTC                   TTC;                    /**< \brief 2C, Transmit Trigger Configuration*/
       __IO Ifx_DRE_EOBUF_TTS                   TTS;                    /**< \brief 30, Timer Threshold and Status*/
} Ifx_DRE_EOBUF;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_SIDF_FIL1_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief FIL1 object */
typedef volatile struct _Ifx_DRE_SIDF_FIL1
{
       __IO Ifx_DRE_SIDF_FIL1_L                 L;                      /**< \brief 0, Stream ID Filter 1 Lower*/
       __IO Ifx_DRE_SIDF_FIL1_H                 H;                      /**< \brief 4, Stream ID Filter 1 Higher*/
} Ifx_DRE_SIDF_FIL1;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_SIDF_FIL2_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief FIL2 object */
typedef volatile struct _Ifx_DRE_SIDF_FIL2
{
       __IO Ifx_DRE_SIDF_FIL2_L                 L;                      /**< \brief 0, Stream ID Filter 2 Lower*/
       __IO Ifx_DRE_SIDF_FIL2_H                 H;                      /**< \brief 4, Stream ID Filter 2 Higher*/
} Ifx_DRE_SIDF_FIL2;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_SIDF_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief SIDF object */
typedef volatile struct _Ifx_DRE_SIDF
{
       __IO Ifx_DRE_SIDF_FC                     FC;                     /**< \brief 0, Stream ID Filter Configuration*/
       __IO Ifx_DRE_SIDF_FIL1                   FIL1;                   /**< \brief 4, */
       __IO Ifx_DRE_SIDF_FIL2                   FIL2;                   /**< \brief C, Filter 2*/
} Ifx_DRE_SIDF;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_RT_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RT object */
typedef volatile struct _Ifx_DRE_RT
{
       __IO Ifx_DRE_RT_SA                       SA;                     /**< \brief 0, CAN Transmit Routing Table Start Address*/
       __IO Ifx_DRE_RT_CONFIG                   CONFIG;                 /**< \brief 4, CAN Transmit Routing Table Configuration*/
} Ifx_DRE_RT;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_RREQ_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RREQ object */
typedef volatile struct _Ifx_DRE_RREQ
{
       __I  Ifx_DRE_RREQ_CONFIG                 CONFIG;                 /**< \brief 0, Routing Request Configuration*/
       __I  Ifx_DRE_RREQ_CID                    CID;                    /**< \brief 4, CAN ID Request*/
} Ifx_DRE_RREQ;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_DMEM_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief DMEM object */
typedef volatile struct _Ifx_DRE_DMEM
{
       __IO Ifx_DRE_DMEM_SA                     SA;                     /**< \brief 0, Destination Memory Start address*/
       __IO Ifx_DRE_DMEM_CONFIG                 CONFIG;                 /**< \brief 4, Destination Memory Configuration*/
       __IO Ifx_DRE_DMEM_STATUS                 STATUS;                 /**< \brief 8, Destination Memory Status*/
       __IO Ifx_DRE_DMEM_RP                     RP;                     /**< \brief C, Destination Memory Resource Partition*/
} Ifx_DRE_DMEM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_ME_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ME object */
typedef volatile struct _Ifx_DRE_ME
{
       __I  Ifx_DRE_ME_SRCA                     SRCA;                   /**< \brief 0, Move Engine Source Address*/
       __I  Ifx_DRE_ME_DESTA                    DESTA;                  /**< \brief 4, Move Engine Destination Address*/
       __IO Ifx_DRE_ME_STATE                    STATE;                  /**< \brief 8, Move Engine State*/
       __I  Ifx_DRE_ME_LESRCA                   LESRCA;                 /**< \brief C, Move Engine Last Error Source Address*/
       __I  Ifx_DRE_ME_LEDESTA                  LEDESTA;                /**< \brief 10, Move Engine Last Error Destination Address*/
       __I  Ifx_UReg_8Bit                       reserved_14[4];         /**< \brief 14, \internal Reserved */
} Ifx_DRE_ME;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_CIBUF_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief CIBUF object */
typedef volatile struct _Ifx_DRE_CIBUF
{
       __I  Ifx_DRE_CIBUF_RHEAD                 RHEAD;                  /**< \brief 0, RAM CIBUF Routing Header*/
       __I  Ifx_UReg_8Bit                       reserved_4[4];          /**< \brief 4, \internal Reserved */
       __I  Ifx_DRE_CIBUF_R0                    R0;                     /**< \brief 8, RAM CIBUF Register 0*/
       __IO Ifx_DRE_CIBUF_R1                    R1;                     /**< \brief C, RAM CIBUF Register 1*/
       __IO Ifx_DRE_CIBUF_DB                    DB[64];                 /**< \brief 10, RAM CIBUF Data Byte m*/
} Ifx_DRE_CIBUF;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_COBUF_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief COBUF object */
typedef volatile struct _Ifx_DRE_COBUF
{
       union
       {
            __I  Ifx_DRE_COBUF_UCRH                  UCRH;                   /**< \brief 0, Routing Header*/
            __I  Ifx_DRE_COBUF_MCRH                  MCRH;                   /**< \brief 0, Routing Header*/
       };
       __I  Ifx_UReg_8Bit                       reserved_4[4];          /**< \brief 4, \internal Reserved */
       __I  Ifx_DRE_COBUF_R0                    R0;                     /**< \brief 8, RAM COBUF Register 0*/
       __I  Ifx_DRE_COBUF_R1                    R1;                     /**< \brief C, RAM COBUF Register 1*/
       __I  Ifx_DRE_COBUF_DB                    DB[64];                 /**< \brief 10, RAM COBUF Data Byte m*/
} Ifx_DRE_COBUF;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_RT_RE_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief RE object */
typedef volatile struct _Ifx_DRE_RT_RE
{
       __IO Ifx_DRE_RT_RE_CIDFC                 CIDFC;                  /**< \brief 0, RAM Routing table CAN ID Filter Configuration*/
       union
       {
            __IO Ifx_DRE_RT_RE_UCR                   UCR;                    /**< \brief 4, RAM Routing table Destination Configuraton*/
            __IO Ifx_DRE_RT_RE_MCR                   MCR;                    /**< \brief 4, RAM Routing table Destination Configuraton*/
       };
} Ifx_DRE_RT_RE;


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_CAD_CAN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief CAD_CAN object */
typedef volatile struct _Ifx_DRE_CAD_CAN
{
       __IO Ifx_DRE_CAD_CAN_CRESA               CRESA;                  /**< \brief 0, RAM CAN Address Database CRE Start Address*/
       __IO Ifx_DRE_CAD_CAN_LC                  LC;                     /**< \brief 4, RAM CAN Address Database CRE Buffer Length Configuration*/
} Ifx_DRE_CAD_CAN;

/******************************************************************************/
/** \addtogroup IfxSfr_Dre_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief DRE object */
typedef volatile struct _Ifx_DRE
{
       __IO Ifx_DRE_CLC                         CLC;                    /**< \brief 0, Clock Control Register*/
       __I  Ifx_DRE_ID                          ID;                     /**< \brief 4, DRE Identification Register*/
       __IO Ifx_DRE_RST                         RST;                    /**< \brief 8, Reset Status Register*/
       __IO Ifx_DRE_PROT                        PROTE;                  /**< \brief 14, PROT Register Endinit*/
       __IO Ifx_DRE_PROT                        PROTSE;                 /**< \brief 18, PROT Register Safe Endinit*/
       __IO Ifx_DRE_ACCEN                       ACCEN;                  /**< \brief 1C, Region upper address register*/
       __IO Ifx_DRE_RP                          RP[8];                  /**< \brief 3C, RP 0 Mode Register*/
       __IO Ifx_DRE_CAN                         CAN[20];                /**< \brief 5C, CAN Resource Partition*/
       __IO Ifx_DRE_CIBL                        CIBL;                   /**< \brief AC, CAN Input Buffer List Status*/
       __IO Ifx_DRE_COBL                        COBL;                   /**< \brief BC, CAN Output Buffer List Status*/
       __IO Ifx_DRE_EIBUF                       EIBUF[2];               /**< \brief D0, Ethernet Input Buffer Status*/
       __IO Ifx_DRE_EOBUF                       EOBUF[2];               /**< \brief E8, Timer Threshold and Status*/
       __IO Ifx_DRE_SIDF                        SIDF[8];                /**< \brief 150, Filter 2*/
       __IO Ifx_DRE_RT                          RT[4];                  /**< \brief 1F0, CAN Transmit Routing Table Configuration*/
       __IO Ifx_DRE_RREQ                        RREQ;                   /**< \brief 210, CAN ID Request*/
       union
       {
             __I  Ifx_DRE_UCRH                        UCRH;                   /**< \brief 218, Uni-cast Routing Header*/
             __I  Ifx_DRE_MCRH                        MCRH;                   /**< \brief 218, Multi-cast Routing Header*/
       };
       __IO Ifx_DRE_RS                          RS;                     /**< \brief 21C, Routing Status*/
       __I  Ifx_DRE_CANRXR0                     CANRXR0;                /**< \brief 220, CAN Receive Request 0*/
       __I  Ifx_DRE_CANRXR1                     CANRXR1;                /**< \brief 224, CAN Receive Request 1*/
       __I  Ifx_DRE_CANTXR                      CANTXR;                 /**< \brief 228, CAN Transmit Buffer Available Request*/
       __IO Ifx_DRE_DMEM                        DMEM[28];               /**< \brief 22C, Destination Memory Resource Partition*/
       __IO Ifx_DRE_ME                          ME;                     /**< \brief 3EC, GAP*/
       __I  Ifx_DRE_INTSIG                      INTSIG;                 /**< \brief 404, Interrupt Signal*/
       __IO Ifx_DRE_IE                          IE;                     /**< \brief 408, Interrupt Line Enable*/
       __I  Ifx_UReg_8Bit                       reserved_40C[31732];    /**< \brief 40C, \internal Reserved */
       Ifx_UReg_64Bit                      RAM[4096];             /**< \brief 8000, Embedded SRAM for DRE*/
} Ifx_DRE;

/** \}  */
/******************************************************************************/
/** \}  */

/******************************************************************************/
#if defined (_TASKING_)
#pragma restore
#endif
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

#endif /* IFXDRE_REGDEF_H */

/**
 * \file IfxGtm_regdef.h
 * \brief
 * \copyright Copyright (c) 2022 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_GTM/V0.1.1.3.16
 * Specification: latest @ 2022-03-15 instance sheet @ MC_A3G_TC49x : V9.1.7.1.0 
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Gtm_Registers Gtm Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Gtm_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Gtm_Registers
 * 
 * \defgroup IfxSfr_Gtm_Registers_union Register unions
 * \ingroup IfxSfr_Gtm_Registers
 * 
 * \defgroup IfxSfr_Gtm_Registers_struct Memory map
 * \ingroup IfxSfr_Gtm_Registers
 */
#ifndef IFXGTM_REGDEF_H
#define IFXGTM_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

/******************************************************************************/
#if defined (__TASKING__)
#pragma warning 586
#endif
/******************************************************************************/

/** \addtogroup IfxSfr_Gtm_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_GTM_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_GTM_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for Master TAG ID q - ENq (rw) */
} Ifx_GTM_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_GTM_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_GTM_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_GTM_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for Master TAG ID q - ENq (rw) */
} Ifx_GTM_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_GTM_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_ACCEN_WRB_FPI_Bits;

/** \brief GTM to ADC output selection register 0 */
typedef struct _Ifx_GTM_ADC_OUT_Bits
{
    __IO Ifx_UReg_32Bit SEL0:5;            /**< \brief [4:0] GTM to ADC trigger 0 output selection (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit SEL1:5;            /**< \brief [12:8] GTM to ADC trigger 1 output selection (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __IO Ifx_UReg_32Bit SEL2:5;            /**< \brief [20:16] GTM to ADC trigger 2 output selection (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit SEL3:5;            /**< \brief [28:24] GTM to ADC trigger 3 output selection (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_GTM_ADC_OUT_Bits;

/** \brief GTM to ASCLIN0 output selection register */
typedef struct _Ifx_GTM_ASCLIN_OUT_Bits
{
    __IO Ifx_UReg_32Bit SEL:5;             /**< \brief [4:0] GTM to ASCLIN0 trigger output selection (rw) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_GTM_ASCLIN_OUT_Bits;

/** \brief GTM to CAN0 output selection register 0 */
typedef struct _Ifx_GTM_CAN_OUT_Bits
{
    __IO Ifx_UReg_32Bit SEL:4;             /**< \brief [3:0] GTM to CAN0 trigger 0 output selection (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_GTM_CAN_OUT_Bits;

/** \brief Clock control register */
typedef struct _Ifx_GTM_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module Disable Request Bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module Disable Status Bit - DISS (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] Sleep Mode Enable Control - EDIS (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_GTM_CLC_Bits;

/** \brief BRIDGE_MODE */
typedef struct _Ifx_GTM_CLS_AEI_BRIDGE_MODE_Bits
{
    __IO Ifx_Strict_32Bit BRG_MODE:1;      /**< \brief [0:0] ##suppress##Defines the operation mode for the AEI bridge##suppress## (rw) */
    __IO Ifx_Strict_32Bit MSK_WR_RSP:1;    /**< \brief [1:1] Mask write response (rw) */
    __IO Ifx_Strict_32Bit BYPASS_SYNC:1;    /**< \brief [2:2] Bypass synchronizer flip-flops (rw) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [7:3] \internal Reserved */
    __I  Ifx_Strict_32Bit MODE_UP_PGR:1;    /**< \brief [8:8] Mode update in progress. (r) */
    __IO Ifx_Strict_32Bit BUFF_OVL:1;      /**< \brief [9:9] Buffer overflow register (rw1ch) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [11:10] \internal Reserved */
    __I  Ifx_Strict_32Bit SYNC_INPUT_REG:1;    /**< \brief [12:12] Additional pipelined stage in synchronous bridge mode (r) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [15:13] \internal Reserved */
    __IO Ifx_Strict_32Bit BRG_RST:1;       /**< \brief [16:16] Bridge software reset (rw) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [23:17] \internal Reserved */
    __I  Ifx_Strict_32Bit BUFF_DPT:8;      /**< \brief [31:24] ##suppress##Buffer depth of AEI bridge##suppress## (r) */
} Ifx_GTM_CLS_AEI_BRIDGE_MODE_Bits;

/** \brief BRIDGE_PTR1 */
typedef struct _Ifx_GTM_CLS_AEI_BRIDGE_PTR1_Bits
{
    __I  Ifx_Strict_32Bit NEW_TRAN_PTR:5;    /**< \brief [4:0] New transaction pointer (rh) */
    __I  Ifx_Strict_32Bit FIRST_RSP_PTR:5;    /**< \brief [9:5] First response pointer (rh) */
    __I  Ifx_Strict_32Bit TRAN_IN_PGR:5;    /**< \brief [14:10] Transaction in progress pointer (acquire) (rh) */
    __I  Ifx_Strict_32Bit ABT_TRAN_PGR:5;    /**< \brief [19:15] Aborted transaction in progress pointer (rh) */
    __I  Ifx_Strict_32Bit FBC:6;           /**< \brief [25:20] Free buffer count (rh) */
    __I  Ifx_Strict_32Bit RSP_TRAN_RDY:6;    /**< \brief [31:26] Response transactions ready (rh) */
} Ifx_GTM_CLS_AEI_BRIDGE_PTR1_Bits;

/** \brief BRIDGE_PTR2 */
typedef struct _Ifx_GTM_CLS_AEI_BRIDGE_PTR2_Bits
{
    __I  Ifx_Strict_32Bit TRAN_IN_PGR2:5;    /**< \brief [4:0] Transaction in progress pointer (aquire2) (rh) */
    __I  Ifx_Strict_32Bit :27;             /**< \brief [31:5] \internal Reserved */
} Ifx_GTM_CLS_AEI_BRIDGE_PTR2_Bits;

/** \brief GTM MCS master port disable register */
typedef struct _Ifx_GTM_CLS_AEI_MCS_AEM_DIS_Bits
{
    __IO Ifx_Strict_32Bit DIS_CLS0:2;      /**< \brief [1:0] ##suppress##Disable MCS AEIM access in cluster [j]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit DIS_CLS1:2;      /**< \brief [3:2] ##suppress##Disable MCS AEIM access in cluster [j]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit DIS_CLS2:2;      /**< \brief [5:4] ##suppress##Disable MCS AEIM access in cluster [j]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit DIS_CLS3:2;      /**< \brief [7:6] ##suppress##Disable MCS AEIM access in cluster [j]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit DIS_CLS4:2;      /**< \brief [9:8] ##suppress##Disable MCS AEIM access in cluster [j]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit DIS_CLS5:2;      /**< \brief [11:10] ##suppress##Disable MCS AEIM access in cluster [j]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit DIS_CLS6:2;      /**< \brief [13:12] ##suppress##Disable MCS AEIM access in cluster [j]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit DIS_CLS7:2;      /**< \brief [15:14] ##suppress##Disable MCS AEIM access in cluster [j]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit DIS_CLS8:2;      /**< \brief [17:16] ##suppress##Disable MCS AEIM access in cluster [j]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit DIS_CLS9:2;      /**< \brief [19:18] ##suppress##Disable MCS AEIM access in cluster [j]##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [31:20] \internal Reserved */
} Ifx_GTM_CLS_AEI_MCS_AEM_DIS_Bits;

/** \brief GTM_AEI_ADDR_XPT */
typedef struct _Ifx_GTM_CLS_ARCH_AEI_ADDR_XPT_Bits
{
    __I  Ifx_Strict_32Bit TO_ADDR:21;      /**< \brief [20:0] ##suppress##AEI timeout address##suppress## (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [23:21] \internal Reserved */
    __I  Ifx_Strict_32Bit TO_W1R0:1;       /**< \brief [24:24] ##suppress##AEI timeout Read/Write flag##suppress## (rh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [31:25] \internal Reserved */
} Ifx_GTM_CLS_ARCH_AEI_ADDR_XPT_Bits;

/** \brief GTM_AEI_STA_XPT */
typedef struct _Ifx_GTM_CLS_ARCH_AEI_STA_XPT_Bits
{
    __I  Ifx_Strict_32Bit ADDR:21;         /**< \brief [20:0] ##suppress##AEI exception address##suppress## (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [23:21] \internal Reserved */
    __I  Ifx_Strict_32Bit W1R0:1;          /**< \brief [24:24] ##suppress##AEI exception Read/Write flag##suppress## (rh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [31:25] \internal Reserved */
} Ifx_GTM_CLS_ARCH_AEI_STA_XPT_Bits;

/** \brief GTM ARU communication disable */
typedef struct _Ifx_GTM_CLS_ARCH_ARU_COM_DIS_Bits
{
    __IO Ifx_Strict_32Bit CLS0_DIS:1;      /**< \brief [0:0] ##suppress##Disable cluster [j] ARU communication##suppress## (rw) */
    __IO Ifx_Strict_32Bit CLS1_DIS:1;      /**< \brief [1:1] ##suppress##Disable cluster [j] ARU communication##suppress## (rw) */
    __IO Ifx_Strict_32Bit CLS2_DIS:1;      /**< \brief [2:2] ##suppress##Disable cluster [j] ARU communication##suppress## (rw) */
    __IO Ifx_Strict_32Bit CLS3_DIS:1;      /**< \brief [3:3] ##suppress##Disable cluster [j] ARU communication##suppress## (rw) */
    __IO Ifx_Strict_32Bit CLS4_DIS:1;      /**< \brief [4:4] ##suppress##Disable cluster [j] ARU communication##suppress## (rw) */
    __IO Ifx_Strict_32Bit CLS5_DIS:1;      /**< \brief [5:5] ##suppress##Disable cluster [j] ARU communication##suppress## (rw) */
    __IO Ifx_Strict_32Bit CLS6_DIS:1;      /**< \brief [6:6] ##suppress##Disable cluster [j] ARU communication##suppress## (rw) */
    __IO Ifx_Strict_32Bit CLS7_DIS:1;      /**< \brief [7:7] ##suppress##Disable cluster [j] ARU communication##suppress## (rw) */
    __IO Ifx_Strict_32Bit CLS8_DIS:1;      /**< \brief [8:8] ##suppress##Disable cluster [j] ARU communication##suppress## (rw) */
    __IO Ifx_Strict_32Bit CLS9_DIS:1;      /**< \brief [9:9] ##suppress##Disable cluster [j] ARU communication##suppress## (rw) */
    __IO Ifx_Strict_32Bit CLS10_DIS:1;     /**< \brief [10:10] ##suppress##Disable cluster [j] ARU communication##suppress## (rw) */
    __IO Ifx_Strict_32Bit CLS11_DIS:1;     /**< \brief [11:11] ##suppress##Disable cluster [j] ARU communication##suppress## (rw) */
    __I  Ifx_Strict_32Bit :20;             /**< \brief [31:12] \internal Reserved */
} Ifx_GTM_CLS_ARCH_ARU_COM_DIS_Bits;

/** \brief GTM configuration register */
typedef struct _Ifx_GTM_CLS_ARCH_CFG_Bits
{
    __IO Ifx_Strict_32Bit SRC_IN_MUX:1;    /**< \brief [0:0] ##suppress##Input source selection for signal TIM[i]_AUX_IN ( input port AUX_IN at module TIM)##suppress## (rw) */
    __I  Ifx_Strict_32Bit :31;             /**< \brief [31:1] \internal Reserved */
} Ifx_GTM_CLS_ARCH_CFG_Bits;

/** \brief GTM Cluster Clock Configuration */
typedef struct _Ifx_GTM_CLS_ARCH_CLK_CFG_Bits
{
    __IO Ifx_Strict_32Bit CLS0_CLK_DIV:2;    /**< \brief [1:0] Cluster [j] Clock Divider (rwh) */
    __IO Ifx_Strict_32Bit CLS1_CLK_DIV:2;    /**< \brief [3:2] Cluster [j] Clock Divider (rwh) */
    __IO Ifx_Strict_32Bit CLS2_CLK_DIV:2;    /**< \brief [5:4] Cluster [j] Clock Divider (rwh) */
    __IO Ifx_Strict_32Bit CLS3_CLK_DIV:2;    /**< \brief [7:6] Cluster [j] Clock Divider (rwh) */
    __IO Ifx_Strict_32Bit CLS4_CLK_DIV:2;    /**< \brief [9:8] Cluster [j] Clock Divider (rwh) */
    __IO Ifx_Strict_32Bit CLS5_CLK_DIV:2;    /**< \brief [11:10] Cluster [j] Clock Divider (rwh) */
    __IO Ifx_Strict_32Bit CLS6_CLK_DIV:2;    /**< \brief [13:12] Cluster [j] Clock Divider (rwh) */
    __IO Ifx_Strict_32Bit CLS7_CLK_DIV:2;    /**< \brief [15:14] Cluster [j] Clock Divider (rwh) */
    __IO Ifx_Strict_32Bit CLS8_CLK_DIV:2;    /**< \brief [17:16] Cluster [j] Clock Divider (rwh) */
    __IO Ifx_Strict_32Bit CLS9_CLK_DIV:2;    /**< \brief [19:18] Cluster [j] Clock Divider (rwh) */
    __IO Ifx_Strict_32Bit CLS10_CLK_DIV:2;    /**< \brief [21:20] Cluster [j] Clock Divider (rwh) */
    __IO Ifx_Strict_32Bit CLS11_CLK_DIV:2;    /**< \brief [23:22] Cluster [j] Clock Divider (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_ARCH_CLK_CFG_Bits;

/** \brief GTM global control register */
typedef struct _Ifx_GTM_CLS_ARCH_CTRL_Bits
{
    __IO Ifx_Strict_32Bit RF_PROT:1;       /**< \brief [0:0] RST and FORCINT protection (rw) */
    __IO Ifx_Strict_32Bit TO_MODE:2;       /**< \brief [2:1] ##suppress##AEI timeout mode##suppress## (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [3:3] \internal Reserved */
    __IO Ifx_Strict_32Bit TO_VAL:8;        /**< \brief [11:4] ##suppress##AEI timeout value##suppress## (rw) */
    __I  Ifx_Strict_32Bit AEIM_CLUSTER:4;    /**< \brief [15:12] AEIM cluster number (rh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_ARCH_CTRL_Bits;

/** \brief GTM error interrupt enable register */
typedef struct _Ifx_GTM_CLS_ARCH_EIRQ_EN_Bits
{
    __IO Ifx_Strict_32Bit AEI_TO_XPT_EIRQ_EN:1;    /**< \brief [0:0] ##suppress##AEI_TO_XPT_EIRQ error interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit AEI_USP_ADDR_EIRQ_EN:1;    /**< \brief [1:1] ##suppress##AEI_USP_ADDR_EIRQ error interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit AEI_IM_ADDR_EIRQ_EN:1;    /**< \brief [2:2] ##suppress##AEI_IM_ADDR_EIRQ error interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit AEI_USP_BE_EIRQ_EN:1;    /**< \brief [3:3] ##suppress##AEI_USP_BE_EIRQ error interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit AEIM_USP_ADDR_EIRQ_EN:1;    /**< \brief [4:4] ##suppress##AEIM_USP_ADDR_EIRQ error interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit AEIM_IM_ADDR_EIRQ_EN:1;    /**< \brief [5:5] ##suppress##AEIM_IM_ADDR_EIRQ error interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit AEIM_USP_BE_EIRQ_EN:1;    /**< \brief [6:6] ##suppress##AEIM_USP_BE_EIRQ error interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit CLK_EN_ERR_EIRQ_EN:1;    /**< \brief [7:7] ##suppress##CLK_EN_ERR_EIRQ interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit CLK_PER_ERR_EIRQ_EN:1;    /**< \brief [8:8] ##suppress##CLK_PER_ERR_EIRQ interrupt enable##suppress## (rw) */
    __I  Ifx_Strict_32Bit :23;             /**< \brief [31:9] \internal Reserved */
} Ifx_GTM_CLS_ARCH_EIRQ_EN_Bits;

/** \brief GTM interrupt enable register */
typedef struct _Ifx_GTM_CLS_ARCH_IRQ_EN_Bits
{
    __IO Ifx_Strict_32Bit AEI_TO_XPT_IRQ_EN:1;    /**< \brief [0:0] ##suppress##AEI_TO_XPT_IRQ interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit AEI_USP_ADDR_IRQ_EN:1;    /**< \brief [1:1] ##suppress##AEI_USP_ADDR_IRQ interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit AEI_IM_ADDR_IRQ_EN:1;    /**< \brief [2:2] ##suppress##AEI_IM_ADDR_IRQ interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit AEI_USP_BE_IRQ_EN:1;    /**< \brief [3:3] ##suppress##AEI_USP_BE_IRQ interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit AEIM_USP_ADDR_IRQ_EN:1;    /**< \brief [4:4] ##suppress##AEIM_USP_ADDR_IRQ interrupt enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit AEIM_IM_ADDR_IRQ_EN:1;    /**< \brief [5:5] ##suppress##AEIM_IM_ADDR_IRQ interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit AEIM_USP_BE_IRQ_EN:1;    /**< \brief [6:6] ##suppress##AEIM_USP_BE_IRQ interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit CLK_EN_ERR_IRQ_EN:1;    /**< \brief [7:7] ##suppress##CLK_EN_ERR_IRQ interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit CLK_PER_ERR_IRQ_EN:1;    /**< \brief [8:8] ##suppress##CLK_PER_ERR_IRQ interrupt enable##suppress## (rw) */
    __I  Ifx_Strict_32Bit :23;             /**< \brief [31:9] \internal Reserved */
} Ifx_GTM_CLS_ARCH_IRQ_EN_Bits;

/** \brief GTM Software interrupt generation register */
typedef struct _Ifx_GTM_CLS_ARCH_IRQ_FORCINT_Bits
{
    __IO Ifx_Strict_32Bit TRG_AEI_TO_XPT:1;    /**< \brief [0:0] ##suppress##Trigger the bit GTM_IRQ_NOTIFY.AEI_TO_XPT by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_AEI_USP_ADDR:1;    /**< \brief [1:1] ##suppress##Trigger the bit GTM_IRQ_NOTIFY.AEI_USP_ADDR by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_AEI_IM_ADDR:1;    /**< \brief [2:2] ##suppress##Trigger the bit GTM_IRQ_NOTIFY.AEI_IM_ADDR by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_AEI_USP_BE:1;    /**< \brief [3:3] ##suppress##Trigger the bit GTM_IRQ_NOTIFY.AEI_USP_BE by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_AEIM_USP_ADDR:1;    /**< \brief [4:4] ##suppress##Trigger the bit GTM_IRQ_NOTIFY.AEIM_USP_ADDR by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_AEIM_IM_ADDR:1;    /**< \brief [5:5] ##suppress##Trigger the bit GTM_IRQ_NOTIFY.AEIM_IM_ADDR by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_AEIM_USP_BE:1;    /**< \brief [6:6] ##suppress##Trigger the bit GTM_IRQ_NOTIFY.AEIM_USP_BE by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_CLK_EN_ERR:1;    /**< \brief [7:7] ##suppress##Trigger the bit GTM_IRQ_NOTIFY.CLK_EN_ERR by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_CLK_PER_ERR:1;    /**< \brief [8:8] ##suppress##Trigger the bit GTM_IRQ_NOTIFY.CLK_PER_ERR by software.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :23;             /**< \brief [31:9] \internal Reserved */
} Ifx_GTM_CLS_ARCH_IRQ_FORCINT_Bits;

/** \brief GTM top level interrupts mode selection */
typedef struct _Ifx_GTM_CLS_ARCH_IRQ_MODE_Bits
{
    __IO Ifx_Strict_32Bit IRQ_MODE:2;      /**< \brief [1:0] ##suppress##Interrupt strategy mode selection for the AEI timeout and address monitoring interrupts.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_GTM_CLS_ARCH_IRQ_MODE_Bits;

/** \brief GTM Interrupt notification register */
typedef struct _Ifx_GTM_CLS_ARCH_IRQ_NOTIFY_Bits
{
    __IO Ifx_Strict_32Bit AEI_TO_XPT:1;    /**< \brief [0:0] ##suppress##AEI timeout exception occurred##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit AEI_USP_ADDR:1;    /**< \brief [1:1] ##suppress##AEI unsupported address interrupt##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit AEI_IM_ADDR:1;    /**< \brief [2:2] ##suppress##AEI illegal Module address interrupt##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit AEI_USP_BE:1;    /**< \brief [3:3] ##suppress##AEI unsupported byte enable interrupt##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit AEIM_USP_ADDR:1;    /**< \brief [4:4] ##suppress##AEI master port unsupported address interrupt##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit AEIM_IM_ADDR:1;    /**< \brief [5:5] ##suppress##AEI master port illegal Module address interrupt##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit AEIM_USP_BE:1;    /**< \brief [6:6] ##suppress##AEI master port unsupported byte enable interrupt##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit CLK_EN_ERR:1;    /**< \brief [7:7] Clock enable error interrupt (rw1ch) */
    __IO Ifx_Strict_32Bit CLK_PER_ERR:1;    /**< \brief [8:8] Clock period error interrupt (rw1ch) */
    __I  Ifx_Strict_32Bit :15;             /**< \brief [23:9] \internal Reserved */
    __I  Ifx_Strict_32Bit CLK_EN_ERR_STATE:2;    /**< \brief [25:24] Erroneous clock enable state (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [27:26] \internal Reserved */
    __I  Ifx_Strict_32Bit CLK_EN_EXP_STATE:2;    /**< \brief [29:28] Expected clock enable state (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [31:30] \internal Reserved */
} Ifx_GTM_CLS_ARCH_IRQ_NOTIFY_Bits;

/** \brief GTM version control register */
typedef struct _Ifx_GTM_CLS_ARCH_REV_Bits
{
    __I  Ifx_Strict_32Bit REL_ITER:4;      /**< \brief [3:0] Delivery number (r) */
    __I  Ifx_Strict_32Bit REL_BASE:8;      /**< \brief [11:4] Release step (r) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [15:12] \internal Reserved */
    __I  Ifx_Strict_32Bit VENDOR_CODE:4;    /**< \brief [19:16] Device encoding digit 1 (r) */
    __I  Ifx_Strict_32Bit DEVICE_CODE:4;    /**< \brief [23:20] Device encoding digit 0 (r) */
    __I  Ifx_Strict_32Bit VER_MINOR:4;     /**< \brief [27:24] Minor version number (r) */
    __I  Ifx_Strict_32Bit VER_MAJOR:4;     /**< \brief [31:28] Major version number (r) */
} Ifx_GTM_CLS_ARCH_REV_Bits;

/** \brief GTM global reset register */
typedef struct _Ifx_GTM_CLS_ARCH_RST_Bits
{
    __IO Ifx_Strict_32Bit RST:1;           /**< \brief [0:0] ##suppress##GTM IP Reset##suppress## (rw) */
    __I  Ifx_Strict_32Bit :26;             /**< \brief [26:1] \internal Reserved */
    __IO Ifx_Strict_32Bit BRIDGE_MODE_WRDIS:1;    /**< \brief [27:27] ##suppress##BRIDGE_MODE write disable##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_GTM_CLS_ARCH_RST_Bits;

/** \brief ARU access register */
typedef struct _Ifx_GTM_CLS_ARU_ACCESS_Bits
{
    __IO Ifx_Strict_32Bit ADDR:9;          /**< \brief [8:0] ##suppress##ARU address##suppress## (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [11:9] \internal Reserved */
    __IO Ifx_Strict_32Bit RREQ:1;          /**< \brief [12:12] Initiate read request (rwh) */
    __IO Ifx_Strict_32Bit WREQ:1;          /**< \brief [13:13] Initiate write request (rwh) */
    __I  Ifx_Strict_32Bit :18;             /**< \brief [31:14] \internal Reserved */
} Ifx_GTM_CLS_ARU_ACCESS_Bits;

/** \brief ARU caddr counter value */
typedef struct _Ifx_GTM_CLS_ARU_CADDR_Bits
{
    __I  Ifx_Strict_32Bit CADDR_0:7;       /**< \brief [6:0] Value of ARU_0 caddr counter (rh) */
    __I  Ifx_Strict_32Bit :9;              /**< \brief [15:7] \internal Reserved */
    __I  Ifx_Strict_32Bit CADDR_1:7;       /**< \brief [22:16] Value of ARU_1 caddr counter (rh) */
    __I  Ifx_Strict_32Bit :9;              /**< \brief [31:23] \internal Reserved */
} Ifx_GTM_CLS_ARU_CADDR_Bits;

/** \brief ARU caddr counter end value */
typedef struct _Ifx_GTM_CLS_ARU_CADDR_END_Bits
{
    __IO Ifx_Strict_32Bit CADDR_END:7;     /**< \brief [6:0] ##suppress##Set end value of ARU caddr counter##suppress## (rw) */
    __I  Ifx_Strict_32Bit :25;             /**< \brief [31:7] \internal Reserved */
} Ifx_GTM_CLS_ARU_CADDR_END_Bits;

/** \brief ARU enable dynamic routing */
typedef struct _Ifx_GTM_CLS_ARU_CTRL_Bits
{
    __IO Ifx_Strict_32Bit ARU0_DYN_EN:2;    /**< \brief [1:0] ##suppress##Enable dynamic routing for ARU of sub-channel k##suppress## (rw) */
    __IO Ifx_Strict_32Bit ARU1_DYN_EN:2;    /**< \brief [3:2] ##suppress##Enable dynamic routing for ARU of sub-channel k##suppress## (rw) */
    __IO Ifx_Strict_32Bit ARU_DYN_RING_MODE:1;    /**< \brief [4:4] Enable dynamic routing ring mode (rw) */
    __I  Ifx_Strict_32Bit :27;             /**< \brief [31:5] \internal Reserved */
} Ifx_GTM_CLS_ARU_CTRL_Bits;

/** \brief ARU access register upper data word */
typedef struct _Ifx_GTM_CLS_ARU_DATA_H_Bits
{
    __IO Ifx_Strict_32Bit DATA:29;         /**< \brief [28:0] ##suppress##Upper ARU data word##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [31:29] \internal Reserved */
} Ifx_GTM_CLS_ARU_DATA_H_Bits;

/** \brief ARU access register lower data word */
typedef struct _Ifx_GTM_CLS_ARU_DATA_L_Bits
{
    __IO Ifx_Strict_32Bit DATA:29;         /**< \brief [28:0] ##suppress##Lower ARU data word##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [31:29] \internal Reserved */
} Ifx_GTM_CLS_ARU_DATA_L_Bits;

/** \brief ARU debug access channel 0 */
typedef struct _Ifx_GTM_CLS_ARU_DBG_ACCESS0_Bits
{
    __IO Ifx_Strict_32Bit ADDR:9;          /**< \brief [8:0] ##suppress##ARU debugging address##suppress## (rw) */
    __I  Ifx_Strict_32Bit :23;             /**< \brief [31:9] \internal Reserved */
} Ifx_GTM_CLS_ARU_DBG_ACCESS0_Bits;

/** \brief ARU debug access channel 0 */
typedef struct _Ifx_GTM_CLS_ARU_DBG_ACCESS1_Bits
{
    __IO Ifx_Strict_32Bit ADDR:9;          /**< \brief [8:0] ##suppress##ARU debugging address##suppress## (rw) */
    __I  Ifx_Strict_32Bit :23;             /**< \brief [31:9] \internal Reserved */
} Ifx_GTM_CLS_ARU_DBG_ACCESS1_Bits;

/** \brief ARU debug access 0 transfer register upper data word */
typedef struct _Ifx_GTM_CLS_ARU_DBG_DATA0_H_Bits
{
    __I  Ifx_Strict_32Bit DATA:29;         /**< \brief [28:0] Upper debug data word (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [31:29] \internal Reserved */
} Ifx_GTM_CLS_ARU_DBG_DATA0_H_Bits;

/** \brief ARU debug access 0 transfer register lower data word */
typedef struct _Ifx_GTM_CLS_ARU_DBG_DATA0_L_Bits
{
    __I  Ifx_Strict_32Bit DATA:29;         /**< \brief [28:0] Lower debug data word (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [31:29] \internal Reserved */
} Ifx_GTM_CLS_ARU_DBG_DATA0_L_Bits;

/** \brief ARU debug access 1 transfer register upper data word */
typedef struct _Ifx_GTM_CLS_ARU_DBG_DATA1_H_Bits
{
    __I  Ifx_Strict_32Bit DATA:29;         /**< \brief [28:0] Upper debug data word (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [31:29] \internal Reserved */
} Ifx_GTM_CLS_ARU_DBG_DATA1_H_Bits;

/** \brief ARU debug access 1 transfer register lower data word */
typedef struct _Ifx_GTM_CLS_ARU_DBG_DATA1_L_Bits
{
    __I  Ifx_Strict_32Bit DATA:29;         /**< \brief [28:0] Lower debug data word (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [31:29] \internal Reserved */
} Ifx_GTM_CLS_ARU_DBG_DATA1_L_Bits;

/** \brief ARU [g] dynamic routing control register */
typedef struct _Ifx_GTM_CLS_ARU_DYN_CTRL_Bits
{
    __IO Ifx_Strict_32Bit DYN_ARU_UPDATE_EN:1;    /**< \brief [0:0] ##suppress##Enable reload of DYN_ROUTE register from ARU itself##suppress## (rw) */
    __IO Ifx_Strict_32Bit DYN_ROUTE_SWAP:1;    /**< \brief [1:1] Enable swapping DYN_ROUTE_SR with DYN_ROUTE register (rw) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_GTM_CLS_ARU_DYN_CTRL_Bits;

/** \brief ARU [g] master ID for dynamic routing */
typedef struct _Ifx_GTM_CLS_ARU_DYN_RDADDR_Bits
{
    __IO Ifx_Strict_32Bit DYN_ARU_RDADDR:9;    /**< \brief [8:0] ##suppress##ARU read address ID to reload the dynamic routing register##suppress## (rw) */
    __I  Ifx_Strict_32Bit :23;             /**< \brief [31:9] \internal Reserved */
} Ifx_GTM_CLS_ARU_DYN_RDADDR_Bits;

/** \brief ARU [g] higher bits of DYN_ROUTE register */
typedef struct _Ifx_GTM_CLS_ARU_DYN_ROUTE_HIGH_Bits
{
    __IO Ifx_Strict_32Bit DYN_READ_ID3:8;    /**< \brief [7:0] ##suppress##ARU master ID_3##suppress## (rwh) */
    __IO Ifx_Strict_32Bit DYN_READ_ID4:8;    /**< \brief [15:8] ##suppress##ARU master ID_4##suppress## (rwh) */
    __IO Ifx_Strict_32Bit DYN_READ_ID5:8;    /**< \brief [23:16] ##suppress##ARU master ID_5##suppress## (rwh) */
    __IO Ifx_Strict_32Bit DYN_CLK_WAIT:4;    /**< \brief [27:24] Number of clk cycles for dynamic routing (rwh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_GTM_CLS_ARU_DYN_ROUTE_HIGH_Bits;

/** \brief ARU [g] lower bits of DYN_ROUTE register */
typedef struct _Ifx_GTM_CLS_ARU_DYN_ROUTE_LOW_Bits
{
    __IO Ifx_Strict_32Bit DYN_READ_ID0:8;    /**< \brief [7:0] ##suppress##ARU master ID_0##suppress## (rwh) */
    __IO Ifx_Strict_32Bit DYN_READ_ID1:8;    /**< \brief [15:8] ##suppress##ARU master ID_1##suppress## (rwh) */
    __IO Ifx_Strict_32Bit DYN_READ_ID2:8;    /**< \brief [23:16] ##suppress##ARU master ID_2##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_ARU_DYN_ROUTE_LOW_Bits;

/** \brief ARU [g] shadow register of DYN_ROUTE register higher bits */
typedef struct _Ifx_GTM_CLS_ARU_DYN_ROUTE_SR_HIGH_Bits
{
    __IO Ifx_Strict_32Bit DYN_READ_ID9:8;    /**< \brief [7:0] ##suppress##ARU master ID_9##suppress## (rwh) */
    __IO Ifx_Strict_32Bit DYN_READ_ID10:8;    /**< \brief [15:8] ##suppress##ARU master ID_10##suppress## (rwh) */
    __IO Ifx_Strict_32Bit DYN_READ_ID11:8;    /**< \brief [23:16] ##suppress##ARU master ID_11##suppress## (rwh) */
    __IO Ifx_Strict_32Bit DYN_CLK_WAIT:4;    /**< \brief [27:24] Number of clk cycles for dynamic routing (rwh) */
    __IO Ifx_Strict_32Bit DYN_UPDATE_EN:1;    /**< \brief [28:28] Update enable from shadow register (rwh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [31:29] \internal Reserved */
} Ifx_GTM_CLS_ARU_DYN_ROUTE_SR_HIGH_Bits;

/** \brief ARU [g] shadow register of DYN_ROUTE register lower bits */
typedef struct _Ifx_GTM_CLS_ARU_DYN_ROUTE_SR_LOW_Bits
{
    __IO Ifx_Strict_32Bit DYN_READ_ID6:8;    /**< \brief [7:0] ##suppress##ARU master ID_6##suppress## (rwh) */
    __IO Ifx_Strict_32Bit DYN_READ_ID7:8;    /**< \brief [15:8] ##suppress##ARU master ID_7##suppress## (rwh) */
    __IO Ifx_Strict_32Bit DYN_READ_ID8:8;    /**< \brief [23:16] ##suppress##ARU master ID_8##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_ARU_DYN_ROUTE_SR_LOW_Bits;

/** \brief ARU interrupt enable register */
typedef struct _Ifx_GTM_CLS_ARU_IRQ_EN_Bits
{
    __IO Ifx_Strict_32Bit NEW_DATA0_IRQ_EN:1;    /**< \brief [0:0] ##suppress##ARU_NEW_DATA0_IRQ interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit NEW_DATA1_IRQ_EN:1;    /**< \brief [1:1] ##suppress##ARU_NEW_DATA1_IRQ interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit ACC_ACK_IRQ_EN:1;    /**< \brief [2:2] ##suppress##ARU_ACC_ACK_IRQ interrupt enable##suppress## (rw) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_GTM_CLS_ARU_IRQ_EN_Bits;

/** \brief ARU force interrupt register */
typedef struct _Ifx_GTM_CLS_ARU_IRQ_FORCINT_Bits
{
    __IO Ifx_Strict_32Bit TRG_NEW_DATA0:1;    /**< \brief [0:0] ##suppress##Trigger the bit ARU_IRQ_NOTIFY.NEW_DATA0 by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_NEW_DATA1:1;    /**< \brief [1:1] ##suppress##Trigger the bit ARU_IRQ_NOTIFY.NEW_DATA1 by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_ACC_ACK:1;    /**< \brief [2:2] ##suppress##Trigger the bit ARU_IRQ_NOTIFY.ACC_ACK by software##suppress## (rw) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_GTM_CLS_ARU_IRQ_FORCINT_Bits;

/** \brief ARU interrupt mode register */
typedef struct _Ifx_GTM_CLS_ARU_IRQ_MODE_Bits
{
    __IO Ifx_Strict_32Bit IRQ_MODE:2;      /**< \brief [1:0] IRQ mode selection (rw) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_GTM_CLS_ARU_IRQ_MODE_Bits;

/** \brief ARU interrupt notification register */
typedef struct _Ifx_GTM_CLS_ARU_IRQ_NOTIFY_Bits
{
    __IO Ifx_Strict_32Bit NEW_DATA0:1;     /**< \brief [0:0] ##suppress##Data was transferred for addr ARU_DBG_ACCESS0##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit NEW_DATA1:1;     /**< \brief [1:1] ##suppress##Data was transferred for addr ARU_DBG_ACCESS1##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ACC_ACK:1;       /**< \brief [2:2] ##suppress##AEI to ARU access finished, on read-access data are valid##suppress## (rw1ch) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_GTM_CLS_ARU_IRQ_NOTIFY_Bits;

/** \brief ATOM[i] AGC action time base register */
typedef struct _Ifx_GTM_CLS_ATOM_AGC_ACT_TB_Bits
{
    __IO Ifx_Strict_32Bit ACT_TB:24;       /**< \brief [23:0] ##suppress##Specifies the signed compare value with selected signal CCM[i]_TBU_TS0/CCM[i]_TBU_TS1/CCM[i]_TBU_TS2.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TB_TRIG:1;       /**< \brief [24:24] Set trigger request (rwh) */
    __IO Ifx_Strict_32Bit TBU_SEL:2;       /**< \brief [26:25] Selection of time base used for comparison (rw) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [31:27] \internal Reserved */
} Ifx_GTM_CLS_ATOM_AGC_ACT_TB_Bits;

/** \brief ATOM[i] AGC enable/disable control register */
typedef struct _Ifx_GTM_CLS_ATOM_AGC_ENDIS_CTRL_Bits
{
    __IO Ifx_Strict_32Bit ENDIS_CTRL0:2;    /**< \brief [1:0] ##suppress##ATOM [i] channel [k] enable/disable control register.##suppress## (rw) */
    __IO Ifx_Strict_32Bit ENDIS_CTRL1:2;    /**< \brief [3:2] ##suppress##ATOM [i] channel [k] enable/disable control register.##suppress## (rw) */
    __IO Ifx_Strict_32Bit ENDIS_CTRL2:2;    /**< \brief [5:4] ##suppress##ATOM [i] channel [k] enable/disable control register.##suppress## (rw) */
    __IO Ifx_Strict_32Bit ENDIS_CTRL3:2;    /**< \brief [7:6] ##suppress##ATOM [i] channel [k] enable/disable control register.##suppress## (rw) */
    __IO Ifx_Strict_32Bit ENDIS_CTRL4:2;    /**< \brief [9:8] ##suppress##ATOM [i] channel [k] enable/disable control register.##suppress## (rw) */
    __IO Ifx_Strict_32Bit ENDIS_CTRL5:2;    /**< \brief [11:10] ##suppress##ATOM [i] channel [k] enable/disable control register.##suppress## (rw) */
    __IO Ifx_Strict_32Bit ENDIS_CTRL6:2;    /**< \brief [13:12] ##suppress##ATOM [i] channel [k] enable/disable control register.##suppress## (rw) */
    __IO Ifx_Strict_32Bit ENDIS_CTRL7:2;    /**< \brief [15:14] ##suppress##ATOM [i] channel [k] enable/disable control register.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_ATOM_AGC_ENDIS_CTRL_Bits;

/** \brief ATOM[i] AGC enable/disable status register */
typedef struct _Ifx_GTM_CLS_ATOM_AGC_ENDIS_STAT_Bits
{
    __IO Ifx_Strict_32Bit ENDIS_STAT0:2;    /**< \brief [1:0] ##suppress##ATOM [i] channel [k] enable/disable status register##suppress## (rwh) */
    __IO Ifx_Strict_32Bit ENDIS_STAT1:2;    /**< \brief [3:2] ##suppress##ATOM [i] channel [k] enable/disable status register##suppress## (rwh) */
    __IO Ifx_Strict_32Bit ENDIS_STAT2:2;    /**< \brief [5:4] ##suppress##ATOM [i] channel [k] enable/disable status register##suppress## (rwh) */
    __IO Ifx_Strict_32Bit ENDIS_STAT3:2;    /**< \brief [7:6] ##suppress##ATOM [i] channel [k] enable/disable status register##suppress## (rwh) */
    __IO Ifx_Strict_32Bit ENDIS_STAT4:2;    /**< \brief [9:8] ##suppress##ATOM [i] channel [k] enable/disable status register##suppress## (rwh) */
    __IO Ifx_Strict_32Bit ENDIS_STAT5:2;    /**< \brief [11:10] ##suppress##ATOM [i] channel [k] enable/disable status register##suppress## (rwh) */
    __IO Ifx_Strict_32Bit ENDIS_STAT6:2;    /**< \brief [13:12] ##suppress##ATOM [i] channel [k] enable/disable status register##suppress## (rwh) */
    __IO Ifx_Strict_32Bit ENDIS_STAT7:2;    /**< \brief [15:14] ##suppress##ATOM [i] channel [k] enable/disable status register##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_ATOM_AGC_ENDIS_STAT_Bits;

/** \brief ATOM[i] AGC force update control register */
typedef struct _Ifx_GTM_CLS_ATOM_AGC_FUPD_CTRL_Bits
{
    __IO Ifx_Strict_32Bit FUPD_CTRL0:2;    /**< \brief [1:0] ##suppress##Force update of ATOM channel [k] operation registers##suppress## (rw) */
    __IO Ifx_Strict_32Bit FUPD_CTRL1:2;    /**< \brief [3:2] ##suppress##Force update of ATOM channel [k] operation registers##suppress## (rw) */
    __IO Ifx_Strict_32Bit FUPD_CTRL2:2;    /**< \brief [5:4] ##suppress##Force update of ATOM channel [k] operation registers##suppress## (rw) */
    __IO Ifx_Strict_32Bit FUPD_CTRL3:2;    /**< \brief [7:6] ##suppress##Force update of ATOM channel [k] operation registers##suppress## (rw) */
    __IO Ifx_Strict_32Bit FUPD_CTRL4:2;    /**< \brief [9:8] ##suppress##Force update of ATOM channel [k] operation registers##suppress## (rw) */
    __IO Ifx_Strict_32Bit FUPD_CTRL5:2;    /**< \brief [11:10] ##suppress##Force update of ATOM channel [k] operation registers##suppress## (rw) */
    __IO Ifx_Strict_32Bit FUPD_CTRL6:2;    /**< \brief [13:12] ##suppress##Force update of ATOM channel [k] operation registers##suppress## (rw) */
    __IO Ifx_Strict_32Bit FUPD_CTRL7:2;    /**< \brief [15:14] ##suppress##Force update of ATOM channel [k] operation registers##suppress## (rw) */
    __IO Ifx_Strict_32Bit RSTCN0_CH0:2;    /**< \brief [17:16] ##suppress##Reset ATOM[i]_CH[k]_CN0 of channel [k] on force update event##suppress## (rw) */
    __IO Ifx_Strict_32Bit RSTCN0_CH1:2;    /**< \brief [19:18] ##suppress##Reset ATOM[i]_CH[k]_CN0 of channel [k] on force update event##suppress## (rw) */
    __IO Ifx_Strict_32Bit RSTCN0_CH2:2;    /**< \brief [21:20] ##suppress##Reset ATOM[i]_CH[k]_CN0 of channel [k] on force update event##suppress## (rw) */
    __IO Ifx_Strict_32Bit RSTCN0_CH3:2;    /**< \brief [23:22] ##suppress##Reset ATOM[i]_CH[k]_CN0 of channel [k] on force update event##suppress## (rw) */
    __IO Ifx_Strict_32Bit RSTCN0_CH4:2;    /**< \brief [25:24] ##suppress##Reset ATOM[i]_CH[k]_CN0 of channel [k] on force update event##suppress## (rw) */
    __IO Ifx_Strict_32Bit RSTCN0_CH5:2;    /**< \brief [27:26] ##suppress##Reset ATOM[i]_CH[k]_CN0 of channel [k] on force update event##suppress## (rw) */
    __IO Ifx_Strict_32Bit RSTCN0_CH6:2;    /**< \brief [29:28] ##suppress##Reset ATOM[i]_CH[k]_CN0 of channel [k] on force update event##suppress## (rw) */
    __IO Ifx_Strict_32Bit RSTCN0_CH7:2;    /**< \brief [31:30] ##suppress##Reset ATOM[i]_CH[k]_CN0 of channel [k] on force update event##suppress## (rw) */
} Ifx_GTM_CLS_ATOM_AGC_FUPD_CTRL_Bits;

/** \brief ATOM[i] AGC global control register */
typedef struct _Ifx_GTM_CLS_ATOM_AGC_GLB_CTRL_Bits
{
    __IO Ifx_Strict_32Bit HOST_TRIG:1;     /**< \brief [0:0] ##suppress##Trigger request signal (see AGC) to update the register ATOM[i]_AGC_ENDIS_STAT and ATOM[i]_AGC_OUTEN_STAT##suppress## (rw) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [7:1] \internal Reserved */
    __IO Ifx_Strict_32Bit RST_CH0:1;       /**< \brief [8:8] Software reset of channel [k] (rw) */
    __IO Ifx_Strict_32Bit RST_CH1:1;       /**< \brief [9:9] Software reset of channel [k] (rw) */
    __IO Ifx_Strict_32Bit RST_CH2:1;       /**< \brief [10:10] Software reset of channel [k] (rw) */
    __IO Ifx_Strict_32Bit RST_CH3:1;       /**< \brief [11:11] Software reset of channel [k] (rw) */
    __IO Ifx_Strict_32Bit RST_CH4:1;       /**< \brief [12:12] Software reset of channel [k] (rw) */
    __IO Ifx_Strict_32Bit RST_CH5:1;       /**< \brief [13:13] Software reset of channel [k] (rw) */
    __IO Ifx_Strict_32Bit RST_CH6:1;       /**< \brief [14:14] Software reset of channel [k] (rw) */
    __IO Ifx_Strict_32Bit RST_CH7:1;       /**< \brief [15:15] Software reset of channel [k] (rw) */
    __IO Ifx_Strict_32Bit UPEN_CTRL0:2;    /**< \brief [17:16] ##suppress##ATOM channel [k] enable update of register ATOM[i]_CH[k]_CM0, ATOM[i]_CH[k]_CM1, ATOM[i]_CH[k]_CTRL.SL and ATOM[i]_CH[k]_CTRL.CLK_SRC from ATOM[i]_CH[k]_SR0, ATOM[i]_CH[k]_SR1, ATOM[i]_CH[k]_CTRL_SR.SL_SR and ATOM[i]_CH[k]_CTRL_SR.CLK_SRC_SR.##suppress## (rw) */
    __IO Ifx_Strict_32Bit UPEN_CTRL1:2;    /**< \brief [19:18] ##suppress##ATOM channel [k] enable update of register ATOM[i]_CH[k]_CM0, ATOM[i]_CH[k]_CM1, ATOM[i]_CH[k]_CTRL.SL and ATOM[i]_CH[k]_CTRL.CLK_SRC from ATOM[i]_CH[k]_SR0, ATOM[i]_CH[k]_SR1, ATOM[i]_CH[k]_CTRL_SR.SL_SR and ATOM[i]_CH[k]_CTRL_SR.CLK_SRC_SR.##suppress## (rw) */
    __IO Ifx_Strict_32Bit UPEN_CTRL2:2;    /**< \brief [21:20] ##suppress##ATOM channel [k] enable update of register ATOM[i]_CH[k]_CM0, ATOM[i]_CH[k]_CM1, ATOM[i]_CH[k]_CTRL.SL and ATOM[i]_CH[k]_CTRL.CLK_SRC from ATOM[i]_CH[k]_SR0, ATOM[i]_CH[k]_SR1, ATOM[i]_CH[k]_CTRL_SR.SL_SR and ATOM[i]_CH[k]_CTRL_SR.CLK_SRC_SR.##suppress## (rw) */
    __IO Ifx_Strict_32Bit UPEN_CTRL3:2;    /**< \brief [23:22] ##suppress##ATOM channel [k] enable update of register ATOM[i]_CH[k]_CM0, ATOM[i]_CH[k]_CM1, ATOM[i]_CH[k]_CTRL.SL and ATOM[i]_CH[k]_CTRL.CLK_SRC from ATOM[i]_CH[k]_SR0, ATOM[i]_CH[k]_SR1, ATOM[i]_CH[k]_CTRL_SR.SL_SR and ATOM[i]_CH[k]_CTRL_SR.CLK_SRC_SR.##suppress## (rw) */
    __IO Ifx_Strict_32Bit UPEN_CTRL4:2;    /**< \brief [25:24] ##suppress##ATOM channel [k] enable update of register ATOM[i]_CH[k]_CM0, ATOM[i]_CH[k]_CM1, ATOM[i]_CH[k]_CTRL.SL and ATOM[i]_CH[k]_CTRL.CLK_SRC from ATOM[i]_CH[k]_SR0, ATOM[i]_CH[k]_SR1, ATOM[i]_CH[k]_CTRL_SR.SL_SR and ATOM[i]_CH[k]_CTRL_SR.CLK_SRC_SR.##suppress## (rw) */
    __IO Ifx_Strict_32Bit UPEN_CTRL5:2;    /**< \brief [27:26] ##suppress##ATOM channel [k] enable update of register ATOM[i]_CH[k]_CM0, ATOM[i]_CH[k]_CM1, ATOM[i]_CH[k]_CTRL.SL and ATOM[i]_CH[k]_CTRL.CLK_SRC from ATOM[i]_CH[k]_SR0, ATOM[i]_CH[k]_SR1, ATOM[i]_CH[k]_CTRL_SR.SL_SR and ATOM[i]_CH[k]_CTRL_SR.CLK_SRC_SR.##suppress## (rw) */
    __IO Ifx_Strict_32Bit UPEN_CTRL6:2;    /**< \brief [29:28] ##suppress##ATOM channel [k] enable update of register ATOM[i]_CH[k]_CM0, ATOM[i]_CH[k]_CM1, ATOM[i]_CH[k]_CTRL.SL and ATOM[i]_CH[k]_CTRL.CLK_SRC from ATOM[i]_CH[k]_SR0, ATOM[i]_CH[k]_SR1, ATOM[i]_CH[k]_CTRL_SR.SL_SR and ATOM[i]_CH[k]_CTRL_SR.CLK_SRC_SR.##suppress## (rw) */
    __IO Ifx_Strict_32Bit UPEN_CTRL7:2;    /**< \brief [31:30] ##suppress##ATOM channel [k] enable update of register ATOM[i]_CH[k]_CM0, ATOM[i]_CH[k]_CM1, ATOM[i]_CH[k]_CTRL.SL and ATOM[i]_CH[k]_CTRL.CLK_SRC from ATOM[i]_CH[k]_SR0, ATOM[i]_CH[k]_SR1, ATOM[i]_CH[k]_CTRL_SR.SL_SR and ATOM[i]_CH[k]_CTRL_SR.CLK_SRC_SR.##suppress## (rw) */
} Ifx_GTM_CLS_ATOM_AGC_GLB_CTRL_Bits;

/** \brief ATOM[i] AGC internal trigger control register */
typedef struct _Ifx_GTM_CLS_ATOM_AGC_INT_TRIG_Bits
{
    __IO Ifx_Strict_32Bit INT_TRIG0:2;     /**< \brief [1:0] ##suppress##Select input signal ATOM_CH_TRIGOUT[k:k] as a trigger source##suppress## (rw) */
    __IO Ifx_Strict_32Bit INT_TRIG1:2;     /**< \brief [3:2] ##suppress##Select input signal ATOM_CH_TRIGOUT[k:k] as a trigger source##suppress## (rw) */
    __IO Ifx_Strict_32Bit INT_TRIG2:2;     /**< \brief [5:4] ##suppress##Select input signal ATOM_CH_TRIGOUT[k:k] as a trigger source##suppress## (rw) */
    __IO Ifx_Strict_32Bit INT_TRIG3:2;     /**< \brief [7:6] ##suppress##Select input signal ATOM_CH_TRIGOUT[k:k] as a trigger source##suppress## (rw) */
    __IO Ifx_Strict_32Bit INT_TRIG4:2;     /**< \brief [9:8] ##suppress##Select input signal ATOM_CH_TRIGOUT[k:k] as a trigger source##suppress## (rw) */
    __IO Ifx_Strict_32Bit INT_TRIG5:2;     /**< \brief [11:10] ##suppress##Select input signal ATOM_CH_TRIGOUT[k:k] as a trigger source##suppress## (rw) */
    __IO Ifx_Strict_32Bit INT_TRIG6:2;     /**< \brief [13:12] ##suppress##Select input signal ATOM_CH_TRIGOUT[k:k] as a trigger source##suppress## (rw) */
    __IO Ifx_Strict_32Bit INT_TRIG7:2;     /**< \brief [15:14] ##suppress##Select input signal ATOM_CH_TRIGOUT[k:k] as a trigger source##suppress## (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_ATOM_AGC_INT_TRIG_Bits;

/** \brief ATOM[i] AGC output enable control register */
typedef struct _Ifx_GTM_CLS_ATOM_AGC_OUTEN_CTRL_Bits
{
    __IO Ifx_Strict_32Bit OUTEN_CTRL0:2;    /**< \brief [1:0] ##suppress##Output enable control of ATOM [i] channel [k] output ATOM_OUT[x:x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit OUTEN_CTRL1:2;    /**< \brief [3:2] ##suppress##Output enable control of ATOM [i] channel [k] output ATOM_OUT[x:x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit OUTEN_CTRL2:2;    /**< \brief [5:4] ##suppress##Output enable control of ATOM [i] channel [k] output ATOM_OUT[x:x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit OUTEN_CTRL3:2;    /**< \brief [7:6] ##suppress##Output enable control of ATOM [i] channel [k] output ATOM_OUT[x:x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit OUTEN_CTRL4:2;    /**< \brief [9:8] ##suppress##Output enable control of ATOM [i] channel [k] output ATOM_OUT[x:x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit OUTEN_CTRL5:2;    /**< \brief [11:10] ##suppress##Output enable control of ATOM [i] channel [k] output ATOM_OUT[x:x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit OUTEN_CTRL6:2;    /**< \brief [13:12] ##suppress##Output enable control of ATOM [i] channel [k] output ATOM_OUT[x:x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit OUTEN_CTRL7:2;    /**< \brief [15:14] ##suppress##Output enable control of ATOM [i] channel [k] output ATOM_OUT[x:x]##suppress## (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_ATOM_AGC_OUTEN_CTRL_Bits;

/** \brief ATOM[i] AGC output enable status register */
typedef struct _Ifx_GTM_CLS_ATOM_AGC_OUTEN_STAT_Bits
{
    __IO Ifx_Strict_32Bit OUTEN_STAT0:2;    /**< \brief [1:0] ##suppress##Output enable status of ATOM [i] channel [x] output ATOM_OUT[k:k]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit OUTEN_STAT1:2;    /**< \brief [3:2] ##suppress##Output enable status of ATOM [i] channel [x] output ATOM_OUT[k:k]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit OUTEN_STAT2:2;    /**< \brief [5:4] ##suppress##Output enable status of ATOM [i] channel [x] output ATOM_OUT[k:k]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit OUTEN_STAT3:2;    /**< \brief [7:6] ##suppress##Output enable status of ATOM [i] channel [x] output ATOM_OUT[k:k]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit OUTEN_STAT4:2;    /**< \brief [9:8] ##suppress##Output enable status of ATOM [i] channel [x] output ATOM_OUT[k:k]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit OUTEN_STAT5:2;    /**< \brief [11:10] ##suppress##Output enable status of ATOM [i] channel [x] output ATOM_OUT[k:k]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit OUTEN_STAT6:2;    /**< \brief [13:12] ##suppress##Output enable status of ATOM [i] channel [x] output ATOM_OUT[k:k]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit OUTEN_STAT7:2;    /**< \brief [15:14] ##suppress##Output enable status of ATOM [i] channel [x] output ATOM_OUT[k:k]##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_ATOM_AGC_OUTEN_STAT_Bits;

/** \brief ATOM[i] channel [x] CCU0 compare register */
typedef struct _Ifx_GTM_CLS_ATOM_CH_CM0_Bits
{
    __IO Ifx_Strict_32Bit CM0:24;          /**< \brief [23:0] ##suppress##ATOM CCU0 compare register.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_ATOM_CH_CM0_Bits;

/** \brief ATOM[i] channel [x] CCU1 compare register */
typedef struct _Ifx_GTM_CLS_ATOM_CH_CM1_Bits
{
    __IO Ifx_Strict_32Bit CM1:24;          /**< \brief [23:0] ##suppress##ATOM CCU1 compare register.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_ATOM_CH_CM1_Bits;

/** \brief ATOM[i] channel [x] CCU0 counter register */
typedef struct _Ifx_GTM_CLS_ATOM_CH_CN0_Bits
{
    __IO Ifx_Strict_32Bit CN0:24;          /**< \brief [23:0] ##suppress##ATOM CCU0 counter register.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_ATOM_CH_CN0_Bits;

/** \brief ATOM[i] channel [x] control register */
typedef struct _Ifx_GTM_CLS_ATOM_CH_CTRL_Bits
{
    __IO Ifx_Strict_32Bit MODE:2;          /**< \brief [1:0] ##suppress##ATOM channel mode select.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TB12_SEL:1;      /**< \brief [2:2] ##suppress##Select time base value CCM[i]_TBU_TS1 or CCM[i]_TBU_TS2.##suppress## (rw) */
    __IO Ifx_Strict_32Bit ARU_EN:1;        /**< \brief [3:3] ##suppress##ARU Input stream enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit ACB:5;           /**< \brief [8:4] ##suppress##ATOM Mode control bits.##suppress## (rw) */
    __IO Ifx_Strict_32Bit CMP_CTRL:1;      /**< \brief [9:9] CCU[x] compare strategy select. (rw) */
    __IO Ifx_Strict_32Bit EUPM:1;          /**< \brief [10:10] Extended update mode (rw) */
    __IO Ifx_Strict_32Bit SL:1;            /**< \brief [11:11] Initial signal level. (rwh) */
    __IO Ifx_Strict_32Bit CLK_SRC:4;       /**< \brief [15:12] ##suppress##CMU clock source##suppress## (rwh) */
    __IO Ifx_Strict_32Bit WR_REQ:1;        /**< \brief [16:16] CPU Write request bit for late compare register update. (rw) */
    __IO Ifx_Strict_32Bit TRIG_PULSE:1;    /**< \brief [17:17] Trigger output pulse length of one cluster clock period (rw) */
    __IO Ifx_Strict_32Bit UDMODE:2;        /**< \brief [19:18] Up/down counter mode (rw) */
    __IO Ifx_Strict_32Bit RST_CCU0:1;      /**< \brief [20:20] Reset source of CCU0 (rw) */
    __IO Ifx_Strict_32Bit OSM_TRIG:1;      /**< \brief [21:21] Enable trigger of one-shot pulse by the selected trigger signal (rw) */
    __IO Ifx_Strict_32Bit EXT_TRIG:1;      /**< \brief [22:22] ##suppress##Select EXT_TRIGIN[x:x] as trigger signal##suppress## (rw) */
    __IO Ifx_Strict_32Bit EXTTRIGOUT:1;    /**< \brief [23:23] ##suppress##Select EXT_TRIGIN[x:x] as potential output signal ATOM_CH_TRIGOUT[x:x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRIGOUT:1;       /**< \brief [24:24] ##suppress##Trigger output selection (output signal ATOM_CH_TRIGOUT[x:x]) of module ATOM [i] channel [x].##suppress## (rw) */
    __IO Ifx_Strict_32Bit SLA:1;           /**< \brief [25:25] "##suppress##'Serve last' ARU communication strategy##suppress##" (rw) */
    __IO Ifx_Strict_32Bit OSM:1;           /**< \brief [26:26] One-shot mode (rw) */
    __IO Ifx_Strict_32Bit ABM:1;           /**< \brief [27:27] ##suppress##ARU blocking mode##suppress## (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [28:28] \internal Reserved */
    __IO Ifx_Strict_32Bit EXT_FUPD:1;      /**< \brief [29:29] Enable force update by external trigger signal (rw) */
    __IO Ifx_Strict_32Bit SOMB:1;          /**< \brief [30:30] SOMB mode (rw) */
    __IO Ifx_Strict_32Bit FREEZE:1;        /**< \brief [31:31] ##suppress##ATOM Freeze Mode enable##suppress## (rw) */
} Ifx_GTM_CLS_ATOM_CH_CTRL_Bits;

/** \brief ATOM[i] channel [x] control register */
typedef struct _Ifx_GTM_CLS_ATOM_CH_CTRL_SOMB_Bits
{
    __IO Ifx_Strict_32Bit MODE:2;          /**< \brief [1:0] ##suppress##ATOM channel mode select, but not applicable in SOMB mode.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TB12_SEL:1;      /**< \brief [2:2] ##suppress##Select time base value CCM[i]_TBU_TS1 or CCM[i]_TBU_TS2.##suppress## (rw) */
    __IO Ifx_Strict_32Bit ARU_EN:1;        /**< \brief [3:3] ##suppress##ARU Input stream enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit ACB10:2;         /**< \brief [5:4] Signal level control (rw) */
    __IO Ifx_Strict_32Bit ACB42:3;         /**< \brief [8:6] Compare strategy (rw) */
    __IO Ifx_Strict_32Bit CMP_CTRL:1;      /**< \brief [9:9] CCU[x] compare strategy select. (rw) */
    __IO Ifx_Strict_32Bit EUPM:1;          /**< \brief [10:10] Extended update mode (rw) */
    __IO Ifx_Strict_32Bit SL:1;            /**< \brief [11:11] Initial signal level. (rw) */
    __IO Ifx_Strict_32Bit CLK_SRC:4;       /**< \brief [15:12] ##suppress##CMU clock source but not applicable in SOMB mode##suppress## (rw) */
    __IO Ifx_Strict_32Bit WR_REQ:1;        /**< \brief [16:16] CPU Write request bit for late compare register update. (rwh) */
    __IO Ifx_Strict_32Bit TRIG_PULSE:1;    /**< \brief [17:17] Trigger output pulse length of one cluster clock period, , but not applicable in SOMB mode. (rw) */
    __IO Ifx_Strict_32Bit UDMODE:2;        /**< \brief [19:18] Up/down counter mode, but not applicable in SOMB mode. (rw) */
    __IO Ifx_Strict_32Bit RST_CCU0:1;      /**< \brief [20:20] Reset source of CCU0, but not applicable in SOMB mode. (rw) */
    __IO Ifx_Strict_32Bit OSM_TRIG:1;      /**< \brief [21:21] ##suppress##Enable trigger of one-shot pulse by trigger signal ATOM_CH_TRIGOUT[x-1:x-1] or EXT_TRIGIN[x:x], but not applicable in SOMB mode.##suppress## (rw) */
    __IO Ifx_Strict_32Bit EXT_TRIG:1;      /**< \brief [22:22] ##suppress##Select EXT_TRIGIN[x:x] as trigger signal, but not applicable in SOMB mode.##suppress## (rw) */
    __IO Ifx_Strict_32Bit EXTTRIGOUT:1;    /**< \brief [23:23] ##suppress##Select EXT_TRIGIN[x:x] as potential output signal ATOM_CH_TRIGOUT[x:x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRIGOUT:1;       /**< \brief [24:24] ##suppress##Trigger output selection (output signal ATOM_CH_TRIGOUT[x:x]) of module ATOM [i] channel [x].##suppress## (rw) */
    __IO Ifx_Strict_32Bit SLA:1;           /**< \brief [25:25] "##suppress##'Serve last' ARU communication strategy, but not applicable in SOMP mode.##suppress##" (rw) */
    __IO Ifx_Strict_32Bit OSM:1;           /**< \brief [26:26] One-shot mode, but not applicable in SOMB mode. (rw) */
    __IO Ifx_Strict_32Bit ABM:1;           /**< \brief [27:27] ##suppress##ARU blocking mode##suppress## (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [28:28] \internal Reserved */
    __IO Ifx_Strict_32Bit EXT_FUPD:1;      /**< \brief [29:29] External forced update (rw) */
    __IO Ifx_Strict_32Bit SOMB:1;          /**< \brief [30:30] SOMB mode (rw) */
    __IO Ifx_Strict_32Bit FREEZE:1;        /**< \brief [31:31] ##suppress##ATOM Freeze Mode enable##suppress## (rw) */
} Ifx_GTM_CLS_ATOM_CH_CTRL_SOMB_Bits;

/** \brief ATOM[i] channel [x] control register */
typedef struct _Ifx_GTM_CLS_ATOM_CH_CTRL_SOMC_Bits
{
    __IO Ifx_Strict_32Bit MODE:2;          /**< \brief [1:0] ##suppress##ATOM channel mode select##suppress## (rw) */
    __IO Ifx_Strict_32Bit TB12_SEL:1;      /**< \brief [2:2] ##suppress##Select time base value CCM[i]_TBU_TS1 or CCM[i]_TBU_TS2.##suppress## (rw) */
    __IO Ifx_Strict_32Bit ARU_EN:1;        /**< \brief [3:3] ##suppress##ARU input stream enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit ACB10:2;         /**< \brief [5:4] Signal level control (rw) */
    __IO Ifx_Strict_32Bit ACB42:3;         /**< \brief [8:6] Compare strategy (rw) */
    __IO Ifx_Strict_32Bit CMP_CTRL:1;      /**< \brief [9:9] CCU[x] compare strategy select. (rw) */
    __IO Ifx_Strict_32Bit EUPM:1;          /**< \brief [10:10] Extended update mode (rw) */
    __IO Ifx_Strict_32Bit SL:1;            /**< \brief [11:11] Initial signal level. (rw) */
    __IO Ifx_Strict_32Bit CLK_SRC:4;       /**< \brief [15:12] ##suppress##CMU clock source but not applicable in SOMC mode##suppress## (rw) */
    __IO Ifx_Strict_32Bit WR_REQ:1;        /**< \brief [16:16] CPU Write request bit for late compare register update. (rwh) */
    __IO Ifx_Strict_32Bit TRIG_PULSE:1;    /**< \brief [17:17] Trigger output pulse length of one cluster clock period, , but not applicable in SOMC mode. (rw) */
    __IO Ifx_Strict_32Bit UDMODE:2;        /**< \brief [19:18] Up/down counter mode, but not applicable in SOMC mode. (rw) */
    __IO Ifx_Strict_32Bit RST_CCU0:1;      /**< \brief [20:20] Reset source of CCU0, but not applicable in SOMC mode. (rw) */
    __IO Ifx_Strict_32Bit OSM_TRIG:1;      /**< \brief [21:21] ##suppress##Enable trigger of one-shot pulse by trigger signal ATOM_CH_TRIGOUT[x-1:x-1] or EXT_TRIGIN[x:x], but not applicable in SOMC mode.##suppress## (rw) */
    __IO Ifx_Strict_32Bit EXT_TRIG:1;      /**< \brief [22:22] ##suppress##Select EXT_TRIGIN[x:x] as trigger signal, but not applicable in SOMC mode.##suppress## (rw) */
    __IO Ifx_Strict_32Bit EXTTRIGOUT:1;    /**< \brief [23:23] ##suppress##Select EXT_TRIGIN[x:x] as potential output signal ATOM_CH_TRIGOUT[x:x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRIGOUT:1;       /**< \brief [24:24] ##suppress##Trigger output selection (output signal ATOM_CH_TRIGOUT[x:x]) of module ATOM channel x.##suppress## (rw) */
    __IO Ifx_Strict_32Bit SLA:1;           /**< \brief [25:25] "##suppress##'Serve last' ARU communication strategy##suppress##" (rw) */
    __IO Ifx_Strict_32Bit OSM:1;           /**< \brief [26:26] One-shot mode, but not applicable in SOMC mode. (rw) */
    __IO Ifx_Strict_32Bit ABM:1;           /**< \brief [27:27] ##suppress##ARU blocking mode##suppress## (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [28:28] \internal Reserved */
    __IO Ifx_Strict_32Bit EXT_FUPD:1;      /**< \brief [29:29] External forced update, but not applicable in SOMC mode. (rw) */
    __IO Ifx_Strict_32Bit SOMB:1;          /**< \brief [30:30] SOMB mode (rw) */
    __IO Ifx_Strict_32Bit FREEZE:1;        /**< \brief [31:31] ##suppress##ATOM freeze mode enable##suppress## (rw) */
} Ifx_GTM_CLS_ATOM_CH_CTRL_SOMC_Bits;

/** \brief ATOM[i] channel [x] control register */
typedef struct _Ifx_GTM_CLS_ATOM_CH_CTRL_SOMI_Bits
{
    __IO Ifx_Strict_32Bit MODE:2;          /**< \brief [1:0] ##suppress##ATOM channel mode select.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TB12_SEL:1;      /**< \brief [2:2] ##suppress##Select time base value CCM[i]_TBU_TS1 or CCM[i]_TBU_TS2, but not applicable in SOMI mode.##suppress## (rw) */
    __IO Ifx_Strict_32Bit ARU_EN:1;        /**< \brief [3:3] ##suppress##ARU Input stream enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit ACB0:1;          /**< \brief [4:4] ##suppress##ATOM output control##suppress## (rw) */
    __IO Ifx_Strict_32Bit ACB41:4;         /**< \brief [8:5] ##suppress##ATOM Mode control bits but not applicable in SOMI mode.##suppress## (rw) */
    __IO Ifx_Strict_32Bit CMP_CTRL:1;      /**< \brief [9:9] CCU[x] compare strategy selection, but not applicable in SOMI mode. (rw) */
    __IO Ifx_Strict_32Bit EUPM:1;          /**< \brief [10:10] Extended update mode, but not applicable in SOMI mode. (rw) */
    __IO Ifx_Strict_32Bit SL:1;            /**< \brief [11:11] Initial signal level. (rw) */
    __IO Ifx_Strict_32Bit CLK_SRC:4;       /**< \brief [15:12] ##suppress##CMU clock source but not applicable in SOMI mode##suppress## (rw) */
    __IO Ifx_Strict_32Bit WR_REQ:1;        /**< \brief [16:16] CPU Write request bit for late compare register update, but not applicable in SOMI mode. (rw) */
    __IO Ifx_Strict_32Bit TRIG_PULSE:1;    /**< \brief [17:17] Trigger output pulse length of one cluster clock period, , but not applicable in SOMI mode. (rw) */
    __IO Ifx_Strict_32Bit UDMODE:2;        /**< \brief [19:18] Up/down counter mode, but not applicable in SOMI mode. (rw) */
    __IO Ifx_Strict_32Bit RST_CCU0:1;      /**< \brief [20:20] Reset source of CCU0, but not applicable in SOMI mode. (rw) */
    __IO Ifx_Strict_32Bit OSM_TRIG:1;      /**< \brief [21:21] ##suppress##Enable trigger of one-shot pulse by trigger signal ATOM_CH_TRIGOUT[x-1:x-1] or EXT_TRIGIN[x:x], but not applicable in SOMI mode.##suppress## (rw) */
    __IO Ifx_Strict_32Bit EXT_TRIG:1;      /**< \brief [22:22] ##suppress##Select EXT_TRIGIN[x:x] as trigger signal, but not applicable in SOMI mode.##suppress## (rw) */
    __IO Ifx_Strict_32Bit EXTTRIGOUT:1;    /**< \brief [23:23] ##suppress##Select EXT_TRIGIN[x:x] as potential output signal ATOM_CH_TRIGOUT[x:x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRIGOUT:1;       /**< \brief [24:24] ##suppress##Trigger output selection (output signal ATOM_CH_TRIGOUT[x:x]) of module ATOM channel x.##suppress## (rw) */
    __IO Ifx_Strict_32Bit SLA:1;           /**< \brief [25:25] "##suppress##'Serve last' ARU communication strategy, but not applicable in SOMI mode.##suppress##" (rw) */
    __IO Ifx_Strict_32Bit OSM:1;           /**< \brief [26:26] One-shot mode, but not applicable in SOMI mode. (rw) */
    __IO Ifx_Strict_32Bit ABM:1;           /**< \brief [27:27] ##suppress##ARU blocking mode, but not applicable in SOMI mode.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [28:28] \internal Reserved */
    __IO Ifx_Strict_32Bit EXT_FUPD:1;      /**< \brief [29:29] External forced update (rw) */
    __IO Ifx_Strict_32Bit SOMB:1;          /**< \brief [30:30] SOMB mode (rw) */
    __IO Ifx_Strict_32Bit FREEZE:1;        /**< \brief [31:31] ##suppress##ATOM freeze mode enable configuration but it is not valid and supported in SOMI mode.##suppress## (rw) */
} Ifx_GTM_CLS_ATOM_CH_CTRL_SOMI_Bits;

/** \brief ATOM[i] channel [x] control register */
typedef struct _Ifx_GTM_CLS_ATOM_CH_CTRL_SOMP_Bits
{
    __IO Ifx_Strict_32Bit MODE:2;          /**< \brief [1:0] ##suppress##ATOM channel mode select##suppress## (rw) */
    __IO Ifx_Strict_32Bit TB12_SEL:1;      /**< \brief [2:2] ##suppress##Select time base value CCM[i]_TBU_TS1 or CCM[i]_TBU_TS2, but not applicable in SOMP mode.##suppress## (rw) */
    __IO Ifx_Strict_32Bit ARU_EN:1;        /**< \brief [3:3] ##suppress##ARU input stream enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit ADL:2;           /**< \brief [5:4] ##suppress##ARU data select##suppress## (rw) */
    __IO Ifx_Strict_32Bit BITREV:1;        /**< \brief [6:6] ##suppress##PCM mode enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit SR0_TRIG:1;      /**< \brief [7:7] ##suppress##SR0 used for ATOM_OUT_T of instance i and channel x##suppress## (rw) */
    __IO Ifx_Strict_32Bit ACB4:1;          /**< \brief [8:8] ##suppress##ATOM output control, but not applicable in SOMP mode.##suppress## (rw) */
    __IO Ifx_Strict_32Bit CMP_CTRL:1;      /**< \brief [9:9] CCU[x] compare strategy selection, but not applicable in SOMP mode. (rw) */
    __IO Ifx_Strict_32Bit EUPM:1;          /**< \brief [10:10] Extended update mode, but not applicable in SOMP mode. (rw) */
    __IO Ifx_Strict_32Bit SL:1;            /**< \brief [11:11] Initial signal level. (rwh) */
    __IO Ifx_Strict_32Bit CLK_SRC:4;       /**< \brief [15:12] ##suppress##CMU clock source for SOMP mode##suppress## (rwh) */
    __IO Ifx_Strict_32Bit WR_REQ:1;        /**< \brief [16:16] CPU Write request bit for late compare register update, but not applicable in SOMP mode. (rw) */
    __IO Ifx_Strict_32Bit TRIG_PULSE:1;    /**< \brief [17:17] Trigger output pulse length of one cluster clock period (rw) */
    __IO Ifx_Strict_32Bit UDMODE:2;        /**< \brief [19:18] Up/down counter mode (rw) */
    __IO Ifx_Strict_32Bit RST_CCU0:1;      /**< \brief [20:20] Reset source of CCU0 (rw) */
    __IO Ifx_Strict_32Bit OSM_TRIG:1;      /**< \brief [21:21] ##suppress##Enable trigger of one-shot pulse by trigger signal ATOM_CH_TRIGOUT[x-1:x-1] or EXT_TRIGIN[x:x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit EXT_TRIG:1;      /**< \brief [22:22] ##suppress##Select EXT_TRIGIN[x:x] as trigger signal##suppress## (rw) */
    __IO Ifx_Strict_32Bit EXTTRIGOUT:1;    /**< \brief [23:23] ##suppress##Select EXT_TRIGIN[x:x] as potential output signal ATOM_CH_TRIGOUT[x:x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRIGOUT:1;       /**< \brief [24:24] ##suppress##Trigger output selection (output signal ATOM_CH_TRIGOUT[x:x]) of module ATOM [i] channel [x].##suppress## (rw) */
    __IO Ifx_Strict_32Bit SLA:1;           /**< \brief [25:25] "##suppress##'Serve last' ARU communication strategy, but not applicable in SOMP mode.##suppress##" (rw) */
    __IO Ifx_Strict_32Bit OSM:1;           /**< \brief [26:26] One-shot mode (rw) */
    __IO Ifx_Strict_32Bit ABM:1;           /**< \brief [27:27] ##suppress##ARU blocking mode, but not applicable in SOMP mode.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [28:28] \internal Reserved */
    __IO Ifx_Strict_32Bit EXT_FUPD:1;      /**< \brief [29:29] External forced update (rw) */
    __IO Ifx_Strict_32Bit SOMB:1;          /**< \brief [30:30] SOMB mode (rw) */
    __IO Ifx_Strict_32Bit FREEZE:1;        /**< \brief [31:31] ##suppress##ATOM Freeze Mode enable##suppress## (rw) */
} Ifx_GTM_CLS_ATOM_CH_CTRL_SOMP_Bits;

/** \brief ATOM[i] channel [x] control register */
typedef struct _Ifx_GTM_CLS_ATOM_CH_CTRL_SOMS_Bits
{
    __IO Ifx_Strict_32Bit MODE:2;          /**< \brief [1:0] ##suppress##ATOM channel mode select.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TB12_SEL:1;      /**< \brief [2:2] ##suppress##Select time base value CCM[i]_TBU_TS1 or CCM[i]_TBU_TS2, but not applicable in SOMS mode.##suppress## (rw) */
    __IO Ifx_Strict_32Bit ARU_EN:1;        /**< \brief [3:3] ##suppress##ARU Input stream enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit ACB0:1;          /**< \brief [4:4] Shift direction (rw) */
    __IO Ifx_Strict_32Bit ACB21:2;         /**< \brief [6:5] ##suppress##ATOM output control, but not applicable in SOMS mode.##suppress## (rw) */
    __IO Ifx_Strict_32Bit DSO:1;           /**< \brief [7:7] Double shift output (rw) */
    __IO Ifx_Strict_32Bit ACB4:1;          /**< \brief [8:8] ##suppress##ATOM output control, but not applicable in SOMS mode.##suppress## (rw) */
    __IO Ifx_Strict_32Bit CMP_CTRL:1;      /**< \brief [9:9] CCU[x] compare strategy selection, but not applicable in SOMS mode. (rw) */
    __IO Ifx_Strict_32Bit EUPM:1;          /**< \brief [10:10] Extended update mode, but not applicable in SOMS mode. (rw) */
    __IO Ifx_Strict_32Bit SL:1;            /**< \brief [11:11] Initial signal level. (rw) */
    __IO Ifx_Strict_32Bit CLK_SRC:4;       /**< \brief [15:12] ##suppress##CMU clock source for SOMS mode##suppress## (rwh) */
    __IO Ifx_Strict_32Bit WR_REQ:1;        /**< \brief [16:16] CPU Write request bit for late compare register update, but not applicable in SOMS mode. (rw) */
    __IO Ifx_Strict_32Bit TRIG_PULSE:1;    /**< \brief [17:17] Trigger output pulse length of one cluster clock period, , but not applicable in SOMS mode. (rw) */
    __IO Ifx_Strict_32Bit UDMODE:2;        /**< \brief [19:18] Up/down counter mode, but not applicable in SOMS mode. (rw) */
    __IO Ifx_Strict_32Bit RST_CCU0:1;      /**< \brief [20:20] Reset source of CCU0, but not applicable in SOMS mode. (rw) */
    __IO Ifx_Strict_32Bit OSM_TRIG:1;      /**< \brief [21:21] ##suppress##Enable trigger of one-shot pulse by trigger signal ATOM_CH_TRIGOUT[x-1:x-1] or EXT_TRIGIN[x:x], but not applicable in SOMS mode.##suppress## (rw) */
    __IO Ifx_Strict_32Bit EXT_TRIG:1;      /**< \brief [22:22] ##suppress##Select EXT_TRIGIN[x:x] as trigger signal, but not applicable in SOMS mode.##suppress## (rw) */
    __IO Ifx_Strict_32Bit EXTTRIGOUT:1;    /**< \brief [23:23] ##suppress##Select EXT_TRIGIN[x:x] as potential output signal ATOM_CH_TRIGOUT[x:x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRIGOUT:1;       /**< \brief [24:24] ##suppress##Trigger output selection (output signal ATOM_CH_TRIGOUT[x:x]) of module ATOM channel x.##suppress## (rw) */
    __IO Ifx_Strict_32Bit SLA:1;           /**< \brief [25:25] "##suppress##'Serve last' ARU communication strategy, but not applicable in SOMS mode.##suppress##" (rw) */
    __IO Ifx_Strict_32Bit OSM:1;           /**< \brief [26:26] One-shot mode (rw) */
    __IO Ifx_Strict_32Bit ABM:1;           /**< \brief [27:27] ##suppress##ARU blocking mode, but not applicable in SOMS mode.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [28:28] \internal Reserved */
    __IO Ifx_Strict_32Bit EXT_FUPD:1;      /**< \brief [29:29] External forced update (rw) */
    __IO Ifx_Strict_32Bit SOMB:1;          /**< \brief [30:30] SOMB mode (rw) */
    __IO Ifx_Strict_32Bit FREEZE:1;        /**< \brief [31:31] ##suppress##ATOM Freeze Mode enable##suppress## (rw) */
} Ifx_GTM_CLS_ATOM_CH_CTRL_SOMS_Bits;

/** \brief ATOM[i] channel [x] control shadow register */
typedef struct _Ifx_GTM_CLS_ATOM_CH_CTRL_SR_Bits
{
    __I  Ifx_Strict_32Bit :11;             /**< \brief [10:0] \internal Reserved */
    __IO Ifx_Strict_32Bit SL_SR:1;         /**< \brief [11:11] ##suppress##Shadow register for ATOM[i]_CH[x]_CTRL.SL##suppress## (rw) */
    __IO Ifx_Strict_32Bit CLK_SRC_SR:4;    /**< \brief [15:12] ##suppress##Shadow register for ATOM[i]_CH[x]_CTRL.CLK_SRC##suppress## (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_ATOM_CH_CTRL_SR_Bits;

/** \brief ATOM[i] channel [x] interrupt enable register */
typedef struct _Ifx_GTM_CLS_ATOM_CH_IRQ_EN_Bits
{
    __IO Ifx_Strict_32Bit CCU0TC_IRQ_EN:1;    /**< \brief [0:0] ##suppress##ATOM_CCU0TC[x]_IRQ interrupt enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit CCU1TC_IRQ_EN:1;    /**< \brief [1:1] ##suppress##ATOM_CCU1TC[x]_IRQ interrupt enable.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_GTM_CLS_ATOM_CH_IRQ_EN_Bits;

/** \brief ATOM[i] channel [x] software interrupt generation */
typedef struct _Ifx_GTM_CLS_ATOM_CH_IRQ_FORCINT_Bits
{
    __IO Ifx_Strict_32Bit TRG_CCU0TC:1;    /**< \brief [0:0] ##suppress##Trigger the bit ATOM[i]_CH[x]_IRQ_NOTIFY.CCU0TC by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_CCU1TC:1;    /**< \brief [1:1] ##suppress##Trigger the bit ATOM[i]_CH[x]_IRQ_NOTIFY.CCU1TC by software.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_GTM_CLS_ATOM_CH_IRQ_FORCINT_Bits;

/** \brief ATOM[i] channel [x] interrupt mode configuration register */
typedef struct _Ifx_GTM_CLS_ATOM_CH_IRQ_MODE_Bits
{
    __IO Ifx_Strict_32Bit IRQ_MODE:2;      /**< \brief [1:0] IRQ mode selection (rw) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_GTM_CLS_ATOM_CH_IRQ_MODE_Bits;

/** \brief ATOM[i] channel [x] interrupt notification register */
typedef struct _Ifx_GTM_CLS_ATOM_CH_IRQ_NOTIFY_Bits
{
    __IO Ifx_Strict_32Bit CCU0TC:1;        /**< \brief [0:0] CCU0 Trigger condition interrupt for channel [x]. (rw1ch) */
    __IO Ifx_Strict_32Bit CCU1TC:1;        /**< \brief [1:1] CCU Trigger condition interrupt for channel [x]. (rw1ch) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_GTM_CLS_ATOM_CH_IRQ_NOTIFY_Bits;

/** \brief ATOM[i] channel[x] ARU read address register */
typedef struct _Ifx_GTM_CLS_ATOM_CH_RDADDR_Bits
{
    __IO Ifx_Strict_32Bit RDADDR0:9;       /**< \brief [8:0] ##suppress##ARU Read address 0.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [15:9] \internal Reserved */
    __IO Ifx_Strict_32Bit RDADDR1:9;       /**< \brief [24:16] ##suppress##ARU Read address 1.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [31:25] \internal Reserved */
} Ifx_GTM_CLS_ATOM_CH_RDADDR_Bits;

/** \brief ATOM[i] channel [x] CCU0 compare shadow register */
typedef struct _Ifx_GTM_CLS_ATOM_CH_SR0_Bits
{
    __IO Ifx_Strict_32Bit SR0:24;          /**< \brief [23:0] ##suppress##ATOM channel [x] shadow register SR0.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_ATOM_CH_SR0_Bits;

/** \brief ATOM[i] channel [x] CCU1 compare shadow register */
typedef struct _Ifx_GTM_CLS_ATOM_CH_SR1_Bits
{
    __IO Ifx_Strict_32Bit SR1:24;          /**< \brief [23:0] ##suppress##ATOM channel [x] shadow register SR1.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_ATOM_CH_SR1_Bits;

/** \brief ATOM[i] channel [x] status register */
typedef struct _Ifx_GTM_CLS_ATOM_CH_STAT_Bits
{
    __I  Ifx_Strict_32Bit OL:1;            /**< \brief [0:0] ##suppress##Output signal level of ATOM_OUT[x:x].##suppress## (rh) */
    __I  Ifx_Strict_32Bit :15;             /**< \brief [15:1] \internal Reserved */
    __I  Ifx_Strict_32Bit ACBI:5;          /**< \brief [20:16] ##suppress##ATOM Mode control bits.##suppress## (rh) */
    __I  Ifx_Strict_32Bit DV:1;            /**< \brief [21:21] ##suppress##Valid ARU Data stored in compare registers.##suppress## (rh) */
    __IO Ifx_Strict_32Bit WRF:1;           /**< \brief [22:22] Write request of CPU failed for late update. (rw1ch) */
    __I  Ifx_Strict_32Bit DR:1;            /**< \brief [23:23] ##suppress##ARU data rejected flag##suppress## (rh) */
    __I  Ifx_Strict_32Bit ACBO:5;          /**< \brief [28:24] ##suppress##ATOM Internal status bits.##suppress## (rh) */
    __IO Ifx_Strict_32Bit OSM_RTF:1;       /**< \brief [29:29] One-shot mode retrigger failed flag. (rw1ch) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [31:30] \internal Reserved */
} Ifx_GTM_CLS_ATOM_CH_STAT_Bits;

/** \brief AXIM[i] slot allocation status. */
typedef struct _Ifx_GTM_CLS_AXIM_FREE_Bits
{
    __I  Ifx_Strict_32Bit FREE0:1;         /**< \brief [0:0] This bit represents the allocation status of the slot [t]. (rh) */
    __I  Ifx_Strict_32Bit FREE1:1;         /**< \brief [1:1] This bit represents the allocation status of the slot [t]. (rh) */
    __I  Ifx_Strict_32Bit FREE2:1;         /**< \brief [2:2] This bit represents the allocation status of the slot [t]. (rh) */
    __I  Ifx_Strict_32Bit FREE3:1;         /**< \brief [3:3] This bit represents the allocation status of the slot [t]. (rh) */
    __I  Ifx_Strict_32Bit FREE4:1;         /**< \brief [4:4] This bit represents the allocation status of the slot [t]. (rh) */
    __I  Ifx_Strict_32Bit FREE5:1;         /**< \brief [5:5] This bit represents the allocation status of the slot [t]. (rh) */
    __I  Ifx_Strict_32Bit FREE6:1;         /**< \brief [6:6] This bit represents the allocation status of the slot [t]. (rh) */
    __I  Ifx_Strict_32Bit FREE7:1;         /**< \brief [7:7] This bit represents the allocation status of the slot [t]. (rh) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_CLS_AXIM_FREE_Bits;

/** \brief AXIM[i] slot release (de-allocation). */
typedef struct _Ifx_GTM_CLS_AXIM_RELEASE_Bits
{
    __IO Ifx_Strict_32Bit RELREQ0:1;       /**< \brief [0:0] ##suppress##Slot [t] release request: A write to AXIM[i]_RELEASE.RELREQ[t] de-allocates one or more slots. Each bit in AXIM[i]_RELEASE.RELREQ[t] represents one slot.##suppress## (rwch) */
    __IO Ifx_Strict_32Bit RELREQ1:1;       /**< \brief [1:1] ##suppress##Slot [t] release request: A write to AXIM[i]_RELEASE.RELREQ[t] de-allocates one or more slots. Each bit in AXIM[i]_RELEASE.RELREQ[t] represents one slot.##suppress## (rwch) */
    __IO Ifx_Strict_32Bit RELREQ2:1;       /**< \brief [2:2] ##suppress##Slot [t] release request: A write to AXIM[i]_RELEASE.RELREQ[t] de-allocates one or more slots. Each bit in AXIM[i]_RELEASE.RELREQ[t] represents one slot.##suppress## (rwch) */
    __IO Ifx_Strict_32Bit RELREQ3:1;       /**< \brief [3:3] ##suppress##Slot [t] release request: A write to AXIM[i]_RELEASE.RELREQ[t] de-allocates one or more slots. Each bit in AXIM[i]_RELEASE.RELREQ[t] represents one slot.##suppress## (rwch) */
    __IO Ifx_Strict_32Bit RELREQ4:1;       /**< \brief [4:4] ##suppress##Slot [t] release request: A write to AXIM[i]_RELEASE.RELREQ[t] de-allocates one or more slots. Each bit in AXIM[i]_RELEASE.RELREQ[t] represents one slot.##suppress## (rwch) */
    __IO Ifx_Strict_32Bit RELREQ5:1;       /**< \brief [5:5] ##suppress##Slot [t] release request: A write to AXIM[i]_RELEASE.RELREQ[t] de-allocates one or more slots. Each bit in AXIM[i]_RELEASE.RELREQ[t] represents one slot.##suppress## (rwch) */
    __IO Ifx_Strict_32Bit RELREQ6:1;       /**< \brief [6:6] ##suppress##Slot [t] release request: A write to AXIM[i]_RELEASE.RELREQ[t] de-allocates one or more slots. Each bit in AXIM[i]_RELEASE.RELREQ[t] represents one slot.##suppress## (rwch) */
    __IO Ifx_Strict_32Bit RELREQ7:1;       /**< \brief [7:7] ##suppress##Slot [t] release request: A write to AXIM[i]_RELEASE.RELREQ[t] de-allocates one or more slots. Each bit in AXIM[i]_RELEASE.RELREQ[t] represents one slot.##suppress## (rwch) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_CLS_AXIM_RELEASE_Bits;

/** \brief AXIM[i] slot request (allocation). */
typedef struct _Ifx_GTM_CLS_AXIM_REQUEST_Bits
{
    __I  Ifx_Strict_32Bit REQ1HOT0:1;      /**< \brief [0:0] ##suppress##A read to the AXIM[i]_REQUEST register will allocate a new slot if any slot is available. This bit field shows the new allocated slot as 1-hot encoded vector. If no slot could be allocated, this bit field is read as all 0.##suppress## (rh) */
    __I  Ifx_Strict_32Bit REQ1HOT1:1;      /**< \brief [1:1] ##suppress##A read to the AXIM[i]_REQUEST register will allocate a new slot if any slot is available. This bit field shows the new allocated slot as 1-hot encoded vector. If no slot could be allocated, this bit field is read as all 0.##suppress## (rh) */
    __I  Ifx_Strict_32Bit REQ1HOT2:1;      /**< \brief [2:2] ##suppress##A read to the AXIM[i]_REQUEST register will allocate a new slot if any slot is available. This bit field shows the new allocated slot as 1-hot encoded vector. If no slot could be allocated, this bit field is read as all 0.##suppress## (rh) */
    __I  Ifx_Strict_32Bit REQ1HOT3:1;      /**< \brief [3:3] ##suppress##A read to the AXIM[i]_REQUEST register will allocate a new slot if any slot is available. This bit field shows the new allocated slot as 1-hot encoded vector. If no slot could be allocated, this bit field is read as all 0.##suppress## (rh) */
    __I  Ifx_Strict_32Bit REQ1HOT4:1;      /**< \brief [4:4] ##suppress##A read to the AXIM[i]_REQUEST register will allocate a new slot if any slot is available. This bit field shows the new allocated slot as 1-hot encoded vector. If no slot could be allocated, this bit field is read as all 0.##suppress## (rh) */
    __I  Ifx_Strict_32Bit REQ1HOT5:1;      /**< \brief [5:5] ##suppress##A read to the AXIM[i]_REQUEST register will allocate a new slot if any slot is available. This bit field shows the new allocated slot as 1-hot encoded vector. If no slot could be allocated, this bit field is read as all 0.##suppress## (rh) */
    __I  Ifx_Strict_32Bit REQ1HOT6:1;      /**< \brief [6:6] ##suppress##A read to the AXIM[i]_REQUEST register will allocate a new slot if any slot is available. This bit field shows the new allocated slot as 1-hot encoded vector. If no slot could be allocated, this bit field is read as all 0.##suppress## (rh) */
    __I  Ifx_Strict_32Bit REQ1HOT7:1;      /**< \brief [7:7] ##suppress##A read to the AXIM[i]_REQUEST register will allocate a new slot if any slot is available. This bit field shows the new allocated slot as 1-hot encoded vector. If no slot could be allocated, this bit field is read as all 0.##suppress## (rh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [23:8] \internal Reserved */
    __I  Ifx_Strict_32Bit REQID:8;         /**< \brief [31:24] This bit field shows the new allocated slot as binary encoded index. If no slot could be allocated, this bit field is read as all 1 (0xff). (rh) */
} Ifx_GTM_CLS_AXIM_REQUEST_Bits;

/** \brief AXIM[i] slot[s] address bits 31:0 of AXI transaction. */
typedef struct _Ifx_GTM_CLS_AXIM_SLOT_ADDR_LOW_Bits
{
    __IO Ifx_Strict_32Bit AXI_ADDR:32;     /**< \brief [31:0] Address for the AXI transaction. (rw) */
} Ifx_GTM_CLS_AXIM_SLOT_ADDR_LOW_Bits;

/** \brief AXIM[i] slot [s] configuration 1 */
typedef struct _Ifx_GTM_CLS_AXIM_SLOT_CFG1_Bits
{
    __IO Ifx_Strict_32Bit INCR:4;          /**< \brief [3:0] Address increment for auto-increment mode (rw) */
    __IO Ifx_Strict_32Bit AUTO_INCR:1;     /**< \brief [4:4] Enable or disable auto-increment mode (rw) */
    __IO Ifx_Strict_32Bit PRIO:2;          /**< \brief [6:5] Slot priority. Priority used for slot arbitration. Lowest priority is 0, highest priority is 3. (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [10:7] \internal Reserved */
    __IO Ifx_Strict_32Bit AXI_PROT:3;      /**< \brief [13:11] AXI priority mode (rw) */
    __IO Ifx_Strict_32Bit AXI_CACHE:4;     /**< \brief [17:14] AxCACHE bit field (see ARM AXI-3 spec) (rw) */
    __IO Ifx_Strict_32Bit AXI_LOCK:2;      /**< \brief [19:18] AXI Lock indication (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [21:20] \internal Reserved */
    __IO Ifx_Strict_32Bit AXI_SIZE:3;      /**< \brief [24:22] AXI data size (rw) */
    __IO Ifx_Strict_32Bit AXI_RW:1;        /**< \brief [25:25] AXI Read Write indication (rw) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [31:26] \internal Reserved */
} Ifx_GTM_CLS_AXIM_SLOT_CFG1_Bits;

/** \brief AXIM[i] slot[s] configuration 2 */
typedef struct _Ifx_GTM_CLS_AXIM_SLOT_CFG2_Bits
{
    __IO Ifx_Strict_32Bit AXI_ID:16;       /**< \brief [15:0] ##suppress##AXI ID for transaction. If posted writes are enabled (device configuration variable), the lower bit of the AXIM[i]_SLOT[s]_CFG2.AXI_ID selects between posted and none-posted writes.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_AXIM_SLOT_CFG2_Bits;

/** \brief AXIM[i] slot[s] data bits 31:0 of AXI transaction. */
typedef struct _Ifx_GTM_CLS_AXIM_SLOT_DATA_LOW_Bits
{
    __IO Ifx_Strict_32Bit AXI_DATA_LOW:32;    /**< \brief [31:0] Read or write data. (rw) */
} Ifx_GTM_CLS_AXIM_SLOT_DATA_LOW_Bits;

/** \brief AXIM[i] slot[s] status */
typedef struct _Ifx_GTM_CLS_AXIM_SLOT_STATUS_Bits
{
    __I  Ifx_Strict_32Bit ALLOC:1;         /**< \brief [0:0] AXI Slot occupation indication (rh) */
    __I  Ifx_Strict_32Bit QUEUED:1;        /**< \brief [1:1] ##suppress##This bit represents the slot AXIM[i]_SLOT[s]_STATUS.QUEUED state.##suppress## (rh) */
    __I  Ifx_Strict_32Bit STARTED:1;       /**< \brief [2:2] ##suppress##This bit represents the slot AXIM[i]_SLOT[s]_STATUS.STARTED state.##suppress## (rh) */
    __I  Ifx_Strict_32Bit READY:1;         /**< \brief [3:3] ##suppress##This bit represents the slot AXIM[i]_SLOT[s]_STATUS.READY state.##suppress## (rh) */
    __I  Ifx_Strict_32Bit RESP:2;          /**< \brief [5:4] AXI response from last AXI transaction (rh) */
    __I  Ifx_Strict_32Bit :26;             /**< \brief [31:6] \internal Reserved */
} Ifx_GTM_CLS_AXIM_SLOT_STATUS_Bits;

/** \brief BRC error interrupt enable register */
typedef struct _Ifx_GTM_CLS_BRC_EIRQ_EN_Bits
{
    __IO Ifx_Strict_32Bit DEST_ERR_EIRQ_EN:1;    /**< \brief [0:0] ##suppress##BRC_DEST_ERR_EIRQ error interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit DID_EIRQ_EN0:1;    /**< \brief [1:1] ##suppress##Enable BRC_DID_EIRQ for channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit DID_EIRQ_EN1:1;    /**< \brief [2:2] ##suppress##Enable BRC_DID_EIRQ for channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit DID_EIRQ_EN2:1;    /**< \brief [3:3] ##suppress##Enable BRC_DID_EIRQ for channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit DID_EIRQ_EN3:1;    /**< \brief [4:4] ##suppress##Enable BRC_DID_EIRQ for channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit DID_EIRQ_EN4:1;    /**< \brief [5:5] ##suppress##Enable BRC_DID_EIRQ for channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit DID_EIRQ_EN5:1;    /**< \brief [6:6] ##suppress##Enable BRC_DID_EIRQ for channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit DID_EIRQ_EN6:1;    /**< \brief [7:7] ##suppress##Enable BRC_DID_EIRQ for channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit DID_EIRQ_EN7:1;    /**< \brief [8:8] ##suppress##Enable BRC_DID_EIRQ for channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit DID_EIRQ_EN8:1;    /**< \brief [9:9] ##suppress##Enable BRC_DID_EIRQ for channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit DID_EIRQ_EN9:1;    /**< \brief [10:10] ##suppress##Enable BRC_DID_EIRQ for channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit DID_EIRQ_EN10:1;    /**< \brief [11:11] ##suppress##Enable BRC_DID_EIRQ for channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit DID_EIRQ_EN11:1;    /**< \brief [12:12] ##suppress##Enable BRC_DID_EIRQ for channel [x]##suppress## (rw) */
    __I  Ifx_Strict_32Bit :19;             /**< \brief [31:13] \internal Reserved */
} Ifx_GTM_CLS_BRC_EIRQ_EN_Bits;

/** \brief BRC interrupt enable register */
typedef struct _Ifx_GTM_CLS_BRC_IRQ_EN_Bits
{
    __IO Ifx_Strict_32Bit DEST_ERR_IRQ_EN:1;    /**< \brief [0:0] ##suppress##BRC_DEST_ERR_IRQ interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit DID_IRQ_EN0:1;    /**< \brief [1:1] ##suppress##Enable BRC_DID_IRQ for channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit DID_IRQ_EN1:1;    /**< \brief [2:2] ##suppress##Enable BRC_DID_IRQ for channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit DID_IRQ_EN2:1;    /**< \brief [3:3] ##suppress##Enable BRC_DID_IRQ for channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit DID_IRQ_EN3:1;    /**< \brief [4:4] ##suppress##Enable BRC_DID_IRQ for channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit DID_IRQ_EN4:1;    /**< \brief [5:5] ##suppress##Enable BRC_DID_IRQ for channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit DID_IRQ_EN5:1;    /**< \brief [6:6] ##suppress##Enable BRC_DID_IRQ for channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit DID_IRQ_EN6:1;    /**< \brief [7:7] ##suppress##Enable BRC_DID_IRQ for channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit DID_IRQ_EN7:1;    /**< \brief [8:8] ##suppress##Enable BRC_DID_IRQ for channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit DID_IRQ_EN8:1;    /**< \brief [9:9] ##suppress##Enable BRC_DID_IRQ for channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit DID_IRQ_EN9:1;    /**< \brief [10:10] ##suppress##Enable BRC_DID_IRQ for channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit DID_IRQ_EN10:1;    /**< \brief [11:11] ##suppress##Enable BRC_DID_IRQ for channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit DID_IRQ_EN11:1;    /**< \brief [12:12] ##suppress##Enable BRC_DID_IRQ for channel [x]##suppress## (rw) */
    __I  Ifx_Strict_32Bit :19;             /**< \brief [31:13] \internal Reserved */
} Ifx_GTM_CLS_BRC_IRQ_EN_Bits;

/** \brief BRC force interrupt register */
typedef struct _Ifx_GTM_CLS_BRC_IRQ_FORCINT_Bits
{
    __IO Ifx_Strict_32Bit TRG_DEST_ERR:1;    /**< \brief [0:0] ##suppress##Trigger the bit BRC_IRQ_NOTIFY.DEST_ERR by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_DID0:1;      /**< \brief [1:1] ##suppress##Trigger the BRC_IRQ_NOTIFY.DID[x] bit (channel [x]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_DID1:1;      /**< \brief [2:2] ##suppress##Trigger the BRC_IRQ_NOTIFY.DID[x] bit (channel [x]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_DID2:1;      /**< \brief [3:3] ##suppress##Trigger the BRC_IRQ_NOTIFY.DID[x] bit (channel [x]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_DID3:1;      /**< \brief [4:4] ##suppress##Trigger the BRC_IRQ_NOTIFY.DID[x] bit (channel [x]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_DID4:1;      /**< \brief [5:5] ##suppress##Trigger the BRC_IRQ_NOTIFY.DID[x] bit (channel [x]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_DID5:1;      /**< \brief [6:6] ##suppress##Trigger the BRC_IRQ_NOTIFY.DID[x] bit (channel [x]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_DID6:1;      /**< \brief [7:7] ##suppress##Trigger the BRC_IRQ_NOTIFY.DID[x] bit (channel [x]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_DID7:1;      /**< \brief [8:8] ##suppress##Trigger the BRC_IRQ_NOTIFY.DID[x] bit (channel [x]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_DID8:1;      /**< \brief [9:9] ##suppress##Trigger the BRC_IRQ_NOTIFY.DID[x] bit (channel [x]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_DID9:1;      /**< \brief [10:10] ##suppress##Trigger the BRC_IRQ_NOTIFY.DID[x] bit (channel [x]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_DID10:1;     /**< \brief [11:11] ##suppress##Trigger the BRC_IRQ_NOTIFY.DID[x] bit (channel [x]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_DID11:1;     /**< \brief [12:12] ##suppress##Trigger the BRC_IRQ_NOTIFY.DID[x] bit (channel [x]) by software##suppress## (rw) */
    __I  Ifx_Strict_32Bit :19;             /**< \brief [31:13] \internal Reserved */
} Ifx_GTM_CLS_BRC_IRQ_FORCINT_Bits;

/** \brief BRC interrupt mode configuration register */
typedef struct _Ifx_GTM_CLS_BRC_IRQ_MODE_Bits
{
    __IO Ifx_Strict_32Bit IRQ_MODE:2;      /**< \brief [1:0] IRQ mode selection (rw) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_GTM_CLS_BRC_IRQ_MODE_Bits;

/** \brief BRC interrupt notification register */
typedef struct _Ifx_GTM_CLS_BRC_IRQ_NOTIFY_Bits
{
    __IO Ifx_Strict_32Bit DEST_ERR:1;      /**< \brief [0:0] ##suppress##Configuration error interrupt for BRC sub-module##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit DID0:1;          /**< \brief [1:1] ##suppress##Data inconsistency occurred in MTM mode for channel [x].##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit DID1:1;          /**< \brief [2:2] ##suppress##Data inconsistency occurred in MTM mode for channel [x].##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit DID2:1;          /**< \brief [3:3] ##suppress##Data inconsistency occurred in MTM mode for channel [x].##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit DID3:1;          /**< \brief [4:4] ##suppress##Data inconsistency occurred in MTM mode for channel [x].##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit DID4:1;          /**< \brief [5:5] ##suppress##Data inconsistency occurred in MTM mode for channel [x].##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit DID5:1;          /**< \brief [6:6] ##suppress##Data inconsistency occurred in MTM mode for channel [x].##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit DID6:1;          /**< \brief [7:7] ##suppress##Data inconsistency occurred in MTM mode for channel [x].##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit DID7:1;          /**< \brief [8:8] ##suppress##Data inconsistency occurred in MTM mode for channel [x].##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit DID8:1;          /**< \brief [9:9] ##suppress##Data inconsistency occurred in MTM mode for channel [x].##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit DID9:1;          /**< \brief [10:10] ##suppress##Data inconsistency occurred in MTM mode for channel [x].##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit DID10:1;         /**< \brief [11:11] ##suppress##Data inconsistency occurred in MTM mode for channel [x].##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit DID11:1;         /**< \brief [12:12] ##suppress##Data inconsistency occurred in MTM mode for channel [x].##suppress## (rw1ch) */
    __I  Ifx_Strict_32Bit :19;             /**< \brief [31:13] \internal Reserved */
} Ifx_GTM_CLS_BRC_IRQ_NOTIFY_Bits;

/** \brief BRC software reset register */
typedef struct _Ifx_GTM_CLS_BRC_RST_Bits
{
    __IO Ifx_Strict_32Bit RST:1;           /**< \brief [0:0] Software reset (rw) */
    __I  Ifx_Strict_32Bit :31;             /**< \brief [31:1] \internal Reserved */
} Ifx_GTM_CLS_BRC_RST_Bits;

/** \brief BRC read address for input channel [x] */
typedef struct _Ifx_GTM_CLS_BRC_SRC_ADDR_Bits
{
    __IO Ifx_Strict_32Bit ADDR:9;          /**< \brief [8:0] ##suppress##Source ARU address. Define an ARU read address used as data source for input channel[x].##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [11:9] \internal Reserved */
    __IO Ifx_Strict_32Bit BRC_MODE:1;      /**< \brief [12:12] ##suppress##BRC Operation mode select##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :19;             /**< \brief [31:13] \internal Reserved */
} Ifx_GTM_CLS_BRC_SRC_ADDR_Bits;

/** \brief BRC destination channels for input channel [x] */
typedef struct _Ifx_GTM_CLS_BRC_SRC_DEST_Bits
{
    __IO Ifx_Strict_32Bit EN_DEST0:1;      /**< \brief [0:0] ##suppress##Enable BRC destination address [z]##suppress## (rw) */
    __IO Ifx_Strict_32Bit EN_DEST1:1;      /**< \brief [1:1] ##suppress##Enable BRC destination address [z]##suppress## (rw) */
    __IO Ifx_Strict_32Bit EN_DEST2:1;      /**< \brief [2:2] ##suppress##Enable BRC destination address [z]##suppress## (rw) */
    __IO Ifx_Strict_32Bit EN_DEST3:1;      /**< \brief [3:3] ##suppress##Enable BRC destination address [z]##suppress## (rw) */
    __IO Ifx_Strict_32Bit EN_DEST4:1;      /**< \brief [4:4] ##suppress##Enable BRC destination address [z]##suppress## (rw) */
    __IO Ifx_Strict_32Bit EN_DEST5:1;      /**< \brief [5:5] ##suppress##Enable BRC destination address [z]##suppress## (rw) */
    __IO Ifx_Strict_32Bit EN_DEST6:1;      /**< \brief [6:6] ##suppress##Enable BRC destination address [z]##suppress## (rw) */
    __IO Ifx_Strict_32Bit EN_DEST7:1;      /**< \brief [7:7] ##suppress##Enable BRC destination address [z]##suppress## (rw) */
    __IO Ifx_Strict_32Bit EN_DEST8:1;      /**< \brief [8:8] ##suppress##Enable BRC destination address [z]##suppress## (rw) */
    __IO Ifx_Strict_32Bit EN_DEST9:1;      /**< \brief [9:9] ##suppress##Enable BRC destination address [z]##suppress## (rw) */
    __IO Ifx_Strict_32Bit EN_DEST10:1;     /**< \brief [10:10] ##suppress##Enable BRC destination address [z]##suppress## (rw) */
    __IO Ifx_Strict_32Bit EN_DEST11:1;     /**< \brief [11:11] ##suppress##Enable BRC destination address [z]##suppress## (rw) */
    __IO Ifx_Strict_32Bit EN_DEST12:1;     /**< \brief [12:12] ##suppress##Enable BRC destination address [z]##suppress## (rw) */
    __IO Ifx_Strict_32Bit EN_DEST13:1;     /**< \brief [13:13] ##suppress##Enable BRC destination address [z]##suppress## (rw) */
    __IO Ifx_Strict_32Bit EN_DEST14:1;     /**< \brief [14:14] ##suppress##Enable BRC destination address [z]##suppress## (rw) */
    __IO Ifx_Strict_32Bit EN_DEST15:1;     /**< \brief [15:15] ##suppress##Enable BRC destination address [z]##suppress## (rw) */
    __IO Ifx_Strict_32Bit EN_DEST16:1;     /**< \brief [16:16] ##suppress##Enable BRC destination address [z]##suppress## (rw) */
    __IO Ifx_Strict_32Bit EN_DEST17:1;     /**< \brief [17:17] ##suppress##Enable BRC destination address [z]##suppress## (rw) */
    __IO Ifx_Strict_32Bit EN_DEST18:1;     /**< \brief [18:18] ##suppress##Enable BRC destination address [z]##suppress## (rw) */
    __IO Ifx_Strict_32Bit EN_DEST19:1;     /**< \brief [19:19] ##suppress##Enable BRC destination address [z]##suppress## (rw) */
    __IO Ifx_Strict_32Bit EN_DEST20:1;     /**< \brief [20:20] ##suppress##Enable BRC destination address [z]##suppress## (rw) */
    __IO Ifx_Strict_32Bit EN_DEST21:1;     /**< \brief [21:21] ##suppress##Enable BRC destination address [z]##suppress## (rw) */
    __IO Ifx_Strict_32Bit EN_TRASHBIN:1;    /**< \brief [22:22] Control trash bin functionality. (rw) */
    __I  Ifx_Strict_32Bit :9;              /**< \brief [31:23] \internal Reserved */
} Ifx_GTM_CLS_BRC_SRC_DEST_Bits;

/** \brief CCM[i] MCS Bus Master Status Register */
typedef struct _Ifx_GTM_CLS_CCM_AEIM_STA_Bits
{
    __IO Ifx_Strict_32Bit AEIM_XPT_ADDR:16;    /**< \brief [15:0] Exception address (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [23:16] \internal Reserved */
    __IO Ifx_Strict_32Bit AEIM_XPT_STA:2;    /**< \brief [25:24] AEIM exception status (rwch) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [31:26] \internal Reserved */
} Ifx_GTM_CLS_CCM_AEIM_STA_Bits;

/** \brief CCM[i] Address Range Protector [a] Control Register */
typedef struct _Ifx_GTM_CLS_CCM_ARP_CTRL_Bits
{
    __IO Ifx_Strict_32Bit ADDR:16;         /**< \brief [15:0] ARP base address. (rw) */
    __IO Ifx_Strict_32Bit SIZE:4;          /**< \brief [19:16] Size of ARP (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [23:20] \internal Reserved */
    __IO Ifx_Strict_32Bit DIS_PROT:1;      /**< \brief [24:24] Disable ARP protection. (rw) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [30:25] \internal Reserved */
    __IO Ifx_Strict_32Bit WPROT_AEI:1;     /**< \brief [31:31] ##suppress##AEI slave write-protection.##suppress## (rw) */
} Ifx_GTM_CLS_CCM_ARP_CTRL_Bits;

/** \brief CCM[i] Address Range Protector [a] Protection Register */
typedef struct _Ifx_GTM_CLS_CCM_ARP_PROT_Bits
{
    __IO Ifx_Strict_32Bit WPROT0:1;        /**< \brief [0:0] ##suppress##Write-Protection MCS channel [x].##suppress## (rw) */
    __IO Ifx_Strict_32Bit WPROT1:1;        /**< \brief [1:1] ##suppress##Write-Protection MCS channel [x].##suppress## (rw) */
    __IO Ifx_Strict_32Bit WPROT2:1;        /**< \brief [2:2] ##suppress##Write-Protection MCS channel [x].##suppress## (rw) */
    __IO Ifx_Strict_32Bit WPROT3:1;        /**< \brief [3:3] ##suppress##Write-Protection MCS channel [x].##suppress## (rw) */
    __IO Ifx_Strict_32Bit WPROT4:1;        /**< \brief [4:4] ##suppress##Write-Protection MCS channel [x].##suppress## (rw) */
    __IO Ifx_Strict_32Bit WPROT5:1;        /**< \brief [5:5] ##suppress##Write-Protection MCS channel [x].##suppress## (rw) */
    __IO Ifx_Strict_32Bit WPROT6:1;        /**< \brief [6:6] ##suppress##Write-Protection MCS channel [x].##suppress## (rw) */
    __IO Ifx_Strict_32Bit WPROT7:1;        /**< \brief [7:7] ##suppress##Write-Protection MCS channel [x].##suppress## (rw) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_CLS_CCM_ARP_PROT_Bits;

/** \brief CCM[i] ATOM Output Register */
typedef struct _Ifx_GTM_CLS_CCM_ATOM_OUT_Bits
{
    __I  Ifx_Strict_32Bit ATOM_I_OUT0:1;    /**< \brief [0:0] ##suppress##Output level snapshot of CCM_ATOM_OUT channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_I_OUT1:1;    /**< \brief [1:1] ##suppress##Output level snapshot of CCM_ATOM_OUT channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_I_OUT2:1;    /**< \brief [2:2] ##suppress##Output level snapshot of CCM_ATOM_OUT channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_I_OUT3:1;    /**< \brief [3:3] ##suppress##Output level snapshot of CCM_ATOM_OUT channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_I_OUT4:1;    /**< \brief [4:4] ##suppress##Output level snapshot of CCM_ATOM_OUT channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_I_OUT5:1;    /**< \brief [5:5] ##suppress##Output level snapshot of CCM_ATOM_OUT channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_I_OUT6:1;    /**< \brief [6:6] ##suppress##Output level snapshot of CCM_ATOM_OUT channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_I_OUT7:1;    /**< \brief [7:7] ##suppress##Output level snapshot of CCM_ATOM_OUT channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_I_OUT_N0:1;    /**< \brief [8:8] ##suppress##Output level snapshot of CCM_ATOM_OUT_N channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_I_OUT_N1:1;    /**< \brief [9:9] ##suppress##Output level snapshot of CCM_ATOM_OUT_N channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_I_OUT_N2:1;    /**< \brief [10:10] ##suppress##Output level snapshot of CCM_ATOM_OUT_N channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_I_OUT_N3:1;    /**< \brief [11:11] ##suppress##Output level snapshot of CCM_ATOM_OUT_N channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_I_OUT_N4:1;    /**< \brief [12:12] ##suppress##Output level snapshot of CCM_ATOM_OUT_N channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_I_OUT_N5:1;    /**< \brief [13:13] ##suppress##Output level snapshot of CCM_ATOM_OUT_N channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_I_OUT_N6:1;    /**< \brief [14:14] ##suppress##Output level snapshot of CCM_ATOM_OUT_N channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_I_OUT_N7:1;    /**< \brief [15:15] ##suppress##Output level snapshot of CCM_ATOM_OUT_N channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_IP1_OUT0:1;    /**< \brief [16:16] Output level snapshot of ATOM[i+1]_OUT channel [x] (rh) */
    __I  Ifx_Strict_32Bit ATOM_IP1_OUT1:1;    /**< \brief [17:17] Output level snapshot of ATOM[i+1]_OUT channel [x] (rh) */
    __I  Ifx_Strict_32Bit ATOM_IP1_OUT2:1;    /**< \brief [18:18] Output level snapshot of ATOM[i+1]_OUT channel [x] (rh) */
    __I  Ifx_Strict_32Bit ATOM_IP1_OUT3:1;    /**< \brief [19:19] Output level snapshot of ATOM[i+1]_OUT channel [x] (rh) */
    __I  Ifx_Strict_32Bit ATOM_IP1_OUT4:1;    /**< \brief [20:20] Output level snapshot of ATOM[i+1]_OUT channel [x] (rh) */
    __I  Ifx_Strict_32Bit ATOM_IP1_OUT5:1;    /**< \brief [21:21] Output level snapshot of ATOM[i+1]_OUT channel [x] (rh) */
    __I  Ifx_Strict_32Bit ATOM_IP1_OUT6:1;    /**< \brief [22:22] Output level snapshot of ATOM[i+1]_OUT channel [x] (rh) */
    __I  Ifx_Strict_32Bit ATOM_IP1_OUT7:1;    /**< \brief [23:23] Output level snapshot of ATOM[i+1]_OUT channel [x] (rh) */
    __I  Ifx_Strict_32Bit ATOM_IP1_OUT_N0:1;    /**< \brief [24:24] ##suppress##Output level snapshot of CCM_ATOM_OUT[x:x] of instance i+1 channel x##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_IP1_OUT_N1:1;    /**< \brief [25:25] ##suppress##Output level snapshot of CCM_ATOM_OUT[x:x] of instance i+1 channel x##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_IP1_OUT_N2:1;    /**< \brief [26:26] ##suppress##Output level snapshot of CCM_ATOM_OUT[x:x] of instance i+1 channel x##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_IP1_OUT_N3:1;    /**< \brief [27:27] ##suppress##Output level snapshot of CCM_ATOM_OUT[x:x] of instance i+1 channel x##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_IP1_OUT_N4:1;    /**< \brief [28:28] ##suppress##Output level snapshot of CCM_ATOM_OUT[x:x] of instance i+1 channel x##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_IP1_OUT_N5:1;    /**< \brief [29:29] ##suppress##Output level snapshot of CCM_ATOM_OUT[x:x] of instance i+1 channel x##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_IP1_OUT_N6:1;    /**< \brief [30:30] ##suppress##Output level snapshot of CCM_ATOM_OUT[x:x] of instance i+1 channel x##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_IP1_OUT_N7:1;    /**< \brief [31:31] ##suppress##Output level snapshot of CCM_ATOM_OUT[x:x] of instance i+1 channel x##suppress## (rh) */
} Ifx_GTM_CLS_CCM_ATOM_OUT_Bits;

/** \brief CCM[i] Configuration Register */
typedef struct _Ifx_GTM_CLS_CCM_CFG_Bits
{
    __IO Ifx_Strict_32Bit EN_TIM:1;        /**< \brief [0:0] ##suppress##Enable TIM##suppress## (rwh) */
    __IO Ifx_Strict_32Bit EN_TOM_SPE_TDTM:1;    /**< \brief [1:1] ##suppress##Enable TOM, SPE and TDTM##suppress## (rwh) */
    __IO Ifx_Strict_32Bit EN_ATOM_ADTM:1;    /**< \brief [2:2] ##suppress##Enable ATOM and ADTM##suppress## (rwh) */
    __IO Ifx_Strict_32Bit EN_MCS:1;        /**< \brief [3:3] ##suppress##Enable MCS##suppress## (rwh) */
    __IO Ifx_Strict_32Bit EN_DPLL_MAP:1;    /**< \brief [4:4] ##suppress##Enable DPLL and MAP##suppress## (rwh) */
    __IO Ifx_Strict_32Bit EN_BRC:1;        /**< \brief [5:5] ##suppress##Enable BRC##suppress## (rwh) */
    __IO Ifx_Strict_32Bit EN_PSM:1;        /**< \brief [6:6] Enable PSM (rwh) */
    __IO Ifx_Strict_32Bit EN_CMP_MON:1;    /**< \brief [7:7] ##suppress##Enable CMP and MON##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __I  Ifx_Strict_32Bit CLS_CLK_DIV:2;    /**< \brief [17:16] Cluster Clock Divider (rh) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [29:18] \internal Reserved */
    __I  Ifx_Strict_32Bit TBU_DIR1:1;      /**< \brief [30:30] ##suppress##DIR1 input signal of module TBU timebase [z].##suppress## (rh) */
    __I  Ifx_Strict_32Bit TBU_DIR2:1;      /**< \brief [31:31] ##suppress##DIR1 input signal of module TBU timebase [z].##suppress## (rh) */
} Ifx_GTM_CLS_CCM_CFG_Bits;

/** \brief CCM[i] CMU Clock Configuration Register */
typedef struct _Ifx_GTM_CLS_CCM_CMU_CLK_CFG_Bits
{
    __IO Ifx_Strict_32Bit CLK0_SRC:2;      /**< \brief [1:0] Clock [y] source signal selector (rwh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [3:2] \internal Reserved */
    __IO Ifx_Strict_32Bit CLK1_SRC:2;      /**< \brief [5:4] Clock [y] source signal selector (rwh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [7:6] \internal Reserved */
    __IO Ifx_Strict_32Bit CLK2_SRC:2;      /**< \brief [9:8] Clock [y] source signal selector (rwh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [11:10] \internal Reserved */
    __IO Ifx_Strict_32Bit CLK3_SRC:2;      /**< \brief [13:12] Clock [y] source signal selector (rwh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [15:14] \internal Reserved */
    __IO Ifx_Strict_32Bit CLK4_SRC:2;      /**< \brief [17:16] Clock [y] source signal selector (rwh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [19:18] \internal Reserved */
    __IO Ifx_Strict_32Bit CLK5_SRC:2;      /**< \brief [21:20] Clock [y] source signal selector (rwh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [23:22] \internal Reserved */
    __IO Ifx_Strict_32Bit CLK6_SRC:2;      /**< \brief [25:24] Clock [y] source signal selector (rwh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [27:26] \internal Reserved */
    __IO Ifx_Strict_32Bit CLK7_SRC:2;      /**< \brief [29:28] Clock [y] source signal selector (rwh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [31:30] \internal Reserved */
} Ifx_GTM_CLS_CCM_CMU_CLK_CFG_Bits;

/** \brief CCM[i] CMU Fixed Clock Configuration Register */
typedef struct _Ifx_GTM_CLS_CCM_CMU_FXCLK_CFG_Bits
{
    __IO Ifx_Strict_32Bit FXCLK0_SRC:4;    /**< \brief [3:0] Fixed clock 0 source signal selector (rwh) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_GTM_CLS_CCM_CMU_FXCLK_CFG_Bits;

/** \brief CCM[i] External Capture Enable Register */
typedef struct _Ifx_GTM_CLS_CCM_EXT_CAP_EN_Bits
{
    __IO Ifx_Strict_32Bit TIM_I_EXT_CAP_EN0:1;    /**< \brief [0:0] ##suppress##TIM_EXT_CAPTURE signal [x] forwarding enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit TIM_I_EXT_CAP_EN1:1;    /**< \brief [1:1] ##suppress##TIM_EXT_CAPTURE signal [x] forwarding enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit TIM_I_EXT_CAP_EN2:1;    /**< \brief [2:2] ##suppress##TIM_EXT_CAPTURE signal [x] forwarding enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit TIM_I_EXT_CAP_EN3:1;    /**< \brief [3:3] ##suppress##TIM_EXT_CAPTURE signal [x] forwarding enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit TIM_I_EXT_CAP_EN4:1;    /**< \brief [4:4] ##suppress##TIM_EXT_CAPTURE signal [x] forwarding enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit TIM_I_EXT_CAP_EN5:1;    /**< \brief [5:5] ##suppress##TIM_EXT_CAPTURE signal [x] forwarding enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit TIM_I_EXT_CAP_EN6:1;    /**< \brief [6:6] ##suppress##TIM_EXT_CAPTURE signal [x] forwarding enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit TIM_I_EXT_CAP_EN7:1;    /**< \brief [7:7] ##suppress##TIM_EXT_CAPTURE signal [x] forwarding enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit TIM_IP1_EXT_CAP_EN0:1;    /**< \brief [8:8] ##suppress##TIM_EXT_CAPTURE[x:x] of instance TIM[i+1] signal [x] forwarding enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit TIM_IP1_EXT_CAP_EN1:1;    /**< \brief [9:9] ##suppress##TIM_EXT_CAPTURE[x:x] of instance TIM[i+1] signal [x] forwarding enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit TIM_IP1_EXT_CAP_EN2:1;    /**< \brief [10:10] ##suppress##TIM_EXT_CAPTURE[x:x] of instance TIM[i+1] signal [x] forwarding enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit TIM_IP1_EXT_CAP_EN3:1;    /**< \brief [11:11] ##suppress##TIM_EXT_CAPTURE[x:x] of instance TIM[i+1] signal [x] forwarding enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit TIM_IP1_EXT_CAP_EN4:1;    /**< \brief [12:12] ##suppress##TIM_EXT_CAPTURE[x:x] of instance TIM[i+1] signal [x] forwarding enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit TIM_IP1_EXT_CAP_EN5:1;    /**< \brief [13:13] ##suppress##TIM_EXT_CAPTURE[x:x] of instance TIM[i+1] signal [x] forwarding enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit TIM_IP1_EXT_CAP_EN6:1;    /**< \brief [14:14] ##suppress##TIM_EXT_CAPTURE[x:x] of instance TIM[i+1] signal [x] forwarding enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit TIM_IP1_EXT_CAP_EN7:1;    /**< \brief [15:15] ##suppress##TIM_EXT_CAPTURE[x:x] of instance TIM[i+1] signal [x] forwarding enable##suppress## (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_CCM_EXT_CAP_EN_Bits;

/** \brief CCM[i] Hardware Configuration Register */
typedef struct _Ifx_GTM_CLS_CCM_HW_CONF_Bits
{
    __I  Ifx_Strict_32Bit :1;              /**< \brief [0:0] \internal Reserved */
    __I  Ifx_Strict_32Bit BRIDGE_MODE_RST:1;    /**< \brief [1:1] Bridge mode after reset (r) */
    __I  Ifx_Strict_32Bit SYNC_INPUT_REG:1;    /**< \brief [2:2] Additional pipelined stage in synchronous bridge mode (r) */
    __I  Ifx_Strict_32Bit CFG_CLOCK_RATE:1;    /**< \brief [3:3] ##suppress##Clocks per ARU transfer##suppress## (r) */
    __I  Ifx_Strict_32Bit ATOM_OUT_RST:1;    /**< \brief [4:4] ##suppress##CCM_ATOM_OUT reset level##suppress## (r) */
    __I  Ifx_Strict_32Bit ATOM_TRIG_CHAIN:3;    /**< \brief [7:5] ##suppress##ATOM trigger chain length without synchronization register##suppress## (r) */
    __I  Ifx_Strict_32Bit TOM_OUT_RST:1;    /**< \brief [8:8] ##suppress##CCM_TOM_OUT reset level##suppress## (r) */
    __I  Ifx_Strict_32Bit TOM_TRIG_CHAIN:3;    /**< \brief [11:9] ##suppress##TOM trigger chain length without synchronization register##suppress## (r) */
    __I  Ifx_Strict_32Bit RAM_INIT_RST:1;    /**< \brief [12:12] RAM initialization from reset (r) */
    __I  Ifx_Strict_32Bit ERM:1;           /**< \brief [13:13] ##suppress##Enable RAM1 MSB for available MCS modules##suppress## (r) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [14:14] \internal Reserved */
    __I  Ifx_Strict_32Bit RESET_ACTIVE:1;    /**< \brief [15:15] Active level of asynchronous reset (r) */
    __I  Ifx_Strict_32Bit IRQ_MODE_LEVEL:1;    /**< \brief [16:16] Signalize availability of Level IRQ mode (r) */
    __I  Ifx_Strict_32Bit IRQ_MODE_PULSE:1;    /**< \brief [17:17] Signalize availability of Pulse IRQ mode (r) */
    __I  Ifx_Strict_32Bit IRQ_MODE_PULSE_NOTIFY:1;    /**< \brief [18:18] Signalize availability of Pulse Notify IRQ mode (r) */
    __I  Ifx_Strict_32Bit IRQ_MODE_SINGLE_PULSE:1;    /**< \brief [19:19] Signalize availability of Single Pulse IRQ mode (r) */
    __I  Ifx_Strict_32Bit ATOM_TRIG_INTCHAIN:4;    /**< \brief [23:20] ##suppress##ATOM internal trigger chain length for pipeline register##suppress## (r) */
    __I  Ifx_Strict_32Bit TOM_TRIG_INTCHAIN:5;    /**< \brief [28:24] ##suppress##TOM internal trigger chain length for pipeline register##suppress## (r) */
    __I  Ifx_Strict_32Bit INT_CLK_EN_GEN:1;    /**< \brief [29:29] Internal clock enable generation (r) */
    __I  Ifx_Strict_32Bit AEI_ADDR_PIPELINE_STAGE:1;    /**< \brief [30:30] Address pipeline stage implemented (r) */
    __I  Ifx_Strict_32Bit AEI_RDATA_PIPELINE_STAGE:1;    /**< \brief [31:31] Read data pipeline stage implemented (r) */
} Ifx_GTM_CLS_CCM_HW_CONF_Bits;

/** \brief CCM[i] 2. Hardware Configuration Register */
typedef struct _Ifx_GTM_CLS_CCM_HW_CONF2_Bits
{
    __I  Ifx_Strict_32Bit AXIM_ID_WIDTH:5;    /**< \brief [4:0] Number of least significant bits of AXIM_ID sent to the bus (r) */
    __I  Ifx_Strict_32Bit AXIM_PRIV_ACC:1;    /**< \brief [5:5] Privileged AXI master access constant (r) */
    __I  Ifx_Strict_32Bit AXIM_SEC_ACC:1;    /**< \brief [6:6] Secure AXI master access constant (r) */
    __I  Ifx_Strict_32Bit AXIM_POSTED_WRITE:1;    /**< \brief [7:7] Write transaction without response (r) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [8:8] \internal Reserved */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [9:9] \internal Reserved */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [15:10] \internal Reserved */
    __I  Ifx_Strict_32Bit AXIS_DATA_SIZE:1;    /**< \brief [16:16] Defines the data bus width of the AXI slave interface (r) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [17:17] \internal Reserved */
    __I  Ifx_Strict_32Bit AXIM_DATA_SIZE:1;    /**< \brief [18:18] Defines the data bus width of the AXI master interface (r) */
    __I  Ifx_Strict_32Bit :13;             /**< \brief [31:19] \internal Reserved */
} Ifx_GTM_CLS_CCM_HW_CONF2_Bits;

/** \brief CCM[i] Protection Register */
typedef struct _Ifx_GTM_CLS_CCM_PROT_Bits
{
    __IO Ifx_Strict_32Bit CLS_PROT:1;      /**< \brief [0:0] Cluster Protection (rw) */
    __I  Ifx_Strict_32Bit :31;             /**< \brief [31:1] \internal Reserved */
} Ifx_GTM_CLS_CCM_PROT_Bits;

/** \brief CCM[i] TIM AUX Input Source Register */
typedef struct _Ifx_GTM_CLS_CCM_TIM_AUX_IN_SRC_Bits
{
    __IO Ifx_Strict_32Bit SRC_CH0:1;       /**< \brief [0:0] ##suppress##Defines CCM_AUX_IN source of TIM[i] channel 0##suppress## (rw) */
    __IO Ifx_Strict_32Bit SRC_CH1:1;       /**< \brief [1:1] ##suppress##Defines AUX_IN source of TIM[i] channel 1##suppress## (rw) */
    __IO Ifx_Strict_32Bit SRC_CH2:1;       /**< \brief [2:2] ##suppress##Defines CCM_AUX_IN source of TIM[i] channel 2##suppress## (rw) */
    __IO Ifx_Strict_32Bit SRC_CH3:1;       /**< \brief [3:3] ##suppress##Defines CCM_AUX_IN source of TIM[i] channel 3##suppress## (rw) */
    __IO Ifx_Strict_32Bit SRC_CH4:1;       /**< \brief [4:4] ##suppress##Defines CCM_AUX_IN source of TIM[i] channel 4##suppress## (rw) */
    __IO Ifx_Strict_32Bit SRC_CH5:1;       /**< \brief [5:5] ##suppress##Defines CCM_AUX_IN source of TIM[i] channel 5##suppress## (rw) */
    __IO Ifx_Strict_32Bit SRC_CH6:1;       /**< \brief [6:6] ##suppress##Defines CCM_AUX_IN source of TIM[i] channel 6##suppress## (rw) */
    __IO Ifx_Strict_32Bit SRC_CH7:1;       /**< \brief [7:7] ##suppress##Defines CCM_AUX_IN source of TIM[i] channel 7##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit SEL_OUT_N_CH0:1;    /**< \brief [16:16] ##suppress##Use DTM_OUT[q] or DTM_OUT[q]_N signals as CCM_AUX_IN source of TIM[i] channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit SEL_OUT_N_CH1:1;    /**< \brief [17:17] ##suppress##Use DTM_OUT[q] or DTM_OUT[q]_N signals as CCM_AUX_IN source of TIM[i] channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit SEL_OUT_N_CH2:1;    /**< \brief [18:18] ##suppress##Use DTM_OUT[q] or DTM_OUT[q]_N signals as CCM_AUX_IN source of TIM[i] channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit SEL_OUT_N_CH3:1;    /**< \brief [19:19] ##suppress##Use DTM_OUT[q] or DTM_OUT[q]_N signals as CCM_AUX_IN source of TIM[i] channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit SEL_OUT_N_CH4:1;    /**< \brief [20:20] ##suppress##Use DTM_OUT[q] or DTM_OUT[q]_N signals as CCM_AUX_IN source of TIM[i] channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit SEL_OUT_N_CH5:1;    /**< \brief [21:21] ##suppress##Use DTM_OUT[q] or DTM_OUT[q]_N signals as CCM_AUX_IN source of TIM[i] channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit SEL_OUT_N_CH6:1;    /**< \brief [22:22] ##suppress##Use DTM_OUT[q] or DTM_OUT[q]_N signals as CCM_AUX_IN source of TIM[i] channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit SEL_OUT_N_CH7:1;    /**< \brief [23:23] ##suppress##Use DTM_OUT[q] or DTM_OUT[q]_N signals as CCM_AUX_IN source of TIM[i] channel [x]##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_CCM_TIM_AUX_IN_SRC_Bits;

/** \brief CCM[i] TOM Output Register */
typedef struct _Ifx_GTM_CLS_CCM_TOM_OUT_Bits
{
    __I  Ifx_Strict_32Bit TOM_OUT0:1;      /**< \brief [0:0] ##suppress##Output level snapshot of CCM_TOM_OUT channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT1:1;      /**< \brief [1:1] ##suppress##Output level snapshot of CCM_TOM_OUT channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT2:1;      /**< \brief [2:2] ##suppress##Output level snapshot of CCM_TOM_OUT channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT3:1;      /**< \brief [3:3] ##suppress##Output level snapshot of CCM_TOM_OUT channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT4:1;      /**< \brief [4:4] ##suppress##Output level snapshot of CCM_TOM_OUT channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT5:1;      /**< \brief [5:5] ##suppress##Output level snapshot of CCM_TOM_OUT channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT6:1;      /**< \brief [6:6] ##suppress##Output level snapshot of CCM_TOM_OUT channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT7:1;      /**< \brief [7:7] ##suppress##Output level snapshot of CCM_TOM_OUT channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT8:1;      /**< \brief [8:8] ##suppress##Output level snapshot of CCM_TOM_OUT channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT9:1;      /**< \brief [9:9] ##suppress##Output level snapshot of CCM_TOM_OUT channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT10:1;     /**< \brief [10:10] ##suppress##Output level snapshot of CCM_TOM_OUT channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT11:1;     /**< \brief [11:11] ##suppress##Output level snapshot of CCM_TOM_OUT channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT12:1;     /**< \brief [12:12] ##suppress##Output level snapshot of CCM_TOM_OUT channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT13:1;     /**< \brief [13:13] ##suppress##Output level snapshot of CCM_TOM_OUT channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT14:1;     /**< \brief [14:14] ##suppress##Output level snapshot of CCM_TOM_OUT channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT15:1;     /**< \brief [15:15] ##suppress##Output level snapshot of CCM_TOM_OUT channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT_N0:1;    /**< \brief [16:16] ##suppress##Output level snapshot of CCM_TOM_OUT_N channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT_N1:1;    /**< \brief [17:17] ##suppress##Output level snapshot of CCM_TOM_OUT_N channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT_N2:1;    /**< \brief [18:18] ##suppress##Output level snapshot of CCM_TOM_OUT_N channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT_N3:1;    /**< \brief [19:19] ##suppress##Output level snapshot of CCM_TOM_OUT_N channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT_N4:1;    /**< \brief [20:20] ##suppress##Output level snapshot of CCM_TOM_OUT_N channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT_N5:1;    /**< \brief [21:21] ##suppress##Output level snapshot of CCM_TOM_OUT_N channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT_N6:1;    /**< \brief [22:22] ##suppress##Output level snapshot of CCM_TOM_OUT_N channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT_N7:1;    /**< \brief [23:23] ##suppress##Output level snapshot of CCM_TOM_OUT_N channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT_N8:1;    /**< \brief [24:24] ##suppress##Output level snapshot of CCM_TOM_OUT_N channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT_N9:1;    /**< \brief [25:25] ##suppress##Output level snapshot of CCM_TOM_OUT_N channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT_N10:1;    /**< \brief [26:26] ##suppress##Output level snapshot of CCM_TOM_OUT_N channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT_N11:1;    /**< \brief [27:27] ##suppress##Output level snapshot of CCM_TOM_OUT_N channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT_N12:1;    /**< \brief [28:28] ##suppress##Output level snapshot of CCM_TOM_OUT_N channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT_N13:1;    /**< \brief [29:29] ##suppress##Output level snapshot of CCM_TOM_OUT_N channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT_N14:1;    /**< \brief [30:30] ##suppress##Output level snapshot of CCM_TOM_OUT_N channel [x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_OUT_N15:1;    /**< \brief [31:31] ##suppress##Output level snapshot of CCM_TOM_OUT_N channel [x]##suppress## (rh) */
} Ifx_GTM_CLS_CCM_TOM_OUT_Bits;

/** \brief CDTM[i]_DTM[d] channel control register 1 */
typedef struct _Ifx_GTM_CLS_CDTM_DTM_CH_CTRL1_Bits
{
    __IO Ifx_Strict_32Bit O1SEL_0:1;       /**< \brief [0:0] Output 1 select channel 0 (rw) */
    __IO Ifx_Strict_32Bit I1SEL_0:1;       /**< \brief [1:1] Input 1 select channel 0 (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [2:2] \internal Reserved */
    __IO Ifx_Strict_32Bit SWAP_0:1;        /**< \brief [3:3] ##suppress##Swap outputs DTM_OUT0[0:0] of instance d and DTM_OUT1[0:0] of instance d (before final output register)##suppress## (rw) */
    __IO Ifx_Strict_32Bit O1F_0:2;         /**< \brief [5:4] Output 1 function channel 0 (rw) */
    __IO Ifx_Strict_32Bit XDT_EN_0_1:1;    /**< \brief [6:6] Cross dead-time enable on channel 0 and 1 (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [7:7] \internal Reserved */
    __IO Ifx_Strict_32Bit O1SEL_1:1;       /**< \brief [8:8] Output 1 select channel 1 (rw) */
    __IO Ifx_Strict_32Bit I1SEL_1:1;       /**< \brief [9:9] Input 1 select channel 1 (rw) */
    __IO Ifx_Strict_32Bit SH_EN_1:1;       /**< \brief [10:10] Shift enable channel 1 (rw) */
    __IO Ifx_Strict_32Bit SWAP_1:1;        /**< \brief [11:11] ##suppress##Swap outputs DTM_OUT0[1:1] of instance d and DTM_OUT1[1:1] of instance d (before final output register)##suppress## (rw) */
    __IO Ifx_Strict_32Bit O1F_1:2;         /**< \brief [13:12] Output 1 function channel 1 (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [15:14] \internal Reserved */
    __IO Ifx_Strict_32Bit O1SEL_2:1;       /**< \brief [16:16] Output 1 select channel 2 (rw) */
    __IO Ifx_Strict_32Bit I1SEL_2:1;       /**< \brief [17:17] Input 1 select channel 2 (rw) */
    __IO Ifx_Strict_32Bit SH_EN_2:1;       /**< \brief [18:18] Shift enable channel 2 (rw) */
    __IO Ifx_Strict_32Bit SWAP_2:1;        /**< \brief [19:19] ##suppress##Swap outputs DTM_OUT0[2:2] of instance d and DTM_OUT1[2:2] of instance d (before final output register)##suppress## (rw) */
    __IO Ifx_Strict_32Bit O1F_2:2;         /**< \brief [21:20] Output 1 function channel 2 (rw) */
    __IO Ifx_Strict_32Bit XDT_EN_2_3:1;    /**< \brief [22:22] Cross dead-time enable on channel 2 and 3 (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [23:23] \internal Reserved */
    __IO Ifx_Strict_32Bit O1SEL_3:1;       /**< \brief [24:24] Output 1 select channel 3 (rw) */
    __IO Ifx_Strict_32Bit I1SEL_3:1;       /**< \brief [25:25] Input 1 select channel 3 (rw) */
    __IO Ifx_Strict_32Bit SH_EN_3:1;       /**< \brief [26:26] Shift enable channel 3 (rw) */
    __IO Ifx_Strict_32Bit SWAP_3:1;        /**< \brief [27:27] ##suppress##Swap outputs DTM_OUT0[3:3] of instance d and DTM_OUT1[3:3] of instance d (before final output register)##suppress## (rw) */
    __IO Ifx_Strict_32Bit O1F_3:2;         /**< \brief [29:28] Output 1 function channel 3 (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [31:30] \internal Reserved */
} Ifx_GTM_CLS_CDTM_DTM_CH_CTRL1_Bits;

/** \brief CDTM[i]_DTM[d] channel control register 2 */
typedef struct _Ifx_GTM_CLS_CDTM_DTM_CH_CTRL2_Bits
{
    __IO Ifx_Strict_32Bit POL0_0:1;        /**< \brief [0:0] Polarity on output 0 channel 0 (rwh) */
    __IO Ifx_Strict_32Bit OC0_0:1;         /**< \brief [1:1] Output 0 control channel 0 (rwh) */
    __IO Ifx_Strict_32Bit SL0_0:1;         /**< \brief [2:2] Signal level on output 0 channel 0 (rwh) */
    __IO Ifx_Strict_32Bit DT0_0:1;         /**< \brief [3:3] Dead-time path enable on output 0 channel 0 (rwh) */
    __IO Ifx_Strict_32Bit POL1_0:1;        /**< \brief [4:4] Polarity on output 1 channel 0 (rwh) */
    __IO Ifx_Strict_32Bit OC1_0:1;         /**< \brief [5:5] Output 1 control channel 0 (rwh) */
    __IO Ifx_Strict_32Bit SL1_0:1;         /**< \brief [6:6] Signal level on output 1 channel 0 (rwh) */
    __IO Ifx_Strict_32Bit DT1_0:1;         /**< \brief [7:7] Dead-time path enable on output 1 channel 0 (rwh) */
    __IO Ifx_Strict_32Bit POL0_1:1;        /**< \brief [8:8] Polarity on output 0 channel 1 (rwh) */
    __IO Ifx_Strict_32Bit OC0_1:1;         /**< \brief [9:9] Output 0 control channel 1 (rwh) */
    __IO Ifx_Strict_32Bit SL0_1:1;         /**< \brief [10:10] Signal level on output 0 channel 1 (rwh) */
    __IO Ifx_Strict_32Bit DT0_1:1;         /**< \brief [11:11] Dead-time path enable on output 0 channel 1 (rwh) */
    __IO Ifx_Strict_32Bit POL1_1:1;        /**< \brief [12:12] Polarity on output 1 channel 1 (rwh) */
    __IO Ifx_Strict_32Bit OC1_1:1;         /**< \brief [13:13] Output 1 control channel 1 (rwh) */
    __IO Ifx_Strict_32Bit SL1_1:1;         /**< \brief [14:14] Signal level on output 1 channel 1 (rwh) */
    __IO Ifx_Strict_32Bit DT1_1:1;         /**< \brief [15:15] Dead-time path enable on output 1 channel 1 (rwh) */
    __IO Ifx_Strict_32Bit POL0_2:1;        /**< \brief [16:16] Polarity on output 0 channel 2 (rwh) */
    __IO Ifx_Strict_32Bit OC0_2:1;         /**< \brief [17:17] Output 0 control channel 2 (rwh) */
    __IO Ifx_Strict_32Bit SL0_2:1;         /**< \brief [18:18] Signal level on output 0 channel 2 (rwh) */
    __IO Ifx_Strict_32Bit DT0_2:1;         /**< \brief [19:19] Dead-time path enable on output 0 channel 2 (rwh) */
    __IO Ifx_Strict_32Bit POL1_2:1;        /**< \brief [20:20] Polarity on output 1 channel 2 (rwh) */
    __IO Ifx_Strict_32Bit OC1_2:1;         /**< \brief [21:21] Output 1 control channel 2 (rwh) */
    __IO Ifx_Strict_32Bit SL1_2:1;         /**< \brief [22:22] Signal level on output 1 channel 2 (rwh) */
    __IO Ifx_Strict_32Bit DT1_2:1;         /**< \brief [23:23] Dead-time path enable on output 1 channel 2 (rwh) */
    __IO Ifx_Strict_32Bit POL0_3:1;        /**< \brief [24:24] Polarity on output 0 channel 3 (rwh) */
    __IO Ifx_Strict_32Bit OC0_3:1;         /**< \brief [25:25] Output 0 control channel 3 (rwh) */
    __IO Ifx_Strict_32Bit SL0_3:1;         /**< \brief [26:26] Signal level on output 0 channel 3 (rwh) */
    __IO Ifx_Strict_32Bit DT0_3:1;         /**< \brief [27:27] Dead-time path enable on output 0 channel 3 (rwh) */
    __IO Ifx_Strict_32Bit POL1_3:1;        /**< \brief [28:28] Polarity on output 1 channel 3 (rwh) */
    __IO Ifx_Strict_32Bit OC1_3:1;         /**< \brief [29:29] Output 1 control channel 3 (rwh) */
    __IO Ifx_Strict_32Bit SL1_3:1;         /**< \brief [30:30] Signal level on output 1 channel 3 (rwh) */
    __IO Ifx_Strict_32Bit DT1_3:1;         /**< \brief [31:31] Dead-time path enable on output 1 channel 3 (rwh) */
} Ifx_GTM_CLS_CDTM_DTM_CH_CTRL2_Bits;

/** \brief CDTM[i] DTM[j] channel control register 2 shadow */
typedef struct _Ifx_GTM_CLS_CDTM_DTM_CH_CTRL2_SR_Bits
{
    __IO Ifx_Strict_32Bit POL0_0_SR:1;     /**< \brief [0:0] Polarity on output 0 channel 0 shadow register (rw) */
    __IO Ifx_Strict_32Bit OC0_0_SR:1;      /**< \brief [1:1] Output 0 control channel 0 shadow register (rw) */
    __IO Ifx_Strict_32Bit SL0_0_SR:1;      /**< \brief [2:2] Signal level on output 0 channel 0 shadow register (rwh) */
    __IO Ifx_Strict_32Bit DT0_0_SR:1;      /**< \brief [3:3] Dead-time path enable on output 0 channel 0 shadow register (rw) */
    __IO Ifx_Strict_32Bit POL1_0_SR:1;     /**< \brief [4:4] Polarity on output 1 channel 0 shadow register (rw) */
    __IO Ifx_Strict_32Bit OC1_0_SR:1;      /**< \brief [5:5] Output 1 control channel 0 shadow register (rw) */
    __IO Ifx_Strict_32Bit SL1_0_SR:1;      /**< \brief [6:6] Signal level on output 1 channel 0 shadow register (rwh) */
    __IO Ifx_Strict_32Bit DT1_0_SR:1;      /**< \brief [7:7] Dead-time path enable on output 1 channel 0 shadow register (rw) */
    __IO Ifx_Strict_32Bit POL0_1_SR:1;     /**< \brief [8:8] Polarity on output 0 channel 1 shadow register (rw) */
    __IO Ifx_Strict_32Bit OC0_1_SR:1;      /**< \brief [9:9] Output 0 control channel 1 shadow register (rw) */
    __IO Ifx_Strict_32Bit SL0_1_SR:1;      /**< \brief [10:10] Signal level on output 0 channel 1 shadow register (rwh) */
    __IO Ifx_Strict_32Bit DT0_1_SR:1;      /**< \brief [11:11] Dead-time path enable on output 0 channel 1 shadow register (rw) */
    __IO Ifx_Strict_32Bit POL1_1_SR:1;     /**< \brief [12:12] Polarity on output 1 channel 1 shadow register (rw) */
    __IO Ifx_Strict_32Bit OC1_1_SR:1;      /**< \brief [13:13] Output 1 control channel 1 shadow register (rw) */
    __IO Ifx_Strict_32Bit SL1_1_SR:1;      /**< \brief [14:14] Signal level on output 1 channel 1 shadow register (rwh) */
    __IO Ifx_Strict_32Bit DT1_1_SR:1;      /**< \brief [15:15] Dead-time path enable on output 1 channel 1 shadow register (rw) */
    __IO Ifx_Strict_32Bit POL0_2_SR:1;     /**< \brief [16:16] Polarity on output 0 channel 2 shadow register (rw) */
    __IO Ifx_Strict_32Bit OC0_2_SR:1;      /**< \brief [17:17] Output 0 control channel 2 shadow register (rw) */
    __IO Ifx_Strict_32Bit SL0_2_SR:1;      /**< \brief [18:18] Signal level on output 0 channel 2 shadow register (rwh) */
    __IO Ifx_Strict_32Bit DT0_2_SR:1;      /**< \brief [19:19] Dead-time path enable on output 0 channel 2 shadow register (rw) */
    __IO Ifx_Strict_32Bit POL1_2_SR:1;     /**< \brief [20:20] Polarity on output 1 channel 2 shadow register (rw) */
    __IO Ifx_Strict_32Bit OC1_2_SR:1;      /**< \brief [21:21] Output 1 control channel 2 shadow register (rw) */
    __IO Ifx_Strict_32Bit SL1_2_SR:1;      /**< \brief [22:22] Signal level on output 1 channel 2 shadow register (rwh) */
    __IO Ifx_Strict_32Bit DT1_2_SR:1;      /**< \brief [23:23] Dead-time path enable on output 1 channel 2 shadow register (rw) */
    __IO Ifx_Strict_32Bit POL0_3_SR:1;     /**< \brief [24:24] Polarity on output 0 channel 3 shadow register (rw) */
    __IO Ifx_Strict_32Bit OC0_3_SR:1;      /**< \brief [25:25] Output 0 control channel 3 shadow register (rw) */
    __IO Ifx_Strict_32Bit SL0_3_SR:1;      /**< \brief [26:26] Signal level on output 0 channel 3 shadow register (rwh) */
    __IO Ifx_Strict_32Bit DT0_3_SR:1;      /**< \brief [27:27] Dead-time path enable on output 0 channel 3 shadow register (rw) */
    __IO Ifx_Strict_32Bit POL1_3_SR:1;     /**< \brief [28:28] Polarity on output 1 channel 3 shadow register (rw) */
    __IO Ifx_Strict_32Bit OC1_3_SR:1;      /**< \brief [29:29] Output 1 control channel 3 shadow register (rw) */
    __IO Ifx_Strict_32Bit SL1_3_SR:1;      /**< \brief [30:30] Signal level on output 1 channel 3 shadow register (rwh) */
    __IO Ifx_Strict_32Bit DT1_3_SR:1;      /**< \brief [31:31] Dead-time path enable on output 1 channel 3 shadow register (rw) */
} Ifx_GTM_CLS_CDTM_DTM_CH_CTRL2_SR_Bits;

/** \brief CDTM[i]_DTM[d] channel control register 3 */
typedef struct _Ifx_GTM_CLS_CDTM_DTM_CH_CTRL3_Bits
{
    __IO Ifx_Strict_32Bit CII0:1;          /**< \brief [0:0] Combinational input invert channel 0 (rw) */
    __IO Ifx_Strict_32Bit CIS0:1;          /**< \brief [1:1] Combinational input select channel 0 (rw) */
    __IO Ifx_Strict_32Bit TSEL0_0:1;       /**< \brief [2:2] Input selection for dead-time / edge trigger generation (rw) */
    __IO Ifx_Strict_32Bit TSEL1_0:1;       /**< \brief [3:3] Input selection combinational logic path (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [7:4] \internal Reserved */
    __IO Ifx_Strict_32Bit CII1:1;          /**< \brief [8:8] Combinational input invert channel 1 (rw) */
    __IO Ifx_Strict_32Bit CIS1:1;          /**< \brief [9:9] Combinational input select channel 1 (rw) */
    __IO Ifx_Strict_32Bit TSEL0_1:1;       /**< \brief [10:10] Input selection for dead-time / edge trigger generation (rw) */
    __IO Ifx_Strict_32Bit TSEL1_1:1;       /**< \brief [11:11] Input selection combinational logic path (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [15:12] \internal Reserved */
    __IO Ifx_Strict_32Bit CII2:1;          /**< \brief [16:16] Combinational input invert channel 2 (rw) */
    __IO Ifx_Strict_32Bit CIS2:1;          /**< \brief [17:17] Combinational input select channel 2 (rw) */
    __IO Ifx_Strict_32Bit TSEL0_2:1;       /**< \brief [18:18] Input selection for dead-time / edge trigger generation (rw) */
    __IO Ifx_Strict_32Bit TSEL1_2:1;       /**< \brief [19:19] Input selection combinational logic path (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [23:20] \internal Reserved */
    __IO Ifx_Strict_32Bit CII3:1;          /**< \brief [24:24] Combinational input invert channel 3 (rw) */
    __IO Ifx_Strict_32Bit CIS3:1;          /**< \brief [25:25] Combinational input select channel 3 (rw) */
    __IO Ifx_Strict_32Bit TSEL0_3:1;       /**< \brief [26:26] Input selection for dead-time / edge trigger generation (rw) */
    __IO Ifx_Strict_32Bit TSEL1_3:1;       /**< \brief [27:27] Input selection combinational logic path (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_GTM_CLS_CDTM_DTM_CH_CTRL3_Bits;

/** \brief CDTM[i]_DTM[d] channel [x] dead-time reload values */
typedef struct _Ifx_GTM_CLS_CDTM_DTM_CH_DTV_Bits
{
    __IO Ifx_Strict_32Bit RELRISE:13;      /**< \brief [12:0] Reload value for rising edge dead-time (rwh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [15:13] \internal Reserved */
    __IO Ifx_Strict_32Bit RELFALL:13;      /**< \brief [28:16] Reload value for falling edge dead-time (rwh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [30:29] \internal Reserved */
    __IO Ifx_Strict_32Bit HRES:1;          /**< \brief [31:31] ##suppress##high-resolution PWM support##suppress## (rw) */
} Ifx_GTM_CLS_CDTM_DTM_CH_DTV_Bits;

/** \brief CDTM[i]_DTM[d] channel [x] dead-time shadow values */
typedef struct _Ifx_GTM_CLS_CDTM_DTM_CH_DTV_SR_Bits
{
    __IO Ifx_Strict_32Bit RELRISE_SR:13;    /**< \brief [12:0] Shadow value for rising edge dead-time (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [13:13] \internal Reserved */
    __IO Ifx_Strict_32Bit RELRISE_UPD_FE0RE1:1;    /**< \brief [14:14] ##suppress##Control if falling edge or rising edge triggers update of CDTM[i]_DTM[d]_CH[x]_DTV.RELRISE##suppress## (rw) */
    __IO Ifx_Strict_32Bit RELRISE_UPD_EN:1;    /**< \brief [15:15] ##suppress##Control bit to enable update of CDTM[i]_DTM[d]_CH[x]_DTV.RELRISE##suppress## (rw) */
    __IO Ifx_Strict_32Bit RELFALL_SR:13;    /**< \brief [28:16] Shadow value for falling edge dead-time (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [29:29] \internal Reserved */
    __IO Ifx_Strict_32Bit RELFALL_UPD_FE0RE1:1;    /**< \brief [30:30] ##suppress##Control if falling edge or rising edge triggers update of CDTM[i]_DTM[d]_CH[x]_DTV.RELFALL##suppress## (rw) */
    __IO Ifx_Strict_32Bit RELFALL_UPD_EN:1;    /**< \brief [31:31] ##suppress##Control bit to enable update of CDTM[i]_DTM[d]_CH[x]_DTV.RELFALL##suppress## (rw) */
} Ifx_GTM_CLS_CDTM_DTM_CH_DTV_SR_Bits;

/** \brief CDTM[i]_DTM[d] channel shadow register */
typedef struct _Ifx_GTM_CLS_CDTM_DTM_CH_SR_Bits
{
    __IO Ifx_Strict_32Bit SL0_0_SR_SR:1;    /**< \brief [0:0] ##suppress##Shadow register for bit CDTM[i]_DTM[d]_CH_CTRL2_SR.SL0_0_SR##suppress## (rw) */
    __IO Ifx_Strict_32Bit SL1_0_SR_SR:1;    /**< \brief [1:1] ##suppress##Shadow register for bit CDTM[i]_DTM[d]_CH_CTRL2_SR.SL1_0_SR##suppress## (rw) */
    __IO Ifx_Strict_32Bit SL0_1_SR_SR:1;    /**< \brief [2:2] ##suppress##Shadow register for bit CDTM[i]_DTM[d]_CH_CTRL2_SR.SL0_1_SR##suppress## (rw) */
    __IO Ifx_Strict_32Bit SL1_1_SR_SR:1;    /**< \brief [3:3] ##suppress##Shadow register for bit CDTM[i]_DTM[d]_CH_CTRL2_SR.SL1_1_SR##suppress## (rw) */
    __IO Ifx_Strict_32Bit SL0_2_SR_SR:1;    /**< \brief [4:4] ##suppress##Shadow register for bit CDTM[i]_DTM[d]_CH_CTRL2_SR.SL0_2_SR##suppress## (rw) */
    __IO Ifx_Strict_32Bit SL1_2_SR_SR:1;    /**< \brief [5:5] ##suppress##Shadow register for bit CDTM[i]_DTM[d]_CH_CTRL2_SR.SL1_2_SR##suppress## (rw) */
    __IO Ifx_Strict_32Bit SL0_3_SR_SR:1;    /**< \brief [6:6] ##suppress##Shadow register for bit CDTM[i]_DTM[d]_CH_CTRL2_SR.SL0_3_SR##suppress## (rw) */
    __IO Ifx_Strict_32Bit SL1_3_SR_SR:1;    /**< \brief [7:7] ##suppress##Shadow register for bit CDTM[i]_DTM[d]_CH_CTRL2_SR.SL1_3_SR##suppress## (rw) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_CLS_CDTM_DTM_CH_SR_Bits;

/** \brief CDTM[i]_DTM[d] global configuration and control register */
typedef struct _Ifx_GTM_CLS_CDTM_DTM_CTRL_Bits
{
    __IO Ifx_Strict_32Bit CLK_SEL:2;       /**< \brief [1:0] Clock resolution selection (rw) */
    __IO Ifx_Strict_32Bit DTM_SEL:2;       /**< \brief [3:2] ##suppress##Select DTM update and PSU_SHUT_OFF reset signal##suppress## (rw) */
    __IO Ifx_Strict_32Bit UPD_MODE:3;      /**< \brief [6:4] Update mode (rw) */
    __IO Ifx_Strict_32Bit CH_SHUTOFF_EN:1;    /**< \brief [7:7] Individual shutoff feature enable (rw) */
    __IO Ifx_Strict_32Bit SR_UPD_EN:1;     /**< \brief [8:8] Shadow register update enable (rw) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [15:9] \internal Reserved */
    __IO Ifx_Strict_32Bit SHUT_OFF_RST:1;    /**< \brief [16:16] Shut off reset (rw) */
    __I  Ifx_Strict_32Bit :15;             /**< \brief [31:17] \internal Reserved */
} Ifx_GTM_CLS_CDTM_DTM_CTRL_Bits;

/** \brief CDTM[i]_DTM[d] global configuration and control register 2 */
typedef struct _Ifx_GTM_CLS_CDTM_DTM_CTRL2_Bits
{
    __IO Ifx_Strict_32Bit SHUTOFF_SEL_0:3;    /**< \brief [2:0] Channel 0: Select input signal to be used as shut off signal. (rw) */
    __IO Ifx_Strict_32Bit SHUTOFF_POL_0:1;    /**< \brief [3:3] Channel 0: Configure if the selected shut off input signal used as shut off output signal is inverted or not. (rw) */
    __IO Ifx_Strict_32Bit UPD_MODE_0:2;    /**< \brief [5:4] ##suppress##Channel 0: Control the update mode of the internal SHUTOFF_SYNC_0 signal.##suppress## (rw) */
    __IO Ifx_Strict_32Bit SHUT_OFF_RST_0:1;    /**< \brief [6:6] ##suppress##Channel 0: Clear of internal signal SHUTOFF_SYNC_0 if selected as control source.##suppress## (rw) */
    __IO Ifx_Strict_32Bit WR_EN_0:1;       /**< \brief [7:7] Channel 0: Write enable of Bitfields (rw) */
    __IO Ifx_Strict_32Bit SHUTOFF_SEL_1:3;    /**< \brief [10:8] Channel 1: Select input signal to be used as shut off signal. (rw) */
    __IO Ifx_Strict_32Bit SHUTOFF_POL_1:1;    /**< \brief [11:11] Channel 1: Configure if the selected shut off input signal used as shut off output signal is inverted or not. (rw) */
    __IO Ifx_Strict_32Bit UPD_MODE_1:2;    /**< \brief [13:12] ##suppress##Channel 1: Control the update mode of the internal SHUTOFF_SYNC_1 signal.##suppress## (rw) */
    __IO Ifx_Strict_32Bit SHUT_OFF_RST_1:1;    /**< \brief [14:14] ##suppress##Channel 1: Clear of internal signal SHUTOFF_SYNC_1 if selected as control source.##suppress## (rw) */
    __IO Ifx_Strict_32Bit WR_EN_1:1;       /**< \brief [15:15] Channel 1: Write enable of Bitfields (rw) */
    __IO Ifx_Strict_32Bit SHUTOFF_SEL_2:3;    /**< \brief [18:16] Channel 2: Select input signal to be used as shut off signal. (rw) */
    __IO Ifx_Strict_32Bit SHUTOFF_POL_2:1;    /**< \brief [19:19] Channel 2: Configure if the selected shut off input signal used as shut off output signal is inverted or not. (rw) */
    __IO Ifx_Strict_32Bit UPD_MODE_2:2;    /**< \brief [21:20] ##suppress##Channel 2: Control the update mode of the internal SHUTOFF_SYNC_2 signal.##suppress## (rw) */
    __IO Ifx_Strict_32Bit SHUT_OFF_RST_2:1;    /**< \brief [22:22] ##suppress##Channel 2: Clear of internal signal SHUTOFF_SYNC_2 if selected as control source.##suppress## (rw) */
    __IO Ifx_Strict_32Bit WR_EN_2:1;       /**< \brief [23:23] Channel 2: Write enable of Bitfields (rw) */
    __IO Ifx_Strict_32Bit SHUTOFF_SEL_3:3;    /**< \brief [26:24] Channel 3: Select input signal to be used as shut off signal. (rw) */
    __IO Ifx_Strict_32Bit SHUTOFF_POL_3:1;    /**< \brief [27:27] Channel 3: Configure if the selected shut off input signal used as shut off output signal is inverted or not. (rw) */
    __IO Ifx_Strict_32Bit UPD_MODE_3:2;    /**< \brief [29:28] ##suppress##Channel 3: Control the update mode of the internal SHUTOFF_SYNC_3 signal.##suppress## (rw) */
    __IO Ifx_Strict_32Bit SHUT_OFF_RST_3:1;    /**< \brief [30:30] ##suppress##Channel 3: Clear of internal signal SHUTOFF_SYNC_3 if selected as control source.##suppress## (rw) */
    __IO Ifx_Strict_32Bit WR_EN_3:1;       /**< \brief [31:31] Channel 3: Write enable of Bitfields (rw) */
} Ifx_GTM_CLS_CDTM_DTM_CTRL2_Bits;

/** \brief CDTM[i]_DTM[d] phase shift unit configuration and control register */
typedef struct _Ifx_GTM_CLS_CDTM_DTM_PS_CTRL_Bits
{
    __IO Ifx_Strict_32Bit RELBLK:10;       /**< \brief [9:0] Reload value blanking window (rw) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [15:10] \internal Reserved */
    __IO Ifx_Strict_32Bit PSU_IN_SEL:1;    /**< \brief [16:16] PSU input select (rw) */
    __IO Ifx_Strict_32Bit IN_POL:1;        /**< \brief [17:17] Input polarity (rw) */
    __IO Ifx_Strict_32Bit TIM_SEL:1;       /**< \brief [18:18] ##suppress##TIM input select##suppress## (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [19:19] \internal Reserved */
    __IO Ifx_Strict_32Bit SHIFT_SEL:2;     /**< \brief [21:20] Shift select (rw) */
    __I  Ifx_Strict_32Bit :10;             /**< \brief [31:22] \internal Reserved */
} Ifx_GTM_CLS_CDTM_DTM_PS_CTRL_Bits;

/** \brief CMP error interrupt enable register */
typedef struct _Ifx_GTM_CLS_CMP_EIRQ_EN_Bits
{
    __IO Ifx_Strict_32Bit ABWC0_EN_EIRQ:1;    /**< \brief [0:0] ##suppress##Enable ABWC comparator [c] interrupt source for CMP_EIRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit ABWC1_EN_EIRQ:1;    /**< \brief [1:1] ##suppress##Enable ABWC comparator [c] interrupt source for CMP_EIRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit ABWC2_EN_EIRQ:1;    /**< \brief [2:2] ##suppress##Enable ABWC comparator [c] interrupt source for CMP_EIRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit ABWC3_EN_EIRQ:1;    /**< \brief [3:3] ##suppress##Enable ABWC comparator [c] interrupt source for CMP_EIRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit ABWC4_EN_EIRQ:1;    /**< \brief [4:4] ##suppress##Enable ABWC comparator [c] interrupt source for CMP_EIRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit ABWC5_EN_EIRQ:1;    /**< \brief [5:5] ##suppress##Enable ABWC comparator [c] interrupt source for CMP_EIRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit ABWC6_EN_EIRQ:1;    /**< \brief [6:6] ##suppress##Enable ABWC comparator [c] interrupt source for CMP_EIRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit ABWC7_EN_EIRQ:1;    /**< \brief [7:7] ##suppress##Enable ABWC comparator [c] interrupt source for CMP_EIRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit ABWC8_EN_EIRQ:1;    /**< \brief [8:8] ##suppress##Enable ABWC comparator [c] interrupt source for CMP_EIRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit ABWC9_EN_EIRQ:1;    /**< \brief [9:9] ##suppress##Enable ABWC comparator [c] interrupt source for CMP_EIRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit ABWC10_EN_EIRQ:1;    /**< \brief [10:10] ##suppress##Enable ABWC comparator [c] interrupt source for CMP_EIRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit ABWC11_EN_EIRQ:1;    /**< \brief [11:11] ##suppress##Enable ABWC comparator [c] interrupt source for CMP_EIRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TBWC0_EN_EIRQ:1;    /**< \brief [12:12] ##suppress##Enable TBWC comparator [c] interrupt source for CMP_EIRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TBWC1_EN_EIRQ:1;    /**< \brief [13:13] ##suppress##Enable TBWC comparator [c] interrupt source for CMP_EIRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TBWC2_EN_EIRQ:1;    /**< \brief [14:14] ##suppress##Enable TBWC comparator [c] interrupt source for CMP_EIRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TBWC3_EN_EIRQ:1;    /**< \brief [15:15] ##suppress##Enable TBWC comparator [c] interrupt source for CMP_EIRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TBWC4_EN_EIRQ:1;    /**< \brief [16:16] ##suppress##Enable TBWC comparator [c] interrupt source for CMP_EIRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TBWC5_EN_EIRQ:1;    /**< \brief [17:17] ##suppress##Enable TBWC comparator [c] interrupt source for CMP_EIRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TBWC6_EN_EIRQ:1;    /**< \brief [18:18] ##suppress##Enable TBWC comparator [c] interrupt source for CMP_EIRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TBWC7_EN_EIRQ:1;    /**< \brief [19:19] ##suppress##Enable TBWC comparator [c] interrupt source for CMP_EIRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TBWC8_EN_EIRQ:1;    /**< \brief [20:20] ##suppress##Enable TBWC comparator [c] interrupt source for CMP_EIRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TBWC9_EN_EIRQ:1;    /**< \brief [21:21] ##suppress##Enable TBWC comparator [c] interrupt source for CMP_EIRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TBWC10_EN_EIRQ:1;    /**< \brief [22:22] ##suppress##Enable TBWC comparator [c] interrupt source for CMP_EIRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TBWC11_EN_EIRQ:1;    /**< \brief [23:23] ##suppress##Enable TBWC comparator [c] interrupt source for CMP_EIRQ line##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_CMP_EIRQ_EN_Bits;

/** \brief CMP comparator enable register */
typedef struct _Ifx_GTM_CLS_CMP_EN_Bits
{
    __IO Ifx_Strict_32Bit ABWC0_EN:1;      /**< \brief [0:0] Enable comparator channel [c] in ABWC (rw) */
    __IO Ifx_Strict_32Bit ABWC1_EN:1;      /**< \brief [1:1] Enable comparator channel [c] in ABWC (rw) */
    __IO Ifx_Strict_32Bit ABWC2_EN:1;      /**< \brief [2:2] Enable comparator channel [c] in ABWC (rw) */
    __IO Ifx_Strict_32Bit ABWC3_EN:1;      /**< \brief [3:3] Enable comparator channel [c] in ABWC (rw) */
    __IO Ifx_Strict_32Bit ABWC4_EN:1;      /**< \brief [4:4] Enable comparator channel [c] in ABWC (rw) */
    __IO Ifx_Strict_32Bit ABWC5_EN:1;      /**< \brief [5:5] Enable comparator channel [c] in ABWC (rw) */
    __IO Ifx_Strict_32Bit ABWC6_EN:1;      /**< \brief [6:6] Enable comparator channel [c] in ABWC (rw) */
    __IO Ifx_Strict_32Bit ABWC7_EN:1;      /**< \brief [7:7] Enable comparator channel [c] in ABWC (rw) */
    __IO Ifx_Strict_32Bit ABWC8_EN:1;      /**< \brief [8:8] Enable comparator channel [c] in ABWC (rw) */
    __IO Ifx_Strict_32Bit ABWC9_EN:1;      /**< \brief [9:9] Enable comparator channel [c] in ABWC (rw) */
    __IO Ifx_Strict_32Bit ABWC10_EN:1;     /**< \brief [10:10] Enable comparator channel [c] in ABWC (rw) */
    __IO Ifx_Strict_32Bit ABWC11_EN:1;     /**< \brief [11:11] Enable comparator channel [c] in ABWC (rw) */
    __IO Ifx_Strict_32Bit TBWC0_EN:1;      /**< \brief [12:12] Enable comparator channel [c] in TBWC (rw) */
    __IO Ifx_Strict_32Bit TBWC1_EN:1;      /**< \brief [13:13] Enable comparator channel [c] in TBWC (rw) */
    __IO Ifx_Strict_32Bit TBWC2_EN:1;      /**< \brief [14:14] Enable comparator channel [c] in TBWC (rw) */
    __IO Ifx_Strict_32Bit TBWC3_EN:1;      /**< \brief [15:15] Enable comparator channel [c] in TBWC (rw) */
    __IO Ifx_Strict_32Bit TBWC4_EN:1;      /**< \brief [16:16] Enable comparator channel [c] in TBWC (rw) */
    __IO Ifx_Strict_32Bit TBWC5_EN:1;      /**< \brief [17:17] Enable comparator channel [c] in TBWC (rw) */
    __IO Ifx_Strict_32Bit TBWC6_EN:1;      /**< \brief [18:18] Enable comparator channel [c] in TBWC (rw) */
    __IO Ifx_Strict_32Bit TBWC7_EN:1;      /**< \brief [19:19] Enable comparator channel [c] in TBWC (rw) */
    __IO Ifx_Strict_32Bit TBWC8_EN:1;      /**< \brief [20:20] Enable comparator channel [c] in TBWC (rw) */
    __IO Ifx_Strict_32Bit TBWC9_EN:1;      /**< \brief [21:21] Enable comparator channel [c] in TBWC (rw) */
    __IO Ifx_Strict_32Bit TBWC10_EN:1;     /**< \brief [22:22] Enable comparator channel [c] in TBWC (rw) */
    __IO Ifx_Strict_32Bit TBWC11_EN:1;     /**< \brief [23:23] Enable comparator channel [c] in TBWC (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_CMP_EN_Bits;

/** \brief CMP interrupt enable register */
typedef struct _Ifx_GTM_CLS_CMP_IRQ_EN_Bits
{
    __IO Ifx_Strict_32Bit ABWC0_EN_IRQ:1;    /**< \brief [0:0] ##suppress##Enable CMP_IRQ_NOTIFY.ABWC[c] interrupt source for CMP_IRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit ABWC1_EN_IRQ:1;    /**< \brief [1:1] ##suppress##Enable CMP_IRQ_NOTIFY.ABWC[c] interrupt source for CMP_IRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit ABWC2_EN_IRQ:1;    /**< \brief [2:2] ##suppress##Enable CMP_IRQ_NOTIFY.ABWC[c] interrupt source for CMP_IRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit ABWC3_EN_IRQ:1;    /**< \brief [3:3] ##suppress##Enable CMP_IRQ_NOTIFY.ABWC[c] interrupt source for CMP_IRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit ABWC4_EN_IRQ:1;    /**< \brief [4:4] ##suppress##Enable CMP_IRQ_NOTIFY.ABWC[c] interrupt source for CMP_IRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit ABWC5_EN_IRQ:1;    /**< \brief [5:5] ##suppress##Enable CMP_IRQ_NOTIFY.ABWC[c] interrupt source for CMP_IRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit ABWC6_EN_IRQ:1;    /**< \brief [6:6] ##suppress##Enable CMP_IRQ_NOTIFY.ABWC[c] interrupt source for CMP_IRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit ABWC7_EN_IRQ:1;    /**< \brief [7:7] ##suppress##Enable CMP_IRQ_NOTIFY.ABWC[c] interrupt source for CMP_IRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit ABWC8_EN_IRQ:1;    /**< \brief [8:8] ##suppress##Enable CMP_IRQ_NOTIFY.ABWC[c] interrupt source for CMP_IRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit ABWC9_EN_IRQ:1;    /**< \brief [9:9] ##suppress##Enable CMP_IRQ_NOTIFY.ABWC[c] interrupt source for CMP_IRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit ABWC10_EN_IRQ:1;    /**< \brief [10:10] ##suppress##Enable CMP_IRQ_NOTIFY.ABWC[c] interrupt source for CMP_IRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit ABWC11_EN_IRQ:1;    /**< \brief [11:11] ##suppress##Enable CMP_IRQ_NOTIFY.ABWC[c] interrupt source for CMP_IRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TBWC0_EN_IRQ:1;    /**< \brief [12:12] ##suppress##Enable CMP_IRQ_NOTIFY.TBWC[c] interrupt source for CMP_IRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TBWC1_EN_IRQ:1;    /**< \brief [13:13] ##suppress##Enable CMP_IRQ_NOTIFY.TBWC[c] interrupt source for CMP_IRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TBWC2_EN_IRQ:1;    /**< \brief [14:14] ##suppress##Enable CMP_IRQ_NOTIFY.TBWC[c] interrupt source for CMP_IRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TBWC3_EN_IRQ:1;    /**< \brief [15:15] ##suppress##Enable CMP_IRQ_NOTIFY.TBWC[c] interrupt source for CMP_IRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TBWC4_EN_IRQ:1;    /**< \brief [16:16] ##suppress##Enable CMP_IRQ_NOTIFY.TBWC[c] interrupt source for CMP_IRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TBWC5_EN_IRQ:1;    /**< \brief [17:17] ##suppress##Enable CMP_IRQ_NOTIFY.TBWC[c] interrupt source for CMP_IRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TBWC6_EN_IRQ:1;    /**< \brief [18:18] ##suppress##Enable CMP_IRQ_NOTIFY.TBWC[c] interrupt source for CMP_IRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TBWC7_EN_IRQ:1;    /**< \brief [19:19] ##suppress##Enable CMP_IRQ_NOTIFY.TBWC[c] interrupt source for CMP_IRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TBWC8_EN_IRQ:1;    /**< \brief [20:20] ##suppress##Enable CMP_IRQ_NOTIFY.TBWC[c] interrupt source for CMP_IRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TBWC9_EN_IRQ:1;    /**< \brief [21:21] ##suppress##Enable CMP_IRQ_NOTIFY.TBWC[c] interrupt source for CMP_IRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TBWC10_EN_IRQ:1;    /**< \brief [22:22] ##suppress##Enable CMP_IRQ_NOTIFY.TBWC[c] interrupt source for CMP_IRQ line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TBWC11_EN_IRQ:1;    /**< \brief [23:23] ##suppress##Enable CMP_IRQ_NOTIFY.TBWC[c] interrupt source for CMP_IRQ line##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_CMP_IRQ_EN_Bits;

/** \brief CMP interrupt force register */
typedef struct _Ifx_GTM_CLS_CMP_IRQ_FORCINT_Bits
{
    __IO Ifx_Strict_32Bit TRG_ABWC0:1;     /**< \brief [0:0] ##suppress##Trigger the CMP_IRQ_NOTIFY.ABWC[c] bit (ATOM [c]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_ABWC1:1;     /**< \brief [1:1] ##suppress##Trigger the CMP_IRQ_NOTIFY.ABWC[c] bit (ATOM [c]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_ABWC2:1;     /**< \brief [2:2] ##suppress##Trigger the CMP_IRQ_NOTIFY.ABWC[c] bit (ATOM [c]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_ABWC3:1;     /**< \brief [3:3] ##suppress##Trigger the CMP_IRQ_NOTIFY.ABWC[c] bit (ATOM [c]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_ABWC4:1;     /**< \brief [4:4] ##suppress##Trigger the CMP_IRQ_NOTIFY.ABWC[c] bit (ATOM [c]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_ABWC5:1;     /**< \brief [5:5] ##suppress##Trigger the CMP_IRQ_NOTIFY.ABWC[c] bit (ATOM [c]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_ABWC6:1;     /**< \brief [6:6] ##suppress##Trigger the CMP_IRQ_NOTIFY.ABWC[c] bit (ATOM [c]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_ABWC7:1;     /**< \brief [7:7] ##suppress##Trigger the CMP_IRQ_NOTIFY.ABWC[c] bit (ATOM [c]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_ABWC8:1;     /**< \brief [8:8] ##suppress##Trigger the CMP_IRQ_NOTIFY.ABWC[c] bit (ATOM [c]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_ABWC9:1;     /**< \brief [9:9] ##suppress##Trigger the CMP_IRQ_NOTIFY.ABWC[c] bit (ATOM [c]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_ABWC10:1;    /**< \brief [10:10] ##suppress##Trigger the CMP_IRQ_NOTIFY.ABWC[c] bit (ATOM [c]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_ABWC11:1;    /**< \brief [11:11] ##suppress##Trigger the CMP_IRQ_NOTIFY.ABWC[c] bit (ATOM [c]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_TBWC0:1;     /**< \brief [12:12] ##suppress##Trigger CMP_IRQ_NOTIFY.TBWC[c] bit (TOM [c]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_TBWC1:1;     /**< \brief [13:13] ##suppress##Trigger CMP_IRQ_NOTIFY.TBWC[c] bit (TOM [c]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_TBWC2:1;     /**< \brief [14:14] ##suppress##Trigger CMP_IRQ_NOTIFY.TBWC[c] bit (TOM [c]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_TBWC3:1;     /**< \brief [15:15] ##suppress##Trigger CMP_IRQ_NOTIFY.TBWC[c] bit (TOM [c]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_TBWC4:1;     /**< \brief [16:16] ##suppress##Trigger CMP_IRQ_NOTIFY.TBWC[c] bit (TOM [c]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_TBWC5:1;     /**< \brief [17:17] ##suppress##Trigger CMP_IRQ_NOTIFY.TBWC[c] bit (TOM [c]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_TBWC6:1;     /**< \brief [18:18] ##suppress##Trigger CMP_IRQ_NOTIFY.TBWC[c] bit (TOM [c]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_TBWC7:1;     /**< \brief [19:19] ##suppress##Trigger CMP_IRQ_NOTIFY.TBWC[c] bit (TOM [c]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_TBWC8:1;     /**< \brief [20:20] ##suppress##Trigger CMP_IRQ_NOTIFY.TBWC[c] bit (TOM [c]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_TBWC9:1;     /**< \brief [21:21] ##suppress##Trigger CMP_IRQ_NOTIFY.TBWC[c] bit (TOM [c]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_TBWC10:1;    /**< \brief [22:22] ##suppress##Trigger CMP_IRQ_NOTIFY.TBWC[c] bit (TOM [c]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_TBWC11:1;    /**< \brief [23:23] ##suppress##Trigger CMP_IRQ_NOTIFY.TBWC[c] bit (TOM [c]) by software##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_CMP_IRQ_FORCINT_Bits;

/** \brief CMP interrupt mode configuration register */
typedef struct _Ifx_GTM_CLS_CMP_IRQ_MODE_Bits
{
    __IO Ifx_Strict_32Bit IRQ_MODE:2;      /**< \brief [1:0] IRQ mode selection (rw) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_GTM_CLS_CMP_IRQ_MODE_Bits;

/** \brief CMP event notification register */
typedef struct _Ifx_GTM_CLS_CMP_IRQ_NOTIFY_Bits
{
    __IO Ifx_Strict_32Bit ABWC0:1;         /**< \brief [0:0] ##suppress##ATOM sub-modules output bitwise comparator [c] error indication##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ABWC1:1;         /**< \brief [1:1] ##suppress##ATOM sub-modules output bitwise comparator [c] error indication##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ABWC2:1;         /**< \brief [2:2] ##suppress##ATOM sub-modules output bitwise comparator [c] error indication##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ABWC3:1;         /**< \brief [3:3] ##suppress##ATOM sub-modules output bitwise comparator [c] error indication##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ABWC4:1;         /**< \brief [4:4] ##suppress##ATOM sub-modules output bitwise comparator [c] error indication##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ABWC5:1;         /**< \brief [5:5] ##suppress##ATOM sub-modules output bitwise comparator [c] error indication##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ABWC6:1;         /**< \brief [6:6] ##suppress##ATOM sub-modules output bitwise comparator [c] error indication##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ABWC7:1;         /**< \brief [7:7] ##suppress##ATOM sub-modules output bitwise comparator [c] error indication##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ABWC8:1;         /**< \brief [8:8] ##suppress##ATOM sub-modules output bitwise comparator [c] error indication##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ABWC9:1;         /**< \brief [9:9] ##suppress##ATOM sub-modules output bitwise comparator [c] error indication##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ABWC10:1;        /**< \brief [10:10] ##suppress##ATOM sub-modules output bitwise comparator [c] error indication##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ABWC11:1;        /**< \brief [11:11] ##suppress##ATOM sub-modules output bitwise comparator [c] error indication##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit TBWC0:1;         /**< \brief [12:12] ##suppress##TOM sub-modules output bitwise comparator [c] error indication##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit TBWC1:1;         /**< \brief [13:13] ##suppress##TOM sub-modules output bitwise comparator [c] error indication##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit TBWC2:1;         /**< \brief [14:14] ##suppress##TOM sub-modules output bitwise comparator [c] error indication##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit TBWC3:1;         /**< \brief [15:15] ##suppress##TOM sub-modules output bitwise comparator [c] error indication##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit TBWC4:1;         /**< \brief [16:16] ##suppress##TOM sub-modules output bitwise comparator [c] error indication##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit TBWC5:1;         /**< \brief [17:17] ##suppress##TOM sub-modules output bitwise comparator [c] error indication##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit TBWC6:1;         /**< \brief [18:18] ##suppress##TOM sub-modules output bitwise comparator [c] error indication##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit TBWC7:1;         /**< \brief [19:19] ##suppress##TOM sub-modules output bitwise comparator [c] error indication##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit TBWC8:1;         /**< \brief [20:20] ##suppress##TOM sub-modules output bitwise comparator [c] error indication##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit TBWC9:1;         /**< \brief [21:21] ##suppress##TOM sub-modules output bitwise comparator [c] error indication##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit TBWC10:1;        /**< \brief [22:22] ##suppress##TOM sub-modules output bitwise comparator [c] error indication##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit TBWC11:1;        /**< \brief [23:23] ##suppress##TOM sub-modules output bitwise comparator [c] error indication##suppress## (rw1ch) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_CMP_IRQ_NOTIFY_Bits;

/** \brief CMU control for clock resolution generator [x] */
typedef struct _Ifx_GTM_CLS_CMU_CLKX_CTRL_Bits
{
    __IO Ifx_Strict_32Bit CLK_CNT:24;      /**< \brief [23:0] Clock count. Defines count value for the clock divider. (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_CMU_CLKX_CTRL_Bits;

/** \brief CMU control for clock resolution generator 6 */
typedef struct _Ifx_GTM_CLS_CMU_CLK_6_CTRL_Bits
{
    __IO Ifx_Strict_32Bit CLK_CNT:24;      /**< \brief [23:0] ##suppress##Clock count. Define count value for the clock resolution generator responsible for CMU_CLK_RES[6:6] generation.##suppress## (rwh) */
    __IO Ifx_Strict_32Bit CLK_SEL:2;       /**< \brief [25:24] Source selection (rwh) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [31:26] \internal Reserved */
} Ifx_GTM_CLS_CMU_CLK_6_CTRL_Bits;

/** \brief CMU control for clock resolution generator 7 */
typedef struct _Ifx_GTM_CLS_CMU_CLK_7_CTRL_Bits
{
    __IO Ifx_Strict_32Bit CLK_CNT:24;      /**< \brief [23:0] ##suppress##Clock count. Define count value for the clock resolution generator responsible for CMU_CLK_RES[7:7] generation.##suppress## (rwh) */
    __IO Ifx_Strict_32Bit CLK_SEL:2;       /**< \brief [25:24] Source selection (rwh) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [31:26] \internal Reserved */
} Ifx_GTM_CLS_CMU_CLK_7_CTRL_Bits;

/** \brief CMU control for clock resolution generator */
typedef struct _Ifx_GTM_CLS_CMU_CLK_CTRL_Bits
{
    __IO Ifx_Strict_32Bit CLK0_EXT_DIVIDER:1;    /**< \brief [0:0] Input selection for Clock Resolution Generator [x] (rwh) */
    __IO Ifx_Strict_32Bit CLK1_EXT_DIVIDER:1;    /**< \brief [1:1] Input selection for Clock Resolution Generator [x] (rwh) */
    __IO Ifx_Strict_32Bit CLK2_EXT_DIVIDER:1;    /**< \brief [2:2] Input selection for Clock Resolution Generator [x] (rwh) */
    __IO Ifx_Strict_32Bit CLK3_EXT_DIVIDER:1;    /**< \brief [3:3] Input selection for Clock Resolution Generator [x] (rwh) */
    __IO Ifx_Strict_32Bit CLK4_EXT_DIVIDER:1;    /**< \brief [4:4] Input selection for Clock Resolution Generator [x] (rwh) */
    __IO Ifx_Strict_32Bit CLK5_EXT_DIVIDER:1;    /**< \brief [5:5] Input selection for Clock Resolution Generator [x] (rwh) */
    __IO Ifx_Strict_32Bit CLK6_EXT_DIVIDER:1;    /**< \brief [6:6] Input selection for Clock Resolution Generator [x] (rwh) */
    __IO Ifx_Strict_32Bit CLK7_EXT_DIVIDER:1;    /**< \brief [7:7] Input selection for Clock Resolution Generator [x] (rwh) */
    __IO Ifx_Strict_32Bit CLK8_EXT_DIVIDER:1;    /**< \brief [8:8] ##suppress##Source selection for CMU_CLK_RES[8:8]##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :23;             /**< \brief [31:9] \internal Reserved */
} Ifx_GTM_CLS_CMU_CLK_CTRL_Bits;

/** \brief CMU clock enable */
typedef struct _Ifx_GTM_CLS_CMU_CLK_EN_Bits
{
    __IO Ifx_Strict_32Bit EN_CLK0:2;       /**< \brief [1:0] ##suppress##Enable clock resolution CMU_CLK_RES[x:x]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit EN_CLK1:2;       /**< \brief [3:2] ##suppress##Enable clock resolution CMU_CLK_RES[x:x]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit EN_CLK2:2;       /**< \brief [5:4] ##suppress##Enable clock resolution CMU_CLK_RES[x:x]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit EN_CLK3:2;       /**< \brief [7:6] ##suppress##Enable clock resolution CMU_CLK_RES[x:x]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit EN_CLK4:2;       /**< \brief [9:8] ##suppress##Enable clock resolution CMU_CLK_RES[x:x]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit EN_CLK5:2;       /**< \brief [11:10] ##suppress##Enable clock resolution CMU_CLK_RES[x:x]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit EN_CLK6:2;       /**< \brief [13:12] ##suppress##Enable clock resolution CMU_CLK_RES[x:x]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit EN_CLK7:2;       /**< \brief [15:14] ##suppress##Enable clock resolution CMU_CLK_RES[x:x]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit EN_ECLK0:2;      /**< \brief [17:16] ##suppress##Enable clock CMU_ECLK[z:z]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit EN_ECLK1:2;      /**< \brief [19:18] ##suppress##Enable clock CMU_ECLK[z:z]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit EN_ECLK2:2;      /**< \brief [21:20] ##suppress##Enable clock CMU_ECLK[z:z]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit EN_FXCLK:2;      /**< \brief [23:22] ##suppress##Enable clock resolution CMU_FXCLK_RES##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_CMU_CLK_EN_Bits;

/** \brief The denominator for the external clock resolution generator [z] */
typedef struct _Ifx_GTM_CLS_CMU_ECLK_DEN_Bits
{
    __IO Ifx_Strict_32Bit ECLK_DEN:24;     /**< \brief [23:0] The denominator for external clock resolution generator. Defines denominator of the fractional divider. (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_CMU_ECLK_DEN_Bits;

/** \brief The numerator for the external clock resolution generator [z] */
typedef struct _Ifx_GTM_CLS_CMU_ECLK_NUM_Bits
{
    __IO Ifx_Strict_32Bit ECLK_NUM:24;     /**< \brief [23:0] The numerator for external clock resolution generator. Defines numerator of the fractional divider. (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_CMU_ECLK_NUM_Bits;

/** \brief CMU control for selection of FCR subblock input */
typedef struct _Ifx_GTM_CLS_CMU_FXCLK_CTRL_Bits
{
    __IO Ifx_Strict_32Bit FXCLK_SEL:4;     /**< \brief [3:0] ##suppress##Input selection for EN_FXCLK line##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_GTM_CLS_CMU_FXCLK_CTRL_Bits;

/** \brief The denominator for CMU global clock resolution generator */
typedef struct _Ifx_GTM_CLS_CMU_GCLK_DEN_Bits
{
    __IO Ifx_Strict_32Bit GCLK_DEN:24;     /**< \brief [23:0] Denominator for global resolution generator. Defines denominator of the fractional divider. (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_CMU_GCLK_DEN_Bits;

/** \brief The numerator for CMU global clock resolution generator */
typedef struct _Ifx_GTM_CLS_CMU_GCLK_NUM_Bits
{
    __IO Ifx_Strict_32Bit GCLK_NUM:24;     /**< \brief [23:0] Numerator for global clock resolution generator. Defines numerator of the fractional divider. (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_CMU_GCLK_NUM_Bits;

/** \brief CMU synchronizing ARU and clock source */
typedef struct _Ifx_GTM_CLS_CMU_GLB_CTRL_Bits
{
    __IO Ifx_Strict_32Bit ARU_ADDR_RSTGLB:1;    /**< \brief [0:0] ##suppress##Reset ARU caddr counter and ARU dynamic route counter##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :31;             /**< \brief [31:1] \internal Reserved */
} Ifx_GTM_CLS_CMU_GLB_CTRL_Bits;

/** \brief DPLL_ACB_[n] */
typedef struct _Ifx_GTM_CLS_DPLL_ACB_Bits
{
    __IO Ifx_Strict_32Bit ACB_0:5;         /**< \brief [4:0] ##suppress##Action Control Bits of Action [m], reflects ACT_D[m][52:48], [m]=4*[n]##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [7:5] \internal Reserved */
    __IO Ifx_Strict_32Bit ACB_1:5;         /**< \brief [12:8] ##suppress##Action Control Bits of Action [m], reflects ACT_D[m][52:48], [m]=4*[n]##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [15:13] \internal Reserved */
    __IO Ifx_Strict_32Bit ACB_2:5;         /**< \brief [20:16] ##suppress##Action Control Bits of Action [m], reflects ACT_D[m][52:48], [m]=4*[n]##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [23:21] \internal Reserved */
    __IO Ifx_Strict_32Bit ACB_3:5;         /**< \brief [28:24] ##suppress##Action Control Bits of Action [m], reflects ACT_D[m][52:48], [m]=4*[n]##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [31:29] \internal Reserved */
} Ifx_GTM_CLS_DPLL_ACB_Bits;

/** \brief Action Status Register including Shadow Register */
typedef struct _Ifx_GTM_CLS_DPLL_ACT_STA_Bits
{
    __IO Ifx_Strict_32Bit ACT_N0:1;        /**< \brief [0:0] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N1:1;        /**< \brief [1:1] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N2:1;        /**< \brief [2:2] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N3:1;        /**< \brief [3:3] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N4:1;        /**< \brief [4:4] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N5:1;        /**< \brief [5:5] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N6:1;        /**< \brief [6:6] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N7:1;        /**< \brief [7:7] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N8:1;        /**< \brief [8:8] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N9:1;        /**< \brief [9:9] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N10:1;       /**< \brief [10:10] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N11:1;       /**< \brief [11:11] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N12:1;       /**< \brief [12:12] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N13:1;       /**< \brief [13:13] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N14:1;       /**< \brief [14:14] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N15:1;       /**< \brief [15:15] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N16:1;       /**< \brief [16:16] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N17:1;       /**< \brief [17:17] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N18:1;       /**< \brief [18:18] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N19:1;       /**< \brief [19:19] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N20:1;       /**< \brief [20:20] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N21:1;       /**< \brief [21:21] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N22:1;       /**< \brief [22:22] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N23:1;       /**< \brief [23:23] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N24:1;       /**< \brief [24:24] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N25:1;       /**< \brief [25:25] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N26:1;       /**< \brief [26:26] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N27:1;       /**< \brief [27:27] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N28:1;       /**< \brief [28:28] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N29:1;       /**< \brief [29:29] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N30:1;       /**< \brief [30:30] New output data values concerning to Action n provided. (rwh) */
    __IO Ifx_Strict_32Bit ACT_N31:1;       /**< \brief [31:31] New output data values concerning to Action n provided. (rwh) */
} Ifx_GTM_CLS_DPLL_ACT_STA_Bits;

/** \brief DPLL_ADD_IN_CAL1 */
typedef struct _Ifx_GTM_CLS_DPLL_ADD_IN_CAL1_Bits
{
    __IO Ifx_Strict_32Bit ADD_IN_CAL1:24;    /**< \brief [23:0] ##suppress##Calculated input value for SUB_INC1 generation, calculated by the DPLL.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_ADD_IN_CAL1_Bits;

/** \brief DPLL_ADD_IN_CAL2 */
typedef struct _Ifx_GTM_CLS_DPLL_ADD_IN_CAL2_Bits
{
    __IO Ifx_Strict_32Bit ADD_IN_CAL2:24;    /**< \brief [23:0] ##suppress##Input value for SUB_INC2 generation, calculated by the DPLL for DPLL_CTRL_1.SMC=DPLL_CTRL_0.RMO=1.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_ADD_IN_CAL2_Bits;

/** \brief DPLL_ADD_IN_LD1 */
typedef struct _Ifx_GTM_CLS_DPLL_ADD_IN_LD1_Bits
{
    __IO Ifx_Strict_32Bit ADD_IN_LD1:24;    /**< \brief [23:0] ##suppress##Input value for SUB_INC1 generation, given by CPU. This value can be used in normal and emergency mode (DPLL_CTRL_1.SMC=0) as well as for DPLL_CTRL_1.SMC=1.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_ADD_IN_LD1_Bits;

/** \brief DPLL_ADD_IN_LD2 */
typedef struct _Ifx_GTM_CLS_DPLL_ADD_IN_LD2_Bits
{
    __IO Ifx_Strict_32Bit ADD_IN_LD2:24;    /**< \brief [23:0] ##suppress##ADD_IN_LD2: Input value for SUB_INC2 generation, given by CPU. This value can be used for DPLL_CTRL_1.SMC=1 while DPLL_CTRL_0.RMO=1.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_ADD_IN_LD2_Bits;

/** \brief DPLL_ADT_S[p] */
typedef struct _Ifx_GTM_CLS_DPLL_ADT_S_Bits
{
    __IO Ifx_Strict_32Bit PD_S:16;         /**< \brief [15:0] ##suppress##Physical deviation of STATE; Adapt values for each nominal STATE increment in FULL_SCALE;##suppress## (rw) */
    __IO Ifx_Strict_32Bit NS:6;            /**< \brief [21:16] ##suppress##Number of STATE events; number of nominal STATE parts in the corresponding increment.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [23:22] \internal Reserved */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_ADT_S_Bits;

/** \brief Address Offset Register of RAM 2 Regions */
typedef struct _Ifx_GTM_CLS_DPLL_AOSV_2_Bits
{
    __I  Ifx_Strict_32Bit AOSV_2A:8;       /**< \brief [7:0] Address offset value of the RAM 2A region. (rh) */
    __I  Ifx_Strict_32Bit AOSV_2B:8;       /**< \brief [15:8] Address offset value of the RAM 2B region. (rh) */
    __I  Ifx_Strict_32Bit AOSV_2C:8;       /**< \brief [23:16] Address offset value of the RAM 2C region. (rh) */
    __I  Ifx_Strict_32Bit AOSV_2D:8;       /**< \brief [31:24] Address offset value of the RAM 2D region. (rh) */
} Ifx_GTM_CLS_DPLL_AOSV_2_Bits;

/** \brief DPLL_APS */
typedef struct _Ifx_GTM_CLS_DPLL_APS_Bits
{
    __I  Ifx_Strict_32Bit :1;              /**< \brief [0:0] \internal Reserved */
    __IO Ifx_Strict_32Bit WAPS:1;          /**< \brief [1:1] ##suppress##Write bit for address pointer DPLL_APS.APS, read as zero.##suppress## (rw) */
    __IO Ifx_Strict_32Bit APS:6;           /**< \brief [7:2] ##suppress##Address pointer STATE:##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [12:8] \internal Reserved */
    __IO Ifx_Strict_32Bit WAPS_1C2:1;      /**< \brief [13:13] ##suppress##Write bit for address pointer DPLL_APS.APS_1C2, read as zero.##suppress## (rw) */
    __IO Ifx_Strict_32Bit APS_1C2:6;       /**< \brief [19:14] ##suppress##Actual RAM pointer address value for DPLL_TSF_S[p].##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [31:20] \internal Reserved */
} Ifx_GTM_CLS_DPLL_APS_Bits;

/** \brief Actual RAM Pointer Address for RAM region 1c3 */
typedef struct _Ifx_GTM_CLS_DPLL_APS_1C3_Bits
{
    __I  Ifx_Strict_32Bit :2;              /**< \brief [1:0] \internal Reserved */
    __IO Ifx_Strict_32Bit APS_1C3:6;       /**< \brief [7:2] ##suppress##Address pointer STATE for RAM region 1c3:##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_CLS_DPLL_APS_1C3_Bits;

/** \brief DPLL_APS_1C3_EXT */
typedef struct _Ifx_GTM_CLS_DPLL_APS_1C3_EXT_Bits
{
    __I  Ifx_Strict_32Bit :2;              /**< \brief [1:0] \internal Reserved */
    __IO Ifx_Strict_32Bit APS_1C3:7;       /**< \brief [8:2] ##suppress##Address pointer STATE for RAM region 1c3; Actual RAM pointer address value for DPLL_ADT_S[p]##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :23;             /**< \brief [31:9] \internal Reserved */
} Ifx_GTM_CLS_DPLL_APS_1C3_EXT_Bits;

/** \brief DPLL_APS_EXT */
typedef struct _Ifx_GTM_CLS_DPLL_APS_EXT_Bits
{
    __I  Ifx_Strict_32Bit :1;              /**< \brief [0:0] \internal Reserved */
    __IO Ifx_Strict_32Bit WAPS:1;          /**< \brief [1:1] ##suppress##Write bit for address pointer DPLL_APS_EXT.APS, read as zero.##suppress## (rw) */
    __IO Ifx_Strict_32Bit APS:7;           /**< \brief [8:2] ##suppress##Address pointer STATE; Actual RAM pointer address value for DPLL_DT_S[p] and DPLL_RDT_S[p]##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [12:9] \internal Reserved */
    __IO Ifx_Strict_32Bit WAPS_1C2:1;      /**< \brief [13:13] ##suppress##Write bit for address pointer DPLL_APS_EXT.APS_1C2, read as zero.##suppress## (rw) */
    __IO Ifx_Strict_32Bit APS_1C2:7;       /**< \brief [20:14] ##suppress##Address pointer STATE for RAM region 1c2; Actual RAM pointer address value for DPLL_TSF_S[p].##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :11;             /**< \brief [31:21] \internal Reserved */
} Ifx_GTM_CLS_DPLL_APS_EXT_Bits;

/** \brief DPLL_APS_SYNC */
typedef struct _Ifx_GTM_CLS_DPLL_APS_SYNC_Bits
{
    __IO Ifx_Strict_32Bit APS_1C2_EXT:6;    /**< \brief [5:0] ##suppress##Address pointer 1c2 extension; this offset value determines, by which value the DPLL_APS_EXT.APS_1C2 is changed at the time of synchronization; set by CPU before the synchronization is performed.##suppress## (rw) */
    __IO Ifx_Strict_32Bit APS_1C2_STATUS:1;    /**< \brief [6:6] ##suppress##Address pointer 1c2 status; set by CPU before the synchronization is performed. The value is cleared automatically when the DPLL_APS_SYNC.APS_1C2_OLD value is written.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [13:7] \internal Reserved */
    __IO Ifx_Strict_32Bit APS_1C2_OLD:6;    /**< \brief [19:14] ##suppress##Address pointer STATE for RAM region 1c2 at synchronization time; this value is set by the current DPLL_APS_EXT.APS_1C2 value when the synchronization takes place for the first active STATE event after writing DPLL_APS_1C3_EXT.APS_1C3 but before adding the offset value DPLL_APS_SYNC.APS_1C2_EXT (that means: when DPLL_APS_SYNC.APS_1C2_STATUS=1).##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [31:20] \internal Reserved */
} Ifx_GTM_CLS_DPLL_APS_SYNC_Bits;

/** \brief DPLL_APS_SYNC_EXT */
typedef struct _Ifx_GTM_CLS_DPLL_APS_SYNC_EXT_Bits
{
    __IO Ifx_Strict_32Bit APS_1C2_EXT:7;    /**< \brief [6:0] ##suppress##Address pointer 1c2 extension; this offset value determines, by which value the DPLL_APS_EXT.APS_1C2 is changed at the time of synchronization; set by CPU before the synchronization is performed.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [14:7] \internal Reserved */
    __IO Ifx_Strict_32Bit APS_1C2_STATUS:1;    /**< \brief [15:15] ##suppress##Address pointer 1c2 status; set by CPU before the synchronization is performed. The value is cleared automatically when the DPLL_APS_SYNC_EXT.APS_1C2_OLD value is written.##suppress## (rwh) */
    __IO Ifx_Strict_32Bit APS_1C2_OLD:7;    /**< \brief [22:16] ##suppress##Address pointer STATE for RAM region 1c2 at synchronization time; this value is set by the current DPLL_APS_EXT.APS_1C2 value when the synchronization takes place for the first active STATE event after writing DPLL_APS_1C3_EXT.APS_1C3 but before adding the offset value DPLL_APS_SYNC_EXT.APS_1C2_EXT (that means: when DPLL_APS_SYNC_EXT.APS_1C2_STATUS=1).##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :9;              /**< \brief [31:23] \internal Reserved */
} Ifx_GTM_CLS_DPLL_APS_SYNC_EXT_Bits;

/** \brief DPLL_APT */
typedef struct _Ifx_GTM_CLS_DPLL_APT_Bits
{
    __I  Ifx_Strict_32Bit :1;              /**< \brief [0:0] \internal Reserved */
    __IO Ifx_Strict_32Bit WAPT:1;          /**< \brief [1:1] ##suppress##Write bit for address pointer DPLL_APT.APT, read as zero.##suppress## (rw) */
    __IO Ifx_Strict_32Bit APT:10;          /**< \brief [11:2] ##suppress##Address pointer DPLL TRIGGER:##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [12:12] \internal Reserved */
    __IO Ifx_Strict_32Bit WAPT_2B:1;       /**< \brief [13:13] ##suppress##Write bit for address pointer DPLL_APT.APT_2B, read as zero.##suppress## (rw) */
    __IO Ifx_Strict_32Bit APT_2B:10;       /**< \brief [23:14] ##suppress##Address pointer TRIGGER for RAM region 2b.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_APT_Bits;

/** \brief Actual RAM Pointer Address for Region 2c */
typedef struct _Ifx_GTM_CLS_DPLL_APT_2C_Bits
{
    __I  Ifx_Strict_32Bit :2;              /**< \brief [1:0] \internal Reserved */
    __IO Ifx_Strict_32Bit APT_2C:10;       /**< \brief [11:2] ##suppress##Address pointer TRIGGER for RAM region 2c:##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :20;             /**< \brief [31:12] \internal Reserved */
} Ifx_GTM_CLS_DPLL_APT_2C_Bits;

/** \brief DPLL_APT_SYNC */
typedef struct _Ifx_GTM_CLS_DPLL_APT_SYNC_Bits
{
    __IO Ifx_Strict_32Bit APT_2B_EXT:6;    /**< \brief [5:0] ##suppress##Address pointer 2b extension; this offset value determines, by which value the DPLL_APT.APT_2B is changed at the synchronization time; set by CPU before the synchronization is performed.##suppress## (rw) */
    __IO Ifx_Strict_32Bit APT_2B_STATUS:1;    /**< \brief [6:6] ##suppress##Address pointer 2b status; set by the CPU before the synchronization is performed. The value is cleared when the DPLL_APT_SYNC.APT_2B_OLD value is written.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [13:7] \internal Reserved */
    __IO Ifx_Strict_32Bit APT_2B_OLD:10;    /**< \brief [23:14] ##suppress##Address pointer TRIGGER for RAM region 2b at synchronization time; this value is set by the current DPLL_APT.APT_2B value when the synchronization takes place for the first active TRIGGER event after writing DPLL_APT_2C.APT_2C but before adding the offset value DPLL_APT_SYNC.APT_2B_EXT (that means: when DPLL_APT_SYNC.APT_2B_STATUS=1).##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_APT_SYNC_Bits;

/** \brief DPLL_CDT_SX */
typedef struct _Ifx_GTM_CLS_DPLL_CDT_SX_Bits
{
    __IO Ifx_Strict_32Bit CDT_SX:24;       /**< \brief [23:0] ##suppress##Calculated duration of the current STATE increment.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_CDT_SX_Bits;

/** \brief DPLL_CDT_SX_NOM */
typedef struct _Ifx_GTM_CLS_DPLL_CDT_SX_NOM_Bits
{
    __IO Ifx_Strict_32Bit CDT_SX_NOM:24;    /**< \brief [23:0] ##suppress##Calculated duration of the current nominal STATE event.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_CDT_SX_NOM_Bits;

/** \brief DPLL_CDT_TX */
typedef struct _Ifx_GTM_CLS_DPLL_CDT_TX_Bits
{
    __IO Ifx_Strict_32Bit CDT_TX:24;       /**< \brief [23:0] ##suppress##Calculated duration of the current TRIGGER increment.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_CDT_TX_Bits;

/** \brief DPLL_CDT_TX_NOM */
typedef struct _Ifx_GTM_CLS_DPLL_CDT_TX_NOM_Bits
{
    __IO Ifx_Strict_32Bit CDT_TX_NOM:24;    /**< \brief [23:0] ##suppress##Calculated duration of the current nominal TRIGGER event.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_CDT_TX_NOM_Bits;

/** \brief DPLL_CNT_NUM_1 */
typedef struct _Ifx_GTM_CLS_DPLL_CNT_NUM_1_Bits
{
    __IO Ifx_Strict_32Bit CNT_NUM_1:24;    /**< \brief [23:0] ##suppress##Counter for number of SUB_INC1 pulses; Number of pulses in continuous mode for a nominal increment in normal and emergency mode for SUB_INC1, given and updated by CPU only.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_CNT_NUM_1_Bits;

/** \brief DPLL_CNT_NUM_2 */
typedef struct _Ifx_GTM_CLS_DPLL_CNT_NUM_2_Bits
{
    __IO Ifx_Strict_32Bit CNT_NUM_2:24;    /**< \brief [23:0] ##suppress##Counter for number of SUB_INC2 pulses; Number of pulses in continuous mode for a nominal increment in normal and emergency mode for SUB_INC2, given and updated by CPU only.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_CNT_NUM_2_Bits;

/** \brief DPLL_CSN_MAX */
typedef struct _Ifx_GTM_CLS_DPLL_CSN_MAX_Bits
{
    __IO Ifx_Strict_32Bit CSN_MAX:24;      /**< \brief [23:0] ##suppress##DPLL_CDT_SX_NOM.CDT_SX_NOM max value##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_CSN_MAX_Bits;

/** \brief DPLL_CSN_MIN */
typedef struct _Ifx_GTM_CLS_DPLL_CSN_MIN_Bits
{
    __IO Ifx_Strict_32Bit CSN_MIN:24;      /**< \brief [23:0] ##suppress##DPLL_CDT_SX_NOM.CDT_SX_NOM min value##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_CSN_MIN_Bits;

/** \brief DPLL_CTN_MAX */
typedef struct _Ifx_GTM_CLS_DPLL_CTN_MAX_Bits
{
    __IO Ifx_Strict_32Bit CTN_MAX:24;      /**< \brief [23:0] ##suppress##DPLL_CDT_TX_NOM.CDT_TX_NOM max value##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_CTN_MAX_Bits;

/** \brief DPLL_CTN_MIN */
typedef struct _Ifx_GTM_CLS_DPLL_CTN_MIN_Bits
{
    __IO Ifx_Strict_32Bit CTN_MIN:24;      /**< \brief [23:0] ##suppress##DPLL_CDT_TX_NOM.CDT_TX_NOM min value##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_CTN_MIN_Bits;

/** \brief Control Register 0 */
typedef struct _Ifx_GTM_CLS_DPLL_CTRL_0_Bits
{
    __IO Ifx_Strict_32Bit MLT:10;          /**< \brief [9:0] ##suppress##Multiplier for TRIGGER.##suppress## (rw) */
    __IO Ifx_Strict_32Bit IFP:1;           /**< \brief [10:10] Input filter position. (rw) */
    __IO Ifx_Strict_32Bit SNU:5;           /**< \brief [15:11] ##suppress##STATE number.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TNU:9;           /**< \brief [24:16] ##suppress##TRIGGER number.##suppress## (rw) */
    __IO Ifx_Strict_32Bit AMS:1;           /**< \brief [25:25] ##suppress##Adapt mode STATE.##suppress## (rw) */
    __IO Ifx_Strict_32Bit AMT:1;           /**< \brief [26:26] ##suppress##Adapt mode TRIGGER.##suppress## (rw) */
    __IO Ifx_Strict_32Bit IDS:1;           /**< \brief [27:27] ##suppress##Input delay STATE.##suppress## (rw) */
    __IO Ifx_Strict_32Bit IDT:1;           /**< \brief [28:28] ##suppress##Input delay TRIGGER.##suppress## (rw) */
    __IO Ifx_Strict_32Bit SEN:1;           /**< \brief [29:29] ##suppress##STATE enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TEN:1;           /**< \brief [30:30] ##suppress##TRIGGER enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit RMO:1;           /**< \brief [31:31] Reference mode. (rw) */
} Ifx_GTM_CLS_DPLL_CTRL_0_Bits;

/** \brief DPLL_CTRL_0_SHADOW_STATE */
typedef struct _Ifx_GTM_CLS_DPLL_CTRL_0_SHADOW_STATE_Bits
{
    __I  Ifx_Strict_32Bit :10;             /**< \brief [9:0] \internal Reserved */
    __I  Ifx_Strict_32Bit IFP:1;           /**< \brief [10:10] Input filter position; value contains position or time related information. (rh) */
    __I  Ifx_Strict_32Bit :14;             /**< \brief [24:11] \internal Reserved */
    __I  Ifx_Strict_32Bit AMS:1;           /**< \brief [25:25] ##suppress##Adapt mode STATE; Use of adaptation information of STATE.##suppress## (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [26:26] \internal Reserved */
    __I  Ifx_Strict_32Bit IDS:1;           /**< \brief [27:27] ##suppress##Input delay STATE; Use of input delay information transmitted in FT part of the STATE signal.##suppress## (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [30:28] \internal Reserved */
    __I  Ifx_Strict_32Bit RMO:1;           /**< \brief [31:31] ##suppress##Reference mode; selection of the relevant the input signal for generation of SUB_INC1.##suppress## (rh) */
} Ifx_GTM_CLS_DPLL_CTRL_0_SHADOW_STATE_Bits;

/** \brief DPLL_CTRL_0_SHADOW_TRIGGER */
typedef struct _Ifx_GTM_CLS_DPLL_CTRL_0_SHADOW_TRIGGER_Bits
{
    __I  Ifx_Strict_32Bit MLT:10;          /**< \brief [9:0] ##suppress##Multiplier for TRIGGER; MLT+1 is number of SUB_INC1 pulses between two TRIGGER events in normal mode (1...1024);##suppress## (rh) */
    __I  Ifx_Strict_32Bit IFP:1;           /**< \brief [10:10] Input filter position; value contains position or time related information. (rh) */
    __I  Ifx_Strict_32Bit :15;             /**< \brief [25:11] \internal Reserved */
    __I  Ifx_Strict_32Bit AMT:1;           /**< \brief [26:26] ##suppress##Use of adaptation information of Adapt mode TRIGGER;##suppress## (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [27:27] \internal Reserved */
    __I  Ifx_Strict_32Bit IDT:1;           /**< \brief [28:28] ##suppress##Input delay TRIGGER; use of input delay information transmitted in FT part of the TRIGGER signal.##suppress## (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [30:29] \internal Reserved */
    __I  Ifx_Strict_32Bit RMO:1;           /**< \brief [31:31] ##suppress##Reference mode; selection of the relevant the input signal for generation of SUB_INC1.##suppress## (rh) */
} Ifx_GTM_CLS_DPLL_CTRL_0_SHADOW_TRIGGER_Bits;

/** \brief Control Register 1 */
typedef struct _Ifx_GTM_CLS_DPLL_CTRL_1_Bits
{
    __IO Ifx_Strict_32Bit DMO:1;           /**< \brief [0:0] ##suppress##DPLL mode select.##suppress## (rw) */
    __IO Ifx_Strict_32Bit DEN:1;           /**< \brief [1:1] ##suppress##DPLL enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit IDDS:1;          /**< \brief [2:2] ##suppress##Input direction detection strategy in the case of DPLL_CTRL_1.SMC=0.##suppress## (rw) */
    __IO Ifx_Strict_32Bit COA:1;           /**< \brief [3:3] ##suppress##Correction strategy in automatic end mode (DPLL_CTRL_1.DMO=0).##suppress## (rw) */
    __IO Ifx_Strict_32Bit PIT:1;           /**< \brief [4:4] ##suppress##Plausibility value DPLL_PVT.PVT to next active TRIGGER is time related.##suppress## (rw) */
    __IO Ifx_Strict_32Bit SGE1:1;          /**< \brief [5:5] ##suppress##SUB_INC1 generator enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit DLM1:1;          /**< \brief [6:6] ##suppress##Direct Load Mode for SUB_INC1 generation.##suppress## (rw) */
    __IO Ifx_Strict_32Bit PCM1:1;          /**< \brief [7:7] ##suppress##Pulse Correction Mode for SUB_INC1 generation.##suppress## (rw) */
    __IO Ifx_Strict_32Bit SGE2:1;          /**< \brief [8:8] ##suppress##SUB_INC2 generator enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit DLM2:1;          /**< \brief [9:9] ##suppress##Direct Load Mode for SUB_INC2 generation.##suppress## (rw) */
    __IO Ifx_Strict_32Bit PCM2:1;          /**< \brief [10:10] ##suppress##Pulse Correction Mode for SUB_INC2 generation.##suppress## (rw) */
    __IO Ifx_Strict_32Bit SYN_NS:5;        /**< \brief [15:11] ##suppress##Synchronization number of DPLL STATE events.##suppress## (rw) */
    __IO Ifx_Strict_32Bit SYN_NT:6;        /**< \brief [21:16] ##suppress##Synchronization number of DPLL TRIGGER events.##suppress## (rw) */
    __IO Ifx_Strict_32Bit LCD:1;           /**< \brief [22:22] Locking condition definition (rw) */
    __IO Ifx_Strict_32Bit SWR:1;           /**< \brief [23:23] Software reset (rw) */
    __IO Ifx_Strict_32Bit SYSF:1;          /**< \brief [24:24] ##suppress##DPLL_CTRL_EXT.SYN_NS for FULL_SCALE##suppress## (rw) */
    __IO Ifx_Strict_32Bit TS0_HRS:1;       /**< \brief [25:25] ##suppress##Time stamp high-resolution STATE##suppress## (rw) */
    __IO Ifx_Strict_32Bit TS0_HRT:1;       /**< \brief [26:26] ##suppress##Time stamp high-resolution TRIGGER##suppress## (rw) */
    __IO Ifx_Strict_32Bit SMC:1;           /**< \brief [27:27] Synchronous Motor Control (rw) */
    __IO Ifx_Strict_32Bit SSL:2;           /**< \brief [29:28] State slope select (rw) */
    __IO Ifx_Strict_32Bit TSL:2;           /**< \brief [31:30] Trigger slope select (rw) */
} Ifx_GTM_CLS_DPLL_CTRL_1_Bits;

/** \brief Control Register 11 */
typedef struct _Ifx_GTM_CLS_DPLL_CTRL_11_Bits
{
    __IO Ifx_Strict_32Bit SIP1:1;          /**< \brief [0:0] ##suppress##Simplified increment prediction in normal mode and for the first engine in the case DPLL_CTRL_1.SMC=1.##suppress## (rwh) */
    __IO Ifx_Strict_32Bit ERZ1:1;          /**< \brief [1:1] ##suppress##Error is assumed as zero  in normal mode and for the first engine for DPLL_CTRL_1.SMC=1.##suppress## (rwh) */
    __IO Ifx_Strict_32Bit PCMF1:1;         /**< \brief [2:2] ##suppress##Pulse correction mode fast  for DPLL_INC_CNT1.INC_CNT1##suppress## (rwh) */
    __IO Ifx_Strict_32Bit FSYL1:1;         /**< \brief [3:3] ##suppress##Force Synchronization Loss of DPLL_STATUS.LOCK1.##suppress## (rwh) */
    __IO Ifx_Strict_32Bit INCF1:1;         /**< \brief [4:4] ##suppress##DPLL_INC_CNT1.INC_CNT1 fast correction##suppress## (rwh) */
    __IO Ifx_Strict_32Bit PCMF1_INCCNT_B:1;    /**< \brief [5:5] ##suppress##No increment of DPLL_INC_CNT1.INC_CNT1 when DPLL_CTRL_11.PCMF1 active (automatic end mode).##suppress## (rwh) */
    __IO Ifx_Strict_32Bit ADT:1;           /**< \brief [6:6] ##suppress##Correction of DPLL_DT_T_ACT.DT_T_ACT, DPLL_CDT_TX_NOM.CDT_TX_NOM_corr by PD_T##suppress## (rwh) */
    __IO Ifx_Strict_32Bit ADS:1;           /**< \brief [7:7] ##suppress##Correction of DPLL_DT_S_ACT.DT_S_ACT, DPLL_CDT_SX_NOM.CDT_SX_NOM_corr by DPLL_ADT_S[p].PD_S##suppress## (rwh) */
    __IO Ifx_Strict_32Bit SIP2:1;          /**< \brief [8:8] ##suppress##Simplified increment prediction  in emergency  mode and for the second engine in the case DPLL_CTRL_0.RMO=1.##suppress## (rwh) */
    __IO Ifx_Strict_32Bit ERZ2:1;          /**< \brief [9:9] ##suppress##Error is assumed as zero  in emergency mode and for the second engine for DPLL_CTRL_1.SMC=1.##suppress## (rwh) */
    __IO Ifx_Strict_32Bit PCMF2:1;         /**< \brief [10:10] ##suppress##Pulse correction mode fast for DPLL_INC_CNT2.INC_CNT2##suppress## (rwh) */
    __IO Ifx_Strict_32Bit FSYL2:1;         /**< \brief [11:11] ##suppress##Force Synchronization Loss of DPLL_STATUS.LOCK2.##suppress## (rwh) */
    __IO Ifx_Strict_32Bit INCF2:1;         /**< \brief [12:12] ##suppress##DPLL_INC_CNT2.INC_CNT2 fast##suppress## (rwh) */
    __IO Ifx_Strict_32Bit PCMF2_INCCNT_B:1;    /**< \brief [13:13] ##suppress##No increment of DPLL_INC_CNT2.INC_CNT2 when DPLL_CTRL_11.PCMF2 active (automatic end mode).##suppress## (rwh) */
    __IO Ifx_Strict_32Bit STATE_EXT:1;     /**< \brief [14:14] ##suppress##Use of STATE engine extension##suppress## (rwh) */
    __IO Ifx_Strict_32Bit ACBU:1;          /**< \brief [15:15] ##suppress##DPLL_CTRL_11.ACBU use; the DPLL_CTRL_11.ACBU values of PMTR are used to decide if an Action is in the past##suppress## (rwh) */
    __IO Ifx_Strict_32Bit WSIP1:1;         /**< \brief [16:16] Write enable for simplified increment prediction 1. (rwch) */
    __IO Ifx_Strict_32Bit WERZ1:1;         /**< \brief [17:17] Write enable for error zero 1. (rwch) */
    __IO Ifx_Strict_32Bit WPCMF1:1;        /**< \brief [18:18] Write enable for pulse correction mode fast 1 (rwch) */
    __IO Ifx_Strict_32Bit WFSYL1:1;        /**< \brief [19:19] Write enable for Force Synchronization Loss 1. (rwch) */
    __IO Ifx_Strict_32Bit WINCF1:1;        /**< \brief [20:20] ##suppress##Write enable for DPLL_INC_CNT1.INC_CNT1 fast##suppress## (rwch) */
    __IO Ifx_Strict_32Bit WPCMF1_INCCNT_B:1;    /**< \brief [21:21] ##suppress##Write enable of DPLL_CTRL_11.PCMF1_INCCNT_B##suppress## (rwch) */
    __IO Ifx_Strict_32Bit WADT:1;          /**< \brief [22:22] ##suppress##Write enable of DPLL_CTRL_11.ADT##suppress## (rwch) */
    __IO Ifx_Strict_32Bit WADS:1;          /**< \brief [23:23] ##suppress##Write enable of DPLL_CTRL_11.ADS##suppress## (rwch) */
    __IO Ifx_Strict_32Bit WSIP2:1;         /**< \brief [24:24] Write enable for simplified increment prediction 2. (rwch) */
    __IO Ifx_Strict_32Bit WERZ2:1;         /**< \brief [25:25] Write enable for error zero 2. (rwch) */
    __IO Ifx_Strict_32Bit WPCMF2:1;        /**< \brief [26:26] Write enable for pulse correction mode fast 2 (rwch) */
    __IO Ifx_Strict_32Bit WFSYL2:1;        /**< \brief [27:27] Write enable for Force Synchronization Loss 2. (rwch) */
    __IO Ifx_Strict_32Bit WINCF2:1;        /**< \brief [28:28] ##suppress##Write enable for DPLL_INC_CNT2.INC_CNT2 fast##suppress## (rwch) */
    __IO Ifx_Strict_32Bit WPCMF2_INCCNT_B:1;    /**< \brief [29:29] ##suppress##Write enable of DPLL_CTRL_11.PCMF2_INCCNT_B##suppress## (rwch) */
    __IO Ifx_Strict_32Bit WSTATE_EXT:1;    /**< \brief [30:30] ##suppress##Write enable of DPLL_CTRL_11.STATE_EXT##suppress## (rwch) */
    __IO Ifx_Strict_32Bit WACBU:1;         /**< \brief [31:31] ##suppress##Write enable for DPLL_CTRL_11.ACBU use; the DPLL_CTRL_11.ACBU values of DPLL_ID_PMTR_[n].ID_PMTR are used to decide if an Action is in the past##suppress## (rwch) */
} Ifx_GTM_CLS_DPLL_CTRL_11_Bits;

/** \brief DPLL control register 12 */
typedef struct _Ifx_GTM_CLS_DPLL_CTRL_12_Bits
{
    __IO Ifx_Strict_32Bit SUBINC_MUX_SEL:1;    /**< \brief [0:0] ##suppress##Selection of DPLL sub-increment source for CCM[0]_TBU_TS1 angle base.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :15;             /**< \brief [15:1] \internal Reserved */
    __IO Ifx_Strict_32Bit WSUBINC_MUX_SEL:1;    /**< \brief [16:16] ##suppress##Write enable for DPLL_CTRL_12.SUBINC_MUX_SEL.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :15;             /**< \brief [31:17] \internal Reserved */
} Ifx_GTM_CLS_DPLL_CTRL_12_Bits;

/** \brief DPLL_CTRL_1_SHADOW_STATE */
typedef struct _Ifx_GTM_CLS_DPLL_CTRL_1_SHADOW_STATE_Bits
{
    __I  Ifx_Strict_32Bit DMO:1;           /**< \brief [0:0] ##suppress##DPLL mode select.##suppress## (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [2:1] \internal Reserved */
    __I  Ifx_Strict_32Bit COA:1;           /**< \brief [3:3] ##suppress##Correction strategy in automatic end mode (DPLL_CTRL_1.DMO=0).##suppress## (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [4:4] \internal Reserved */
    __I  Ifx_Strict_32Bit SGE1:1;          /**< \brief [5:5] ##suppress##SUB_INC1 generator enable.##suppress## (rh) */
    __I  Ifx_Strict_32Bit DLM1:1;          /**< \brief [6:6] ##suppress##Direct Load Mode for SUB_INC1 generation##suppress## (rh) */
    __I  Ifx_Strict_32Bit PCM1:1;          /**< \brief [7:7] ##suppress##Pulse Correction Mode for SUB_INC1 generation.##suppress## (rh) */
    __I  Ifx_Strict_32Bit SGE2:1;          /**< \brief [8:8] ##suppress##SUB_INC2 generator enable.##suppress## (rh) */
    __I  Ifx_Strict_32Bit DLM2:1;          /**< \brief [9:9] ##suppress##Direct Load Mode for SUB_INC2 generation##suppress## (rh) */
    __I  Ifx_Strict_32Bit PCM2:1;          /**< \brief [10:10] ##suppress##Pulse Correction Mode for SUB_INC2 generation.##suppress## (rh) */
    __I  Ifx_Strict_32Bit :21;             /**< \brief [31:11] \internal Reserved */
} Ifx_GTM_CLS_DPLL_CTRL_1_SHADOW_STATE_Bits;

/** \brief DPLL_CTRL_1_SHADOW_TRIGGER */
typedef struct _Ifx_GTM_CLS_DPLL_CTRL_1_SHADOW_TRIGGER_Bits
{
    __I  Ifx_Strict_32Bit DMO:1;           /**< \brief [0:0] ##suppress##DPLL mode select.##suppress## (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [2:1] \internal Reserved */
    __I  Ifx_Strict_32Bit COA:1;           /**< \brief [3:3] ##suppress##Correction strategy in automatic end mode (DPLL_CTRL_1.DMO=0).##suppress## (rh) */
    __I  Ifx_Strict_32Bit PIT:1;           /**< \brief [4:4] ##suppress##Plausibility value PVT to next active TRIGGER is time related##suppress## (rh) */
    __I  Ifx_Strict_32Bit SGE1:1;          /**< \brief [5:5] ##suppress##SUB_INC1 generator enable.##suppress## (rh) */
    __I  Ifx_Strict_32Bit DLM1:1;          /**< \brief [6:6] ##suppress##Direct Load Mode for SUB_INC1 generation##suppress## (rh) */
    __I  Ifx_Strict_32Bit PCM1:1;          /**< \brief [7:7] ##suppress##Pulse Correction Mode for SUB_INC1 generation.##suppress## (rh) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_CLS_DPLL_CTRL_1_SHADOW_TRIGGER_Bits;

/** \brief Action Enable Register */
typedef struct _Ifx_GTM_CLS_DPLL_CTRL_2_Bits
{
    __I  Ifx_Strict_32Bit :8;              /**< \brief [7:0] \internal Reserved */
    __IO Ifx_Strict_32Bit AEN0:1;          /**< \brief [8:8] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN1:1;          /**< \brief [9:9] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN2:1;          /**< \brief [10:10] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN3:1;          /**< \brief [11:11] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN4:1;          /**< \brief [12:12] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN5:1;          /**< \brief [13:13] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN6:1;          /**< \brief [14:14] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN7:1;          /**< \brief [15:15] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit WAD0:1;          /**< \brief [16:16] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD1:1;          /**< \brief [17:17] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD2:1;          /**< \brief [18:18] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD3:1;          /**< \brief [19:19] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD4:1;          /**< \brief [20:20] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD5:1;          /**< \brief [21:21] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD6:1;          /**< \brief [22:22] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD7:1;          /**< \brief [23:23] Write control bit of Action [m]. (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_CTRL_2_Bits;

/** \brief Action Enable Register */
typedef struct _Ifx_GTM_CLS_DPLL_CTRL_3_Bits
{
    __I  Ifx_Strict_32Bit :8;              /**< \brief [7:0] \internal Reserved */
    __IO Ifx_Strict_32Bit AEN8:1;          /**< \brief [8:8] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN9:1;          /**< \brief [9:9] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN10:1;         /**< \brief [10:10] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN11:1;         /**< \brief [11:11] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN12:1;         /**< \brief [12:12] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN13:1;         /**< \brief [13:13] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN14:1;         /**< \brief [14:14] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN15:1;         /**< \brief [15:15] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit WAD8:1;          /**< \brief [16:16] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD9:1;          /**< \brief [17:17] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD10:1;         /**< \brief [18:18] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD11:1;         /**< \brief [19:19] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD12:1;         /**< \brief [20:20] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD13:1;         /**< \brief [21:21] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD14:1;         /**< \brief [22:22] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD15:1;         /**< \brief [23:23] Write control bit of Action [m]. (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_CTRL_3_Bits;

/** \brief Action Enable Register */
typedef struct _Ifx_GTM_CLS_DPLL_CTRL_4_Bits
{
    __I  Ifx_Strict_32Bit :8;              /**< \brief [7:0] \internal Reserved */
    __IO Ifx_Strict_32Bit AEN16:1;         /**< \brief [8:8] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN17:1;         /**< \brief [9:9] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN18:1;         /**< \brief [10:10] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN19:1;         /**< \brief [11:11] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN20:1;         /**< \brief [12:12] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN21:1;         /**< \brief [13:13] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN22:1;         /**< \brief [14:14] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN23:1;         /**< \brief [15:15] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit WAD16:1;         /**< \brief [16:16] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD17:1;         /**< \brief [17:17] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD18:1;         /**< \brief [18:18] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD19:1;         /**< \brief [19:19] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD20:1;         /**< \brief [20:20] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD21:1;         /**< \brief [21:21] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD22:1;         /**< \brief [22:22] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD23:1;         /**< \brief [23:23] Write control bit of Action [m]. (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_CTRL_4_Bits;

/** \brief Action Enable Register */
typedef struct _Ifx_GTM_CLS_DPLL_CTRL_5_Bits
{
    __I  Ifx_Strict_32Bit :8;              /**< \brief [7:0] \internal Reserved */
    __IO Ifx_Strict_32Bit AEN24:1;         /**< \brief [8:8] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN25:1;         /**< \brief [9:9] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN26:1;         /**< \brief [10:10] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN27:1;         /**< \brief [11:11] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN28:1;         /**< \brief [12:12] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN29:1;         /**< \brief [13:13] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN30:1;         /**< \brief [14:14] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit AEN31:1;         /**< \brief [15:15] Action [n] enable. (rw) */
    __IO Ifx_Strict_32Bit WAD24:1;         /**< \brief [16:16] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD25:1;         /**< \brief [17:17] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD26:1;         /**< \brief [18:18] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD27:1;         /**< \brief [19:19] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD28:1;         /**< \brief [20:20] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD29:1;         /**< \brief [21:21] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD30:1;         /**< \brief [22:22] Write control bit of Action [m]. (rw) */
    __IO Ifx_Strict_32Bit WAD31:1;         /**< \brief [23:23] Write control bit of Action [m]. (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_CTRL_5_Bits;

/** \brief DPLL_CTRL_EXT */
typedef struct _Ifx_GTM_CLS_DPLL_CTRL_EXT_Bits
{
    __IO Ifx_Strict_32Bit SNU:6;           /**< \brief [5:0] ##suppress##STATE number; SNU+1 is number of nominal STATE events in HALF_SCALE (1...32).##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :10;             /**< \brief [15:6] \internal Reserved */
    __IO Ifx_Strict_32Bit SYN_NS:6;        /**< \brief [21:16] ##suppress##Synchronization number of STATE; summarized number of virtual increments in HALF_SCALE##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :10;             /**< \brief [31:22] \internal Reserved */
} Ifx_GTM_CLS_DPLL_CTRL_EXT_Bits;

/** \brief Time to React for Action [n] */
typedef struct _Ifx_GTM_CLS_DPLL_DLA_Bits
{
    __IO Ifx_Strict_32Bit DLA:24;          /**< \brief [23:0] Time to react before the corresponding position value of a desired Action [n] is reached . (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_DLA_Bits;

/** \brief Calculated Relative Time to Action [n] */
typedef struct _Ifx_GTM_CLS_DPLL_DTA_Bits
{
    __IO Ifx_Strict_32Bit DTA:24;          /**< \brief [23:0] Calculated relative time to Action [n] (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_DTA_Bits;

/** \brief DPLL_DT_S[p] */
typedef struct _Ifx_GTM_CLS_DPLL_DT_S_Bits
{
    __IO Ifx_Strict_32Bit DT_S:24;         /**< \brief [23:0] ##suppress##Difference time of STATE; nominal increment duration values for each STATE increment in FULL_SCALE (considering no gap).##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_DT_S_Bits;

/** \brief DPLL_DT_S_ACT */
typedef struct _Ifx_GTM_CLS_DPLL_DT_S_ACT_Bits
{
    __IO Ifx_Strict_32Bit DT_S_ACT:24;     /**< \brief [23:0] ##suppress##Calculated duration of the last STATE increment.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_DT_S_ACT_Bits;

/** \brief Start value of DT_S_ACT */
typedef struct _Ifx_GTM_CLS_DPLL_DT_S_START_Bits
{
    __IO Ifx_Strict_32Bit DT_S_START:24;    /**< \brief [23:0] ##suppress##Start value of DPLL_DT_S_ACT for the first increment after DPLL_CTRL_11.SIP2 is set to 1##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_DT_S_START_Bits;

/** \brief DPLL_DT_T_ACT */
typedef struct _Ifx_GTM_CLS_DPLL_DT_T_ACT_Bits
{
    __IO Ifx_Strict_32Bit DT_T_ACT:24;     /**< \brief [23:0] ##suppress##Calculated duration of the last TRIGGER increment.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_DT_T_ACT_Bits;

/** \brief Start value of DT_T_ACT */
typedef struct _Ifx_GTM_CLS_DPLL_DT_T_START_Bits
{
    __IO Ifx_Strict_32Bit DT_T_START:24;    /**< \brief [23:0] ##suppress##Start value of DPLL_DT_T_ACT for the first increment after DPLL_CTRL_11.SIP1 is set to 1##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_DT_T_START_Bits;

/** \brief DPLL_EDT_S */
typedef struct _Ifx_GTM_CLS_DPLL_EDT_S_Bits
{
    __IO Ifx_Strict_32Bit EDT_S:24;        /**< \brief [23:0] ##suppress##Signed difference between actual value and prediction of the last STATE increment##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_EDT_S_Bits;

/** \brief DPLL_EDT_T */
typedef struct _Ifx_GTM_CLS_DPLL_EDT_T_Bits
{
    __IO Ifx_Strict_32Bit EDT_T:24;        /**< \brief [23:0] ##suppress##Signed difference between actual value and a simple prediction of the last TRIGGER increment:##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_EDT_T_Bits;

/** \brief Error Interrupt Enable Register */
typedef struct _Ifx_GTM_CLS_DPLL_EIRQ_EN_Bits
{
    __IO Ifx_Strict_32Bit PDI_EIRQ_EN:1;    /**< \brief [0:0] ##suppress##DPLL disable interrupt enable, when switch off of the DPLL_CTRL_1.DEN bit.##suppress## (rw) */
    __IO Ifx_Strict_32Bit PEI_EIRQ_EN:1;    /**< \brief [1:1] ##suppress##Enabling of DPLL interrupt enable, while switching on the DPLL_CTRL_1.DEN bit.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TINI_EIRQ_EN:1;    /**< \brief [2:2] ##suppress##TRIGGER minimum hold time violation interrupt enable bit.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TAXI_EIRQ_EN:1;    /**< \brief [3:3] ##suppress##TRIGGER maximum hold time violation interrupt enable bit.##suppress## (rw) */
    __IO Ifx_Strict_32Bit SISI_EIRQ_EN:1;    /**< \brief [4:4] ##suppress##STATE inactive slope interrupt enable bit.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TISI_EIRQ_EN:1;    /**< \brief [5:5] ##suppress##TRIGGER inactive slope interrupt enable bit.##suppress## (rw) */
    __IO Ifx_Strict_32Bit MSI_EIRQ_EN:1;    /**< \brief [6:6] ##suppress##Missing STATE interrupt enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit MTI_EIRQ_EN:1;    /**< \brief [7:7] ##suppress##Missing TRIGGER interrupt enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit SASI_EIRQ_EN:1;    /**< \brief [8:8] ##suppress##STATE active slope interrupt enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TASI_EIRQ_EN:1;    /**< \brief [9:9] ##suppress##TRIGGER active slope interrupt enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit PWI_EIRQ_EN:1;    /**< \brief [10:10] ##suppress##Plausibility window (PVT) violation interrupt of TRIGGER enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit W2I_EIRQ_EN:1;    /**< \brief [11:11] RAM write-access to RAM region 2 interrupt enable. (rw) */
    __IO Ifx_Strict_32Bit W1I_EIRQ_EN:1;    /**< \brief [12:12] Write-access to RAM region 1b or 1c interrupt. (rw) */
    __IO Ifx_Strict_32Bit GL1I_EIRQ_EN:1;    /**< \brief [13:13] Get lock interrupt enable, when lock is available. (rw) */
    __IO Ifx_Strict_32Bit LL1I_EIRQ_EN:1;    /**< \brief [14:14] Loss of lock interrupt enable. (rw) */
    __IO Ifx_Strict_32Bit EI_EIRQ_EN:1;    /**< \brief [15:15] Error interrupt enable (see status register). (rw) */
    __IO Ifx_Strict_32Bit GL2I_EIRQ_EN:1;    /**< \brief [16:16] ##suppress##Get lock interrupt enable for SUB_INC2.##suppress## (rw) */
    __IO Ifx_Strict_32Bit LL2I_EIRQ_EN:1;    /**< \brief [17:17] ##suppress##Loss of lock interrupt enable for SUB_INC2.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TE0I_EIRQ_EN:1;    /**< \brief [18:18] ##suppress##TRIGGER event interrupt 0 enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TE1I_EIRQ_EN:1;    /**< \brief [19:19] ##suppress##TRIGGER event interrupt 1 enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TE2I_EIRQ_EN:1;    /**< \brief [20:20] ##suppress##TRIGGER event interrupt 2 enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TE3I_EIRQ_EN:1;    /**< \brief [21:21] ##suppress##TRIGGER event interrupt 3 enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TE4I_EIRQ_EN:1;    /**< \brief [22:22] ##suppress##TRIGGER event interrupt 4 enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit CDTI_EIRQ_EN:1;    /**< \brief [23:23] ##suppress##Enable interrupt when calculation of TRIGGER duration done##suppress## (rw) */
    __IO Ifx_Strict_32Bit CDSI_EIRQ_EN:1;    /**< \brief [24:24] ##suppress##Enable interrupt when calculation of TRIGGER duration done##suppress## (rw) */
    __IO Ifx_Strict_32Bit TORI_EIRQ_EN:1;    /**< \brief [25:25] ##suppress##TRIGGER out of range interrupt##suppress## (rw) */
    __IO Ifx_Strict_32Bit SORI_EIRQ_EN:1;    /**< \brief [26:26] ##suppress##STATE out of range##suppress## (rw) */
    __IO Ifx_Strict_32Bit DCGI_EIRQ_EN:1;    /**< \brief [27:27] Direction change interrupt (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_GTM_CLS_DPLL_EIRQ_EN_Bits;

/** \brief DPLL_FTV_S */
typedef struct _Ifx_GTM_CLS_DPLL_FTV_S_Bits
{
    __IO Ifx_Strict_32Bit STATE_FT:24;     /**< \brief [23:0] ##suppress##Filter value of the last active STATE input.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_FTV_S_Bits;

/** \brief DPLL_FTV_T */
typedef struct _Ifx_GTM_CLS_DPLL_FTV_T_Bits
{
    __IO Ifx_Strict_32Bit TRIGGER_FT:24;    /**< \brief [23:0] ##suppress##Filter value of the last active TRIGGER input.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_FTV_T_Bits;

/** \brief DPLL_ID_PMTR_[n] */
typedef struct _Ifx_GTM_CLS_DPLL_ID_PMTR_Bits
{
    __IO Ifx_Strict_32Bit ID_PMTR:9;       /**< \brief [8:0] ##suppress##ID information to the input signal PMTR[n] from the ARU.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :23;             /**< \brief [31:9] \internal Reserved */
} Ifx_GTM_CLS_DPLL_ID_PMTR_Bits;

/** \brief Start value of ADD_IN_ADDER1 */
typedef struct _Ifx_GTM_CLS_DPLL_INCF1_OFFSET_Bits
{
    __IO Ifx_Strict_32Bit INCF1_OFFSET:24;    /**< \brief [23:0] Start value of the ADD_IN_ADDER1 (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_INCF1_OFFSET_Bits;

/** \brief Start value of the ADD_IN_ADDER2 */
typedef struct _Ifx_GTM_CLS_DPLL_INCF2_OFFSET_Bits
{
    __IO Ifx_Strict_32Bit INCF2_OFFSET:24;    /**< \brief [23:0] Start value of the ADD_IN_ADDER2 (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_INCF2_OFFSET_Bits;

/** \brief DPLL_INC_CNT1 */
typedef struct _Ifx_GTM_CLS_DPLL_INC_CNT1_Bits
{
    __IO Ifx_Strict_32Bit INC_CNT1:24;     /**< \brief [23:0] Actual number of pulses yet to be sent out at the current increment until the next active input signal in automatic end mode; (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_INC_CNT1_Bits;

/** \brief DPLL_INC_CNT1_MASK */
typedef struct _Ifx_GTM_CLS_DPLL_INC_CNT1_MASK_Bits
{
    __IO Ifx_Strict_32Bit INC_CNT1_NOTIFY:24;    /**< \brief [23:0] ##suppress##Notify value for DPLL_INC_CNT1.INC_CNT1.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_INC_CNT1_MASK_Bits;

/** \brief DPLL_INC_CNT2 */
typedef struct _Ifx_GTM_CLS_DPLL_INC_CNT2_Bits
{
    __IO Ifx_Strict_32Bit INC_CNT2:24;     /**< \brief [23:0] Actual number of pulses yet to be sent out at the current increment until the next active input signal in automatic end mode; (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_INC_CNT2_Bits;

/** \brief DPLL_INC_CNT2_MASK */
typedef struct _Ifx_GTM_CLS_DPLL_INC_CNT2_MASK_Bits
{
    __IO Ifx_Strict_32Bit INC_CNT2_NOTIFY:24;    /**< \brief [23:0] ##suppress##Notify value for DPLL_INC_CNT2.INC_CNT2 of register DPLL_INC_CNT2.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_INC_CNT2_MASK_Bits;

/** \brief Interrupt Enable Register */
typedef struct _Ifx_GTM_CLS_DPLL_IRQ_EN_Bits
{
    __IO Ifx_Strict_32Bit PDI_IRQ_EN:1;    /**< \brief [0:0] ##suppress##DPLL disable interrupt enable, when switch off of the DPLL_CTRL_1.DEN bit.##suppress## (rw) */
    __IO Ifx_Strict_32Bit PEI_IRQ_EN:1;    /**< \brief [1:1] ##suppress##DPLL enable interrupt enable, when switch on of the DPLL_CTRL_1.DEN bit.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TINI_IRQ_EN:1;    /**< \brief [2:2] ##suppress##TRIGGER minimum hold time violation interrupt enable bit.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TAXI_IRQ_EN:1;    /**< \brief [3:3] ##suppress##TRIGGER maximum hold time violation interrupt enable bit.##suppress## (rw) */
    __IO Ifx_Strict_32Bit SISI_IRQ_EN:1;    /**< \brief [4:4] ##suppress##STATE inactive slope interrupt enable bit.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TISI_IRQ_EN:1;    /**< \brief [5:5] ##suppress##TRIGGER inactive slope interrupt enable bit.##suppress## (rw) */
    __IO Ifx_Strict_32Bit MSI_IRQ_EN:1;    /**< \brief [6:6] ##suppress##Missing STATE interrupt enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit MTI_IRQ_EN:1;    /**< \brief [7:7] ##suppress##Missing TRIGGER interrupt enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit SASI_IRQ_EN:1;    /**< \brief [8:8] ##suppress##STATE active slope interrupt enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TASI_IRQ_EN:1;    /**< \brief [9:9] ##suppress##TRIGGER active slope interrupt enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit PWI_IRQ_EN:1;    /**< \brief [10:10] ##suppress##Plausibility window (PVT) violation interrupt of TRIGGER enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit W2I_IRQ_EN:1;    /**< \brief [11:11] RAM write-access to RAM region 2 interrupt enable. (rw) */
    __IO Ifx_Strict_32Bit W1I_IRQ_EN:1;    /**< \brief [12:12] Write-access to RAM region 1b or 1c interrupt. (rw) */
    __IO Ifx_Strict_32Bit GL1I_IRQ_EN:1;    /**< \brief [13:13] Get lock interrupt enable, when lock arises. (rw) */
    __IO Ifx_Strict_32Bit LL1I_IRQ_EN:1;    /**< \brief [14:14] Loss of lock interrupt enable. (rw) */
    __IO Ifx_Strict_32Bit EI_IRQ_EN:1;     /**< \brief [15:15] Error interrupt enable (see status register). (rw) */
    __IO Ifx_Strict_32Bit GL2I_IRQ_EN:1;    /**< \brief [16:16] ##suppress##Get lock interrupt enable for SUB_INC2.##suppress## (rw) */
    __IO Ifx_Strict_32Bit LL2I_IRQ_EN:1;    /**< \brief [17:17] ##suppress##Loss of lock interrupt enable for SUB_INC2.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TE0I_IRQ_EN:1;    /**< \brief [18:18] ##suppress##TRIGGER event interrupt 0 enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TE1I_IRQ_EN:1;    /**< \brief [19:19] ##suppress##TRIGGER event interrupt 1 enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TE2I_IRQ_EN:1;    /**< \brief [20:20] ##suppress##TRIGGER event interrupt 2 enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TE3I_IRQ_EN:1;    /**< \brief [21:21] ##suppress##TRIGGER event interrupt 3 enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TE4I_IRQ_EN:1;    /**< \brief [22:22] ##suppress##TRIGGER event interrupt 4 enable.##suppress## (rw) */
    __IO Ifx_Strict_32Bit CDTI_IRQ_EN:1;    /**< \brief [23:23] ##suppress##Enable interrupt when calculation of TRIGGER duration done##suppress## (rw) */
    __IO Ifx_Strict_32Bit CDSI_IRQ_EN:1;    /**< \brief [24:24] ##suppress##Enable interrupt when calculation of TRIGGER duration done##suppress## (rw) */
    __IO Ifx_Strict_32Bit TORI_IRQ_EN:1;    /**< \brief [25:25] ##suppress##TRIGGER out of range interrupt##suppress## (rw) */
    __IO Ifx_Strict_32Bit SORI_IRQ_EN:1;    /**< \brief [26:26] ##suppress##STATE out of range##suppress## (rw) */
    __IO Ifx_Strict_32Bit DCGI_IRQ_EN:1;    /**< \brief [27:27] Direction change interrupt (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_GTM_CLS_DPLL_IRQ_EN_Bits;

/** \brief Force Interrupt Register */
typedef struct _Ifx_GTM_CLS_DPLL_IRQ_FORCINT_Bits
{
    __IO Ifx_Strict_32Bit TRG_PDI:1;       /**< \brief [0:0] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.PDI by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_PEI:1;       /**< \brief [1:1] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.PEI by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_TINI:1;      /**< \brief [2:2] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.TINI by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_TAXI:1;      /**< \brief [3:3] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.TAXI by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_SISI:1;      /**< \brief [4:4] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.SISI by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_TISI:1;      /**< \brief [5:5] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.TISI by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_MSI:1;       /**< \brief [6:6] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.MSI  by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_MTI:1;       /**< \brief [7:7] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.MTI  by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_SASI:1;      /**< \brief [8:8] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.SASI  by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_TASI:1;      /**< \brief [9:9] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.TASI  by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_PWI:1;       /**< \brief [10:10] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.PWI  by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_W2I:1;       /**< \brief [11:11] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.W2I  by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_W1I:1;       /**< \brief [12:12] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.W1I  by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_GL1I:1;      /**< \brief [13:13] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.GL1I  by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_LL1I:1;      /**< \brief [14:14] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.LL1I  by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_EI:1;        /**< \brief [15:15] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.EI  by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_GL2I:1;      /**< \brief [16:16] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.GL2I by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_LL2I:1;      /**< \brief [17:17] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.LL2I by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_TE0I:1;      /**< \brief [18:18] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.TE0I by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_TE1I:1;      /**< \brief [19:19] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.TE1I by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_TE2I:1;      /**< \brief [20:20] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.TE2I by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_TE3I:1;      /**< \brief [21:21] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.TE3I by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_TE4I:1;      /**< \brief [22:22] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.TE4I by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_CDTI:1;      /**< \brief [23:23] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.CDTI by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_CDSI:1;      /**< \brief [24:24] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.CDSI by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_TORI:1;      /**< \brief [25:25] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.TORI by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_SORI:1;      /**< \brief [26:26] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.SORI by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_DCGI:1;      /**< \brief [27:27] ##suppress##Trigger the bit DPLL_IRQ_NOTIFY.DCGI by software.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_GTM_CLS_DPLL_IRQ_FORCINT_Bits;

/** \brief Interrupt Request Mode */
typedef struct _Ifx_GTM_CLS_DPLL_IRQ_MODE_Bits
{
    __IO Ifx_Strict_32Bit IRQ_MODE:2;      /**< \brief [1:0] IRQ mode selection (rwh) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_GTM_CLS_DPLL_IRQ_MODE_Bits;

/** \brief Interrupt Register */
typedef struct _Ifx_GTM_CLS_DPLL_IRQ_NOTIFY_Bits
{
    __IO Ifx_Strict_32Bit PDI:1;           /**< \brief [0:0] ##suppress##DPLL disable interrupt.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit PEI:1;           /**< \brief [1:1] ##suppress##DPLL enable interrupt.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit TINI:1;          /**< \brief [2:2] ##suppress##TRIGGER minimum hold time violation interrupt (dt <= DPLL_THMI.THMI > 0).##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit TAXI:1;          /**< \brief [3:3] ##suppress##TRIGGER maximum hold time violation interrupt (dt > DPLL_THMA.THMA > 0).##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit SISI:1;          /**< \brief [4:4] ##suppress##STATE inactive slope interrupt.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit TISI:1;          /**< \brief [5:5] ##suppress##TRIGGER inactive slope interrupt.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit MSI:1;           /**< \brief [6:6] ##suppress##Missing STATE interrupt.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit MTI:1;           /**< \brief [7:7] ##suppress##Missing TRIGGER interrupt.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit SASI:1;          /**< \brief [8:8] ##suppress##STATE active slope interrupt.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit TASI:1;          /**< \brief [9:9] ##suppress##TRIGGER active slope interrupt.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit PWI:1;           /**< \brief [10:10] ##suppress##Plausibility window (PVT) violation interrupt of TRIGGER.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit W2I:1;           /**< \brief [11:11] RAM write-access to RAM region 2 interrupt. (rw1ch) */
    __IO Ifx_Strict_32Bit W1I:1;           /**< \brief [12:12] Write-access to RAM region 1b or 1c interrupt. (rw1ch) */
    __IO Ifx_Strict_32Bit GL1I:1;          /**< \brief [13:13] ##suppress##Get lock interrupt for SUB_INC1.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit LL1I:1;          /**< \brief [14:14] ##suppress##Loss of lock interrupt for SUB_INC1.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit EI:1;            /**< \brief [15:15] Error interrupt (see status register bit 31). (rw1ch) */
    __IO Ifx_Strict_32Bit GL2I:1;          /**< \brief [16:16] ##suppress##Get lock interrupt for SUB_INC2.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit LL2I:1;          /**< \brief [17:17] ##suppress##Loss of lock interrupt for SUB_INC2.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit TE0I:1;          /**< \brief [18:18] ##suppress##TRIGGER event interrupt 0.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit TE1I:1;          /**< \brief [19:19] ##suppress##TRIGGER event interrupt 1.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit TE2I:1;          /**< \brief [20:20] ##suppress##TRIGGER event interrupt 2.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit TE3I:1;          /**< \brief [21:21] ##suppress##TRIGGER event interrupt 3.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit TE4I:1;          /**< \brief [22:22] ##suppress##TRIGGER event interrupt 4.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit CDTI:1;          /**< \brief [23:23] ##suppress##TRIGGER duration is calculated only when DPLL_NTI_CNT.NTI_CNT is zero.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit CDSI:1;          /**< \brief [24:24] ##suppress##Calculation of STATE duration done##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit TORI:1;          /**< \brief [25:25] ##suppress##TRIGGER out of range interrupt##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit SORI:1;          /**< \brief [26:26] ##suppress##STATE out of range##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit DCGI:1;          /**< \brief [27:27] Direction change interrupt (rw1ch) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_GTM_CLS_DPLL_IRQ_NOTIFY_Bits;

/** \brief DPLL_MEDT_S */
typedef struct _Ifx_GTM_CLS_DPLL_MEDT_S_Bits
{
    __IO Ifx_Strict_32Bit MEDT_S:24;       /**< \brief [23:0] ##suppress##Signed middle weighted difference between actual value and prediction of the last STATE increments; only calculated for DPLL_STATUS.SYS=1##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_MEDT_S_Bits;

/** \brief DPLL_MEDT_T */
typedef struct _Ifx_GTM_CLS_DPLL_MEDT_T_Bits
{
    __IO Ifx_Strict_32Bit MEDT_T:24;       /**< \brief [23:0] ##suppress##Signed middle weighted difference between actual value and prediction of the last TRIGGER increments; only calculated for DPLL_STATUS.SYT=1##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_MEDT_T_Bits;

/** \brief DPLL_MLS1 */
typedef struct _Ifx_GTM_CLS_DPLL_MLS1_Bits
{
    __IO Ifx_Strict_32Bit MLS1:18;         /**< \brief [17:0] ##suppress##Number of pulses between two STATE events (to be set and updated by the CPU).##suppress## (rw) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [23:18] \internal Reserved */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_MLS1_Bits;

/** \brief DPLL_MLS2 */
typedef struct _Ifx_GTM_CLS_DPLL_MLS2_Bits
{
    __IO Ifx_Strict_32Bit MLS2:18;         /**< \brief [17:0] ##suppress##Number of pulses between two STATE events (to be set and updated by the CPU).##suppress## (rw) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [23:18] \internal Reserved */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_MLS2_Bits;

/** \brief Missing Pulses to be Added or Subtracted Directly */
typedef struct _Ifx_GTM_CLS_DPLL_MPVAL1_Bits
{
    __IO Ifx_Strict_32Bit MPVAL1:16;       /**< \brief [15:0] ##suppress##Missing pulses for direct correction of SUB_INC1 pulses by the CPU;##suppress## (rw) */
    __IO Ifx_Strict_32Bit SIX1:8;          /**< \brief [23:16] ##suppress##Sign extension for DPLL_MPVAL1.MPVAL1##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_MPVAL1_Bits;

/** \brief Missing Pulses to be Added or Subtracted Directly */
typedef struct _Ifx_GTM_CLS_DPLL_MPVAL2_Bits
{
    __IO Ifx_Strict_32Bit MPVAL2:16;       /**< \brief [15:0] ##suppress##Missing pulses for direct correction of SUB_INC2 pulses by the CPU;##suppress## (rw) */
    __IO Ifx_Strict_32Bit SIX2:8;          /**< \brief [23:16] ##suppress##Sign extension for DPLL_MPVAL2.MPVAL2##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_MPVAL2_Bits;

/** \brief DPLL_MP_S */
typedef struct _Ifx_GTM_CLS_DPLL_MP_S_Bits
{
    __I  Ifx_Strict_32Bit MP_S:24;         /**< \brief [23:0] ##suppress##Number of missing pulses of the SUB_INC1/SUB_INC2 pulses in automatic end mode (DPLL_CTRL_1.DMO=0).##suppress## (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_MP_S_Bits;

/** \brief DPLL_MP_T */
typedef struct _Ifx_GTM_CLS_DPLL_MP_T_Bits
{
    __I  Ifx_Strict_32Bit MP_T:24;         /**< \brief [23:0] ##suppress##Number of missing pulses of the SUB_INC1 pulses in automatic end mode (DPLL_CTRL_1.DMO=0).##suppress## (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_MP_T_Bits;

/** \brief Calculated Relative Time to Action [n] */
typedef struct _Ifx_GTM_CLS_DPLL_NA_Bits
{
    __IO Ifx_Strict_32Bit DB:10;           /**< \brief [9:0] Number of events to Action [n] (fractional part). (rwh) */
    __IO Ifx_Strict_32Bit DW:10;           /**< \brief [19:10] Number of events to Action [n] (integer part). (rwh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [23:20] \internal Reserved */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_NA_Bits;

/** \brief Number of Pulses to be sent in Emergency Mode */
typedef struct _Ifx_GTM_CLS_DPLL_NMB_S_Bits
{
    __IO Ifx_Strict_32Bit NMB_S:20;        /**< \brief [19:0] ##suppress##NMB_S: Number of pulses for STATE; calculated number of pulses in emergency mode for the current STATE increment.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [23:20] \internal Reserved */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_NMB_S_Bits;

/** \brief Target Number of Pulses to be sent in Emergency Mode */
typedef struct _Ifx_GTM_CLS_DPLL_NMB_S_TAR_Bits
{
    __IO Ifx_Strict_32Bit NMB_S_TAR:20;    /**< \brief [19:0] ##suppress##Target number of pulses for STATE; calculated number of pulses in emergency mode for the current STATE increment without missing pulses.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [23:20] \internal Reserved */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_NMB_S_TAR_Bits;

/** \brief Last but one Target Number of Pulses to be sent in Emergency Mode */
typedef struct _Ifx_GTM_CLS_DPLL_NMB_S_TAR_OLD_Bits
{
    __IO Ifx_Strict_32Bit NMB_S_TAR_OLD:20;    /**< \brief [19:0] ##suppress##Target number of pulses for STATE; calculated number of pulses in emergency mode for the current STATE increment without missing pulses.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [23:20] \internal Reserved */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_NMB_S_TAR_OLD_Bits;

/** \brief Number of Pulses to be sent in Normal Mode */
typedef struct _Ifx_GTM_CLS_DPLL_NMB_T_Bits
{
    __IO Ifx_Strict_32Bit NMB_T:16;        /**< \brief [15:0] ##suppress##Number of pulses for TRIGGER; calculated number of pulses in normal mode for the current TRIGGER increment.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [23:16] \internal Reserved */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_NMB_T_Bits;

/** \brief Target Number of Pulses to be sent in Normal Mode */
typedef struct _Ifx_GTM_CLS_DPLL_NMB_T_TAR_Bits
{
    __IO Ifx_Strict_32Bit NMB_T_TAR:16;    /**< \brief [15:0] ##suppress##Target number of pulses for TRIGGER; calculated target number of pulses in normal mode for the current TRIGGER increment without missing pulses.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [23:16] \internal Reserved */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_NMB_T_TAR_Bits;

/** \brief Last but one Target Number of Pulses to be sent in Normal Mode */
typedef struct _Ifx_GTM_CLS_DPLL_NMB_T_TAR_OLD_Bits
{
    __IO Ifx_Strict_32Bit NMB_T_TAR_OLD:16;    /**< \brief [15:0] ##suppress##Target number of pulses for TRIGGER; calculated number of pulses in normal mode for the current TRIGGER increment without missing pulses.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [23:16] \internal Reserved */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_NMB_T_TAR_OLD_Bits;

/** \brief DPLL_NTI_CNT */
typedef struct _Ifx_GTM_CLS_DPLL_NTI_CNT_Bits
{
    __IO Ifx_Strict_32Bit NTI_CNT:10;      /**< \brief [9:0] Number of triggers to interrupt. (rwh) */
    __I  Ifx_Strict_32Bit :22;             /**< \brief [31:10] \internal Reserved */
} Ifx_GTM_CLS_DPLL_NTI_CNT_Bits;

/** \brief DPLL_NUSC */
typedef struct _Ifx_GTM_CLS_DPLL_NUSC_Bits
{
    __IO Ifx_Strict_32Bit NUSE:6;          /**< \brief [5:0] ##suppress##Number of recent STATE events used for SUB_INC1 and SUB_INC2 calculations modulo 2*(DPLL_CTRL_0.SNU+1).##suppress## (rwh) */
    __IO Ifx_Strict_32Bit FSS:1;           /**< \brief [6:6] ##suppress##Full scale of STATE.##suppress## (rwh) */
    __IO Ifx_Strict_32Bit SYN_S:6;         /**< \brief [12:7] Number of real and virtual events to be considered for the current increment. (rwh) */
    __IO Ifx_Strict_32Bit SYN_S_OLD:6;     /**< \brief [18:13] Number of real and virtual events to be considered for the last increment. (rwh) */
    __IO Ifx_Strict_32Bit VSN:6;           /**< \brief [24:19] ##suppress##Virtual STATE number.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [28:25] \internal Reserved */
    __IO Ifx_Strict_32Bit WNUS:1;          /**< \brief [29:29] ##suppress##Write control bit for DPLL_NUSC.NUSE, read as zero.##suppress## (rw) */
    __IO Ifx_Strict_32Bit WSYN:1;          /**< \brief [30:30] ##suppress##Write control bit for DPLL_NUSC.SYN_S and DPLL_NUSC.SYN_S_OLD, read as zero.##suppress## (rw) */
    __IO Ifx_Strict_32Bit WVSN:1;          /**< \brief [31:31] ##suppress##Write control bit for DPLL_NUSC.VSN, read as zero.##suppress## (rw) */
} Ifx_GTM_CLS_DPLL_NUSC_Bits;

/** \brief DPLL_NUSC_EXT1 */
typedef struct _Ifx_GTM_CLS_DPLL_NUSC_EXT1_Bits
{
    __IO Ifx_Strict_32Bit SYN_S:7;         /**< \brief [6:0] Number of real and virtual events to be considered for the current increment. (rwh) */
    __I  Ifx_Strict_32Bit :9;              /**< \brief [15:7] \internal Reserved */
    __IO Ifx_Strict_32Bit SYN_S_OLD:7;     /**< \brief [22:16] Number of real and virtual events to be considered for the last increment. (rwh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [29:23] \internal Reserved */
    __IO Ifx_Strict_32Bit WSYN:1;          /**< \brief [30:30] ##suppress##Write control bit for DPLL_NUSC_EXT1.SYN_S and DPLL_NUSC_EXT1.SYN_S_OLD; read as zero.##suppress## (rwch) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [31:31] \internal Reserved */
} Ifx_GTM_CLS_DPLL_NUSC_EXT1_Bits;

/** \brief DPLL_NUSC_EXT2 */
typedef struct _Ifx_GTM_CLS_DPLL_NUSC_EXT2_Bits
{
    __IO Ifx_Strict_32Bit NUSE:7;          /**< \brief [6:0] ##suppress##Number of recent STATE events used for SUB_INC1 and SUB_INC1 calculations modulo 2*(DPLL_CTRL_0.SNU+1).##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [14:7] \internal Reserved */
    __IO Ifx_Strict_32Bit FSS:1;           /**< \brief [15:15] ##suppress##FULL_SCALE of STATE; this value is to be set, when DPLL_NUSC_EXT2.NUSE is set to FULL_SCALE##suppress## (rwh) */
    __IO Ifx_Strict_32Bit VSN:7;           /**< \brief [22:16] ##suppress##Virtual STATE number; number of virtual STATE increments in the current DPLL_NUSC_EXT2.NUSE region.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [28:23] \internal Reserved */
    __IO Ifx_Strict_32Bit WNUS:1;          /**< \brief [29:29] ##suppress##Write control bit for DPLL_NUSC_EXT2.NUSE; read as zero.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [30:30] \internal Reserved */
    __IO Ifx_Strict_32Bit WVSN:1;          /**< \brief [31:31] ##suppress##Write control bit for DPLL_NUSC_EXT2.VSN; read as zero.##suppress## (rw) */
} Ifx_GTM_CLS_DPLL_NUSC_EXT2_Bits;

/** \brief DPLL_NUTC */
typedef struct _Ifx_GTM_CLS_DPLL_NUTC_Bits
{
    __IO Ifx_Strict_32Bit NUTE:10;         /**< \brief [9:0] ##suppress##Number of recent TRIGGER events used for SUB_INC1 and Action calculations modulo 2*(TNU_max+1).##suppress## (rwh) */
    __IO Ifx_Strict_32Bit FST:1;           /**< \brief [10:10] ##suppress##FULL_SCALE of TRIGGER.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [12:11] \internal Reserved */
    __IO Ifx_Strict_32Bit SYN_T:3;         /**< \brief [15:13] Number of real and virtual events to be considered for the current increment. (rwh) */
    __IO Ifx_Strict_32Bit SYN_T_OLD:3;     /**< \brief [18:16] Number of real and virtual events to be considered for the last increment. (rwh) */
    __IO Ifx_Strict_32Bit VTN:6;           /**< \brief [24:19] ##suppress##Virtual DPLL TRIGGER number:##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [28:25] \internal Reserved */
    __IO Ifx_Strict_32Bit WNUT:1;          /**< \brief [29:29] ##suppress##Write control bit for DPLL_NUTC.NUTE and DPLL_NUTC.FST. read as zero.##suppress## (rw) */
    __IO Ifx_Strict_32Bit WSYN:1;          /**< \brief [30:30] ##suppress##Write control bit for DPLL_NUTC.SYN_T and DPLL_NUTC.SYN_T_OLD. read as zero.##suppress## (rw) */
    __IO Ifx_Strict_32Bit WVTN:1;          /**< \brief [31:31] ##suppress##Write control bit for DPLL_NUTC.VTN. read as zero.##suppress## (rw) */
} Ifx_GTM_CLS_DPLL_NUTC_Bits;

/** \brief Offset and Switch old/new Address Register */
typedef struct _Ifx_GTM_CLS_DPLL_OSW_Bits
{
    __I  Ifx_Strict_32Bit SWON_S:1;        /**< \brief [0:0] ##suppress##Switch of new DPLL STATE.##suppress## (rh) */
    __I  Ifx_Strict_32Bit SWON_T:1;        /**< \brief [1:1] ##suppress##Switch of new TRIGGER.##suppress## (rh) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [7:2] \internal Reserved */
    __IO Ifx_Strict_32Bit OSS:2;           /**< \brief [9:8] Offset size of RAM region 2 (rwh) */
    __I  Ifx_Strict_32Bit :22;             /**< \brief [31:10] \internal Reserved */
} Ifx_GTM_CLS_DPLL_OSW_Bits;

/** \brief Projected Increment Sum Relations for Action [n] */
typedef struct _Ifx_GTM_CLS_DPLL_PDT_Bits
{
    __IO Ifx_Strict_32Bit DB:14;           /**< \brief [13:0] ##suppress##fractional part of relation between TRIGGER and STATE increments.##suppress## (rwh) */
    __IO Ifx_Strict_32Bit DW:10;           /**< \brief [23:14] ##suppress##Integer part of relation between TRIGGER and STATE increments.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_PDT_Bits;

/** \brief Position Request for Action [n] */
typedef struct _Ifx_GTM_CLS_DPLL_PSA_Bits
{
    __IO Ifx_Strict_32Bit PSA:24;          /**< \brief [23:0] Position information of a desired Action [n] (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_PSA_Bits;

/** \brief Calculated Position Value to start Action [n] */
typedef struct _Ifx_GTM_CLS_DPLL_PSAC_Bits
{
    __IO Ifx_Strict_32Bit PSAC:24;         /**< \brief [23:0] Calculated position value for the start of Action [n]. (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_PSAC_Bits;

/** \brief DPLL_PSSC */
typedef struct _Ifx_GTM_CLS_DPLL_PSSC_Bits
{
    __IO Ifx_Strict_32Bit PSSC:24;         /**< \brief [23:0] ##suppress##Calculated position stamp for the last STATE input;##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_PSSC_Bits;

/** \brief DPLL_PSSM */
typedef struct _Ifx_GTM_CLS_DPLL_PSSM_Bits
{
    __IO Ifx_Strict_32Bit PSSM:24;         /**< \brief [23:0] ##suppress##Position stamp of STATE, measured; Measured position stamp of last active STATE input.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_PSSM_Bits;

/** \brief DPLL_PSSM_OLD */
typedef struct _Ifx_GTM_CLS_DPLL_PSSM_OLD_Bits
{
    __IO Ifx_Strict_32Bit PSSM_OLD:24;     /**< \brief [23:0] ##suppress##Last but one position stamp of STATE, measured; Measured position stamp of last but one active STATE input.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_PSSM_OLD_Bits;

/** \brief DPLL_PSTC */
typedef struct _Ifx_GTM_CLS_DPLL_PSTC_Bits
{
    __IO Ifx_Strict_32Bit PSTC:24;         /**< \brief [23:0] ##suppress##Calculated position stamp of last TRIGGER input;##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_PSTC_Bits;

/** \brief DPLL_PSTM */
typedef struct _Ifx_GTM_CLS_DPLL_PSTM_Bits
{
    __IO Ifx_Strict_32Bit PSTM:24;         /**< \brief [23:0] ##suppress##Position stamp of TRIGGER, measured; Measured position stamp of last active TRIGGER input.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_PSTM_Bits;

/** \brief DPLL_PSTM_OLD */
typedef struct _Ifx_GTM_CLS_DPLL_PSTM_OLD_Bits
{
    __IO Ifx_Strict_32Bit PSTM_OLD:24;     /**< \brief [23:0] ##suppress##Last but one position stamp of TRIGGER, measured; Measured position stamp of last but one active TRIGGER input.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_PSTM_OLD_Bits;

/** \brief DPLL_PVT */
typedef struct _Ifx_GTM_CLS_DPLL_PVT_Bits
{
    __IO Ifx_Strict_32Bit PVT:24;          /**< \brief [23:0] ##suppress##Plausibility value of next active TRIGGER slope.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_PVT_Bits;

/** \brief DPLL RAM1B reserved  data */
typedef struct _Ifx_GTM_CLS_DPLL_RAM1B_RSVD_0_Bits
{
    __IO Ifx_Strict_32Bit RSVD:24;         /**< \brief [23:0] ##suppress##Reserved Data word, no DPLL internal use.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_RAM1B_RSVD_0_Bits;

/** \brief DPLL RAM1B reserved  data */
typedef struct _Ifx_GTM_CLS_DPLL_RAM1B_RSVD_1_Bits
{
    __IO Ifx_Strict_32Bit RSVD:24;         /**< \brief [23:0] ##suppress##Reserved Data word, no DPLL internal use.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_RAM1B_RSVD_1_Bits;

/** \brief DPLL RAM1B reserved  data */
typedef struct _Ifx_GTM_CLS_DPLL_RAM1B_RSVD_2_Bits
{
    __IO Ifx_Strict_32Bit RSVD:24;         /**< \brief [23:0] ##suppress##Reserved Data word, no DPLL internal use.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_RAM1B_RSVD_2_Bits;

/** \brief DPLL RAM1B reserved  data [k] */
typedef struct _Ifx_GTM_CLS_DPLL_RAM1B_RSVD_3_Bits
{
    __IO Ifx_Strict_32Bit RSVD:24;         /**< \brief [23:0] ##suppress##Reserved Data word, no DPLL internal use.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_RAM1B_RSVD_3_Bits;

/** \brief DPLL RAM1B reserved  data [k] */
typedef struct _Ifx_GTM_CLS_DPLL_RAM1B_RSVD_4_Bits
{
    __IO Ifx_Strict_32Bit RSVD:24;         /**< \brief [23:0] ##suppress##Reserved data word, no DPLL internal use.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_RAM1B_RSVD_4_Bits;

/** \brief DPLL RAM1B reserved data [k] */
typedef struct _Ifx_GTM_CLS_DPLL_RAM1B_RSVD_5_Bits
{
    __IO Ifx_Strict_32Bit RSVD:24;         /**< \brief [23:0] ##suppress##Reserved data word, no DPLL internal use.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_RAM1B_RSVD_5_Bits;

/** \brief DPLL RAM1B reserved data [k] */
typedef struct _Ifx_GTM_CLS_DPLL_RAM1B_RSVD_6_Bits
{
    __IO Ifx_Strict_32Bit RSVD:24;         /**< \brief [23:0] ##suppress##Reserved data word, no DPLL internal use.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_RAM1B_RSVD_6_Bits;

/** \brief Register to control the RAM Initialization */
typedef struct _Ifx_GTM_CLS_DPLL_RAM_INI_Bits
{
    __I  Ifx_Strict_32Bit INIT_1A:1;       /**< \brief [0:0] RAM region 1a initialization in progress (rh) */
    __I  Ifx_Strict_32Bit INIT_1BC:1;      /**< \brief [1:1] RAM region 1b and 1c initialization in progress (rh) */
    __I  Ifx_Strict_32Bit INIT_2:1;        /**< \brief [2:2] RAM region 2 initialization in progress (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [3:3] \internal Reserved */
    __IO Ifx_Strict_32Bit INIT_RAM:1;      /**< \brief [4:4] RAM regions 1a, 1b and 2 are to be initialized. (rw1sh) */
    __I  Ifx_Strict_32Bit :27;             /**< \brief [31:5] \internal Reserved */
} Ifx_GTM_CLS_DPLL_RAM_INI_Bits;

/** \brief DPLL_RCDT_SX */
typedef struct _Ifx_GTM_CLS_DPLL_RCDT_SX_Bits
{
    __IO Ifx_Strict_32Bit RCDT_SX:24;      /**< \brief [23:0] Reciprocal value of expected increment duration *2^32 while only the lower 24 bits are used. (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_RCDT_SX_Bits;

/** \brief DPLL_RCDT_SX_NOM */
typedef struct _Ifx_GTM_CLS_DPLL_RCDT_SX_NOM_Bits
{
    __IO Ifx_Strict_32Bit RCDT_SX_NOM:24;    /**< \brief [23:0] Reciprocal value of expected increment duration *2^32 while only the lower 24 bits are used. (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_RCDT_SX_NOM_Bits;

/** \brief DPLL_RCDT_TX */
typedef struct _Ifx_GTM_CLS_DPLL_RCDT_TX_Bits
{
    __IO Ifx_Strict_32Bit RCDT_TX:24;      /**< \brief [23:0] Reciprocal value of expected increment duration *2^32 while only the lower 24 bits are used. (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_RCDT_TX_Bits;

/** \brief DPLL_RCDT_TX_NOM */
typedef struct _Ifx_GTM_CLS_DPLL_RCDT_TX_NOM_Bits
{
    __IO Ifx_Strict_32Bit RCDT_TX_NOM:24;    /**< \brief [23:0] Reciprocal value of expected increment duration *2^32 while only the lower 24 bits are used. (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_RCDT_TX_NOM_Bits;

/** \brief DPLL_RDT_S[p] */
typedef struct _Ifx_GTM_CLS_DPLL_RDT_S_Bits
{
    __IO Ifx_Strict_32Bit RDT_S:24;        /**< \brief [23:0] ##suppress##Reciprocal difference time of STATE; nominal reciprocal value of the number of time stamp clocks measured in the corresponding increment *2^32 while only the lower 24 bits are used; no gap considered. The LSB is rounded up when the next truncated bit is 1.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_RDT_S_Bits;

/** \brief DPLL_RDT_S_ACT */
typedef struct _Ifx_GTM_CLS_DPLL_RDT_S_ACT_Bits
{
    __IO Ifx_Strict_32Bit RDT_S_ACT:24;    /**< \brief [23:0] ##suppress##Reciprocal value of last STATE increment *2^32, only the lower 24 bits are used; the LSB is rounded up when the next truncated bit is 1.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_RDT_S_ACT_Bits;

/** \brief DPLL_RDT_T_ACT */
typedef struct _Ifx_GTM_CLS_DPLL_RDT_T_ACT_Bits
{
    __IO Ifx_Strict_32Bit RDT_T_ACT:24;    /**< \brief [23:0] ##suppress##Reciprocal value of last TRIGGER increment *2^32, only the lower 24 bits are used; the LSB is rounded up when the next truncated bit is 1.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_RDT_T_ACT_Bits;

/** \brief DPLL memory RR2 word [m] */
typedef struct _Ifx_GTM_CLS_DPLL_RR2_Bits
{
    __IO Ifx_Strict_32Bit DATA:24;         /**< \brief [23:0] Data (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_RR2_Bits;

/** \brief DPLL_SIDEL */
typedef struct _Ifx_GTM_CLS_DPLL_SIDEL_Bits
{
    __IO Ifx_Strict_32Bit SIDEL:24;        /**< \brief [23:0] ##suppress##STATE input delay##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_SIDEL_Bits;

/** \brief DPLL_SLR */
typedef struct _Ifx_GTM_CLS_DPLL_SLR_Bits
{
    __IO Ifx_Strict_32Bit SLR:8;           /**< \brief [7:0] ##suppress##Value is to be multiplied with the last nominal STATE duration in order to get the range for the next STATE event without setting DPLL_STATUS.SOR##suppress## (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [23:8] \internal Reserved */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_SLR_Bits;

/** \brief Status of the state machine states */
typedef struct _Ifx_GTM_CLS_DPLL_STA_Bits
{
    __I  Ifx_Strict_32Bit STA_T:8;         /**< \brief [7:0] ##suppress##Status of TRIGGER state machine; state binary coded##suppress## (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [8:8] \internal Reserved */
    __I  Ifx_Strict_32Bit CNT_T:3;         /**< \brief [11:9] ##suppress##Count TRIGGER; this reflects the count of active TRIGGER slopes (mod8).##suppress## (rh) */
    __I  Ifx_Strict_32Bit STA_S:8;         /**< \brief [19:12] ##suppress##Status of STATE state machine; state binary coded##suppress## (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [20:20] \internal Reserved */
    __I  Ifx_Strict_32Bit CNT_S:3;         /**< \brief [23:21] ##suppress##Count STATE; this reflects the count of active STATE slopes (mod8).##suppress## (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_STA_Bits;

/** \brief Status Register */
typedef struct _Ifx_GTM_CLS_DPLL_STATUS_Bits
{
    __IO Ifx_Strict_32Bit FPCE:1;          /**< \brief [0:0] Fast pulse correction error (rwh) */
    __IO Ifx_Strict_32Bit CSO:1;           /**< \brief [1:1] ##suppress##Calculated STATE duration overflow.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [2:2] \internal Reserved */
    __IO Ifx_Strict_32Bit CTO:1;           /**< \brief [3:3] ##suppress##Calculated TRIGGER duration overflow.##suppress## (rwh) */
    __IO Ifx_Strict_32Bit CRO:1;           /**< \brief [4:4] Calculated Reciprocal value overflow. (rwh) */
    __I  Ifx_Strict_32Bit RCS:1;           /**< \brief [5:5] ##suppress##Resolution conflict STATE.##suppress## (rh) */
    __I  Ifx_Strict_32Bit RCT:1;           /**< \brief [6:6] ##suppress##Resolution conflict TRIGGER.##suppress## (rh) */
    __I  Ifx_Strict_32Bit PSE:1;           /**< \brief [7:7] Prediction space configuration error (rh) */
    __IO Ifx_Strict_32Bit SOR:1;           /**< \brief [8:8] ##suppress##STATE out of range##suppress## (rwh) */
    __IO Ifx_Strict_32Bit MS:1;            /**< \brief [9:9] ##suppress##Missing STATE detected according to DPLL_SOV.##suppress## (rwh) */
    __IO Ifx_Strict_32Bit TOR:1;           /**< \brief [10:10] ##suppress##TRIGGER out of range##suppress## (rwh) */
    __IO Ifx_Strict_32Bit MT:1;            /**< \brief [11:11] ##suppress##Missing TRIGGER detected according to DPLL_TOV##suppress## (rwh) */
    __IO Ifx_Strict_32Bit RAM2_ERR:1;      /**< \brief [12:12] ##suppress##DPLL internal access to not configured RAM2 memory space##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [14:13] \internal Reserved */
    __I  Ifx_Strict_32Bit LOW_RES:1;       /**< \brief [15:15] ##suppress##Low-resolution of CCM[0]_TBU_TS0 is used for DPLL input; this value reflects the input signal LOW_RES##suppress## (rh) */
    __I  Ifx_Strict_32Bit CSVS:1;          /**< \brief [16:16] ##suppress##Current signal value STATE##suppress## (rh) */
    __I  Ifx_Strict_32Bit CSVT:1;          /**< \brief [17:17] ##suppress##Current signal value TRIGGER##suppress## (rh) */
    __I  Ifx_Strict_32Bit CAIP2:1;         /**< \brief [18:18] Calculation of upper half Actions in progress (rh) */
    __I  Ifx_Strict_32Bit CAIP1:1;         /**< \brief [19:19] Calculation of lower half Actions in progress (rh) */
    __I  Ifx_Strict_32Bit ISN:1;           /**< \brief [20:20] ##suppress##Incrementing number of STATE events is not plausible; Bit is set when the number of states is different from profile##suppress## (rh) */
    __I  Ifx_Strict_32Bit ITN:1;           /**< \brief [21:21] ##suppress##Incrementing number of TRIGGER events is not plausible; Bit is set when the number of TRIGGERS is different from profile##suppress## (rh) */
    __I  Ifx_Strict_32Bit BWD2:1;          /**< \brief [22:22] ##suppress##Backward drive of SUB_INC2##suppress## (rh) */
    __I  Ifx_Strict_32Bit BWD1:1;          /**< \brief [23:23] ##suppress##Backwards drive of SUB_INC1##suppress## (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [24:24] \internal Reserved */
    __I  Ifx_Strict_32Bit LOCK2:1;         /**< \brief [25:25] ##suppress##DPLL Lock status concerning SUB_INC2##suppress## (rh) */
    __I  Ifx_Strict_32Bit SYS:1;           /**< \brief [26:26] ##suppress##Synchronization condition of STATE fixed.##suppress## (rh) */
    __I  Ifx_Strict_32Bit SYT:1;           /**< \brief [27:27] ##suppress##Synchronization condition of TRIGGER fixed.##suppress## (rh) */
    __I  Ifx_Strict_32Bit FSD:1;           /**< \brief [28:28] ##suppress##First STATE detected.##suppress## (rh) */
    __I  Ifx_Strict_32Bit FTD:1;           /**< \brief [29:29] ##suppress##First TRIGGER detected.##suppress## (rh) */
    __I  Ifx_Strict_32Bit LOCK1:1;         /**< \brief [30:30] ##suppress##DPLL Lock status concerning SUB_INC1.##suppress## (rh) */
    __I  Ifx_Strict_32Bit ERR:1;           /**< \brief [31:31] Error during configuration or operation resulting in unexpected values. (rh) */
} Ifx_GTM_CLS_DPLL_STATUS_Bits;

/** \brief DPLL_STA_FLAG */
typedef struct _Ifx_GTM_CLS_DPLL_STA_FLAG_Bits
{
    __IO Ifx_Strict_32Bit STA_FLAG_T:1;    /**< \brief [0:0] Flag according to DPLL_MASK.STA_NOTIFY_T (rwh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [7:1] \internal Reserved */
    __IO Ifx_Strict_32Bit STA_FLAG_S:1;    /**< \brief [8:8] ##suppress##Flag according to DPLL_STA_MASK.STA_NOTIFY_S##suppress## (rwh) */
    __IO Ifx_Strict_32Bit INC_CNT1_FLAG:1;    /**< \brief [9:9] ##suppress##Flag according to DPLL_INC_CNT1_MASK.INC_CNT1_NOTIFY##suppress## (rwh) */
    __IO Ifx_Strict_32Bit INC_CNT2_FLAG:1;    /**< \brief [10:10] ##suppress##Flag according to DPLL_INC_CNT2_MASK.INC_CNT2_NOTIFY##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :21;             /**< \brief [31:11] \internal Reserved */
} Ifx_GTM_CLS_DPLL_STA_FLAG_Bits;

/** \brief DPLL_STA_MASK */
typedef struct _Ifx_GTM_CLS_DPLL_STA_MASK_Bits
{
    __IO Ifx_Strict_32Bit STA_NOTIFY_T:8;    /**< \brief [7:0] ##suppress##Notify value for DPLL_STA.STA_T.##suppress## (rw) */
    __IO Ifx_Strict_32Bit STA_NOTIFY_S:8;    /**< \brief [15:8] ##suppress##Notify value for DPLL_STA.STA_S.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_DPLL_STA_MASK_Bits;

/** \brief Software triggered input events */
typedef struct _Ifx_GTM_CLS_DPLL_SW_TRIG_Bits
{
    __IO Ifx_Strict_32Bit TRIG_EVENT:1;    /**< \brief [0:0] ##suppress##Software triggered input event for TRIGGER##suppress## (rw) */
    __IO Ifx_Strict_32Bit WTRIG_EVENT:1;    /**< \brief [1:1] ##suppress##Write enable for DPLL_SW_TRIG.TRIG_EVENT##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRIG_LEVEL:1;    /**< \brief [2:2] ##suppress##Input signal level of software triggered input event for TRIGGER##suppress## (rw) */
    __IO Ifx_Strict_32Bit WTRIG_LEVEL:1;    /**< \brief [3:3] ##suppress##Write enable for DPLL_SW_TRIG.TRIG_LEVEL##suppress## (rw) */
    __IO Ifx_Strict_32Bit STATE_EVENT:1;    /**< \brief [4:4] ##suppress##Software triggered input event for STATE##suppress## (rw) */
    __IO Ifx_Strict_32Bit WSTATE_EVENT:1;    /**< \brief [5:5] ##suppress##Write enable for DPLL_SW_TRIG.STATE_EVENT##suppress## (rw) */
    __IO Ifx_Strict_32Bit STATE_LEVEL:1;    /**< \brief [6:6] ##suppress##Input signal level of software triggered input event for STATE##suppress## (rw) */
    __IO Ifx_Strict_32Bit WSTATE_LEVEL:1;    /**< \brief [7:7] ##suppress##Write enable for DPLL_SW_TRIG.STATE_LEVEL##suppress## (rw) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_CLS_DPLL_SW_TRIG_Bits;

/** \brief DPLL_TBU_TS0_S */
typedef struct _Ifx_GTM_CLS_DPLL_TBU_TS0_S_Bits
{
    __IO Ifx_Strict_32Bit DPLL_TBU_TS0_S:24;    /**< \brief [23:0] ##suppress##Value of CCM[0]_TBU_TS0 at the last STATE event;##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_TBU_TS0_S_Bits;

/** \brief DPLL_TBU_TS0_T */
typedef struct _Ifx_GTM_CLS_DPLL_TBU_TS0_T_Bits
{
    __IO Ifx_Strict_32Bit DPLL_TBU_TS0_T:24;    /**< \brief [23:0] ##suppress##Value of CCM[0]_TBU_TS0 at the last TRIGGER event;##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_TBU_TS0_T_Bits;

/** \brief DPLL_THMA */
typedef struct _Ifx_GTM_CLS_DPLL_THMA_Bits
{
    __IO Ifx_Strict_32Bit THMA:16;         /**< \brief [15:0] ##suppress##Maximal time between active and inactive TRIGGER slope; the time value corresponds to the time stamp clock counts: This means the clock selected for the TBU_CH0_BASE (see TBU_CH0_CTRL register)##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [23:16] \internal Reserved */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_THMA_Bits;

/** \brief DPLL_THMI */
typedef struct _Ifx_GTM_CLS_DPLL_THMI_Bits
{
    __IO Ifx_Strict_32Bit THMI:16;         /**< \brief [15:0] ##suppress##Minimal time between active and inactive TRIGGER slope; the time value corresponds to the time stamp clock counts: This means the clock selected for the TBU_CH0_BASE (see TBU_CH0_CTRL register)##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [23:16] \internal Reserved */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_THMI_Bits;

/** \brief DPLL_THVAL */
typedef struct _Ifx_GTM_CLS_DPLL_THVAL_Bits
{
    __IO Ifx_Strict_32Bit THVAL:24;        /**< \brief [23:0] ##suppress##Measured time from the last active slope to the next inactive TRIGGER slope in time stamp clock counts: This means the clock selected for the TBU_CH0_BASE;##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_THVAL_Bits;

/** \brief DPLL_THVAL2 */
typedef struct _Ifx_GTM_CLS_DPLL_THVAL2_Bits
{
    __I  Ifx_Strict_32Bit THVAL:24;        /**< \brief [23:0] ##suppress##Measured last pulse time from active to inactive slope of TRIGGER after correction of input slope filter delays##suppress## (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_THVAL2_Bits;

/** \brief DPLL_TIDEL */
typedef struct _Ifx_GTM_CLS_DPLL_TIDEL_Bits
{
    __IO Ifx_Strict_32Bit TIDEL:24;        /**< \brief [23:0] ##suppress##TRIGGER input delay##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_TIDEL_Bits;

/** \brief DPLL_TLR */
typedef struct _Ifx_GTM_CLS_DPLL_TLR_Bits
{
    __IO Ifx_Strict_32Bit TLR:8;           /**< \brief [7:0] ##suppress##Value is to be multiplied with the last nominal TRIGGER duration in order to get the range for the next TRIGGER event without setting DPLL_STATUS.TOR.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [23:8] \internal Reserved */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_TLR_Bits;

/** \brief DPLL_TOV */
typedef struct _Ifx_GTM_CLS_DPLL_TOV_Bits
{
    __IO Ifx_Strict_32Bit TOV_DB:10;       /**< \brief [9:0] ##suppress##Decision value (fractional part) for missing TRIGGER interrupt.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TOV_DW:6;        /**< \brief [15:10] ##suppress##Decision value (integer part) for missing TRIGGER interrupt.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [23:16] \internal Reserved */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_TOV_Bits;

/** \brief DPLL_TOV_S */
typedef struct _Ifx_GTM_CLS_DPLL_TOV_S_Bits
{
    __IO Ifx_Strict_32Bit DB:10;           /**< \brief [9:0] ##suppress##Decision value (fractional part) for missing STATE interrupt.##suppress## (rw) */
    __IO Ifx_Strict_32Bit DW:6;            /**< \brief [15:10] ##suppress##Decision value (integer part) for missing STATE interrupt.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [23:16] \internal Reserved */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_TOV_S_Bits;

/** \brief Calculated Time Value to start Action [n] */
typedef struct _Ifx_GTM_CLS_DPLL_TSAC_Bits
{
    __IO Ifx_Strict_32Bit TSAC:24;         /**< \brief [23:0] Calculated time stamp for Action [n] (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_TSAC_Bits;

/** \brief DPLL_TSF_S[p] */
typedef struct _Ifx_GTM_CLS_DPLL_TSF_S_Bits
{
    __IO Ifx_Strict_32Bit TSF_S:24;        /**< \brief [23:0] ##suppress##Time stamp field of STATE; Time stamp value of each active STATE event.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_TSF_S_Bits;

/** \brief DPLL_TS_S */
typedef struct _Ifx_GTM_CLS_DPLL_TS_S_Bits
{
    __IO Ifx_Strict_32Bit STATE_TS:24;     /**< \brief [23:0] ##suppress##Time stamp value of the last active STATE input.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_TS_S_Bits;

/** \brief DPLL_TS_S_OLD */
typedef struct _Ifx_GTM_CLS_DPLL_TS_S_OLD_Bits
{
    __IO Ifx_Strict_32Bit STATE_TS_OLD:24;    /**< \brief [23:0] ##suppress##Time stamp value of the last active STATE input.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_TS_S_OLD_Bits;

/** \brief DPLL_TS_T */
typedef struct _Ifx_GTM_CLS_DPLL_TS_T_Bits
{
    __IO Ifx_Strict_32Bit TRIGGER_TS:24;    /**< \brief [23:0] ##suppress##Time stamp value of the last active TRIGGER input.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_TS_T_Bits;

/** \brief DPLL_TS_T_OLD */
typedef struct _Ifx_GTM_CLS_DPLL_TS_T_OLD_Bits
{
    __IO Ifx_Strict_32Bit TRIGGER_TS_OLD:24;    /**< \brief [23:0] ##suppress##Time stamp value of the last but one active TRIGGER input.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_DPLL_TS_T_OLD_Bits;

/** \brief FIFO data memory word [m] */
typedef struct _Ifx_GTM_CLS_FIFO_MEMORY_Bits
{
    __IO Ifx_Strict_32Bit DATA:29;         /**< \brief [28:0] ##suppress##FIFO memory location##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [31:29] \internal Reserved */
} Ifx_GTM_CLS_FIFO_MEMORY_Bits;

/** \brief ICM_IRQG_0 */
typedef struct _Ifx_GTM_CLS_ICM_IRQG_0_Bits
{
    __I  Ifx_Strict_32Bit ARU_NEW_DATA0_IRQ:1;    /**< \brief [0:0] ARU_NEW_DATA0_I interrupt (rh) */
    __I  Ifx_Strict_32Bit ARU_NEW_DATA1_IRQ:1;    /**< \brief [1:1] ARU_NEW_DATA1_I interrupt (rh) */
    __I  Ifx_Strict_32Bit ARU_ACC_ACK_IRQ:1;    /**< \brief [2:2] ARU_ACC_ACK_I interrupt (rh) */
    __I  Ifx_Strict_32Bit BRC_IRQ:1;       /**< \brief [3:3] ##suppress##BRC shared sub-module interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit AEI_IRQ:1;       /**< \brief [4:4] ##suppress##ICM_IRQG_0.AEI_IRQ: AEI_IRQ interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit CMP_IRQ:1;       /**< \brief [5:5] ##suppress##CMP shared sub-module interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit SPE0_IRQ:1;      /**< \brief [6:6] ##suppress##SPE[j] shared sub-module interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit SPE1_IRQ:1;      /**< \brief [7:7] ##suppress##SPE[j] shared sub-module interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit SPE2_IRQ:1;      /**< \brief [8:8] ##suppress##SPE[j] shared sub-module interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit SPE3_IRQ:1;      /**< \brief [9:9] ##suppress##SPE[j] shared sub-module interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit SPE4_IRQ:1;      /**< \brief [10:10] ##suppress##SPE[j] shared sub-module interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit SPE5_IRQ:1;      /**< \brief [11:11] ##suppress##SPE[j] shared sub-module interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [13:12] \internal Reserved */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [15:14] \internal Reserved */
    __I  Ifx_Strict_32Bit PSM0_CH0_IRQ:1;    /**< \brief [16:16] PSM0 shared sub-module channel [x] interrupt. (rh) */
    __I  Ifx_Strict_32Bit PSM0_CH1_IRQ:1;    /**< \brief [17:17] PSM0 shared sub-module channel [x] interrupt. (rh) */
    __I  Ifx_Strict_32Bit PSM0_CH2_IRQ:1;    /**< \brief [18:18] PSM0 shared sub-module channel [x] interrupt. (rh) */
    __I  Ifx_Strict_32Bit PSM0_CH3_IRQ:1;    /**< \brief [19:19] PSM0 shared sub-module channel [x] interrupt. (rh) */
    __I  Ifx_Strict_32Bit PSM0_CH4_IRQ:1;    /**< \brief [20:20] PSM0 shared sub-module channel [x] interrupt. (rh) */
    __I  Ifx_Strict_32Bit PSM0_CH5_IRQ:1;    /**< \brief [21:21] PSM0 shared sub-module channel [x] interrupt. (rh) */
    __I  Ifx_Strict_32Bit PSM0_CH6_IRQ:1;    /**< \brief [22:22] PSM0 shared sub-module channel [x] interrupt. (rh) */
    __I  Ifx_Strict_32Bit PSM0_CH7_IRQ:1;    /**< \brief [23:23] PSM0 shared sub-module channel [x] interrupt. (rh) */
    __I  Ifx_Strict_32Bit PSM1_CH0_IRQ:1;    /**< \brief [24:24] PSM1 shared sub-module channel [x] interrupt. (rh) */
    __I  Ifx_Strict_32Bit PSM1_CH1_IRQ:1;    /**< \brief [25:25] PSM1 shared sub-module channel [x] interrupt. (rh) */
    __I  Ifx_Strict_32Bit PSM1_CH2_IRQ:1;    /**< \brief [26:26] PSM1 shared sub-module channel [x] interrupt. (rh) */
    __I  Ifx_Strict_32Bit PSM1_CH3_IRQ:1;    /**< \brief [27:27] PSM1 shared sub-module channel [x] interrupt. (rh) */
    __I  Ifx_Strict_32Bit PSM1_CH4_IRQ:1;    /**< \brief [28:28] PSM1 shared sub-module channel [x] interrupt. (rh) */
    __I  Ifx_Strict_32Bit PSM1_CH5_IRQ:1;    /**< \brief [29:29] PSM1 shared sub-module channel [x] interrupt. (rh) */
    __I  Ifx_Strict_32Bit PSM1_CH6_IRQ:1;    /**< \brief [30:30] PSM1 shared sub-module channel [x] interrupt. (rh) */
    __I  Ifx_Strict_32Bit PSM1_CH7_IRQ:1;    /**< \brief [31:31] PSM1 shared sub-module channel [x] interrupt. (rh) */
} Ifx_GTM_CLS_ICM_IRQG_0_Bits;

/** \brief ICM Interrupt group register covering DPLL */
typedef struct _Ifx_GTM_CLS_ICM_IRQG_1_Bits
{
    __I  Ifx_Strict_32Bit DPLL_DCGI_IRQ:1;    /**< \brief [0:0] ##suppress##TRIGGER direction change detected.##suppress## (rh) */
    __I  Ifx_Strict_32Bit DPLL_EDI_IRQ:1;    /**< \brief [1:1] ##suppress##DPLL enable/disable interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit DPLL_TINI_IRQ:1;    /**< \brief [2:2] ##suppress##TRIGGER minimum hold time (THMI) violation detected interrupt.##suppress## (rh) */
    __I  Ifx_Strict_32Bit DPLL_TAXI_IRQ:1;    /**< \brief [3:3] ##suppress##TRIGGER maximum hold time (THMA) violation detected interrupt.##suppress## (rh) */
    __I  Ifx_Strict_32Bit DPLL_SISI_IRQ:1;    /**< \brief [4:4] ##suppress##STATE inactive slope detected interrupt.##suppress## (rh) */
    __I  Ifx_Strict_32Bit DPLL_TISI_IRQ:1;    /**< \brief [5:5] ##suppress##TRIGGER inactive slope detected interrupt.##suppress## (rh) */
    __I  Ifx_Strict_32Bit DPLL_MSI_IRQ:1;    /**< \brief [6:6] ##suppress##Missing STATE interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit DPLL_MTI_IRQ:1;    /**< \brief [7:7] ##suppress##Missing TRIGGER interrupt.##suppress## (rh) */
    __I  Ifx_Strict_32Bit DPLL_SASI_IRQ:1;    /**< \brief [8:8] ##suppress##STATE active slope detected.##suppress## (rh) */
    __I  Ifx_Strict_32Bit DPLL_TASI_IRQ:1;    /**< \brief [9:9] ##suppress##TRIGGER active slope detected while DPLL_NTI_CNT.NTI_CNT is zero.##suppress## (rh) */
    __I  Ifx_Strict_32Bit DPLL_PWI_IRQ:1;    /**< \brief [10:10] ##suppress##Plausibility window (PVT) violation interrupt of TRIGGER.##suppress## (rh) */
    __I  Ifx_Strict_32Bit DPLL_W2I_IRQ:1;    /**< \brief [11:11] Write-access to RAM region 2 interrupt. (rh) */
    __I  Ifx_Strict_32Bit DPLL_W1I_IRQ:1;    /**< \brief [12:12] Write-access to RAM region 1b or 1c interrupt. (rh) */
    __I  Ifx_Strict_32Bit DPLL_GL1I_IRQ:1;    /**< \brief [13:13] ##suppress##Get lock interrupt for SUB_INC1##suppress## (rh) */
    __I  Ifx_Strict_32Bit DPLL_LL1I_IRQ:1;    /**< \brief [14:14] ##suppress##Loss of lock interrupt for SUB_INC1##suppress## (rh) */
    __I  Ifx_Strict_32Bit DPLL_EI_IRQ:1;    /**< \brief [15:15] Error interrupt (rh) */
    __I  Ifx_Strict_32Bit DPLL_GL2I_IRQ:1;    /**< \brief [16:16] ##suppress##Get lock interrupt for SUB_INC2##suppress## (rh) */
    __I  Ifx_Strict_32Bit DPLL_LL2I_IRQ:1;    /**< \brief [17:17] ##suppress##Loss of lock interrupt for SUB_INC2##suppress## (rh) */
    __I  Ifx_Strict_32Bit DPLL_TE0I_IRQ:1;    /**< \brief [18:18] ##suppress##TRIGGER event interrupt 0##suppress## (rh) */
    __I  Ifx_Strict_32Bit DPLL_TE1I_IRQ:1;    /**< \brief [19:19] ##suppress##TRIGGER event interrupt 1##suppress## (rh) */
    __I  Ifx_Strict_32Bit DPLL_TE2I_IRQ:1;    /**< \brief [20:20] ##suppress##TRIGGER event interrupt 2##suppress## (rh) */
    __I  Ifx_Strict_32Bit DPLL_TE3I_IRQ:1;    /**< \brief [21:21] ##suppress##TRIGGER event interrupt 3##suppress## (rh) */
    __I  Ifx_Strict_32Bit DPLL_TE4I_IRQ:1;    /**< \brief [22:22] ##suppress##TRIGGER event interrupt 4##suppress## (rh) */
    __I  Ifx_Strict_32Bit DPLL_CDTI_IRQ:1;    /**< \brief [23:23] ##suppress##DPLL calculated duration interrupt for trigger.##suppress## (rh) */
    __I  Ifx_Strict_32Bit DPLL_CDSI_IRQ:1;    /**< \brief [24:24] ##suppress##DPLL calculated duration interrupt for state.##suppress## (rh) */
    __I  Ifx_Strict_32Bit DPLL_TORI_IRQ:1;    /**< \brief [25:25] ##suppress##DPLL calculated duration interrupt for state.##suppress## (rh) */
    __I  Ifx_Strict_32Bit DPLL_SORI_IRQ:1;    /**< \brief [26:26] ##suppress##DPLL calculated duration interrupt for state.##suppress## (rh) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [31:27] \internal Reserved */
} Ifx_GTM_CLS_ICM_IRQG_1_Bits;

/** \brief ICM Interrupt group register covering TIM0, TIM1, TIM2, TIM3 */
typedef struct _Ifx_GTM_CLS_ICM_IRQG_2_Bits
{
    __I  Ifx_Strict_32Bit TIM0_CH0_IRQ:1;    /**< \brief [0:0] TIM0 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM0_CH1_IRQ:1;    /**< \brief [1:1] TIM0 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM0_CH2_IRQ:1;    /**< \brief [2:2] TIM0 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM0_CH3_IRQ:1;    /**< \brief [3:3] TIM0 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM0_CH4_IRQ:1;    /**< \brief [4:4] TIM0 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM0_CH5_IRQ:1;    /**< \brief [5:5] TIM0 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM0_CH6_IRQ:1;    /**< \brief [6:6] TIM0 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM0_CH7_IRQ:1;    /**< \brief [7:7] TIM0 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM1_CH0_IRQ:1;    /**< \brief [8:8] TIM1 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM1_CH1_IRQ:1;    /**< \brief [9:9] TIM1 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM1_CH2_IRQ:1;    /**< \brief [10:10] TIM1 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM1_CH3_IRQ:1;    /**< \brief [11:11] TIM1 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM1_CH4_IRQ:1;    /**< \brief [12:12] TIM1 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM1_CH5_IRQ:1;    /**< \brief [13:13] TIM1 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM1_CH6_IRQ:1;    /**< \brief [14:14] TIM1 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM1_CH7_IRQ:1;    /**< \brief [15:15] TIM1 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM2_CH0_IRQ:1;    /**< \brief [16:16] TIM2 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM2_CH1_IRQ:1;    /**< \brief [17:17] TIM2 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM2_CH2_IRQ:1;    /**< \brief [18:18] TIM2 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM2_CH3_IRQ:1;    /**< \brief [19:19] TIM2 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM2_CH4_IRQ:1;    /**< \brief [20:20] TIM2 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM2_CH5_IRQ:1;    /**< \brief [21:21] TIM2 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM2_CH6_IRQ:1;    /**< \brief [22:22] TIM2 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM2_CH7_IRQ:1;    /**< \brief [23:23] TIM2 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM3_CH0_IRQ:1;    /**< \brief [24:24] TIM3 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM3_CH1_IRQ:1;    /**< \brief [25:25] TIM3 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM3_CH2_IRQ:1;    /**< \brief [26:26] TIM3 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM3_CH3_IRQ:1;    /**< \brief [27:27] TIM3 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM3_CH4_IRQ:1;    /**< \brief [28:28] TIM3 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM3_CH5_IRQ:1;    /**< \brief [29:29] TIM3 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM3_CH6_IRQ:1;    /**< \brief [30:30] TIM3 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM3_CH7_IRQ:1;    /**< \brief [31:31] TIM3 shared interrupt channel [x] (rh) */
} Ifx_GTM_CLS_ICM_IRQG_2_Bits;

/** \brief ICM Interrupt group register covering TIM4, TIM5, TIM6, TIM7 */
typedef struct _Ifx_GTM_CLS_ICM_IRQG_3_Bits
{
    __I  Ifx_Strict_32Bit TIM4_CH0_IRQ:1;    /**< \brief [0:0] TIM4 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM4_CH1_IRQ:1;    /**< \brief [1:1] TIM4 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM4_CH2_IRQ:1;    /**< \brief [2:2] TIM4 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM4_CH3_IRQ:1;    /**< \brief [3:3] TIM4 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM4_CH4_IRQ:1;    /**< \brief [4:4] TIM4 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM4_CH5_IRQ:1;    /**< \brief [5:5] TIM4 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM4_CH6_IRQ:1;    /**< \brief [6:6] TIM4 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM4_CH7_IRQ:1;    /**< \brief [7:7] TIM4 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM5_CH0_IRQ:1;    /**< \brief [8:8] TIM5 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM5_CH1_IRQ:1;    /**< \brief [9:9] TIM5 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM5_CH2_IRQ:1;    /**< \brief [10:10] TIM5 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM5_CH3_IRQ:1;    /**< \brief [11:11] TIM5 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM5_CH4_IRQ:1;    /**< \brief [12:12] TIM5 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM5_CH5_IRQ:1;    /**< \brief [13:13] TIM5 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM5_CH6_IRQ:1;    /**< \brief [14:14] TIM5 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM5_CH7_IRQ:1;    /**< \brief [15:15] TIM5 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM6_CH0_IRQ:1;    /**< \brief [16:16] TIM6 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM6_CH1_IRQ:1;    /**< \brief [17:17] TIM6 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM6_CH2_IRQ:1;    /**< \brief [18:18] TIM6 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM6_CH3_IRQ:1;    /**< \brief [19:19] TIM6 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM6_CH4_IRQ:1;    /**< \brief [20:20] TIM6 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM6_CH5_IRQ:1;    /**< \brief [21:21] TIM6 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM6_CH6_IRQ:1;    /**< \brief [22:22] TIM6 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM6_CH7_IRQ:1;    /**< \brief [23:23] TIM6 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM7_CH0_IRQ:1;    /**< \brief [24:24] TIM7 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM7_CH1_IRQ:1;    /**< \brief [25:25] TIM7 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM7_CH2_IRQ:1;    /**< \brief [26:26] TIM7 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM7_CH3_IRQ:1;    /**< \brief [27:27] TIM7 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM7_CH4_IRQ:1;    /**< \brief [28:28] TIM7 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM7_CH5_IRQ:1;    /**< \brief [29:29] TIM7 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM7_CH6_IRQ:1;    /**< \brief [30:30] TIM7 shared interrupt channel [x] (rh) */
    __I  Ifx_Strict_32Bit TIM7_CH7_IRQ:1;    /**< \brief [31:31] TIM7 shared interrupt channel [x] (rh) */
} Ifx_GTM_CLS_ICM_IRQG_3_Bits;

/** \brief ICM Interrupt group register covering MCS0 to MCS3 sub-modules */
typedef struct _Ifx_GTM_CLS_ICM_IRQG_4_Bits
{
    __I  Ifx_Strict_32Bit MCS0_CH0_IRQ:1;    /**< \brief [0:0] MCS0 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS0_CH1_IRQ:1;    /**< \brief [1:1] MCS0 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS0_CH2_IRQ:1;    /**< \brief [2:2] MCS0 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS0_CH3_IRQ:1;    /**< \brief [3:3] MCS0 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS0_CH4_IRQ:1;    /**< \brief [4:4] MCS0 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS0_CH5_IRQ:1;    /**< \brief [5:5] MCS0 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS0_CH6_IRQ:1;    /**< \brief [6:6] MCS0 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS0_CH7_IRQ:1;    /**< \brief [7:7] MCS0 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS1_CH0_IRQ:1;    /**< \brief [8:8] MCS1 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS1_CH1_IRQ:1;    /**< \brief [9:9] MCS1 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS1_CH2_IRQ:1;    /**< \brief [10:10] MCS1 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS1_CH3_IRQ:1;    /**< \brief [11:11] MCS1 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS1_CH4_IRQ:1;    /**< \brief [12:12] MCS1 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS1_CH5_IRQ:1;    /**< \brief [13:13] MCS1 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS1_CH6_IRQ:1;    /**< \brief [14:14] MCS1 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS1_CH7_IRQ:1;    /**< \brief [15:15] MCS1 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS2_CH0_IRQ:1;    /**< \brief [16:16] MCS2 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS2_CH1_IRQ:1;    /**< \brief [17:17] MCS2 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS2_CH2_IRQ:1;    /**< \brief [18:18] MCS2 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS2_CH3_IRQ:1;    /**< \brief [19:19] MCS2 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS2_CH4_IRQ:1;    /**< \brief [20:20] MCS2 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS2_CH5_IRQ:1;    /**< \brief [21:21] MCS2 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS2_CH6_IRQ:1;    /**< \brief [22:22] MCS2 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS2_CH7_IRQ:1;    /**< \brief [23:23] MCS2 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS3_CH0_IRQ:1;    /**< \brief [24:24] MCS3 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS3_CH1_IRQ:1;    /**< \brief [25:25] MCS3 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS3_CH2_IRQ:1;    /**< \brief [26:26] MCS3 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS3_CH3_IRQ:1;    /**< \brief [27:27] MCS3 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS3_CH4_IRQ:1;    /**< \brief [28:28] MCS3 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS3_CH5_IRQ:1;    /**< \brief [29:29] MCS3 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS3_CH6_IRQ:1;    /**< \brief [30:30] MCS3 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS3_CH7_IRQ:1;    /**< \brief [31:31] MCS3 channel [x] interrupt (rh) */
} Ifx_GTM_CLS_ICM_IRQG_4_Bits;

/** \brief ICM Interrupt group register covering MCS4 to MCS7 sub-modules */
typedef struct _Ifx_GTM_CLS_ICM_IRQG_5_Bits
{
    __I  Ifx_Strict_32Bit MCS4_CH0_IRQ:1;    /**< \brief [0:0] MCS4 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS4_CH1_IRQ:1;    /**< \brief [1:1] MCS4 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS4_CH2_IRQ:1;    /**< \brief [2:2] MCS4 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS4_CH3_IRQ:1;    /**< \brief [3:3] MCS4 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS4_CH4_IRQ:1;    /**< \brief [4:4] MCS4 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS4_CH5_IRQ:1;    /**< \brief [5:5] MCS4 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS4_CH6_IRQ:1;    /**< \brief [6:6] MCS4 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS4_CH7_IRQ:1;    /**< \brief [7:7] MCS4 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS5_CH0_IRQ:1;    /**< \brief [8:8] MCS5 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS5_CH1_IRQ:1;    /**< \brief [9:9] MCS5 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS5_CH2_IRQ:1;    /**< \brief [10:10] MCS5 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS5_CH3_IRQ:1;    /**< \brief [11:11] MCS5 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS5_CH4_IRQ:1;    /**< \brief [12:12] MCS5 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS5_CH5_IRQ:1;    /**< \brief [13:13] MCS5 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS5_CH6_IRQ:1;    /**< \brief [14:14] MCS5 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS5_CH7_IRQ:1;    /**< \brief [15:15] MCS5 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS6_CH0_IRQ:1;    /**< \brief [16:16] MCS6 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS6_CH1_IRQ:1;    /**< \brief [17:17] MCS6 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS6_CH2_IRQ:1;    /**< \brief [18:18] MCS6 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS6_CH3_IRQ:1;    /**< \brief [19:19] MCS6 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS6_CH4_IRQ:1;    /**< \brief [20:20] MCS6 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS6_CH5_IRQ:1;    /**< \brief [21:21] MCS6 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS6_CH6_IRQ:1;    /**< \brief [22:22] MCS6 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS6_CH7_IRQ:1;    /**< \brief [23:23] MCS6 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS7_CH0_IRQ:1;    /**< \brief [24:24] MCS7 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS7_CH1_IRQ:1;    /**< \brief [25:25] MCS7 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS7_CH2_IRQ:1;    /**< \brief [26:26] MCS7 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS7_CH3_IRQ:1;    /**< \brief [27:27] MCS7 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS7_CH4_IRQ:1;    /**< \brief [28:28] MCS7 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS7_CH5_IRQ:1;    /**< \brief [29:29] MCS7 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS7_CH6_IRQ:1;    /**< \brief [30:30] MCS7 channel [x] interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS7_CH7_IRQ:1;    /**< \brief [31:31] MCS7 channel [x] interrupt (rh) */
} Ifx_GTM_CLS_ICM_IRQG_5_Bits;

/** \brief ICM_IRQG_ATOM_[g]_CI */
typedef struct _Ifx_GTM_CLS_ICM_IRQG_ATOM_CI_Bits
{
    __I  Ifx_Strict_32Bit ATOM_M0_CH0_IRQ:1;    /**< \brief [0:0] ##suppress##ATOM[j] channel [x] interrupt ([j]=4*[g]+0)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M0_CH1_IRQ:1;    /**< \brief [1:1] ##suppress##ATOM[j] channel [x] interrupt ([j]=4*[g]+0)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M0_CH2_IRQ:1;    /**< \brief [2:2] ##suppress##ATOM[j] channel [x] interrupt ([j]=4*[g]+0)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M0_CH3_IRQ:1;    /**< \brief [3:3] ##suppress##ATOM[j] channel [x] interrupt ([j]=4*[g]+0)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M0_CH4_IRQ:1;    /**< \brief [4:4] ##suppress##ATOM[j] channel [x] interrupt ([j]=4*[g]+0)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M0_CH5_IRQ:1;    /**< \brief [5:5] ##suppress##ATOM[j] channel [x] interrupt ([j]=4*[g]+0)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M0_CH6_IRQ:1;    /**< \brief [6:6] ##suppress##ATOM[j] channel [x] interrupt ([j]=4*[g]+0)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M0_CH7_IRQ:1;    /**< \brief [7:7] ##suppress##ATOM[j] channel [x] interrupt ([j]=4*[g]+0)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M1_CH0_IRQ:1;    /**< \brief [8:8] ##suppress##ATOM[j] channel [x] interrupt ([j]=4*[g]+1)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M1_CH1_IRQ:1;    /**< \brief [9:9] ##suppress##ATOM[j] channel [x] interrupt ([j]=4*[g]+1)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M1_CH2_IRQ:1;    /**< \brief [10:10] ##suppress##ATOM[j] channel [x] interrupt ([j]=4*[g]+1)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M1_CH3_IRQ:1;    /**< \brief [11:11] ##suppress##ATOM[j] channel [x] interrupt ([j]=4*[g]+1)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M1_CH4_IRQ:1;    /**< \brief [12:12] ##suppress##ATOM[j] channel [x] interrupt ([j]=4*[g]+1)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M1_CH5_IRQ:1;    /**< \brief [13:13] ##suppress##ATOM[j] channel [x] interrupt ([j]=4*[g]+1)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M1_CH6_IRQ:1;    /**< \brief [14:14] ##suppress##ATOM[j] channel [x] interrupt ([j]=4*[g]+1)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M1_CH7_IRQ:1;    /**< \brief [15:15] ##suppress##ATOM[j] channel [x] interrupt ([j]=4*[g]+1)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M2_CH0_IRQ:1;    /**< \brief [16:16] ##suppress##ATOMm channel [x] interrupt ([j]=4*[g]+2)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M2_CH1_IRQ:1;    /**< \brief [17:17] ##suppress##ATOMm channel [x] interrupt ([j]=4*[g]+2)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M2_CH2_IRQ:1;    /**< \brief [18:18] ##suppress##ATOMm channel [x] interrupt ([j]=4*[g]+2)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M2_CH3_IRQ:1;    /**< \brief [19:19] ##suppress##ATOMm channel [x] interrupt ([j]=4*[g]+2)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M2_CH4_IRQ:1;    /**< \brief [20:20] ##suppress##ATOMm channel [x] interrupt ([j]=4*[g]+2)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M2_CH5_IRQ:1;    /**< \brief [21:21] ##suppress##ATOMm channel [x] interrupt ([j]=4*[g]+2)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M2_CH6_IRQ:1;    /**< \brief [22:22] ##suppress##ATOMm channel [x] interrupt ([j]=4*[g]+2)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M2_CH7_IRQ:1;    /**< \brief [23:23] ##suppress##ATOMm channel [x] interrupt ([j]=4*[g]+2)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M3_CH0_IRQ:1;    /**< \brief [24:24] ##suppress##ATOM[j] channel [x] interrupt ([j]=4*[g]+3)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M3_CH1_IRQ:1;    /**< \brief [25:25] ##suppress##ATOM[j] channel [x] interrupt ([j]=4*[g]+3)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M3_CH2_IRQ:1;    /**< \brief [26:26] ##suppress##ATOM[j] channel [x] interrupt ([j]=4*[g]+3)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M3_CH3_IRQ:1;    /**< \brief [27:27] ##suppress##ATOM[j] channel [x] interrupt ([j]=4*[g]+3)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M3_CH4_IRQ:1;    /**< \brief [28:28] ##suppress##ATOM[j] channel [x] interrupt ([j]=4*[g]+3)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M3_CH5_IRQ:1;    /**< \brief [29:29] ##suppress##ATOM[j] channel [x] interrupt ([j]=4*[g]+3)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M3_CH6_IRQ:1;    /**< \brief [30:30] ##suppress##ATOM[j] channel [x] interrupt ([j]=4*[g]+3)##suppress## (rh) */
    __I  Ifx_Strict_32Bit ATOM_M3_CH7_IRQ:1;    /**< \brief [31:31] ##suppress##ATOM[j] channel [x] interrupt ([j]=4*[g]+3)##suppress## (rh) */
} Ifx_GTM_CLS_ICM_IRQG_ATOM_CI_Bits;

/** \brief ICM Interrupt group register 0 for channel error interrupt information */
typedef struct _Ifx_GTM_CLS_ICM_IRQG_CEI0_Bits
{
    __I  Ifx_Strict_32Bit FIFO0_CH0_EIRQ:1;    /**< \brief [0:0] FIFO0 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit FIFO0_CH1_EIRQ:1;    /**< \brief [1:1] FIFO0 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit FIFO0_CH2_EIRQ:1;    /**< \brief [2:2] FIFO0 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit FIFO0_CH3_EIRQ:1;    /**< \brief [3:3] FIFO0 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit FIFO0_CH4_EIRQ:1;    /**< \brief [4:4] FIFO0 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit FIFO0_CH5_EIRQ:1;    /**< \brief [5:5] FIFO0 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit FIFO0_CH6_EIRQ:1;    /**< \brief [6:6] FIFO0 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit FIFO0_CH7_EIRQ:1;    /**< \brief [7:7] FIFO0 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit FIFO1_CH0_EIRQ:1;    /**< \brief [8:8] FIFO1 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit FIFO1_CH1_EIRQ:1;    /**< \brief [9:9] FIFO1 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit FIFO1_CH2_EIRQ:1;    /**< \brief [10:10] FIFO1 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit FIFO1_CH3_EIRQ:1;    /**< \brief [11:11] FIFO1 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit FIFO1_CH4_EIRQ:1;    /**< \brief [12:12] FIFO1 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit FIFO1_CH5_EIRQ:1;    /**< \brief [13:13] FIFO1 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit FIFO1_CH6_EIRQ:1;    /**< \brief [14:14] FIFO1 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit FIFO1_CH7_EIRQ:1;    /**< \brief [15:15] FIFO1 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit FIFO2_CH0_EIRQ:1;    /**< \brief [16:16] FIFO2 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit FIFO2_CH1_EIRQ:1;    /**< \brief [17:17] FIFO2 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit FIFO2_CH2_EIRQ:1;    /**< \brief [18:18] FIFO2 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit FIFO2_CH3_EIRQ:1;    /**< \brief [19:19] FIFO2 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit FIFO2_CH4_EIRQ:1;    /**< \brief [20:20] FIFO2 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit FIFO2_CH5_EIRQ:1;    /**< \brief [21:21] FIFO2 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit FIFO2_CH6_EIRQ:1;    /**< \brief [22:22] FIFO2 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit FIFO2_CH7_EIRQ:1;    /**< \brief [23:23] FIFO2 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_ICM_IRQG_CEI0_Bits;

/** \brief ICM Interrupt group register 1 for channel error interrupt information */
typedef struct _Ifx_GTM_CLS_ICM_IRQG_CEI1_Bits
{
    __I  Ifx_Strict_32Bit TIM0_CH0_EIRQ:1;    /**< \brief [0:0] TIM0 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM0_CH1_EIRQ:1;    /**< \brief [1:1] TIM0 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM0_CH2_EIRQ:1;    /**< \brief [2:2] TIM0 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM0_CH3_EIRQ:1;    /**< \brief [3:3] TIM0 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM0_CH4_EIRQ:1;    /**< \brief [4:4] TIM0 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM0_CH5_EIRQ:1;    /**< \brief [5:5] TIM0 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM0_CH6_EIRQ:1;    /**< \brief [6:6] TIM0 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM0_CH7_EIRQ:1;    /**< \brief [7:7] TIM0 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM1_CH0_EIRQ:1;    /**< \brief [8:8] TIM1 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM1_CH1_EIRQ:1;    /**< \brief [9:9] TIM1 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM1_CH2_EIRQ:1;    /**< \brief [10:10] TIM1 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM1_CH3_EIRQ:1;    /**< \brief [11:11] TIM1 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM1_CH4_EIRQ:1;    /**< \brief [12:12] TIM1 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM1_CH5_EIRQ:1;    /**< \brief [13:13] TIM1 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM1_CH6_EIRQ:1;    /**< \brief [14:14] TIM1 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM1_CH7_EIRQ:1;    /**< \brief [15:15] TIM1 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM2_CH0_EIRQ:1;    /**< \brief [16:16] TIM2 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM2_CH1_EIRQ:1;    /**< \brief [17:17] TIM2 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM2_CH2_EIRQ:1;    /**< \brief [18:18] TIM2 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM2_CH3_EIRQ:1;    /**< \brief [19:19] TIM2 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM2_CH4_EIRQ:1;    /**< \brief [20:20] TIM2 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM2_CH5_EIRQ:1;    /**< \brief [21:21] TIM2 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM2_CH6_EIRQ:1;    /**< \brief [22:22] TIM2 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM2_CH7_EIRQ:1;    /**< \brief [23:23] TIM2 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM3_CH0_EIRQ:1;    /**< \brief [24:24] TIM3 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM3_CH1_EIRQ:1;    /**< \brief [25:25] TIM3 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM3_CH2_EIRQ:1;    /**< \brief [26:26] TIM3 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM3_CH3_EIRQ:1;    /**< \brief [27:27] TIM3 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM3_CH4_EIRQ:1;    /**< \brief [28:28] TIM3 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM3_CH5_EIRQ:1;    /**< \brief [29:29] TIM3 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM3_CH6_EIRQ:1;    /**< \brief [30:30] TIM3 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM3_CH7_EIRQ:1;    /**< \brief [31:31] TIM3 channel [x] error interrupt (rh) */
} Ifx_GTM_CLS_ICM_IRQG_CEI1_Bits;

/** \brief ICM Interrupt group register 2 for channel error interrupt information */
typedef struct _Ifx_GTM_CLS_ICM_IRQG_CEI2_Bits
{
    __I  Ifx_Strict_32Bit TIM4_CH0_EIRQ:1;    /**< \brief [0:0] TIM4 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM4_CH1_EIRQ:1;    /**< \brief [1:1] TIM4 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM4_CH2_EIRQ:1;    /**< \brief [2:2] TIM4 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM4_CH3_EIRQ:1;    /**< \brief [3:3] TIM4 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM4_CH4_EIRQ:1;    /**< \brief [4:4] TIM4 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM4_CH5_EIRQ:1;    /**< \brief [5:5] TIM4 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM4_CH6_EIRQ:1;    /**< \brief [6:6] TIM4 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM4_CH7_EIRQ:1;    /**< \brief [7:7] TIM4 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM5_CH0_EIRQ:1;    /**< \brief [8:8] TIM5 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM5_CH1_EIRQ:1;    /**< \brief [9:9] TIM5 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM5_CH2_EIRQ:1;    /**< \brief [10:10] TIM5 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM5_CH3_EIRQ:1;    /**< \brief [11:11] TIM5 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM5_CH4_EIRQ:1;    /**< \brief [12:12] TIM5 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM5_CH5_EIRQ:1;    /**< \brief [13:13] TIM5 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM5_CH6_EIRQ:1;    /**< \brief [14:14] TIM5 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM5_CH7_EIRQ:1;    /**< \brief [15:15] TIM5 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM6_CH0_EIRQ:1;    /**< \brief [16:16] TIM6 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM6_CH1_EIRQ:1;    /**< \brief [17:17] TIM6 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM6_CH2_EIRQ:1;    /**< \brief [18:18] TIM6 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM6_CH3_EIRQ:1;    /**< \brief [19:19] TIM6 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM6_CH4_EIRQ:1;    /**< \brief [20:20] TIM6 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM6_CH5_EIRQ:1;    /**< \brief [21:21] TIM6 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM6_CH6_EIRQ:1;    /**< \brief [22:22] TIM6 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM6_CH7_EIRQ:1;    /**< \brief [23:23] TIM6 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM7_CH0_EIRQ:1;    /**< \brief [24:24] TIM7 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM7_CH1_EIRQ:1;    /**< \brief [25:25] TIM7 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM7_CH2_EIRQ:1;    /**< \brief [26:26] TIM7 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM7_CH3_EIRQ:1;    /**< \brief [27:27] TIM7 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM7_CH4_EIRQ:1;    /**< \brief [28:28] TIM7 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM7_CH5_EIRQ:1;    /**< \brief [29:29] TIM7 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM7_CH6_EIRQ:1;    /**< \brief [30:30] TIM7 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit TIM7_CH7_EIRQ:1;    /**< \brief [31:31] TIM7 channel [x] error interrupt (rh) */
} Ifx_GTM_CLS_ICM_IRQG_CEI2_Bits;

/** \brief ICM Interrupt group register 3 for channel error interrupt information */
typedef struct _Ifx_GTM_CLS_ICM_IRQG_CEI3_Bits
{
    __I  Ifx_Strict_32Bit MCS0_CH0_EIRQ:1;    /**< \brief [0:0] MCS0 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS0_CH1_EIRQ:1;    /**< \brief [1:1] MCS0 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS0_CH2_EIRQ:1;    /**< \brief [2:2] MCS0 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS0_CH3_EIRQ:1;    /**< \brief [3:3] MCS0 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS0_CH4_EIRQ:1;    /**< \brief [4:4] MCS0 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS0_CH5_EIRQ:1;    /**< \brief [5:5] MCS0 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS0_CH6_EIRQ:1;    /**< \brief [6:6] MCS0 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS0_CH7_EIRQ:1;    /**< \brief [7:7] MCS0 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS1_CH0_EIRQ:1;    /**< \brief [8:8] MCS1 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS1_CH1_EIRQ:1;    /**< \brief [9:9] MCS1 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS1_CH2_EIRQ:1;    /**< \brief [10:10] MCS1 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS1_CH3_EIRQ:1;    /**< \brief [11:11] MCS1 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS1_CH4_EIRQ:1;    /**< \brief [12:12] MCS1 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS1_CH5_EIRQ:1;    /**< \brief [13:13] MCS1 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS1_CH6_EIRQ:1;    /**< \brief [14:14] MCS1 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS1_CH7_EIRQ:1;    /**< \brief [15:15] MCS1 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS2_CH0_EIRQ:1;    /**< \brief [16:16] MCS2 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS2_CH1_EIRQ:1;    /**< \brief [17:17] MCS2 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS2_CH2_EIRQ:1;    /**< \brief [18:18] MCS2 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS2_CH3_EIRQ:1;    /**< \brief [19:19] MCS2 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS2_CH4_EIRQ:1;    /**< \brief [20:20] MCS2 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS2_CH5_EIRQ:1;    /**< \brief [21:21] MCS2 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS2_CH6_EIRQ:1;    /**< \brief [22:22] MCS2 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS2_CH7_EIRQ:1;    /**< \brief [23:23] MCS2 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS3_CH0_EIRQ:1;    /**< \brief [24:24] MCS3 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS3_CH1_EIRQ:1;    /**< \brief [25:25] MCS3 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS3_CH2_EIRQ:1;    /**< \brief [26:26] MCS3 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS3_CH3_EIRQ:1;    /**< \brief [27:27] MCS3 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS3_CH4_EIRQ:1;    /**< \brief [28:28] MCS3 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS3_CH5_EIRQ:1;    /**< \brief [29:29] MCS3 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS3_CH6_EIRQ:1;    /**< \brief [30:30] MCS3 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS3_CH7_EIRQ:1;    /**< \brief [31:31] MCS3 channel [x] error interrupt (rh) */
} Ifx_GTM_CLS_ICM_IRQG_CEI3_Bits;

/** \brief ICM Interrupt group register 4 for channel error interrupt information */
typedef struct _Ifx_GTM_CLS_ICM_IRQG_CEI4_Bits
{
    __I  Ifx_Strict_32Bit MCS4_CH0_EIRQ:1;    /**< \brief [0:0] MCS4 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS4_CH1_EIRQ:1;    /**< \brief [1:1] MCS4 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS4_CH2_EIRQ:1;    /**< \brief [2:2] MCS4 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS4_CH3_EIRQ:1;    /**< \brief [3:3] MCS4 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS4_CH4_EIRQ:1;    /**< \brief [4:4] MCS4 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS4_CH5_EIRQ:1;    /**< \brief [5:5] MCS4 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS4_CH6_EIRQ:1;    /**< \brief [6:6] MCS4 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS4_CH7_EIRQ:1;    /**< \brief [7:7] MCS4 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS5_CH0_EIRQ:1;    /**< \brief [8:8] MCS5 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS5_CH1_EIRQ:1;    /**< \brief [9:9] MCS5 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS5_CH2_EIRQ:1;    /**< \brief [10:10] MCS5 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS5_CH3_EIRQ:1;    /**< \brief [11:11] MCS5 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS5_CH4_EIRQ:1;    /**< \brief [12:12] MCS5 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS5_CH5_EIRQ:1;    /**< \brief [13:13] MCS5 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS5_CH6_EIRQ:1;    /**< \brief [14:14] MCS5 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS5_CH7_EIRQ:1;    /**< \brief [15:15] MCS5 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS6_CH0_EIRQ:1;    /**< \brief [16:16] MCS6 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS6_CH1_EIRQ:1;    /**< \brief [17:17] MCS6 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS6_CH2_EIRQ:1;    /**< \brief [18:18] MCS6 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS6_CH3_EIRQ:1;    /**< \brief [19:19] MCS6 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS6_CH4_EIRQ:1;    /**< \brief [20:20] MCS6 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS6_CH5_EIRQ:1;    /**< \brief [21:21] MCS6 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS6_CH6_EIRQ:1;    /**< \brief [22:22] MCS6 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS6_CH7_EIRQ:1;    /**< \brief [23:23] MCS6 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS7_CH0_EIRQ:1;    /**< \brief [24:24] MCS7 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS7_CH1_EIRQ:1;    /**< \brief [25:25] MCS7 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS7_CH2_EIRQ:1;    /**< \brief [26:26] MCS7 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS7_CH3_EIRQ:1;    /**< \brief [27:27] MCS7 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS7_CH4_EIRQ:1;    /**< \brief [28:28] MCS7 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS7_CH5_EIRQ:1;    /**< \brief [29:29] MCS7 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS7_CH6_EIRQ:1;    /**< \brief [30:30] MCS7 channel [x] error interrupt (rh) */
    __I  Ifx_Strict_32Bit MCS7_CH7_EIRQ:1;    /**< \brief [31:31] MCS7 channel [x] error interrupt (rh) */
} Ifx_GTM_CLS_ICM_IRQG_CEI4_Bits;

/** \brief ICM_IRQG_CLS_[g]_MEI */
typedef struct _Ifx_GTM_CLS_ICM_IRQG_CLS_MEI_Bits
{
    __I  Ifx_Strict_32Bit TIM_M0_EIRQ:1;    /**< \brief [0:0] Error interrupt TIM[j]_EIRQ (j=4*[g]) (rh) */
    __I  Ifx_Strict_32Bit MCS_M0_EIRQ:1;    /**< \brief [1:1] Error interrupt MCS[j]_EIRQ (j=4*[g]) (rh) */
    __I  Ifx_Strict_32Bit SPE_M0_EIRQ:1;    /**< \brief [2:2] Error interrupt SPE[j]_EIRQ ([j]=4*[g]+0) (rh) */
    __I  Ifx_Strict_32Bit FIFO_M0_EIRQ:1;    /**< \brief [3:3] Error interrupt FIFO[j]_EIRQ ([j]=4*[g]+0) (rh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [7:4] \internal Reserved */
    __I  Ifx_Strict_32Bit TIM_M1_EIRQ:1;    /**< \brief [8:8] Error interrupt TIM[j]_EIRQ ([j]=4*[g]+1) (rh) */
    __I  Ifx_Strict_32Bit MCS_M1_EIRQ:1;    /**< \brief [9:9] Error interrupt MCS[j]_EIRQ ([j]=4*[g]+1) (rh) */
    __I  Ifx_Strict_32Bit SPE_M1_EIRQ:1;    /**< \brief [10:10] Error interrupt SPE[j]_EIRQ ([j]=4*[g]+1) (rh) */
    __I  Ifx_Strict_32Bit FIFO_M1_EIRQ:1;    /**< \brief [11:11] Error interrupt FIFO[j]_EIRQ ([j]=4*[g]+1) (rh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [15:12] \internal Reserved */
    __I  Ifx_Strict_32Bit TIM_M2_EIRQ:1;    /**< \brief [16:16] Error interrupt TIM[j]_EIRQ ([j]=4*[g]+2) (rh) */
    __I  Ifx_Strict_32Bit MCS_M2_EIRQ:1;    /**< \brief [17:17] Error interrupt MCS[j]_EIRQ ([j]=4*[g]+2) (rh) */
    __I  Ifx_Strict_32Bit SPE_M2_EIRQ:1;    /**< \brief [18:18] Error interrupt SPE[j]_EIRQ ([j]=4*[g]+2) (rh) */
    __I  Ifx_Strict_32Bit FIFO_M2_EIRQ:1;    /**< \brief [19:19] Error interrupt FIFO[j]_EIRQ ([j]=4*[g]+2) (rh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [23:20] \internal Reserved */
    __I  Ifx_Strict_32Bit TIM_M3_EIRQ:1;    /**< \brief [24:24] Error interrupt TIM[j]_EIRQ ([j]=4*[g]+3) (rh) */
    __I  Ifx_Strict_32Bit MCS_M3_EIRQ:1;    /**< \brief [25:25] Error interrupt MCS[j]_EIRQ ([j]=4*[g]+3) (rh) */
    __I  Ifx_Strict_32Bit SPE_M3_EIRQ:1;    /**< \brief [26:26] Error interrupt SPE[j]_EIRQ ([j]=4*[g]+3) (rh) */
    __I  Ifx_Strict_32Bit FIFO_M3_EIRQ:1;    /**< \brief [27:27] Error interrupt FIFO[j]_EIRQ ([j]=4*[g]+2) (rh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_GTM_CLS_ICM_IRQG_CLS_MEI_Bits;

/** \brief ICM Interrupt group MCS[j] for Channel Error Interrupt information */
typedef struct _Ifx_GTM_CLS_ICM_IRQG_MCS_CEI_Bits
{
    __I  Ifx_Strict_32Bit MCS_CH0_EIRQ:1;    /**< \brief [0:0] ##suppress##MCS channel [x] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS_CH1_EIRQ:1;    /**< \brief [1:1] ##suppress##MCS channel [x] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS_CH2_EIRQ:1;    /**< \brief [2:2] ##suppress##MCS channel [x] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS_CH3_EIRQ:1;    /**< \brief [3:3] ##suppress##MCS channel [x] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS_CH4_EIRQ:1;    /**< \brief [4:4] ##suppress##MCS channel [x] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS_CH5_EIRQ:1;    /**< \brief [5:5] ##suppress##MCS channel [x] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS_CH6_EIRQ:1;    /**< \brief [6:6] ##suppress##MCS channel [x] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS_CH7_EIRQ:1;    /**< \brief [7:7] ##suppress##MCS channel [x] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_CLS_ICM_IRQG_MCS_CEI_Bits;

/** \brief ICM Interrupt group MCS[j] for Channel Interrupt information */
typedef struct _Ifx_GTM_CLS_ICM_IRQG_MCS_CI_Bits
{
    __I  Ifx_Strict_32Bit MCS_CH0_IRQ:1;    /**< \brief [0:0] ##suppress##MCS channel [x] interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS_CH1_IRQ:1;    /**< \brief [1:1] ##suppress##MCS channel [x] interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS_CH2_IRQ:1;    /**< \brief [2:2] ##suppress##MCS channel [x] interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS_CH3_IRQ:1;    /**< \brief [3:3] ##suppress##MCS channel [x] interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS_CH4_IRQ:1;    /**< \brief [4:4] ##suppress##MCS channel [x] interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS_CH5_IRQ:1;    /**< \brief [5:5] ##suppress##MCS channel [x] interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS_CH6_IRQ:1;    /**< \brief [6:6] ##suppress##MCS channel [x] interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS_CH7_IRQ:1;    /**< \brief [7:7] ##suppress##MCS channel [x] interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_CLS_ICM_IRQG_MCS_CI_Bits;

/** \brief ICM Interrupt group register for module error interrupt information */
typedef struct _Ifx_GTM_CLS_ICM_IRQG_MEI_Bits
{
    __I  Ifx_Strict_32Bit GTM_EIRQ:1;      /**< \brief [0:0] ##suppress##AEI error interrupt request##suppress## (rh) */
    __I  Ifx_Strict_32Bit BRC_EIRQ:1;      /**< \brief [1:1] ##suppress##BRC error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit FIFO0_EIRQ:1;    /**< \brief [2:2] ##suppress##FIFO[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit FIFO1_EIRQ:1;    /**< \brief [3:3] ##suppress##FIFO[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit TIM0_EIRQ:1;     /**< \brief [4:4] ##suppress##TIM[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit TIM1_EIRQ:1;     /**< \brief [5:5] ##suppress##TIM[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit TIM2_EIRQ:1;     /**< \brief [6:6] ##suppress##TIM[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit TIM3_EIRQ:1;     /**< \brief [7:7] ##suppress##TIM[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit TIM4_EIRQ:1;     /**< \brief [8:8] ##suppress##TIM[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit TIM5_EIRQ:1;     /**< \brief [9:9] ##suppress##TIM[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit TIM6_EIRQ:1;     /**< \brief [10:10] ##suppress##TIM[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit TIM7_EIRQ:1;     /**< \brief [11:11] ##suppress##TIM[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS0_EIRQ:1;     /**< \brief [12:12] ##suppress##MCS[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS1_EIRQ:1;     /**< \brief [13:13] ##suppress##MCS[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS2_EIRQ:1;     /**< \brief [14:14] ##suppress##MCS[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS3_EIRQ:1;     /**< \brief [15:15] ##suppress##MCS[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS4_EIRQ:1;     /**< \brief [16:16] ##suppress##MCS[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS5_EIRQ:1;     /**< \brief [17:17] ##suppress##MCS[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS6_EIRQ:1;     /**< \brief [18:18] ##suppress##MCS[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS7_EIRQ:1;     /**< \brief [19:19] ##suppress##MCS[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit SPE0_EIRQ:1;     /**< \brief [20:20] ##suppress##SPE[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit SPE1_EIRQ:1;     /**< \brief [21:21] ##suppress##SPE[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit SPE2_EIRQ:1;     /**< \brief [22:22] ##suppress##SPE[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit SPE3_EIRQ:1;     /**< \brief [23:23] ##suppress##SPE[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit CMP_EIRQ:1;      /**< \brief [24:24] ##suppress##CMP error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit DPLL_EIRQ:1;     /**< \brief [25:25] ##suppress##DPLL error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [31:26] \internal Reserved */
} Ifx_GTM_CLS_ICM_IRQG_MEI_Bits;

/** \brief ICM_IRQG_PSM_0_CEI */
typedef struct _Ifx_GTM_CLS_ICM_IRQG_PSM_0_CEI_Bits
{
    __I  Ifx_Strict_32Bit PSM_M0_CH0_EIRQ:1;    /**< \brief [0:0] PSMm channel [x] error interrupt ([j]=4*0+0) (rh) */
    __I  Ifx_Strict_32Bit PSM_M0_CH1_EIRQ:1;    /**< \brief [1:1] PSMm channel [x] error interrupt ([j]=4*0+0) (rh) */
    __I  Ifx_Strict_32Bit PSM_M0_CH2_EIRQ:1;    /**< \brief [2:2] PSMm channel [x] error interrupt ([j]=4*0+0) (rh) */
    __I  Ifx_Strict_32Bit PSM_M0_CH3_EIRQ:1;    /**< \brief [3:3] PSMm channel [x] error interrupt ([j]=4*0+0) (rh) */
    __I  Ifx_Strict_32Bit PSM_M0_CH4_EIRQ:1;    /**< \brief [4:4] PSMm channel [x] error interrupt ([j]=4*0+0) (rh) */
    __I  Ifx_Strict_32Bit PSM_M0_CH5_EIRQ:1;    /**< \brief [5:5] PSMm channel [x] error interrupt ([j]=4*0+0) (rh) */
    __I  Ifx_Strict_32Bit PSM_M0_CH6_EIRQ:1;    /**< \brief [6:6] PSMm channel [x] error interrupt ([j]=4*0+0) (rh) */
    __I  Ifx_Strict_32Bit PSM_M0_CH7_EIRQ:1;    /**< \brief [7:7] PSMm channel [x] error interrupt ([j]=4*0+0) (rh) */
    __I  Ifx_Strict_32Bit PSM_M1_CH0_EIRQ:1;    /**< \brief [8:8] PSM[j] channel [x] error interrupt ([j]=4*0+1) (rh) */
    __I  Ifx_Strict_32Bit PSM_M1_CH1_EIRQ:1;    /**< \brief [9:9] PSM[j] channel [x] error interrupt ([j]=4*0+1) (rh) */
    __I  Ifx_Strict_32Bit PSM_M1_CH2_EIRQ:1;    /**< \brief [10:10] PSM[j] channel [x] error interrupt ([j]=4*0+1) (rh) */
    __I  Ifx_Strict_32Bit PSM_M1_CH3_EIRQ:1;    /**< \brief [11:11] PSM[j] channel [x] error interrupt ([j]=4*0+1) (rh) */
    __I  Ifx_Strict_32Bit PSM_M1_CH4_EIRQ:1;    /**< \brief [12:12] PSM[j] channel [x] error interrupt ([j]=4*0+1) (rh) */
    __I  Ifx_Strict_32Bit PSM_M1_CH5_EIRQ:1;    /**< \brief [13:13] PSM[j] channel [x] error interrupt ([j]=4*0+1) (rh) */
    __I  Ifx_Strict_32Bit PSM_M1_CH6_EIRQ:1;    /**< \brief [14:14] PSM[j] channel [x] error interrupt ([j]=4*0+1) (rh) */
    __I  Ifx_Strict_32Bit PSM_M1_CH7_EIRQ:1;    /**< \brief [15:15] PSM[j] channel [x] error interrupt ([j]=4*0+1) (rh) */
    __I  Ifx_Strict_32Bit PSM_M2_CH0_EIRQ:1;    /**< \brief [16:16] PSM[j] channel [x] error interrupt ([j]=4*0+2) (rh) */
    __I  Ifx_Strict_32Bit PSM_M2_CH1_EIRQ:1;    /**< \brief [17:17] PSM[j] channel [x] error interrupt ([j]=4*0+2) (rh) */
    __I  Ifx_Strict_32Bit PSM_M2_CH2_EIRQ:1;    /**< \brief [18:18] PSM[j] channel [x] error interrupt ([j]=4*0+2) (rh) */
    __I  Ifx_Strict_32Bit PSM_M2_CH3_EIRQ:1;    /**< \brief [19:19] PSM[j] channel [x] error interrupt ([j]=4*0+2) (rh) */
    __I  Ifx_Strict_32Bit PSM_M2_CH4_EIRQ:1;    /**< \brief [20:20] PSM[j] channel [x] error interrupt ([j]=4*0+2) (rh) */
    __I  Ifx_Strict_32Bit PSM_M2_CH5_EIRQ:1;    /**< \brief [21:21] PSM[j] channel [x] error interrupt ([j]=4*0+2) (rh) */
    __I  Ifx_Strict_32Bit PSM_M2_CH6_EIRQ:1;    /**< \brief [22:22] PSM[j] channel [x] error interrupt ([j]=4*0+2) (rh) */
    __I  Ifx_Strict_32Bit PSM_M2_CH7_EIRQ:1;    /**< \brief [23:23] PSM[j] channel [x] error interrupt ([j]=4*0+2) (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_ICM_IRQG_PSM_0_CEI_Bits;

/** \brief ICM_IRQG_PSM_0_CI */
typedef struct _Ifx_GTM_CLS_ICM_IRQG_PSM_0_CI_Bits
{
    __I  Ifx_Strict_32Bit PSM_M0_CH0_IRQ:1;    /**< \brief [0:0] PSM0 channel [x] shared interrupt (rh) */
    __I  Ifx_Strict_32Bit PSM_M0_CH1_IRQ:1;    /**< \brief [1:1] PSM0 channel [x] shared interrupt (rh) */
    __I  Ifx_Strict_32Bit PSM_M0_CH2_IRQ:1;    /**< \brief [2:2] PSM0 channel [x] shared interrupt (rh) */
    __I  Ifx_Strict_32Bit PSM_M0_CH3_IRQ:1;    /**< \brief [3:3] PSM0 channel [x] shared interrupt (rh) */
    __I  Ifx_Strict_32Bit PSM_M0_CH4_IRQ:1;    /**< \brief [4:4] PSM0 channel [x] shared interrupt (rh) */
    __I  Ifx_Strict_32Bit PSM_M0_CH5_IRQ:1;    /**< \brief [5:5] PSM0 channel [x] shared interrupt (rh) */
    __I  Ifx_Strict_32Bit PSM_M0_CH6_IRQ:1;    /**< \brief [6:6] PSM0 channel [x] shared interrupt (rh) */
    __I  Ifx_Strict_32Bit PSM_M0_CH7_IRQ:1;    /**< \brief [7:7] PSM0 channel [x] shared interrupt (rh) */
    __I  Ifx_Strict_32Bit PSM_M1_CH0_IRQ:1;    /**< \brief [8:8] PSMm channel [x] shared interrupt ([j]=4*0+1) (rh) */
    __I  Ifx_Strict_32Bit PSM_M1_CH1_IRQ:1;    /**< \brief [9:9] PSMm channel [x] shared interrupt ([j]=4*0+1) (rh) */
    __I  Ifx_Strict_32Bit PSM_M1_CH2_IRQ:1;    /**< \brief [10:10] PSMm channel [x] shared interrupt ([j]=4*0+1) (rh) */
    __I  Ifx_Strict_32Bit PSM_M1_CH3_IRQ:1;    /**< \brief [11:11] PSMm channel [x] shared interrupt ([j]=4*0+1) (rh) */
    __I  Ifx_Strict_32Bit PSM_M1_CH4_IRQ:1;    /**< \brief [12:12] PSMm channel [x] shared interrupt ([j]=4*0+1) (rh) */
    __I  Ifx_Strict_32Bit PSM_M1_CH5_IRQ:1;    /**< \brief [13:13] PSMm channel [x] shared interrupt ([j]=4*0+1) (rh) */
    __I  Ifx_Strict_32Bit PSM_M1_CH6_IRQ:1;    /**< \brief [14:14] PSMm channel [x] shared interrupt ([j]=4*0+1) (rh) */
    __I  Ifx_Strict_32Bit PSM_M1_CH7_IRQ:1;    /**< \brief [15:15] PSMm channel [x] shared interrupt ([j]=4*0+1) (rh) */
    __I  Ifx_Strict_32Bit PSM_M2_CH0_IRQ:1;    /**< \brief [16:16] PSMm channel [x] shared interrupt ([j]=4*0+2) (rh) */
    __I  Ifx_Strict_32Bit PSM_M2_CH1_IRQ:1;    /**< \brief [17:17] PSMm channel [x] shared interrupt ([j]=4*0+2) (rh) */
    __I  Ifx_Strict_32Bit PSM_M2_CH2_IRQ:1;    /**< \brief [18:18] PSMm channel [x] shared interrupt ([j]=4*0+2) (rh) */
    __I  Ifx_Strict_32Bit PSM_M2_CH3_IRQ:1;    /**< \brief [19:19] PSMm channel [x] shared interrupt ([j]=4*0+2) (rh) */
    __I  Ifx_Strict_32Bit PSM_M2_CH4_IRQ:1;    /**< \brief [20:20] PSMm channel [x] shared interrupt ([j]=4*0+2) (rh) */
    __I  Ifx_Strict_32Bit PSM_M2_CH5_IRQ:1;    /**< \brief [21:21] PSMm channel [x] shared interrupt ([j]=4*0+2) (rh) */
    __I  Ifx_Strict_32Bit PSM_M2_CH6_IRQ:1;    /**< \brief [22:22] PSMm channel [x] shared interrupt ([j]=4*0+2) (rh) */
    __I  Ifx_Strict_32Bit PSM_M2_CH7_IRQ:1;    /**< \brief [23:23] PSMm channel [x] shared interrupt ([j]=4*0+2) (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_ICM_IRQG_PSM_0_CI_Bits;

/** \brief ICM Interrupt group SPE for module Error Interrupt information */
typedef struct _Ifx_GTM_CLS_ICM_IRQG_SPE_CEI_Bits
{
    __I  Ifx_Strict_32Bit SPE0_EIRQ:1;     /**< \brief [0:0] ##suppress##SPE[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit SPE1_EIRQ:1;     /**< \brief [1:1] ##suppress##SPE[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit SPE2_EIRQ:1;     /**< \brief [2:2] ##suppress##SPE[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit SPE3_EIRQ:1;     /**< \brief [3:3] ##suppress##SPE[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit SPE4_EIRQ:1;     /**< \brief [4:4] ##suppress##SPE[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit SPE5_EIRQ:1;     /**< \brief [5:5] ##suppress##SPE[j] error interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [7:6] \internal Reserved */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_CLS_ICM_IRQG_SPE_CEI_Bits;

/** \brief ICM Interrupt group SPE for module Interrupt information */
typedef struct _Ifx_GTM_CLS_ICM_IRQG_SPE_CI_Bits
{
    __I  Ifx_Strict_32Bit SPE0_IRQ:1;      /**< \brief [0:0] ##suppress##SPE[j] interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit SPE1_IRQ:1;      /**< \brief [1:1] ##suppress##SPE[j] interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit SPE2_IRQ:1;      /**< \brief [2:2] ##suppress##SPE[j] interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit SPE3_IRQ:1;      /**< \brief [3:3] ##suppress##SPE[j] interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit SPE4_IRQ:1;      /**< \brief [4:4] ##suppress##SPE[j] interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit SPE5_IRQ:1;      /**< \brief [5:5] ##suppress##SPE[j] interrupt##suppress## (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [7:6] \internal Reserved */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_CLS_ICM_IRQG_SPE_CI_Bits;

/** \brief ICM_IRQG_TOM_[g]_CI */
typedef struct _Ifx_GTM_CLS_ICM_IRQG_TOM_CI_Bits
{
    __I  Ifx_Strict_32Bit TOM_M0_CH0_IRQ:1;    /**< \brief [0:0] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+0)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M0_CH1_IRQ:1;    /**< \brief [1:1] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+0)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M0_CH2_IRQ:1;    /**< \brief [2:2] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+0)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M0_CH3_IRQ:1;    /**< \brief [3:3] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+0)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M0_CH4_IRQ:1;    /**< \brief [4:4] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+0)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M0_CH5_IRQ:1;    /**< \brief [5:5] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+0)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M0_CH6_IRQ:1;    /**< \brief [6:6] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+0)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M0_CH7_IRQ:1;    /**< \brief [7:7] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+0)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M0_CH8_IRQ:1;    /**< \brief [8:8] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+0)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M0_CH9_IRQ:1;    /**< \brief [9:9] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+0)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M0_CH10_IRQ:1;    /**< \brief [10:10] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+0)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M0_CH11_IRQ:1;    /**< \brief [11:11] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+0)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M0_CH12_IRQ:1;    /**< \brief [12:12] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+0)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M0_CH13_IRQ:1;    /**< \brief [13:13] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+0)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M0_CH14_IRQ:1;    /**< \brief [14:14] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+0)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M0_CH15_IRQ:1;    /**< \brief [15:15] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+0)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M1_CH0_IRQ:1;    /**< \brief [16:16] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+1)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M1_CH1_IRQ:1;    /**< \brief [17:17] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+1)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M1_CH2_IRQ:1;    /**< \brief [18:18] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+1)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M1_CH3_IRQ:1;    /**< \brief [19:19] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+1)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M1_CH4_IRQ:1;    /**< \brief [20:20] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+1)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M1_CH5_IRQ:1;    /**< \brief [21:21] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+1)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M1_CH6_IRQ:1;    /**< \brief [22:22] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+1)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M1_CH7_IRQ:1;    /**< \brief [23:23] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+1)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M1_CH8_IRQ:1;    /**< \brief [24:24] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+1)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M1_CH9_IRQ:1;    /**< \brief [25:25] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+1)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M1_CH10_IRQ:1;    /**< \brief [26:26] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+1)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M1_CH11_IRQ:1;    /**< \brief [27:27] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+1)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M1_CH12_IRQ:1;    /**< \brief [28:28] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+1)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M1_CH13_IRQ:1;    /**< \brief [29:29] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+1)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M1_CH14_IRQ:1;    /**< \brief [30:30] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+1)##suppress## (rh) */
    __I  Ifx_Strict_32Bit TOM_M1_CH15_IRQ:1;    /**< \brief [31:31] ##suppress##TOM[j] channel [x] interrupt ([j]=2*[g]+1)##suppress## (rh) */
} Ifx_GTM_CLS_ICM_IRQG_TOM_CI_Bits;

/** \brief MAP Control register */
typedef struct _Ifx_GTM_CLS_MAP_CTRL_Bits
{
    __IO Ifx_Strict_32Bit TSEL:1;          /**< \brief [0:0] ##suppress##TRIGGER signal output select.##suppress## (rw) */
    __IO Ifx_Strict_32Bit SSL:3;           /**< \brief [3:1] ##suppress##STATE signal output select##suppress## (rw) */
    __IO Ifx_Strict_32Bit LSEL:1;          /**< \brief [4:4] ##suppress##TIM_MAP_DATA[6] input level selection##suppress## (rw) */
    __I  Ifx_Strict_32Bit :11;             /**< \brief [15:5] \internal Reserved */
    __IO Ifx_Strict_32Bit TSPP0_EN:1;      /**< \brief [16:16] Enable of TSPP0 sub-unit (rw) */
    __IO Ifx_Strict_32Bit TSPP0_DLD:1;     /**< \brief [17:17] ##suppress##DIR level definition bit##suppress## (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [19:18] \internal Reserved */
    __IO Ifx_Strict_32Bit TSPP0_I0V:1;     /**< \brief [20:20] ##suppress##Disable of TSPP0 TIM_MAP_DATA[x][48:48] input line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TSPP0_I1V:1;     /**< \brief [21:21] ##suppress##Disable of TSPP0 TIM_MAP_DATA[y][48:48] input line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TSPP0_I2V:1;     /**< \brief [22:22] ##suppress##Disable of TSPP0 TIM_MAP_DATA[z][48:48] input line##suppress## (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [23:23] \internal Reserved */
    __IO Ifx_Strict_32Bit TSPP1_EN:1;      /**< \brief [24:24] Enable of TSPP1 sub-unit (rw) */
    __IO Ifx_Strict_32Bit TSPP1_DLD:1;     /**< \brief [25:25] ##suppress##DIR level definition bit##suppress## (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [27:26] \internal Reserved */
    __IO Ifx_Strict_32Bit TSPP1_I0V:1;     /**< \brief [28:28] ##suppress##Disable of TSPP1 TIM_MAP_DATA[x][48:48] input line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TSPP1_I1V:1;     /**< \brief [29:29] ##suppress##Disable of TSPP1 TIM_MAP_DATA[y][48:48] input line##suppress## (rw) */
    __IO Ifx_Strict_32Bit TSPP1_I2V:1;     /**< \brief [30:30] ##suppress##Disable of TSPP1 TIM_MAP_DATA[z][48:48] input line##suppress## (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [31:31] \internal Reserved */
} Ifx_GTM_CLS_MAP_CTRL_Bits;

/** \brief MCS[i] cancel ARU transfer instruction */
typedef struct _Ifx_GTM_CLS_MCS_CAT_Bits
{
    __IO Ifx_Strict_32Bit CAT0:1;          /**< \brief [0:0] ##suppress##Cancel ARU transfer of channel x##suppress## (rw1sh) */
    __IO Ifx_Strict_32Bit CAT1:1;          /**< \brief [1:1] ##suppress##Cancel ARU transfer of channel x##suppress## (rw1sh) */
    __IO Ifx_Strict_32Bit CAT2:1;          /**< \brief [2:2] ##suppress##Cancel ARU transfer of channel x##suppress## (rw1sh) */
    __IO Ifx_Strict_32Bit CAT3:1;          /**< \brief [3:3] ##suppress##Cancel ARU transfer of channel x##suppress## (rw1sh) */
    __IO Ifx_Strict_32Bit CAT4:1;          /**< \brief [4:4] ##suppress##Cancel ARU transfer of channel x##suppress## (rw1sh) */
    __IO Ifx_Strict_32Bit CAT5:1;          /**< \brief [5:5] ##suppress##Cancel ARU transfer of channel x##suppress## (rw1sh) */
    __IO Ifx_Strict_32Bit CAT6:1;          /**< \brief [6:6] ##suppress##Cancel ARU transfer of channel x##suppress## (rw1sh) */
    __IO Ifx_Strict_32Bit CAT7:1;          /**< \brief [7:7] ##suppress##Cancel ARU transfer of channel x##suppress## (rw1sh) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_CLS_MCS_CAT_Bits;

/** \brief MCS[i] channel x ARU control Bit register */
typedef struct _Ifx_GTM_CLS_MCS_CH_ACB_Bits
{
    __I  Ifx_Strict_32Bit ACB0:1;          /**< \brief [0:0] ##suppress##ARU Control bit [k]##suppress## (r) */
    __I  Ifx_Strict_32Bit ACB1:1;          /**< \brief [1:1] ##suppress##ARU Control bit [k]##suppress## (r) */
    __I  Ifx_Strict_32Bit ACB2:1;          /**< \brief [2:2] ##suppress##ARU Control bit [k]##suppress## (r) */
    __I  Ifx_Strict_32Bit ACB3:1;          /**< \brief [3:3] ##suppress##ARU Control bit [k]##suppress## (r) */
    __I  Ifx_Strict_32Bit ACB4:1;          /**< \brief [4:4] ##suppress##ARU Control bit [k]##suppress## (r) */
    __I  Ifx_Strict_32Bit :27;             /**< \brief [31:5] \internal Reserved */
} Ifx_GTM_CLS_MCS_CH_ACB_Bits;

/** \brief MCS[i] channel x control register */
typedef struct _Ifx_GTM_CLS_MCS_CH_CTRL_Bits
{
    __IO Ifx_Strict_32Bit EN:1;            /**< \brief [0:0] ##suppress##Enable/Disable Request of MCS-channel x##suppress## (rwh) */
    __I  Ifx_Strict_32Bit IRQ:1;           /**< \brief [1:1] Interrupt state (rh) */
    __I  Ifx_Strict_32Bit ERR:1;           /**< \brief [2:2] Error state (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [3:3] \internal Reserved */
    __I  Ifx_Strict_32Bit CY:1;            /**< \brief [4:4] Carry bit state (rh) */
    __I  Ifx_Strict_32Bit Z:1;             /**< \brief [5:5] Zero-bit state (rh) */
    __I  Ifx_Strict_32Bit V:1;             /**< \brief [6:6] Overflow bit state (rh) */
    __I  Ifx_Strict_32Bit N:1;             /**< \brief [7:7] Negative bit state (rh) */
    __I  Ifx_Strict_32Bit CAT:1;           /**< \brief [8:8] ##suppress##Cancel ARU transfer state##suppress## (rh) */
    __I  Ifx_Strict_32Bit CWT:1;           /**< \brief [9:9] Cancel WURM instruction state (rh) */
    __I  Ifx_Strict_32Bit SAT:1;           /**< \brief [10:10] ##suppress##Successful ARU transfer bit##suppress## (rh) */
    __I  Ifx_Strict_32Bit :21;             /**< \brief [31:11] \internal Reserved */
} Ifx_GTM_CLS_MCS_CH_CTRL_Bits;

/** \brief MCS[i] channel x error interrupt enable register */
typedef struct _Ifx_GTM_CLS_MCS_CH_EIRQ_EN_Bits
{
    __IO Ifx_Strict_32Bit MCS_EIRQ_EN:1;    /**< \brief [0:0] ##suppress##MCS[i]_CH[x]_EIRQ_EN.MCS_EIRQ_EN: MCS channel x MCS_EIRQ error interrupt enable##suppress## (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [1:1] \internal Reserved */
    __IO Ifx_Strict_32Bit ERR_EIRQ_EN:1;    /**< \brief [2:2] ##suppress##MCS channel x ERR_EIRQ error interrupt enable##suppress## (rw) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_GTM_CLS_MCS_CH_EIRQ_EN_Bits;

/** \brief MCS[i] channel x interrupt enable register */
typedef struct _Ifx_GTM_CLS_MCS_CH_IRQ_EN_Bits
{
    __IO Ifx_Strict_32Bit MCS_IRQ_EN:1;    /**< \brief [0:0] ##suppress##MCS channel x MCS[i]_CH[x]_IRQ_NOTIFY.MCS_IRQ interrupt enable##suppress## (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [1:1] \internal Reserved */
    __IO Ifx_Strict_32Bit ERR_IRQ_EN:1;    /**< \brief [2:2] ##suppress##MCS channel x MCS[i]_CH[x]_IRQ_NOTIFY.ERR_IRQ interrupt enable##suppress## (rw) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_GTM_CLS_MCS_CH_IRQ_EN_Bits;

/** \brief MCS[i] channel x force interrupt register */
typedef struct _Ifx_GTM_CLS_MCS_CH_IRQ_FORCINT_Bits
{
    __IO Ifx_Strict_32Bit TRG_MCS_IRQ:1;    /**< \brief [0:0] ##suppress##Trigger the bit MCS[i]_CH[x]_IRQ_NOTIFY.MCS_IRQ by software##suppress## (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [1:1] \internal Reserved */
    __IO Ifx_Strict_32Bit TRG_ERR_IRQ:1;    /**< \brief [2:2] ##suppress##Trigger the bit MCS[i]_CH[x]_IRQ_NOTIFY.ERR_IRQ by software##suppress## (rw) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_GTM_CLS_MCS_CH_IRQ_FORCINT_Bits;

/** \brief MCS[i] channel x IRQ mode configuration register */
typedef struct _Ifx_GTM_CLS_MCS_CH_IRQ_MODE_Bits
{
    __IO Ifx_Strict_32Bit IRQ_MODE:2;      /**< \brief [1:0] IRQ mode selection (rw) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_GTM_CLS_MCS_CH_IRQ_MODE_Bits;

/** \brief MCS[i] channel x interrupt notification register */
typedef struct _Ifx_GTM_CLS_MCS_CH_IRQ_NOTIFY_Bits
{
    __IO Ifx_Strict_32Bit MCS_IRQ:1;       /**< \brief [0:0] ##suppress##Interrupt request by MCS-channel x##suppress## (rw1ch) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [1:1] \internal Reserved */
    __IO Ifx_Strict_32Bit ERR_IRQ:1;       /**< \brief [2:2] ##suppress##MCS channel x ERR interrupt.##suppress## (rw1ch) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_GTM_CLS_MCS_CH_IRQ_NOTIFY_Bits;

/** \brief MCS[i] channel x memory high byte register */
typedef struct _Ifx_GTM_CLS_MCS_CH_MHB_Bits
{
    __I  Ifx_Strict_32Bit DATA:8;          /**< \brief [7:0] ##suppress##Data of memory high bit register MHB##suppress## (r) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_CLS_MCS_CH_MHB_Bits;

/** \brief MCS[i] channel x program counter register */
typedef struct _Ifx_GTM_CLS_MCS_CH_PC_Bits
{
    __IO Ifx_Strict_32Bit PC:16;           /**< \brief [15:0] Current Program Counter (rwh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_MCS_CH_PC_Bits;

/** \brief MCS[i] channel x general-purpose register [y] */
typedef struct _Ifx_GTM_CLS_MCS_CH_R_Bits
{
    __IO Ifx_Strict_32Bit DATA:24;         /**< \brief [23:0] ##suppress##Data of general-purpose register R[y]##suppress## (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_MCS_CH_R_Bits;

/** \brief MCS[i] clear trigger control register */
typedef struct _Ifx_GTM_CLS_MCS_CTRG_Bits
{
    __IO Ifx_Strict_32Bit TRG0:1;          /**< \brief [0:0] Trigger bit [m]. (rwh) */
    __IO Ifx_Strict_32Bit TRG1:1;          /**< \brief [1:1] Trigger bit [m]. (rwh) */
    __IO Ifx_Strict_32Bit TRG2:1;          /**< \brief [2:2] Trigger bit [m]. (rwh) */
    __IO Ifx_Strict_32Bit TRG3:1;          /**< \brief [3:3] Trigger bit [m]. (rwh) */
    __IO Ifx_Strict_32Bit TRG4:1;          /**< \brief [4:4] Trigger bit [m]. (rwh) */
    __IO Ifx_Strict_32Bit TRG5:1;          /**< \brief [5:5] Trigger bit [m]. (rwh) */
    __IO Ifx_Strict_32Bit TRG6:1;          /**< \brief [6:6] Trigger bit [m]. (rwh) */
    __IO Ifx_Strict_32Bit TRG7:1;          /**< \brief [7:7] Trigger bit [m]. (rwh) */
    __IO Ifx_Strict_32Bit TRG8:1;          /**< \brief [8:8] Trigger bit [n]. (rwh) */
    __IO Ifx_Strict_32Bit TRG9:1;          /**< \brief [9:9] Trigger bit [n]. (rwh) */
    __IO Ifx_Strict_32Bit TRG10:1;         /**< \brief [10:10] Trigger bit [n]. (rwh) */
    __IO Ifx_Strict_32Bit TRG11:1;         /**< \brief [11:11] Trigger bit [n]. (rwh) */
    __IO Ifx_Strict_32Bit TRG12:1;         /**< \brief [12:12] Trigger bit [n]. (rwh) */
    __IO Ifx_Strict_32Bit TRG13:1;         /**< \brief [13:13] Trigger bit [n]. (rwh) */
    __IO Ifx_Strict_32Bit TRG14:1;         /**< \brief [14:14] Trigger bit [n]. (rwh) */
    __IO Ifx_Strict_32Bit TRG15:1;         /**< \brief [15:15] Trigger bit [n]. (rwh) */
    __IO Ifx_Strict_32Bit TRG16:1;         /**< \brief [16:16] Trigger bit [o] (rw1ch) */
    __IO Ifx_Strict_32Bit TRG17:1;         /**< \brief [17:17] Trigger bit [o] (rw1ch) */
    __IO Ifx_Strict_32Bit TRG18:1;         /**< \brief [18:18] Trigger bit [o] (rw1ch) */
    __IO Ifx_Strict_32Bit TRG19:1;         /**< \brief [19:19] Trigger bit [o] (rw1ch) */
    __IO Ifx_Strict_32Bit TRG20:1;         /**< \brief [20:20] Trigger bit [o] (rw1ch) */
    __IO Ifx_Strict_32Bit TRG21:1;         /**< \brief [21:21] Trigger bit [o] (rw1ch) */
    __IO Ifx_Strict_32Bit TRG22:1;         /**< \brief [22:22] Trigger bit [o] (rw1ch) */
    __IO Ifx_Strict_32Bit TRG23:1;         /**< \brief [23:23] Trigger bit [o] (rw1ch) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_MCS_CTRG_Bits;

/** \brief MCS[i] control and status register */
typedef struct _Ifx_GTM_CLS_MCS_CTRL_STAT_Bits
{
    __IO Ifx_Strict_32Bit SCD_MODE:2;      /**< \brief [1:0] ##suppress##Select MCS scheduling mode##suppress## (rw) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [7:2] \internal Reserved */
    __IO Ifx_Strict_32Bit SCD_CH:4;        /**< \brief [11:8] Channel selection for scheduling algorithm (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [15:12] \internal Reserved */
    __IO Ifx_Strict_32Bit RAM_RST:1;       /**< \brief [16:16] RAM reset bit (rw1sh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [19:17] \internal Reserved */
    __I  Ifx_Strict_32Bit ERR_SRC_ID:3;    /**< \brief [22:20] Error source identifier (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [23:23] \internal Reserved */
    __IO Ifx_Strict_32Bit EN_TIM_FOUT:1;    /**< \brief [24:24] Enable routing of TIM[i]_CH[x]_F_OUT signal. (rw) */
    __IO Ifx_Strict_32Bit EN_HVD:1;        /**< \brief [25:25] Enable Modified Harvard architecture. (rw) */
    __IO Ifx_Strict_32Bit HLT_AEIM_ERR:1;    /**< \brief [26:26] ##suppress##Halt on AEI bus master error.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [31:27] \internal Reserved */
} Ifx_GTM_CLS_MCS_CTRL_STAT_Bits;

/** \brief MCS[i] cancel waiting instruction */
typedef struct _Ifx_GTM_CLS_MCS_CWT_Bits
{
    __IO Ifx_Strict_32Bit CWT0:1;          /**< \brief [0:0] Cancel waiting instruction for channel x (rw1sh) */
    __IO Ifx_Strict_32Bit CWT1:1;          /**< \brief [1:1] Cancel waiting instruction for channel x (rw1sh) */
    __IO Ifx_Strict_32Bit CWT2:1;          /**< \brief [2:2] Cancel waiting instruction for channel x (rw1sh) */
    __IO Ifx_Strict_32Bit CWT3:1;          /**< \brief [3:3] Cancel waiting instruction for channel x (rw1sh) */
    __IO Ifx_Strict_32Bit CWT4:1;          /**< \brief [4:4] Cancel waiting instruction for channel x (rw1sh) */
    __IO Ifx_Strict_32Bit CWT5:1;          /**< \brief [5:5] Cancel waiting instruction for channel x (rw1sh) */
    __IO Ifx_Strict_32Bit CWT6:1;          /**< \brief [6:6] Cancel waiting instruction for channel x (rw1sh) */
    __IO Ifx_Strict_32Bit CWT7:1;          /**< \brief [7:7] Cancel waiting instruction for channel x (rw1sh) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_CLS_MCS_CWT_Bits;

/** \brief MCS[i] error register */
typedef struct _Ifx_GTM_CLS_MCS_ERR_Bits
{
    __IO Ifx_Strict_32Bit ERR0:1;          /**< \brief [0:0] ##suppress##Error State of MCS-channel x##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ERR1:1;          /**< \brief [1:1] ##suppress##Error State of MCS-channel x##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ERR2:1;          /**< \brief [2:2] ##suppress##Error State of MCS-channel x##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ERR3:1;          /**< \brief [3:3] ##suppress##Error State of MCS-channel x##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ERR4:1;          /**< \brief [4:4] ##suppress##Error State of MCS-channel x##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ERR5:1;          /**< \brief [5:5] ##suppress##Error State of MCS-channel x##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ERR6:1;          /**< \brief [6:6] ##suppress##Error State of MCS-channel x##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ERR7:1;          /**< \brief [7:7] ##suppress##Error State of MCS-channel x##suppress## (rw1ch) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_CLS_MCS_ERR_Bits;

/** \brief MCS[i] hardware break point h control register */
typedef struct _Ifx_GTM_CLS_MCS_HBP_CTRL_Bits
{
    __IO Ifx_Strict_32Bit EN_CH0:1;        /**< \brief [0:0] Enable h-th hardware break point for channel x. (rw) */
    __IO Ifx_Strict_32Bit EN_CH1:1;        /**< \brief [1:1] Enable h-th hardware break point for channel x. (rw) */
    __IO Ifx_Strict_32Bit EN_CH2:1;        /**< \brief [2:2] Enable h-th hardware break point for channel x. (rw) */
    __IO Ifx_Strict_32Bit EN_CH3:1;        /**< \brief [3:3] Enable h-th hardware break point for channel x. (rw) */
    __IO Ifx_Strict_32Bit EN_CH4:1;        /**< \brief [4:4] Enable h-th hardware break point for channel x. (rw) */
    __IO Ifx_Strict_32Bit EN_CH5:1;        /**< \brief [5:5] Enable h-th hardware break point for channel x. (rw) */
    __IO Ifx_Strict_32Bit EN_CH6:1;        /**< \brief [6:6] Enable h-th hardware break point for channel x. (rw) */
    __IO Ifx_Strict_32Bit EN_CH7:1;        /**< \brief [7:7] Enable h-th hardware break point for channel x. (rw) */
    __IO Ifx_Strict_32Bit SCOPE:2;         /**< \brief [9:8] Define scope of h-th hardware break point. (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [11:10] \internal Reserved */
    __IO Ifx_Strict_32Bit TYPE:3;          /**< \brief [14:12] Define type of h-th hardware break point. (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [15:15] \internal Reserved */
    __IO Ifx_Strict_32Bit AND:1;           /**< \brief [16:16] Logical AND conjunction of h-th hardware break point (rw) */
    __IO Ifx_Strict_32Bit NOT:1;           /**< \brief [17:17] Logical negation of h-th hardware break point (rw) */
    __I  Ifx_Strict_32Bit :14;             /**< \brief [31:18] \internal Reserved */
} Ifx_GTM_CLS_MCS_HBP_CTRL_Bits;

/** \brief MCS[i] hardware break point interrupt enable register */
typedef struct _Ifx_GTM_CLS_MCS_HBP_IRQ_EN_Bits
{
    __IO Ifx_Strict_32Bit HBP_IRQ_EN:1;    /**< \brief [0:0] Interrupt Enable bit of the h-th hardware break point (rw) */
    __I  Ifx_Strict_32Bit :31;             /**< \brief [31:1] \internal Reserved */
} Ifx_GTM_CLS_MCS_HBP_IRQ_EN_Bits;

/** \brief MCS[i] force hardware break point interrupt register */
typedef struct _Ifx_GTM_CLS_MCS_HBP_IRQ_FORCINT_Bits
{
    __IO Ifx_Strict_32Bit TRG_HBP_IRQ:1;    /**< \brief [0:0] ##suppress##Trigger the bit MCS[i]_HBP[h]_IRQ_NOTIFY.HBP_IRQ by software##suppress## (rw) */
    __I  Ifx_Strict_32Bit :31;             /**< \brief [31:1] \internal Reserved */
} Ifx_GTM_CLS_MCS_HBP_IRQ_FORCINT_Bits;

/** \brief MCS[i] break point h interrupt mode configuration register */
typedef struct _Ifx_GTM_CLS_MCS_HBP_IRQ_MODE_Bits
{
    __IO Ifx_Strict_32Bit IRQ_MODE:2;      /**< \brief [1:0] IRQ mode selection for all break point interrupts (rw) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_GTM_CLS_MCS_HBP_IRQ_MODE_Bits;

/** \brief MCS[i] hardware break point interrupt notification register */
typedef struct _Ifx_GTM_CLS_MCS_HBP_IRQ_NOTIFY_Bits
{
    __IO Ifx_Strict_32Bit HBP_IRQ:1;       /**< \brief [0:0] Interrupt notify flag of the h-th hardware break point (rw1ch) */
    __I  Ifx_Strict_32Bit :31;             /**< \brief [31:1] \internal Reserved */
} Ifx_GTM_CLS_MCS_HBP_IRQ_NOTIFY_Bits;

/** \brief MCS[i] hardware break point pattern register */
typedef struct _Ifx_GTM_CLS_MCS_HBP_PATTERN_Bits
{
    __IO Ifx_Strict_32Bit DATA:32;         /**< \brief [31:0] Define pattern or address of h-th hardware break point. (rw) */
} Ifx_GTM_CLS_MCS_HBP_PATTERN_Bits;

/** \brief MCS[i] hardware break point status register */
typedef struct _Ifx_GTM_CLS_MCS_HBP_STATUS_Bits
{
    __IO Ifx_Strict_32Bit HALT_CH0:1;      /**< \brief [0:0] ##suppress##Indicate that MCS channel x has fired the h-th hardware break point and either MCS channel x or the entire GTM was halted due to that break point, depending on the state of bit field MCS[i]_HBP[h]_CTRL.SCOPE.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit HALT_CH1:1;      /**< \brief [1:1] ##suppress##Indicate that MCS channel x has fired the h-th hardware break point and either MCS channel x or the entire GTM was halted due to that break point, depending on the state of bit field MCS[i]_HBP[h]_CTRL.SCOPE.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit HALT_CH2:1;      /**< \brief [2:2] ##suppress##Indicate that MCS channel x has fired the h-th hardware break point and either MCS channel x or the entire GTM was halted due to that break point, depending on the state of bit field MCS[i]_HBP[h]_CTRL.SCOPE.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit HALT_CH3:1;      /**< \brief [3:3] ##suppress##Indicate that MCS channel x has fired the h-th hardware break point and either MCS channel x or the entire GTM was halted due to that break point, depending on the state of bit field MCS[i]_HBP[h]_CTRL.SCOPE.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit HALT_CH4:1;      /**< \brief [4:4] ##suppress##Indicate that MCS channel x has fired the h-th hardware break point and either MCS channel x or the entire GTM was halted due to that break point, depending on the state of bit field MCS[i]_HBP[h]_CTRL.SCOPE.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit HALT_CH5:1;      /**< \brief [5:5] ##suppress##Indicate that MCS channel x has fired the h-th hardware break point and either MCS channel x or the entire GTM was halted due to that break point, depending on the state of bit field MCS[i]_HBP[h]_CTRL.SCOPE.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit HALT_CH6:1;      /**< \brief [6:6] ##suppress##Indicate that MCS channel x has fired the h-th hardware break point and either MCS channel x or the entire GTM was halted due to that break point, depending on the state of bit field MCS[i]_HBP[h]_CTRL.SCOPE.##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit HALT_CH7:1;      /**< \brief [7:7] ##suppress##Indicate that MCS channel x has fired the h-th hardware break point and either MCS channel x or the entire GTM was halted due to that break point, depending on the state of bit field MCS[i]_HBP[h]_CTRL.SCOPE.##suppress## (rw1ch) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_CLS_MCS_HBP_STATUS_Bits;

/** \brief MCS[i] memory region word [m] */
typedef struct _Ifx_GTM_CLS_MCS_MEM_Bits
{
    __IO Ifx_Strict_32Bit DATA:32;         /**< \brief [31:0] ##suppress##MCS memory location.##suppress## (rw) */
} Ifx_GTM_CLS_MCS_MEM_Bits;

/** \brief MCS[i] write-protection register */
typedef struct _Ifx_GTM_CLS_MCS_REG_PROT_Bits
{
    __IO Ifx_Strict_32Bit WPROT0:2;        /**< \brief [1:0] ##suppress##Register Write-Protection of MCS-channel [x]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit WPROT1:2;        /**< \brief [3:2] ##suppress##Register Write-Protection of MCS-channel [x]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit WPROT2:2;        /**< \brief [5:4] ##suppress##Register Write-Protection of MCS-channel [x]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit WPROT3:2;        /**< \brief [7:6] ##suppress##Register Write-Protection of MCS-channel [x]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit WPROT4:2;        /**< \brief [9:8] ##suppress##Register Write-Protection of MCS-channel [x]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit WPROT5:2;        /**< \brief [11:10] ##suppress##Register Write-Protection of MCS-channel [x]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit WPROT6:2;        /**< \brief [13:12] ##suppress##Register Write-Protection of MCS-channel [x]##suppress## (rwh) */
    __IO Ifx_Strict_32Bit WPROT7:2;        /**< \brief [15:14] ##suppress##Register Write-Protection of MCS-channel [x]##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_MCS_REG_PROT_Bits;

/** \brief MCS[i] reset register */
typedef struct _Ifx_GTM_CLS_MCS_RESET_Bits
{
    __IO Ifx_Strict_32Bit RST0:1;          /**< \brief [0:0] Software reset of channel x (rw) */
    __IO Ifx_Strict_32Bit RST1:1;          /**< \brief [1:1] Software reset of channel x (rw) */
    __IO Ifx_Strict_32Bit RST2:1;          /**< \brief [2:2] Software reset of channel x (rw) */
    __IO Ifx_Strict_32Bit RST3:1;          /**< \brief [3:3] Software reset of channel x (rw) */
    __IO Ifx_Strict_32Bit RST4:1;          /**< \brief [4:4] Software reset of channel x (rw) */
    __IO Ifx_Strict_32Bit RST5:1;          /**< \brief [5:5] Software reset of channel x (rw) */
    __IO Ifx_Strict_32Bit RST6:1;          /**< \brief [6:6] Software reset of channel x (rw) */
    __IO Ifx_Strict_32Bit RST7:1;          /**< \brief [7:7] Software reset of channel x (rw) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_CLS_MCS_RESET_Bits;

/** \brief MCS[i] shared interrupt enable register */
typedef struct _Ifx_GTM_CLS_MCS_SINT_IRQ_EN_Bits
{
    __IO Ifx_Strict_32Bit S_IRQ0_EN:1;     /**< \brief [0:0] Shared interrupt [k] (rw) */
    __IO Ifx_Strict_32Bit S_IRQ1_EN:1;     /**< \brief [1:1] Shared interrupt [k] (rw) */
    __IO Ifx_Strict_32Bit S_IRQ2_EN:1;     /**< \brief [2:2] Shared interrupt [k] (rw) */
    __IO Ifx_Strict_32Bit S_IRQ3_EN:1;     /**< \brief [3:3] Shared interrupt [k] (rw) */
    __IO Ifx_Strict_32Bit S_IRQ4_EN:1;     /**< \brief [4:4] Shared interrupt [k] (rw) */
    __IO Ifx_Strict_32Bit S_IRQ5_EN:1;     /**< \brief [5:5] Shared interrupt [k] (rw) */
    __IO Ifx_Strict_32Bit S_IRQ6_EN:1;     /**< \brief [6:6] Shared interrupt [k] (rw) */
    __IO Ifx_Strict_32Bit S_IRQ7_EN:1;     /**< \brief [7:7] Shared interrupt [k] (rw) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_CLS_MCS_SINT_IRQ_EN_Bits;

/** \brief MCS[i] force shared interrupt register */
typedef struct _Ifx_GTM_CLS_MCS_SINT_IRQ_FORCINT_Bits
{
    __IO Ifx_Strict_32Bit TRG_S_IRQ0:1;    /**< \brief [0:0] ##suppress##Trigger the MCS[i]_SINT_IRQ_NOTIFY.S_IRQ[k] bit (shared interrupt [k]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_S_IRQ1:1;    /**< \brief [1:1] ##suppress##Trigger the MCS[i]_SINT_IRQ_NOTIFY.S_IRQ[k] bit (shared interrupt [k]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_S_IRQ2:1;    /**< \brief [2:2] ##suppress##Trigger the MCS[i]_SINT_IRQ_NOTIFY.S_IRQ[k] bit (shared interrupt [k]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_S_IRQ3:1;    /**< \brief [3:3] ##suppress##Trigger the MCS[i]_SINT_IRQ_NOTIFY.S_IRQ[k] bit (shared interrupt [k]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_S_IRQ4:1;    /**< \brief [4:4] ##suppress##Trigger the MCS[i]_SINT_IRQ_NOTIFY.S_IRQ[k] bit (shared interrupt [k]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_S_IRQ5:1;    /**< \brief [5:5] ##suppress##Trigger the MCS[i]_SINT_IRQ_NOTIFY.S_IRQ[k] bit (shared interrupt [k]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_S_IRQ6:1;    /**< \brief [6:6] ##suppress##Trigger the MCS[i]_SINT_IRQ_NOTIFY.S_IRQ[k] bit (shared interrupt [k]) by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_S_IRQ7:1;    /**< \brief [7:7] ##suppress##Trigger the MCS[i]_SINT_IRQ_NOTIFY.S_IRQ[k] bit (shared interrupt [k]) by software##suppress## (rw) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_CLS_MCS_SINT_IRQ_FORCINT_Bits;

/** \brief MCS[i] shared interrupt mode configuration register */
typedef struct _Ifx_GTM_CLS_MCS_SINT_IRQ_MODE_Bits
{
    __IO Ifx_Strict_32Bit IRQ_MODE:2;      /**< \brief [1:0] IRQ mode selection (rw) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_GTM_CLS_MCS_SINT_IRQ_MODE_Bits;

/** \brief MCS[i] shared interrupt notification register */
typedef struct _Ifx_GTM_CLS_MCS_SINT_IRQ_NOTIFY_Bits
{
    __IO Ifx_Strict_32Bit S_IRQ0:1;        /**< \brief [0:0] Shared interrupt [k] notify flag. (rw1ch) */
    __IO Ifx_Strict_32Bit S_IRQ1:1;        /**< \brief [1:1] Shared interrupt [k] notify flag. (rw1ch) */
    __IO Ifx_Strict_32Bit S_IRQ2:1;        /**< \brief [2:2] Shared interrupt [k] notify flag. (rw1ch) */
    __IO Ifx_Strict_32Bit S_IRQ3:1;        /**< \brief [3:3] Shared interrupt [k] notify flag. (rw1ch) */
    __IO Ifx_Strict_32Bit S_IRQ4:1;        /**< \brief [4:4] Shared interrupt [k] notify flag. (rw1ch) */
    __IO Ifx_Strict_32Bit S_IRQ5:1;        /**< \brief [5:5] Shared interrupt [k] notify flag. (rw1ch) */
    __IO Ifx_Strict_32Bit S_IRQ6:1;        /**< \brief [6:6] Shared interrupt [k] notify flag. (rw1ch) */
    __IO Ifx_Strict_32Bit S_IRQ7:1;        /**< \brief [7:7] Shared interrupt [k] notify flag. (rw1ch) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_CLS_MCS_SINT_IRQ_NOTIFY_Bits;

/** \brief MCS[i] set trigger control register */
typedef struct _Ifx_GTM_CLS_MCS_STRG_Bits
{
    __IO Ifx_Strict_32Bit TRG0:1;          /**< \brief [0:0] Trigger bit [k]. (rw1sh) */
    __IO Ifx_Strict_32Bit TRG1:1;          /**< \brief [1:1] Trigger bit [k]. (rw1sh) */
    __IO Ifx_Strict_32Bit TRG2:1;          /**< \brief [2:2] Trigger bit [k]. (rw1sh) */
    __IO Ifx_Strict_32Bit TRG3:1;          /**< \brief [3:3] Trigger bit [k]. (rw1sh) */
    __IO Ifx_Strict_32Bit TRG4:1;          /**< \brief [4:4] Trigger bit [k]. (rw1sh) */
    __IO Ifx_Strict_32Bit TRG5:1;          /**< \brief [5:5] Trigger bit [k]. (rw1sh) */
    __IO Ifx_Strict_32Bit TRG6:1;          /**< \brief [6:6] Trigger bit [k]. (rw1sh) */
    __IO Ifx_Strict_32Bit TRG7:1;          /**< \brief [7:7] Trigger bit [k]. (rw1sh) */
    __IO Ifx_Strict_32Bit TRG8:1;          /**< \brief [8:8] Trigger bit [k]. (rw1sh) */
    __IO Ifx_Strict_32Bit TRG9:1;          /**< \brief [9:9] Trigger bit [k]. (rw1sh) */
    __IO Ifx_Strict_32Bit TRG10:1;         /**< \brief [10:10] Trigger bit [k]. (rw1sh) */
    __IO Ifx_Strict_32Bit TRG11:1;         /**< \brief [11:11] Trigger bit [k]. (rw1sh) */
    __IO Ifx_Strict_32Bit TRG12:1;         /**< \brief [12:12] Trigger bit [k]. (rw1sh) */
    __IO Ifx_Strict_32Bit TRG13:1;         /**< \brief [13:13] Trigger bit [k]. (rw1sh) */
    __IO Ifx_Strict_32Bit TRG14:1;         /**< \brief [14:14] Trigger bit [k]. (rw1sh) */
    __IO Ifx_Strict_32Bit TRG15:1;         /**< \brief [15:15] Trigger bit [k]. (rw1sh) */
    __IO Ifx_Strict_32Bit TRG16:1;         /**< \brief [16:16] Trigger bit [k]. (rw1sh) */
    __IO Ifx_Strict_32Bit TRG17:1;         /**< \brief [17:17] Trigger bit [k]. (rw1sh) */
    __IO Ifx_Strict_32Bit TRG18:1;         /**< \brief [18:18] Trigger bit [k]. (rw1sh) */
    __IO Ifx_Strict_32Bit TRG19:1;         /**< \brief [19:19] Trigger bit [k]. (rw1sh) */
    __IO Ifx_Strict_32Bit TRG20:1;         /**< \brief [20:20] Trigger bit [k]. (rw1sh) */
    __IO Ifx_Strict_32Bit TRG21:1;         /**< \brief [21:21] Trigger bit [k]. (rw1sh) */
    __IO Ifx_Strict_32Bit TRG22:1;         /**< \brief [22:22] Trigger bit [k]. (rw1sh) */
    __IO Ifx_Strict_32Bit TRG23:1;         /**< \brief [23:23] Trigger bit [k]. (rw1sh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_MCS_STRG_Bits;

/** \brief MON activity register 0 */
typedef struct _Ifx_GTM_CLS_MON_ACTIVITY_0_Bits
{
    __IO Ifx_Strict_32Bit MCA_0_0:1;       /**< \brief [0:0] Activity of check performed in module MCS0 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_0_1:1;       /**< \brief [1:1] Activity of check performed in module MCS0 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_0_2:1;       /**< \brief [2:2] Activity of check performed in module MCS0 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_0_3:1;       /**< \brief [3:3] Activity of check performed in module MCS0 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_0_4:1;       /**< \brief [4:4] Activity of check performed in module MCS0 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_0_5:1;       /**< \brief [5:5] Activity of check performed in module MCS0 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_0_6:1;       /**< \brief [6:6] Activity of check performed in module MCS0 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_0_7:1;       /**< \brief [7:7] Activity of check performed in module MCS0 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_1_0:1;       /**< \brief [8:8] Activity of check performed in module MCS1 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_1_1:1;       /**< \brief [9:9] Activity of check performed in module MCS1 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_1_2:1;       /**< \brief [10:10] Activity of check performed in module MCS1 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_1_3:1;       /**< \brief [11:11] Activity of check performed in module MCS1 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_1_4:1;       /**< \brief [12:12] Activity of check performed in module MCS1 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_1_5:1;       /**< \brief [13:13] Activity of check performed in module MCS1 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_1_6:1;       /**< \brief [14:14] Activity of check performed in module MCS1 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_1_7:1;       /**< \brief [15:15] Activity of check performed in module MCS1 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_2_0:1;       /**< \brief [16:16] Activity of check performed in module MCS2 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_2_1:1;       /**< \brief [17:17] Activity of check performed in module MCS2 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_2_2:1;       /**< \brief [18:18] Activity of check performed in module MCS2 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_2_3:1;       /**< \brief [19:19] Activity of check performed in module MCS2 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_2_4:1;       /**< \brief [20:20] Activity of check performed in module MCS2 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_2_5:1;       /**< \brief [21:21] Activity of check performed in module MCS2 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_2_6:1;       /**< \brief [22:22] Activity of check performed in module MCS2 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_2_7:1;       /**< \brief [23:23] Activity of check performed in module MCS2 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_3_0:1;       /**< \brief [24:24] Activity of check performed in module MCS3 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_3_1:1;       /**< \brief [25:25] Activity of check performed in module MCS3 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_3_2:1;       /**< \brief [26:26] Activity of check performed in module MCS3 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_3_3:1;       /**< \brief [27:27] Activity of check performed in module MCS3 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_3_4:1;       /**< \brief [28:28] Activity of check performed in module MCS3 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_3_5:1;       /**< \brief [29:29] Activity of check performed in module MCS3 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_3_6:1;       /**< \brief [30:30] Activity of check performed in module MCS3 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_3_7:1;       /**< \brief [31:31] Activity of check performed in module MCS3 at channel [x] (rw1ch) */
} Ifx_GTM_CLS_MON_ACTIVITY_0_Bits;

/** \brief MON activity register 1 */
typedef struct _Ifx_GTM_CLS_MON_ACTIVITY_1_Bits
{
    __IO Ifx_Strict_32Bit MCA_4_0:1;       /**< \brief [0:0] Activity of check performed in module MCS4 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_4_1:1;       /**< \brief [1:1] Activity of check performed in module MCS4 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_4_2:1;       /**< \brief [2:2] Activity of check performed in module MCS4 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_4_3:1;       /**< \brief [3:3] Activity of check performed in module MCS4 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_4_4:1;       /**< \brief [4:4] Activity of check performed in module MCS4 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_4_5:1;       /**< \brief [5:5] Activity of check performed in module MCS4 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_4_6:1;       /**< \brief [6:6] Activity of check performed in module MCS4 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_4_7:1;       /**< \brief [7:7] Activity of check performed in module MCS4 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_5_0:1;       /**< \brief [8:8] Activity of check performed in module MCS5 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_5_1:1;       /**< \brief [9:9] Activity of check performed in module MCS5 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_5_2:1;       /**< \brief [10:10] Activity of check performed in module MCS5 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_5_3:1;       /**< \brief [11:11] Activity of check performed in module MCS5 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_5_4:1;       /**< \brief [12:12] Activity of check performed in module MCS5 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_5_5:1;       /**< \brief [13:13] Activity of check performed in module MCS5 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_5_6:1;       /**< \brief [14:14] Activity of check performed in module MCS5 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_5_7:1;       /**< \brief [15:15] Activity of check performed in module MCS5 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_6_0:1;       /**< \brief [16:16] Activity of check performed in module MCS6 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_6_1:1;       /**< \brief [17:17] Activity of check performed in module MCS6 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_6_2:1;       /**< \brief [18:18] Activity of check performed in module MCS6 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_6_3:1;       /**< \brief [19:19] Activity of check performed in module MCS6 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_6_4:1;       /**< \brief [20:20] Activity of check performed in module MCS6 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_6_5:1;       /**< \brief [21:21] Activity of check performed in module MCS6 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_6_6:1;       /**< \brief [22:22] Activity of check performed in module MCS6 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_6_7:1;       /**< \brief [23:23] Activity of check performed in module MCS6 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_7_0:1;       /**< \brief [24:24] Activity of check performed in module MCS7 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_7_1:1;       /**< \brief [25:25] Activity of check performed in module MCS7 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_7_2:1;       /**< \brief [26:26] Activity of check performed in module MCS7 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_7_3:1;       /**< \brief [27:27] Activity of check performed in module MCS7 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_7_4:1;       /**< \brief [28:28] Activity of check performed in module MCS7 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_7_5:1;       /**< \brief [29:29] Activity of check performed in module MCS7 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_7_6:1;       /**< \brief [30:30] Activity of check performed in module MCS7 at channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_7_7:1;       /**< \brief [31:31] Activity of check performed in module MCS7 at channel [x] (rw1ch) */
} Ifx_GTM_CLS_MON_ACTIVITY_1_Bits;

/** \brief MON activity register for MCS [j] */
typedef struct _Ifx_GTM_CLS_MON_ACTIVITY_MCS_Bits
{
    __IO Ifx_Strict_32Bit MCA_0:1;         /**< \brief [0:0] ##suppress##Activity of check performed in module MCS [j] at channel [x]##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_1:1;         /**< \brief [1:1] ##suppress##Activity of check performed in module MCS [j] at channel [x]##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_2:1;         /**< \brief [2:2] ##suppress##Activity of check performed in module MCS [j] at channel [x]##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_3:1;         /**< \brief [3:3] ##suppress##Activity of check performed in module MCS [j] at channel [x]##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_4:1;         /**< \brief [4:4] ##suppress##Activity of check performed in module MCS [j] at channel [x]##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_5:1;         /**< \brief [5:5] ##suppress##Activity of check performed in module MCS [j] at channel [x]##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_6:1;         /**< \brief [6:6] ##suppress##Activity of check performed in module MCS [j] at channel [x]##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit MCA_7:1;         /**< \brief [7:7] ##suppress##Activity of check performed in module MCS [j] at channel [x]##suppress## (rw1ch) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_CLS_MON_ACTIVITY_MCS_Bits;

/** \brief MON status register */
typedef struct _Ifx_GTM_CLS_MON_STATUS_Bits
{
    __IO Ifx_Strict_32Bit ACT_CMU0:1;      /**< \brief [0:0] ##suppress##CCM[1]_CLK_RES[x:x] activity##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ACT_CMU1:1;      /**< \brief [1:1] ##suppress##CCM[1]_CLK_RES[x:x] activity##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ACT_CMU2:1;      /**< \brief [2:2] ##suppress##CCM[1]_CLK_RES[x:x] activity##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ACT_CMU3:1;      /**< \brief [3:3] ##suppress##CCM[1]_CLK_RES[x:x] activity##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ACT_CMU4:1;      /**< \brief [4:4] ##suppress##CCM[1]_CLK_RES[x:x] activity##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ACT_CMU5:1;      /**< \brief [5:5] ##suppress##CCM[1]_CLK_RES[x:x] activity##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ACT_CMU6:1;      /**< \brief [6:6] ##suppress##CCM[1]_CLK_RES[x:x] activity##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ACT_CMU7:1;      /**< \brief [7:7] ##suppress##CCM[1]_CLK_RES[x:x] activity##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ACT_CMUFX0:1;    /**< \brief [8:8] ##suppress##CCM[1]_FXCLK_RES[y:y] activity##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ACT_CMUFX1:1;    /**< \brief [9:9] ##suppress##CCM[1]_FXCLK_RES[y:y] activity##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ACT_CMUFX2:1;    /**< \brief [10:10] ##suppress##CCM[1]_FXCLK_RES[y:y] activity##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ACT_CMUFX3:1;    /**< \brief [11:11] ##suppress##CCM[1]_FXCLK_RES[y:y] activity##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit ACT_CMUFX4:1;    /**< \brief [12:12] ##suppress##CCM[1]_FXCLK_RES[y:y] activity##suppress## (rw1ch) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [13:13] \internal Reserved */
    __IO Ifx_Strict_32Bit ACT_CMU8:1;      /**< \brief [14:14] ##suppress##CCM[1]_CLK_RES[8:8] activity##suppress## (rw1ch) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [15:15] \internal Reserved */
    __I  Ifx_Strict_32Bit CMP_ERR:1;       /**< \brief [16:16] ##suppress##Error detected at CMP##suppress## (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [19:17] \internal Reserved */
    __I  Ifx_Strict_32Bit MCS0_ERR:1;      /**< \brief [20:20] ##suppress##Error detected at MCS[j]##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS1_ERR:1;      /**< \brief [21:21] ##suppress##Error detected at MCS[j]##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS2_ERR:1;      /**< \brief [22:22] ##suppress##Error detected at MCS[j]##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS3_ERR:1;      /**< \brief [23:23] ##suppress##Error detected at MCS[j]##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS4_ERR:1;      /**< \brief [24:24] ##suppress##Error detected at MCS[j]##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS5_ERR:1;      /**< \brief [25:25] ##suppress##Error detected at MCS[j]##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS6_ERR:1;      /**< \brief [26:26] ##suppress##Error detected at MCS[j]##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS7_ERR:1;      /**< \brief [27:27] ##suppress##Error detected at MCS[j]##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS8_ERR:1;      /**< \brief [28:28] ##suppress##Error detected at MCS[j]##suppress## (rh) */
    __I  Ifx_Strict_32Bit MCS9_ERR:1;      /**< \brief [29:29] ##suppress##Error detected at MCS[j]##suppress## (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [31:30] \internal Reserved */
} Ifx_GTM_CLS_MON_STATUS_Bits;

/** \brief AFD [i] FIFO [x] buffer access register */
typedef struct _Ifx_GTM_CLS_PSM_AFD_CH_BUF_ACC_Bits
{
    __IO Ifx_Strict_32Bit DATA:29;         /**< \brief [28:0] ##suppress##Read/write data from/to FIFO##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [31:29] \internal Reserved */
} Ifx_GTM_CLS_PSM_AFD_CH_BUF_ACC_Bits;

/** \brief F2A[i] stream [x] ARU read register */
typedef struct _Ifx_GTM_CLS_PSM_F2A_CH_ARU_RD_FIFO_Bits
{
    __IO Ifx_Strict_32Bit ADDR:9;          /**< \brief [8:0] ##suppress##ARU Read address##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :23;             /**< \brief [31:9] \internal Reserved */
} Ifx_GTM_CLS_PSM_F2A_CH_ARU_RD_FIFO_Bits;

/** \brief F2A[i] stream [x] configuration register */
typedef struct _Ifx_GTM_CLS_PSM_F2A_CH_STR_CFG_Bits
{
    __I  Ifx_Strict_32Bit :16;             /**< \brief [15:0] \internal Reserved */
    __IO Ifx_Strict_32Bit TMODE:2;         /**< \brief [17:16] ##suppress##Transfer mode for 53-bit ARU data from/to FIFO##suppress## (rwh) */
    __IO Ifx_Strict_32Bit DIR:1;           /**< \brief [18:18] Data transfer direction (rwh) */
    __I  Ifx_Strict_32Bit :13;             /**< \brief [31:19] \internal Reserved */
} Ifx_GTM_CLS_PSM_F2A_CH_STR_CFG_Bits;

/** \brief F2A[i] stream control register */
typedef struct _Ifx_GTM_CLS_PSM_F2A_CTRL_Bits
{
    __IO Ifx_Strict_32Bit STR4_CONF:2;     /**< \brief [1:0] ##suppress##Reconfiguration of stream [y] to FIFO channel [y]-4##suppress## (rwh) */
    __IO Ifx_Strict_32Bit STR5_CONF:2;     /**< \brief [3:2] ##suppress##Reconfiguration of stream [y] to FIFO channel [y]-4##suppress## (rwh) */
    __IO Ifx_Strict_32Bit STR6_CONF:2;     /**< \brief [5:4] ##suppress##Reconfiguration of stream [y] to FIFO channel [y]-4##suppress## (rwh) */
    __IO Ifx_Strict_32Bit STR7_CONF:2;     /**< \brief [7:6] ##suppress##Reconfiguration of stream [y] to FIFO channel [y]-4##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_CLS_PSM_F2A_CTRL_Bits;

/** \brief F2A[i] stream activation register */
typedef struct _Ifx_GTM_CLS_PSM_F2A_ENABLE_Bits
{
    __IO Ifx_Strict_32Bit STR0_EN:2;       /**< \brief [1:0] Enable/disable stream [y] (rwh) */
    __IO Ifx_Strict_32Bit STR1_EN:2;       /**< \brief [3:2] Enable/disable stream [y] (rwh) */
    __IO Ifx_Strict_32Bit STR2_EN:2;       /**< \brief [5:4] Enable/disable stream [y] (rwh) */
    __IO Ifx_Strict_32Bit STR3_EN:2;       /**< \brief [7:6] Enable/disable stream [y] (rwh) */
    __IO Ifx_Strict_32Bit STR4_EN:2;       /**< \brief [9:8] Enable/disable stream [y] (rwh) */
    __IO Ifx_Strict_32Bit STR5_EN:2;       /**< \brief [11:10] Enable/disable stream [y] (rwh) */
    __IO Ifx_Strict_32Bit STR6_EN:2;       /**< \brief [13:12] Enable/disable stream [y] (rwh) */
    __IO Ifx_Strict_32Bit STR7_EN:2;       /**< \brief [15:14] Enable/disable stream [y] (rwh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_PSM_F2A_ENABLE_Bits;

/** \brief FIFO[i] channel [x] control register */
typedef struct _Ifx_GTM_CLS_PSM_FIFO_CH_CTRL_Bits
{
    __IO Ifx_Strict_32Bit RBM:1;           /**< \brief [0:0] Ring buffer mode enable (rw) */
    __IO Ifx_Strict_32Bit RAP:1;           /**< \brief [1:1] RAM access priority (rw) */
    __IO Ifx_Strict_32Bit FLUSH:1;         /**< \brief [2:2] ##suppress##FIFO flush control##suppress## (rwch) */
    __IO Ifx_Strict_32Bit WULOCK:1;        /**< \brief [3:3] ##suppress##RAM write unlock. Enable/disable direct RAM write-access to the memory mapped FIFO region.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_GTM_CLS_PSM_FIFO_CH_CTRL_Bits;

/** \brief FIFO[i] channel [x] error interrupt enable register */
typedef struct _Ifx_GTM_CLS_PSM_FIFO_CH_EIRQ_EN_Bits
{
    __IO Ifx_Strict_32Bit FIFO_EMPTY_EIRQ_EN:1;    /**< \brief [0:0] Error interrupt enable (rw) */
    __IO Ifx_Strict_32Bit FIFO_FULL_EIRQ_EN:1;    /**< \brief [1:1] Interrupt enable (rw) */
    __IO Ifx_Strict_32Bit FIFO_LWM_EIRQ_EN:1;    /**< \brief [2:2] Interrupt enable (rw) */
    __IO Ifx_Strict_32Bit FIFO_UWM_EIRQ_EN:1;    /**< \brief [3:3] Interrupt enable (rw) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_GTM_CLS_PSM_FIFO_CH_EIRQ_EN_Bits;

/** \brief FIFO[i] channel [x] end address register */
typedef struct _Ifx_GTM_CLS_PSM_FIFO_CH_END_ADDR_Bits
{
    __IO Ifx_Strict_32Bit ADDR:10;         /**< \brief [9:0] ##suppress##End address for FIFO channel [x]##suppress## (rw) */
    __I  Ifx_Strict_32Bit :22;             /**< \brief [31:10] \internal Reserved */
} Ifx_GTM_CLS_PSM_FIFO_CH_END_ADDR_Bits;

/** \brief FIFO[i] channel [x] fill level register */
typedef struct _Ifx_GTM_CLS_PSM_FIFO_CH_FILL_LEVEL_Bits
{
    __I  Ifx_Strict_32Bit LEVEL:11;        /**< \brief [10:0] ##suppress##Fill level of the current FIFO##suppress## (rh) */
    __I  Ifx_Strict_32Bit :21;             /**< \brief [31:11] \internal Reserved */
} Ifx_GTM_CLS_PSM_FIFO_CH_FILL_LEVEL_Bits;

/** \brief FIFO[i] channel [x] interrupt enable register */
typedef struct _Ifx_GTM_CLS_PSM_FIFO_CH_IRQ_EN_Bits
{
    __IO Ifx_Strict_32Bit FIFO_EMPTY_IRQ_EN:1;    /**< \brief [0:0] Interrupt enable (rw) */
    __IO Ifx_Strict_32Bit FIFO_FULL_IRQ_EN:1;    /**< \brief [1:1] Interrupt enable (rw) */
    __IO Ifx_Strict_32Bit FIFO_LWM_IRQ_EN:1;    /**< \brief [2:2] Interrupt enable (rw) */
    __IO Ifx_Strict_32Bit FIFO_UWM_IRQ_EN:1;    /**< \brief [3:3] Interrupt enable (rw) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_GTM_CLS_PSM_FIFO_CH_IRQ_EN_Bits;

/** \brief FIFO[i] channel [x] force interrupt register */
typedef struct _Ifx_GTM_CLS_PSM_FIFO_CH_IRQ_FORCINT_Bits
{
    __IO Ifx_Strict_32Bit TRG_FIFO_EMPTY:1;    /**< \brief [0:0] ##suppress##Trigger the bit XXX by software FIFO[i]_CH[x]_IRQ_NOTIFY.FIFO_EMPTY by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_FIFO_FULL:1;    /**< \brief [1:1] ##suppress##Trigger the bit XXX by software FIFO[i]_CH[x]_IRQ_NOTIFY.FIFO_FULL by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_FIFO_LWM:1;    /**< \brief [2:2] ##suppress##Trigger the bit XXX by software FIFO[i]_CH[x]_IRQ_NOTIFY.FIFO_LWM by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_FIFO_UWM:1;    /**< \brief [3:3] ##suppress##Trigger the bit XXX by software FIFO[i]_CH[x]_IRQ_NOTIFY.FIFO_UWM by software##suppress## (rw) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_GTM_CLS_PSM_FIFO_CH_IRQ_FORCINT_Bits;

/** \brief FIFO[i] channel [x] interrupt mode control register */
typedef struct _Ifx_GTM_CLS_PSM_FIFO_CH_IRQ_MODE_Bits
{
    __IO Ifx_Strict_32Bit IRQ_MODE:2;      /**< \brief [1:0] IRQ mode selection (rw) */
    __IO Ifx_Strict_32Bit DMA_HYSTERESIS:1;    /**< \brief [2:2] ##suppress##Enable DMA hysteresis mode##suppress## (rw) */
    __IO Ifx_Strict_32Bit DMA_HYST_DIR:1;    /**< \brief [3:3] ##suppress##DMA direction in hysteresis mode##suppress## (rw) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_GTM_CLS_PSM_FIFO_CH_IRQ_MODE_Bits;

/** \brief FIFO[i] channel [x] interrupt notification register */
typedef struct _Ifx_GTM_CLS_PSM_FIFO_CH_IRQ_NOTIFY_Bits
{
    __IO Ifx_Strict_32Bit FIFO_EMPTY:1;    /**< \brief [0:0] ##suppress##FIFO is empty##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit FIFO_FULL:1;     /**< \brief [1:1] ##suppress##FIFO is full##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit FIFO_LWM:1;      /**< \brief [2:2] ##suppress##FIFO Lower watermark was under-run##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit FIFO_UWM:1;      /**< \brief [3:3] ##suppress##FIFO Upper watermark was overrun##suppress## (rw1ch) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_GTM_CLS_PSM_FIFO_CH_IRQ_NOTIFY_Bits;

/** \brief FIFO[i] channel [x] lower watermark register */
typedef struct _Ifx_GTM_CLS_PSM_FIFO_CH_LOWER_WM_Bits
{
    __IO Ifx_Strict_32Bit ADDR:10;         /**< \brief [9:0] Lower watermark address (rw) */
    __I  Ifx_Strict_32Bit :22;             /**< \brief [31:10] \internal Reserved */
} Ifx_GTM_CLS_PSM_FIFO_CH_LOWER_WM_Bits;

/** \brief FIFO[i] channel [x] read pointer register */
typedef struct _Ifx_GTM_CLS_PSM_FIFO_CH_RD_PTR_Bits
{
    __I  Ifx_Strict_32Bit ADDR:10;         /**< \brief [9:0] Position of the read pointer (rh) */
    __I  Ifx_Strict_32Bit :22;             /**< \brief [31:10] \internal Reserved */
} Ifx_GTM_CLS_PSM_FIFO_CH_RD_PTR_Bits;

/** \brief FIFO[i] channel [x] start address register */
typedef struct _Ifx_GTM_CLS_PSM_FIFO_CH_START_ADDR_Bits
{
    __IO Ifx_Strict_32Bit ADDR:10;         /**< \brief [9:0] ##suppress##Start address for FIFO channel [x]##suppress## (rw) */
    __I  Ifx_Strict_32Bit :22;             /**< \brief [31:10] \internal Reserved */
} Ifx_GTM_CLS_PSM_FIFO_CH_START_ADDR_Bits;

/** \brief FIFO[i] channel [x] status register */
typedef struct _Ifx_GTM_CLS_PSM_FIFO_CH_STATUS_Bits
{
    __I  Ifx_Strict_32Bit EMPTY:1;         /**< \brief [0:0] ##suppress##FIFO is empty##suppress## (rh) */
    __I  Ifx_Strict_32Bit FULL:1;          /**< \brief [1:1] ##suppress##FIFO is full##suppress## (rh) */
    __I  Ifx_Strict_32Bit LOW_WM:1;        /**< \brief [2:2] Lower watermark reached (rh) */
    __I  Ifx_Strict_32Bit UP_WM:1;         /**< \brief [3:3] Upper watermark reached (rh) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_GTM_CLS_PSM_FIFO_CH_STATUS_Bits;

/** \brief FIFO[i] channel [x] upper watermark register */
typedef struct _Ifx_GTM_CLS_PSM_FIFO_CH_UPPER_WM_Bits
{
    __IO Ifx_Strict_32Bit ADDR:10;         /**< \brief [9:0] Upper watermark address (rw) */
    __I  Ifx_Strict_32Bit :22;             /**< \brief [31:10] \internal Reserved */
} Ifx_GTM_CLS_PSM_FIFO_CH_UPPER_WM_Bits;

/** \brief FIFO[i] channel [x] write pointer register */
typedef struct _Ifx_GTM_CLS_PSM_FIFO_CH_WR_PTR_Bits
{
    __I  Ifx_Strict_32Bit ADDR:10;         /**< \brief [9:0] Position of the write pointer (rh) */
    __I  Ifx_Strict_32Bit :22;             /**< \brief [31:10] \internal Reserved */
} Ifx_GTM_CLS_PSM_FIFO_CH_WR_PTR_Bits;

/** \brief SPE[i] Command Register */
typedef struct _Ifx_GTM_CLS_SPE_CMD_Bits
{
    __IO Ifx_Strict_32Bit SPE_CTRL_CMD:2;    /**< \brief [1:0] ##suppress##SPE control command##suppress## (rw) */
    __I  Ifx_Strict_32Bit :14;             /**< \brief [15:2] \internal Reserved */
    __IO Ifx_Strict_32Bit SPE_UPD_TRIG:1;    /**< \brief [16:16] ##suppress##SPE updater trigger##suppress## (rwch) */
    __I  Ifx_Strict_32Bit :15;             /**< \brief [31:17] \internal Reserved */
} Ifx_GTM_CLS_SPE_CMD_Bits;

/** \brief SPE[i] Control Status Register */
typedef struct _Ifx_GTM_CLS_SPE_CTRL_STAT_Bits
{
    __IO Ifx_Strict_32Bit EN:1;            /**< \brief [0:0] ##suppress##SPE Submodule enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit SIE0:1;          /**< \brief [1:1] ##suppress##SPE Input [k] enable for TIM[i]_CH[x:x], TIM[i]_CH[y:y], TIM[i]_CH[z:z].##suppress## (rw) */
    __IO Ifx_Strict_32Bit SIE1:1;          /**< \brief [2:2] ##suppress##SPE Input [k] enable for TIM[i]_CH[x:x], TIM[i]_CH[y:y], TIM[i]_CH[z:z].##suppress## (rw) */
    __IO Ifx_Strict_32Bit SIE2:1;          /**< \brief [3:3] ##suppress##SPE Input [k] enable for TIM[i]_CH[x:x], TIM[i]_CH[y:y], TIM[i]_CH[z:z].##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRIG_SEL:2;      /**< \brief [5:4] Select trigger input signal (rw) */
    __IO Ifx_Strict_32Bit TIM_SEL:1;       /**< \brief [6:6] ##suppress##Select TIM input signal##suppress## (rw) */
    __IO Ifx_Strict_32Bit FSOM:1;          /**< \brief [7:7] Fast Shutoff Mode (rw) */
    __IO Ifx_Strict_32Bit SPE_PAT_PTR:3;    /**< \brief [10:8] ##suppress##Pattern selector for TOM output signals.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [11:11] \internal Reserved */
    __IO Ifx_Strict_32Bit AIP:3;           /**< \brief [14:12] Input pattern that was detected by a regular input pattern change. (rw) */
    __IO Ifx_Strict_32Bit ADIR:1;          /**< \brief [15:15] ##suppress##Rotation direction.  Will be reflected in the signal SPE[i]_DIR.##suppress## (rw) */
    __IO Ifx_Strict_32Bit PIP:3;           /**< \brief [18:16] Previous input pattern that was detected by a regular input pattern change. (rw) */
    __IO Ifx_Strict_32Bit PDIR:1;          /**< \brief [19:19] Previous rotation direction (rw) */
    __I  Ifx_Strict_32Bit NIP:3;           /**< \brief [22:20] New input pattern that was detected. (rh) */
    __IO Ifx_Strict_32Bit ETRIG_SEL:1;     /**< \brief [23:23] ##suppress##Extended trigger selection of signal TRIG_SEL##suppress## (rw) */
    __IO Ifx_Strict_32Bit FSOL:8;          /**< \brief [31:24] ##suppress##Fast Shutoff Level for TOM[i] channel 0 to 7##suppress## (rw) */
} Ifx_GTM_CLS_SPE_CTRL_STAT_Bits;

/** \brief SPE[i] Control Status Register 2 */
typedef struct _Ifx_GTM_CLS_SPE_CTRL_STAT2_Bits
{
    __I  Ifx_Strict_32Bit :8;              /**< \brief [7:0] \internal Reserved */
    __IO Ifx_Strict_32Bit SPE_PAT_PTR_BWD:3;    /**< \brief [10:8] ##suppress##Pattern selector for TOM output signals in case of SPE[i]_CMD.SPE_CTRL_CMD = 0b01 (e.g. backward direction).##suppress## (rw) */
    __I  Ifx_Strict_32Bit :21;             /**< \brief [31:11] \internal Reserved */
} Ifx_GTM_CLS_SPE_CTRL_STAT2_Bits;

/** \brief SPE[i] Error Interrupt Enable Register */
typedef struct _Ifx_GTM_CLS_SPE_EIRQ_EN_Bits
{
    __IO Ifx_Strict_32Bit SPE_NIPD_EIRQ_EN:1;    /**< \brief [0:0] SPE_NIPD_EIRQ interrupt enable (rw) */
    __IO Ifx_Strict_32Bit SPE_DCHG_EIRQ_EN:1;    /**< \brief [1:1] SPE_DCHG_EIRQ error interrupt enable (rw) */
    __IO Ifx_Strict_32Bit SPE_PERR_EIRQ_EN:1;    /**< \brief [2:2] SPE_PERR_EIRQ error interrupt enable (rw) */
    __IO Ifx_Strict_32Bit SPE_BIS_EIRQ_EN:1;    /**< \brief [3:3] ##suppress##SPE[i]_BIS_EIRQ error interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit SPE_RCMP_EIRQ_EN:1;    /**< \brief [4:4] ##suppress##SPE[i]_RCMP_EIRQ error interrupt enable##suppress## (rw) */
    __I  Ifx_Strict_32Bit :27;             /**< \brief [31:5] \internal Reserved */
} Ifx_GTM_CLS_SPE_EIRQ_EN_Bits;

/** \brief SPE[i] Interrupt Enable Register */
typedef struct _Ifx_GTM_CLS_SPE_IRQ_EN_Bits
{
    __IO Ifx_Strict_32Bit SPE_NIPD_IRQ_EN:1;    /**< \brief [0:0] SPE_NIPD_IRQ interrupt enable (rw) */
    __IO Ifx_Strict_32Bit SPE_DCHG_IRQ_EN:1;    /**< \brief [1:1] SPE_DCHG_IRQ interrupt enable (rw) */
    __IO Ifx_Strict_32Bit SPE_PERR_IRQ_EN:1;    /**< \brief [2:2] SPE_PERR_IRQ interrupt enable (rw) */
    __IO Ifx_Strict_32Bit SPE_BIS_IRQ_EN:1;    /**< \brief [3:3] SPE_BIS_IRQ interrupt enable (rw) */
    __IO Ifx_Strict_32Bit SPE_RCMP_IRQ_EN:1;    /**< \brief [4:4] SPE_RCMP_IRQ interrupt enable (rw) */
    __I  Ifx_Strict_32Bit :27;             /**< \brief [31:5] \internal Reserved */
} Ifx_GTM_CLS_SPE_IRQ_EN_Bits;

/** \brief SPE[i] Interrupt Generation By Software */
typedef struct _Ifx_GTM_CLS_SPE_IRQ_FORCINT_Bits
{
    __IO Ifx_Strict_32Bit TRG_SPE_NIPD:1;    /**< \brief [0:0] ##suppress##Trigger SPE[i]_IRQ_NOTIFY.SPE_NIPD by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_SPE_DCHG:1;    /**< \brief [1:1] ##suppress##Trigger SPE[i]_IRQ_NOTIFY.SPE_DCHG by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_SPE_PERR:1;    /**< \brief [2:2] ##suppress##Trigger SPE[i]_IRQ_NOTIFY.SPE_PERR by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_SPE_BIS:1;    /**< \brief [3:3] ##suppress##Trigger SPE[i]_IRQ_NOTIFY.SPE_BIS by software.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_SPE_RCMP:1;    /**< \brief [4:4] ##suppress##Trigger SPE[i]_IRQ_NOTIFY.SPE_RCMP by software.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :27;             /**< \brief [31:5] \internal Reserved */
} Ifx_GTM_CLS_SPE_IRQ_FORCINT_Bits;

/** \brief SPE[i] Interrupt Mode Configuration Register */
typedef struct _Ifx_GTM_CLS_SPE_IRQ_MODE_Bits
{
    __IO Ifx_Strict_32Bit IRQ_MODE:2;      /**< \brief [1:0] IRQ mode selection (rw) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_GTM_CLS_SPE_IRQ_MODE_Bits;

/** \brief SPE[i] Interrupt Notification Register */
typedef struct _Ifx_GTM_CLS_SPE_IRQ_NOTIFY_Bits
{
    __IO Ifx_Strict_32Bit SPE_NIPD:1;      /**< \brief [0:0] New input pattern interrupt occurred (rw1ch) */
    __IO Ifx_Strict_32Bit SPE_DCHG:1;      /**< \brief [1:1] SPE_DIR bit changed on behalf of new input pattern. (rw1ch) */
    __IO Ifx_Strict_32Bit SPE_PERR:1;      /**< \brief [2:2] Wrong or invalid pattern detected at input. (rw1ch) */
    __IO Ifx_Strict_32Bit SPE_BIS:1;       /**< \brief [3:3] Bouncing input signal detected (rw1ch) */
    __IO Ifx_Strict_32Bit SPE_RCMP:1;      /**< \brief [4:4] ##suppress##SPE revolution counter match event##suppress## (rw1ch) */
    __I  Ifx_Strict_32Bit :27;             /**< \brief [31:5] \internal Reserved */
} Ifx_GTM_CLS_SPE_IRQ_NOTIFY_Bits;

/** \brief SPE[i] Output Control Register */
typedef struct _Ifx_GTM_CLS_SPE_OUT_CTRL_Bits
{
    __IO Ifx_Strict_32Bit SPE_OUT_CTRL0:2;    /**< \brief [1:0] ##suppress##SPE output control value for TOM channel0 to TOM channel7##suppress## (rw) */
    __IO Ifx_Strict_32Bit SPE_OUT_CTRL1:2;    /**< \brief [3:2] ##suppress##SPE output control value for TOM channel0 to TOM channel7##suppress## (rw) */
    __IO Ifx_Strict_32Bit SPE_OUT_CTRL2:2;    /**< \brief [5:4] ##suppress##SPE output control value for TOM channel0 to TOM channel7##suppress## (rw) */
    __IO Ifx_Strict_32Bit SPE_OUT_CTRL3:2;    /**< \brief [7:6] ##suppress##SPE output control value for TOM channel0 to TOM channel7##suppress## (rw) */
    __IO Ifx_Strict_32Bit SPE_OUT_CTRL4:2;    /**< \brief [9:8] ##suppress##SPE output control value for TOM channel0 to TOM channel7##suppress## (rw) */
    __IO Ifx_Strict_32Bit SPE_OUT_CTRL5:2;    /**< \brief [11:10] ##suppress##SPE output control value for TOM channel0 to TOM channel7##suppress## (rw) */
    __IO Ifx_Strict_32Bit SPE_OUT_CTRL6:2;    /**< \brief [13:12] ##suppress##SPE output control value for TOM channel0 to TOM channel7##suppress## (rw) */
    __IO Ifx_Strict_32Bit SPE_OUT_CTRL7:2;    /**< \brief [15:14] ##suppress##SPE output control value for TOM channel0 to TOM channel7##suppress## (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_SPE_OUT_CTRL_Bits;

/** \brief SPE[i] Output Definition Register */
typedef struct _Ifx_GTM_CLS_SPE_OUT_PAT_Bits
{
    __IO Ifx_Strict_32Bit SPE_OUT_PAT0:2;    /**< \brief [1:0] ##suppress##SPE output control value for TOM channel0 to TOM channel7##suppress## (rw) */
    __IO Ifx_Strict_32Bit SPE_OUT_PAT1:2;    /**< \brief [3:2] ##suppress##SPE output control value for TOM channel0 to TOM channel7##suppress## (rw) */
    __IO Ifx_Strict_32Bit SPE_OUT_PAT2:2;    /**< \brief [5:4] ##suppress##SPE output control value for TOM channel0 to TOM channel7##suppress## (rw) */
    __IO Ifx_Strict_32Bit SPE_OUT_PAT3:2;    /**< \brief [7:6] ##suppress##SPE output control value for TOM channel0 to TOM channel7##suppress## (rw) */
    __IO Ifx_Strict_32Bit SPE_OUT_PAT4:2;    /**< \brief [9:8] ##suppress##SPE output control value for TOM channel0 to TOM channel7##suppress## (rw) */
    __IO Ifx_Strict_32Bit SPE_OUT_PAT5:2;    /**< \brief [11:10] ##suppress##SPE output control value for TOM channel0 to TOM channel7##suppress## (rw) */
    __IO Ifx_Strict_32Bit SPE_OUT_PAT6:2;    /**< \brief [13:12] ##suppress##SPE output control value for TOM channel0 to TOM channel7##suppress## (rw) */
    __IO Ifx_Strict_32Bit SPE_OUT_PAT7:2;    /**< \brief [15:14] ##suppress##SPE output control value for TOM channel0 to TOM channel7##suppress## (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_SPE_OUT_PAT_Bits;

/** \brief SPE[i] Input Pattern Definition Register */
typedef struct _Ifx_GTM_CLS_SPE_PAT_Bits
{
    __IO Ifx_Strict_32Bit IP0_VAL:1;       /**< \brief [0:0] Input pattern [t] is a valid pattern. (rw) */
    __IO Ifx_Strict_32Bit IP0_PAT:3;       /**< \brief [3:1] Input pattern [t] (rw) */
    __IO Ifx_Strict_32Bit IP1_VAL:1;       /**< \brief [4:4] Input pattern [t] is a valid pattern. (rw) */
    __IO Ifx_Strict_32Bit IP1_PAT:3;       /**< \brief [7:5] Input pattern [t] (rw) */
    __IO Ifx_Strict_32Bit IP2_VAL:1;       /**< \brief [8:8] Input pattern [t] is a valid pattern. (rw) */
    __IO Ifx_Strict_32Bit IP2_PAT:3;       /**< \brief [11:9] Input pattern [t] (rw) */
    __IO Ifx_Strict_32Bit IP3_VAL:1;       /**< \brief [12:12] Input pattern [t] is a valid pattern. (rw) */
    __IO Ifx_Strict_32Bit IP3_PAT:3;       /**< \brief [15:13] Input pattern [t] (rw) */
    __IO Ifx_Strict_32Bit IP4_VAL:1;       /**< \brief [16:16] Input pattern [t] is a valid pattern. (rw) */
    __IO Ifx_Strict_32Bit IP4_PAT:3;       /**< \brief [19:17] Input pattern [t] (rw) */
    __IO Ifx_Strict_32Bit IP5_VAL:1;       /**< \brief [20:20] Input pattern [t] is a valid pattern. (rw) */
    __IO Ifx_Strict_32Bit IP5_PAT:3;       /**< \brief [23:21] Input pattern [t] (rw) */
    __IO Ifx_Strict_32Bit IP6_VAL:1;       /**< \brief [24:24] Input pattern [t] is a valid pattern. (rw) */
    __IO Ifx_Strict_32Bit IP6_PAT:3;       /**< \brief [27:25] Input pattern [t] (rw) */
    __IO Ifx_Strict_32Bit IP7_VAL:1;       /**< \brief [28:28] Input pattern [t] is a valid pattern. (rw) */
    __IO Ifx_Strict_32Bit IP7_PAT:3;       /**< \brief [31:29] Input pattern [t] (rw) */
} Ifx_GTM_CLS_SPE_PAT_Bits;

/** \brief SPE[i] Revolution Counter Compare Value */
typedef struct _Ifx_GTM_CLS_SPE_REV_CMP_Bits
{
    __IO Ifx_Strict_32Bit REV_CMP:24;      /**< \brief [23:0] Input signal revolution counter compare value (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_SPE_REV_CMP_Bits;

/** \brief SPE[i] Input Revolution Counter */
typedef struct _Ifx_GTM_CLS_SPE_REV_CNT_Bits
{
    __IO Ifx_Strict_32Bit REV_CNT:24;      /**< \brief [23:0] Input signal revolution counter (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_SPE_REV_CNT_Bits;

/** \brief TBU channel 0 base */
typedef struct _Ifx_GTM_CLS_TBU_CH0_BASE_Bits
{
    __IO Ifx_Strict_32Bit BASE:27;         /**< \brief [26:0] Time base value for channel 0 (rwh) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [31:27] \internal Reserved */
} Ifx_GTM_CLS_TBU_CH0_BASE_Bits;

/** \brief TBU channel 0 control */
typedef struct _Ifx_GTM_CLS_TBU_CH0_CTRL_Bits
{
    __IO Ifx_Strict_32Bit LOW_RES:1;       /**< \brief [0:0] ##suppress##TBU_CH0_BASE register resolution##suppress## (rwh) */
    __IO Ifx_Strict_32Bit CH_CLK_SRC:3;    /**< \brief [3:1] Clock source for channel 0, channel 1 and channel 2 time base counter (rwh) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_GTM_CLS_TBU_CH0_CTRL_Bits;

/** \brief TBU channel 1 control */
typedef struct _Ifx_GTM_CLS_TBU_CH1_CTRL_Bits
{
    __IO Ifx_Strict_32Bit CH_MODE:1;       /**< \brief [0:0] Channel mode (rwh) */
    __IO Ifx_Strict_32Bit CH_CLK_SRC:3;    /**< \brief [3:1] Clock source for channel 1 time base counter (rwh) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_GTM_CLS_TBU_CH1_CTRL_Bits;

/** \brief TBU channel 2 control */
typedef struct _Ifx_GTM_CLS_TBU_CH2_CTRL_Bits
{
    __IO Ifx_Strict_32Bit CH_MODE:1;       /**< \brief [0:0] Channel mode (rwh) */
    __IO Ifx_Strict_32Bit CH_CLK_SRC:3;    /**< \brief [3:1] Clock source for channel 2 time base counter (rwh) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_GTM_CLS_TBU_CH2_CTRL_Bits;

/** \brief TBU channel 3 base */
typedef struct _Ifx_GTM_CLS_TBU_CH3_BASE_Bits
{
    __IO Ifx_Strict_32Bit BASE:24;         /**< \brief [23:0] Time base value for channel 3 (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_TBU_CH3_BASE_Bits;

/** \brief TBU channel 3 base captured */
typedef struct _Ifx_GTM_CLS_TBU_CH3_BASE_CAPTURE_Bits
{
    __I  Ifx_Strict_32Bit BASE_CAPTURE:24;    /**< \brief [23:0] Captured value of time base channel 1 or channel 2 (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_TBU_CH3_BASE_CAPTURE_Bits;

/** \brief TBU channel 3 modulo value */
typedef struct _Ifx_GTM_CLS_TBU_CH3_BASE_MARK_Bits
{
    __IO Ifx_Strict_32Bit BASE_MARK:24;    /**< \brief [23:0] Modulo value for channel 3 (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_TBU_CH3_BASE_MARK_Bits;

/** \brief TBU channel 3 control */
typedef struct _Ifx_GTM_CLS_TBU_CH3_CTRL_Bits
{
    __I  Ifx_Strict_32Bit CH_MODE:1;       /**< \brief [0:0] Channel mode (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [3:1] \internal Reserved */
    __IO Ifx_Strict_32Bit USE_CH2:1;       /**< \brief [4:4] Channel selector for modulo counter (rwh) */
    __I  Ifx_Strict_32Bit :27;             /**< \brief [31:5] \internal Reserved */
} Ifx_GTM_CLS_TBU_CH3_CTRL_Bits;

/** \brief TBU global channel enable */
typedef struct _Ifx_GTM_CLS_TBU_CHEN_Bits
{
    __IO Ifx_Strict_32Bit ENDIS_CH0:2;     /**< \brief [1:0] ##suppress##TBU channel [y] enable/disable control##suppress## (rwh) */
    __IO Ifx_Strict_32Bit ENDIS_CH1:2;     /**< \brief [3:2] ##suppress##TBU channel [y] enable/disable control##suppress## (rwh) */
    __IO Ifx_Strict_32Bit ENDIS_CH2:2;     /**< \brief [5:4] ##suppress##TBU channel [y] enable/disable control##suppress## (rwh) */
    __IO Ifx_Strict_32Bit ENDIS_CH3:2;     /**< \brief [7:6] ##suppress##TBU channel [y] enable/disable control##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_CLS_TBU_CHEN_Bits;

/** \brief TBU channel [x] base */
typedef struct _Ifx_GTM_CLS_TBU_CH_BASE_Bits
{
    __IO Ifx_Strict_32Bit BASE:24;         /**< \brief [23:0] Time base value for channel [x] (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_TBU_CH_BASE_Bits;

/** \brief TIM[i] channel [x] SMU counter register */
typedef struct _Ifx_GTM_CLS_TIM_CH_CNT_Bits
{
    __I  Ifx_Strict_32Bit CNT:24;          /**< \brief [23:0] Actual SMU counter value (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_TIM_CH_CNT_Bits;

/** \brief TIM[i] channel [x] SMU shadow counter register */
typedef struct _Ifx_GTM_CLS_TIM_CH_CNTS_Bits
{
    __IO Ifx_Strict_32Bit CNTS:24;         /**< \brief [23:0] Counter shadow register (rwh) */
    __I  Ifx_Strict_32Bit ECNT:8;          /**< \brief [31:24] Edge counter (rh) */
} Ifx_GTM_CLS_TIM_CH_CNTS_Bits;

/** \brief TIM[i] channel [x] control register */
typedef struct _Ifx_GTM_CLS_TIM_CH_CTRL_Bits
{
    __IO Ifx_Strict_32Bit TIM_EN:1;        /**< \brief [0:0] ##suppress##TIM channel [x] enable##suppress## (rwh) */
    __IO Ifx_Strict_32Bit TIM_MODE:3;      /**< \brief [3:1] ##suppress##TIM channel [x] mode##suppress## (rw) */
    __IO Ifx_Strict_32Bit OSM:1;           /**< \brief [4:4] One-shot mode (rw) */
    __IO Ifx_Strict_32Bit ARU_EN:1;        /**< \brief [5:5] ##suppress##TIM[i]_CH[x]_GPR0 and TIM[i]_CH[x]_GPR1 register values routed to ARU.##suppress## (rw) */
    __IO Ifx_Strict_32Bit CICTRL:1;        /**< \brief [6:6] Channel Input Control (rw) */
    __IO Ifx_Strict_32Bit TBU0_SEL:1;      /**< \brief [7:7] ##suppress##TIM_TBU_TS0 bits input select for TIM0_CH[x]_GPR0 and TIM0_CH[x]_GPR1##suppress## (rw) */
    __IO Ifx_Strict_32Bit GPR0_SEL:2;      /**< \brief [9:8] ##suppress##Selection for TIM[i]_CH[x]_GPR0 register##suppress## (rw) */
    __IO Ifx_Strict_32Bit GPR1_SEL:2;      /**< \brief [11:10] ##suppress##Selection for TIM[i]_CH[x]_GPR1 register##suppress## (rw) */
    __IO Ifx_Strict_32Bit CNTS_SEL:1;      /**< \brief [12:12] ##suppress##Selection for TIM[i]_CH[x]_CNTS register##suppress## (rw) */
    __IO Ifx_Strict_32Bit DSL:1;           /**< \brief [13:13] Signal level control (rw) */
    __IO Ifx_Strict_32Bit ISL:1;           /**< \brief [14:14] Ignore signal level (rw) */
    __IO Ifx_Strict_32Bit ECNT_RESET:1;    /**< \brief [15:15] Enables resetting of counter in certain modes (rw) */
    __IO Ifx_Strict_32Bit FLT_EN:1;        /**< \brief [16:16] Filter enable for channel [x] (rw) */
    __IO Ifx_Strict_32Bit FLT_CNT_FRQ:2;    /**< \brief [18:17] Filter counter frequency select (rw) */
    __IO Ifx_Strict_32Bit EXT_CAP_EN:1;    /**< \brief [19:19] ##suppress##Enables external capture mode. The selected TIM mode is only sensitive to external capture pulses the input event changes are ignored.##suppress## (rw) */
    __IO Ifx_Strict_32Bit FLT_MODE_RE:1;    /**< \brief [20:20] Filter mode for rising edge (rw) */
    __IO Ifx_Strict_32Bit FLT_CTR_RE:1;    /**< \brief [21:21] Filter counter mode for rising edge (rw) */
    __IO Ifx_Strict_32Bit FLT_MODE_FE:1;    /**< \brief [22:22] Filter mode for falling edge (rw) */
    __IO Ifx_Strict_32Bit FLT_CTR_FE:1;    /**< \brief [23:23] Filter counter mode for falling edge (rw) */
    __IO Ifx_Strict_32Bit CLK_SEL:3;       /**< \brief [26:24] ##suppress##CMU clock source select for channel##suppress## (rw) */
    __IO Ifx_Strict_32Bit FR_ECNT_OFL:1;    /**< \brief [27:27] Extended Edge counter overflow behavior (rw) */
    __IO Ifx_Strict_32Bit EGPR0_SEL:1;     /**< \brief [28:28] ##suppress##Extension of TIM[i]_CH[x]_CTRL.GPR0_SEL bit field##suppress## (rw) */
    __IO Ifx_Strict_32Bit EGPR1_SEL:1;     /**< \brief [29:29] ##suppress##Extension of TIM[i]_CH[x]_CTRL.GPR1_SEL bit field##suppress## (rw) */
    __IO Ifx_Strict_32Bit TOCTRL:2;        /**< \brief [31:30] Timeout control (rw) */
} Ifx_GTM_CLS_TIM_CH_CTRL_Bits;

/** \brief TIM[i] channel [x] SMU edge counter register */
typedef struct _Ifx_GTM_CLS_TIM_CH_ECNT_Bits
{
    __I  Ifx_Strict_32Bit ECNT:16;         /**< \brief [15:0] Edge counter (rh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_TIM_CH_ECNT_Bits;

/** \brief TIM[i] channel [x] extended control register */
typedef struct _Ifx_GTM_CLS_TIM_CH_ECTRL_Bits
{
    __IO Ifx_Strict_32Bit EXT_CAP_SRC:4;    /**< \brief [3:0] ##suppress##Defines selected source for triggering the TIM_EXT_CAPTURE functionality.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [4:4] \internal Reserved */
    __IO Ifx_Strict_32Bit USE_PREV_TDU_IN:1;    /**< \brief [5:5] ##suppress##Select input data source for TDU##suppress## (rw) */
    __IO Ifx_Strict_32Bit TODET_IRQ_SRC:2;    /**< \brief [7:6] ##suppress##Selection of source for TIM_TODET_IRQ##suppress## (rw) */
    __IO Ifx_Strict_32Bit TDU_START:3;     /**< \brief [10:8] ##suppress##Defines condition which will start the TDU unit.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [11:11] \internal Reserved */
    __IO Ifx_Strict_32Bit TDU_STOP:3;      /**< \brief [14:12] ##suppress##Defines condition which will stop the TDU unit.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [15:15] \internal Reserved */
    __IO Ifx_Strict_32Bit TDU_RESYNC:4;    /**< \brief [19:16] ##suppress##Defines condition which will resynchronize the TDU unit.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [21:20] \internal Reserved */
    __IO Ifx_Strict_32Bit USE_LUT:2;       /**< \brief [23:22] Generate filter input by lookup-table (rw) */
    __IO Ifx_Strict_32Bit EFLT_CTR_RE:1;    /**< \brief [24:24] ##suppress##Extension of bit field TIM[i]_CH[x]_CTRL.FLT_CTR_RE##suppress## (rw) */
    __IO Ifx_Strict_32Bit EFLT_CTR_FE:1;    /**< \brief [25:25] ##suppress##Extension of bit field TIM[i]_CH[x]_CTRL.FLT_CTR_FE##suppress## (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [27:26] \internal Reserved */
    __IO Ifx_Strict_32Bit SWAP_CAPTURE:1;    /**< \brief [28:28] ##suppress##Swap point in time of capturing TIM[i]_CH[x]_CNTS and TIM[i]_CH[x]_GPR1##suppress## (rw) */
    __IO Ifx_Strict_32Bit IMM_START:1;     /**< \brief [29:29] Start the measurement immediately (rw) */
    __IO Ifx_Strict_32Bit ECLK_SEL:1;      /**< \brief [30:30] ##suppress##Extension of bit field TIM[i]_CH[x]_CTRL.CLK_SEL##suppress## (rw) */
    __IO Ifx_Strict_32Bit USE_PREV_CH_IN:1;    /**< \brief [31:31] ##suppress##Select input data source for TIM channel##suppress## (rw) */
} Ifx_GTM_CLS_TIM_CH_ECTRL_Bits;

/** \brief TIM[i] channel [x] error interrupt enable register */
typedef struct _Ifx_GTM_CLS_TIM_CH_EIRQ_EN_Bits
{
    __IO Ifx_Strict_32Bit NEWVAL_EIRQ_EN:1;    /**< \brief [0:0] TIM_NEWVAL[x]_EIRQ error interrupt enable (rw) */
    __IO Ifx_Strict_32Bit ECNTOFL_EIRQ_EN:1;    /**< \brief [1:1] ##suppress##TIM_ECNTOFL_IRQ[x:x] interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit CNTOFL_EIRQ_EN:1;    /**< \brief [2:2] ##suppress##TIM_CNTOFL_IRQ[x:x] interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit GPROFL_EIRQ_EN:1;    /**< \brief [3:3] ##suppress##TIM_GPROFL_IRQ[x:x] interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit TODET_EIRQ_EN:1;    /**< \brief [4:4] ##suppress##TIM_TODET_IRQ[x:x] interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit GLITCHDET_EIRQ_EN:1;    /**< \brief [5:5] ##suppress##TIM_GLITCHDET_IRQ[x:x] interrupt enable##suppress## (rw) */
    __I  Ifx_Strict_32Bit :26;             /**< \brief [31:6] \internal Reserved */
} Ifx_GTM_CLS_TIM_CH_EIRQ_EN_Bits;

/** \brief TIM[i] channel [x] filter parameter 1 register */
typedef struct _Ifx_GTM_CLS_TIM_CH_FLT_FE_Bits
{
    __IO Ifx_Strict_32Bit FLT_FE:24;       /**< \brief [23:0] Filter parameter for falling edge (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_TIM_CH_FLT_FE_Bits;

/** \brief TIM[i] channel [x] filter parameter 0 register */
typedef struct _Ifx_GTM_CLS_TIM_CH_FLT_RE_Bits
{
    __IO Ifx_Strict_32Bit FLT_RE:24;       /**< \brief [23:0] Filter parameter for rising edge (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_TIM_CH_FLT_RE_Bits;

/** \brief TIM[i] channel [x] general-purpose 0 register */
typedef struct _Ifx_GTM_CLS_TIM_CH_GPR0_Bits
{
    __IO Ifx_Strict_32Bit GPR0:24;         /**< \brief [23:0] Input signal characteristic parameter 0 (rwh) */
    __I  Ifx_Strict_32Bit ECNT:8;          /**< \brief [31:24] ##suppress##Edge counter, value refers to TIM[i]_CH[x]_ECNT.ECNT[7:0].##suppress## (rh) */
} Ifx_GTM_CLS_TIM_CH_GPR0_Bits;

/** \brief TIM[i] channel [x] general-purpose 1 register */
typedef struct _Ifx_GTM_CLS_TIM_CH_GPR1_Bits
{
    __IO Ifx_Strict_32Bit GPR1:24;         /**< \brief [23:0] Input signal characteristic parameter 1 (rwh) */
    __I  Ifx_Strict_32Bit ECNT:8;          /**< \brief [31:24] ##suppress##Edge counter, value refers to TIM[i]_CH[x]_ECNT.ECNT[7:0].##suppress## (rh) */
} Ifx_GTM_CLS_TIM_CH_GPR1_Bits;

/** \brief TIM[i] channel [x] interrupt enable register */
typedef struct _Ifx_GTM_CLS_TIM_CH_IRQ_EN_Bits
{
    __IO Ifx_Strict_32Bit NEWVAL_IRQ_EN:1;    /**< \brief [0:0] ##suppress##TIM_NEWVAL_IRQ[x:x] interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit ECNTOFL_IRQ_EN:1;    /**< \brief [1:1] ##suppress##TIM_ECNTOFL_IRQ[x:x] interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit CNTOFL_IRQ_EN:1;    /**< \brief [2:2] ##suppress##TIM_CNTOFL_IRQ[x:x] interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit GPROFL_IRQ_EN:1;    /**< \brief [3:3] ##suppress##TIM_GPROFL_IRQ[x:x] interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit TODET_IRQ_EN:1;    /**< \brief [4:4] ##suppress##TIM_TODET_IRQ[x:x] interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit GLITCHDET_IRQ_EN:1;    /**< \brief [5:5] ##suppress##TIM_GLITCHDET_IRQ[x:x] interrupt enable##suppress## (rw) */
    __I  Ifx_Strict_32Bit :26;             /**< \brief [31:6] \internal Reserved */
} Ifx_GTM_CLS_TIM_CH_IRQ_EN_Bits;

/** \brief TIM[i] channel [x] force interrupt register */
typedef struct _Ifx_GTM_CLS_TIM_CH_IRQ_FORCINT_Bits
{
    __IO Ifx_Strict_32Bit TRG_NEWVAL:1;    /**< \brief [0:0] Trigger the bit TIM_CH[x]_IRQ_NOTIFY.NEWVAL by software (rw) */
    __IO Ifx_Strict_32Bit TRG_ECNTOFL:1;    /**< \brief [1:1] Trigger the bit TIM_CHx_IRQ_NOTIFY.ECNTOFL by software (rw) */
    __IO Ifx_Strict_32Bit TRG_CNTOFL:1;    /**< \brief [2:2] Trigger the bit TIM_CH[x]_IRQ_NOTIFY.CNTOFL by software (rw) */
    __IO Ifx_Strict_32Bit TRG_GPROFL:1;    /**< \brief [3:3] Trigger the bit TIM_CH[x]_IRQ_NOTIFY.GPROFL by software (rw) */
    __IO Ifx_Strict_32Bit TRG_TODET:1;     /**< \brief [4:4] Trigger the bit TIM_CH[x]_IRQ_NOTIFY.TODET by software (rw) */
    __IO Ifx_Strict_32Bit TRG_GLITCHDET:1;    /**< \brief [5:5] Trigger the bit TIM_CH[x]_IRQ_NOTIFY.GLITCHDET by software (rw) */
    __I  Ifx_Strict_32Bit :26;             /**< \brief [31:6] \internal Reserved */
} Ifx_GTM_CLS_TIM_CH_IRQ_FORCINT_Bits;

/** \brief TIM[i] channel [x] interrupt mode configuration register */
typedef struct _Ifx_GTM_CLS_TIM_CH_IRQ_MODE_Bits
{
    __IO Ifx_Strict_32Bit IRQ_MODE:2;      /**< \brief [1:0] IRQ mode selection of channel [x] (rw) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_GTM_CLS_TIM_CH_IRQ_MODE_Bits;

/** \brief TIM[i] channel [x] interrupt notification register */
typedef struct _Ifx_GTM_CLS_TIM_CH_IRQ_NOTIFY_Bits
{
    __IO Ifx_Strict_32Bit NEWVAL:1;        /**< \brief [0:0] New measurement value detected by the channel [x] ([x]:0...m-1) (rw1ch) */
    __IO Ifx_Strict_32Bit ECNTOFL:1;       /**< \brief [1:1] ECNT counter overflow of channel [x] ([x]:0...m-1) (rw1ch) */
    __IO Ifx_Strict_32Bit CNTOFL:1;        /**< \brief [2:2] ##suppress##SMU TIM[i]_CH[x]_CNT counter overflow of channel [x], ([x]:0...m-1)##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit GPROFL:1;        /**< \brief [3:3] ##suppress##TIM[i]_CH[x]_GPR0 and TIM[i]_CH[x]_GPR1 data overflow, old data not read out before new data has arrived at input pin, ([x]:0...m-1)##suppress## (rw1ch) */
    __IO Ifx_Strict_32Bit TODET:1;         /**< \brief [4:4] Timeout reached for input signal of channel [x], ([x]:0...m-1) (rw1ch) */
    __IO Ifx_Strict_32Bit GLITCHDET:1;     /**< \brief [5:5] Glitch detected on channel [x], ([x]:0...m-1) (rw1ch) */
    __I  Ifx_Strict_32Bit :26;             /**< \brief [31:6] \internal Reserved */
} Ifx_GTM_CLS_TIM_CH_IRQ_NOTIFY_Bits;

/** \brief TIM[i]_CH[x]_TDUC */
typedef struct _Ifx_GTM_CLS_TIM_CH_TDUC_Bits
{
    __IO Ifx_Strict_32Bit TO_CNT:8;        /**< \brief [7:0] Current Timeout value slice0 for channel [y] (rwh) */
    __IO Ifx_Strict_32Bit TO_CNT1:8;       /**< \brief [15:8] Current Timeout value slice1 for channel [y] (rwh) */
    __IO Ifx_Strict_32Bit TO_CNT2:8;       /**< \brief [23:16] Current Timeout value slice2 for channel [y] (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_TIM_CH_TDUC_Bits;

/** \brief TIM[i]_CH[x]_TDUV */
typedef struct _Ifx_GTM_CLS_TIM_CH_TDUV_Bits
{
    __IO Ifx_Strict_32Bit TOV:8;           /**< \brief [7:0] Time out compare value slice0 for channel [y] (rw) */
    __IO Ifx_Strict_32Bit TOV1:8;          /**< \brief [15:8] Time out compare value slice1 for channel [y] (rw) */
    __IO Ifx_Strict_32Bit TOV2:8;          /**< \brief [23:16] Time out compare value slice2 for channel [y] (rw) */
    __IO Ifx_Strict_32Bit SLICING:2;       /**< \brief [25:24] Cascading of counter slices (rw) */
    __IO Ifx_Strict_32Bit TCS_USE_SAMPLE_EVT:1;    /**< \brief [26:26] ##suppress##Use TDU_SAMPLE_EVT as Timeout Clock##suppress## (rw) */
    __IO Ifx_Strict_32Bit TDU_SAME_CNT_CLK:1;    /**< \brief [27:27] Define clocking of TO_CNT, TO_CNT1 (rw) */
    __IO Ifx_Strict_32Bit TCS:3;           /**< \brief [30:28] Timeout clock selection (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [31:31] \internal Reserved */
} Ifx_GTM_CLS_TIM_CH_TDUV_Bits;

/** \brief TIM[i] input value observation register */
typedef struct _Ifx_GTM_CLS_TIM_INP_VAL_Bits
{
    __I  Ifx_Strict_32Bit F_OUT0:1;        /**< \brief [0:0] ##suppress##Signal channel [x] after TIM FLT unit##suppress## (rh) */
    __I  Ifx_Strict_32Bit F_OUT1:1;        /**< \brief [1:1] ##suppress##Signal channel [x] after TIM FLT unit##suppress## (rh) */
    __I  Ifx_Strict_32Bit F_OUT2:1;        /**< \brief [2:2] ##suppress##Signal channel [x] after TIM FLT unit##suppress## (rh) */
    __I  Ifx_Strict_32Bit F_OUT3:1;        /**< \brief [3:3] ##suppress##Signal channel [x] after TIM FLT unit##suppress## (rh) */
    __I  Ifx_Strict_32Bit F_OUT4:1;        /**< \brief [4:4] ##suppress##Signal channel [x] after TIM FLT unit##suppress## (rh) */
    __I  Ifx_Strict_32Bit F_OUT5:1;        /**< \brief [5:5] ##suppress##Signal channel [x] after TIM FLT unit##suppress## (rh) */
    __I  Ifx_Strict_32Bit F_OUT6:1;        /**< \brief [6:6] ##suppress##Signal channel [x] after TIM FLT unit##suppress## (rh) */
    __I  Ifx_Strict_32Bit F_OUT7:1;        /**< \brief [7:7] ##suppress##Signal channel [x] after TIM FLT unit##suppress## (rh) */
    __I  Ifx_Strict_32Bit F_IN0:1;         /**< \brief [8:8] ##suppress##Signal channel [x] after INPSRC selection, before TIM FLT unit##suppress## (rh) */
    __I  Ifx_Strict_32Bit F_IN1:1;         /**< \brief [9:9] ##suppress##Signal channel [x] after INPSRC selection, before TIM FLT unit##suppress## (rh) */
    __I  Ifx_Strict_32Bit F_IN2:1;         /**< \brief [10:10] ##suppress##Signal channel [x] after INPSRC selection, before TIM FLT unit##suppress## (rh) */
    __I  Ifx_Strict_32Bit F_IN3:1;         /**< \brief [11:11] ##suppress##Signal channel [x] after INPSRC selection, before TIM FLT unit##suppress## (rh) */
    __I  Ifx_Strict_32Bit F_IN4:1;         /**< \brief [12:12] ##suppress##Signal channel [x] after INPSRC selection, before TIM FLT unit##suppress## (rh) */
    __I  Ifx_Strict_32Bit F_IN5:1;         /**< \brief [13:13] ##suppress##Signal channel [x] after INPSRC selection, before TIM FLT unit##suppress## (rh) */
    __I  Ifx_Strict_32Bit F_IN6:1;         /**< \brief [14:14] ##suppress##Signal channel [x] after INPSRC selection, before TIM FLT unit##suppress## (rh) */
    __I  Ifx_Strict_32Bit F_IN7:1;         /**< \brief [15:15] ##suppress##Signal channel [x] after INPSRC selection, before TIM FLT unit##suppress## (rh) */
    __I  Ifx_Strict_32Bit TIM_IN0:1;       /**< \brief [16:16] ##suppress##Signal channel [x] after TIM input signal synchronization##suppress## (rh) */
    __I  Ifx_Strict_32Bit TIM_IN1:1;       /**< \brief [17:17] ##suppress##Signal channel [x] after TIM input signal synchronization##suppress## (rh) */
    __I  Ifx_Strict_32Bit TIM_IN2:1;       /**< \brief [18:18] ##suppress##Signal channel [x] after TIM input signal synchronization##suppress## (rh) */
    __I  Ifx_Strict_32Bit TIM_IN3:1;       /**< \brief [19:19] ##suppress##Signal channel [x] after TIM input signal synchronization##suppress## (rh) */
    __I  Ifx_Strict_32Bit TIM_IN4:1;       /**< \brief [20:20] ##suppress##Signal channel [x] after TIM input signal synchronization##suppress## (rh) */
    __I  Ifx_Strict_32Bit TIM_IN5:1;       /**< \brief [21:21] ##suppress##Signal channel [x] after TIM input signal synchronization##suppress## (rh) */
    __I  Ifx_Strict_32Bit TIM_IN6:1;       /**< \brief [22:22] ##suppress##Signal channel [x] after TIM input signal synchronization##suppress## (rh) */
    __I  Ifx_Strict_32Bit TIM_IN7:1;       /**< \brief [23:23] ##suppress##Signal channel [x] after TIM input signal synchronization##suppress## (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_CLS_TIM_INP_VAL_Bits;

/** \brief TIM[i] AUX IN source selection register */
typedef struct _Ifx_GTM_CLS_TIM_IN_SRC_Bits
{
    __IO Ifx_Strict_32Bit VAL0:2;          /**< \brief [1:0] Value to be fed to channel [x] (rwh) */
    __IO Ifx_Strict_32Bit MODE0:2;         /**< \brief [3:2] Input source to channel [x] (rwh) */
    __IO Ifx_Strict_32Bit VAL1:2;          /**< \brief [5:4] Value to be fed to channel [x] (rwh) */
    __IO Ifx_Strict_32Bit MODE1:2;         /**< \brief [7:6] Input source to channel [x] (rwh) */
    __IO Ifx_Strict_32Bit VAL2:2;          /**< \brief [9:8] Value to be fed to channel [x] (rwh) */
    __IO Ifx_Strict_32Bit MODE2:2;         /**< \brief [11:10] Input source to channel [x] (rwh) */
    __IO Ifx_Strict_32Bit VAL3:2;          /**< \brief [13:12] Value to be fed to channel [x] (rwh) */
    __IO Ifx_Strict_32Bit MODE3:2;         /**< \brief [15:14] Input source to channel [x] (rwh) */
    __IO Ifx_Strict_32Bit VAL4:2;          /**< \brief [17:16] Value to be fed to channel [x] (rwh) */
    __IO Ifx_Strict_32Bit MODE4:2;         /**< \brief [19:18] Input source to channel [x] (rwh) */
    __IO Ifx_Strict_32Bit VAL5:2;          /**< \brief [21:20] Value to be fed to channel [x] (rwh) */
    __IO Ifx_Strict_32Bit MODE5:2;         /**< \brief [23:22] Input source to channel [x] (rwh) */
    __IO Ifx_Strict_32Bit VAL6:2;          /**< \brief [25:24] Value to be fed to channel [x] (rwh) */
    __IO Ifx_Strict_32Bit MODE6:2;         /**< \brief [27:26] Input source to channel [x] (rwh) */
    __IO Ifx_Strict_32Bit VAL7:2;          /**< \brief [29:28] Value to be fed to channel [x] (rwh) */
    __IO Ifx_Strict_32Bit MODE7:2;         /**< \brief [31:30] Input source to channel [x] (rwh) */
} Ifx_GTM_CLS_TIM_IN_SRC_Bits;

/** \brief TIM[i] global software reset register */
typedef struct _Ifx_GTM_CLS_TIM_RST_Bits
{
    __IO Ifx_Strict_32Bit RST_CH0:1;       /**< \brief [0:0] Software reset of channel [x] (rw) */
    __IO Ifx_Strict_32Bit RST_CH1:1;       /**< \brief [1:1] Software reset of channel [x] (rw) */
    __IO Ifx_Strict_32Bit RST_CH2:1;       /**< \brief [2:2] Software reset of channel [x] (rw) */
    __IO Ifx_Strict_32Bit RST_CH3:1;       /**< \brief [3:3] Software reset of channel [x] (rw) */
    __IO Ifx_Strict_32Bit RST_CH4:1;       /**< \brief [4:4] Software reset of channel [x] (rw) */
    __IO Ifx_Strict_32Bit RST_CH5:1;       /**< \brief [5:5] Software reset of channel [x] (rw) */
    __IO Ifx_Strict_32Bit RST_CH6:1;       /**< \brief [6:6] Software reset of channel [x] (rw) */
    __IO Ifx_Strict_32Bit RST_CH7:1;       /**< \brief [7:7] Software reset of channel [x] (rw) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_GTM_CLS_TIM_RST_Bits;

/** \brief TOM[i] channel [x] CCU0 compare register */
typedef struct _Ifx_GTM_CLS_TOM_CH_CM0_Bits
{
    __IO Ifx_Strict_32Bit CM0:16;          /**< \brief [15:0] ##suppress##TOM[i] channel [x] CCU0 compare register##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_TOM_CH_CM0_Bits;

/** \brief TOM[i] channel [x] CCU1 compare register */
typedef struct _Ifx_GTM_CLS_TOM_CH_CM1_Bits
{
    __IO Ifx_Strict_32Bit CM1:16;          /**< \brief [15:0] ##suppress##TOM[i] channel [x] CCU1 compare register##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_TOM_CH_CM1_Bits;

/** \brief TOM[i] channel [x] CCU0 counter */
typedef struct _Ifx_GTM_CLS_TOM_CH_CN0_Bits
{
    __IO Ifx_Strict_32Bit CN0:16;          /**< \brief [15:0] ##suppress##TOM[i] CCU0 counter##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_TOM_CH_CN0_Bits;

/** \brief TOM[i] channel [x] control register */
typedef struct _Ifx_GTM_CLS_TOM_CH_CTRL_Bits
{
    __I  Ifx_Strict_32Bit :7;              /**< \brief [6:0] \internal Reserved */
    __IO Ifx_Strict_32Bit SR0_TRIG:1;      /**< \brief [7:7] ##suppress##TOM[i]_CH[x]_SR0 is used to generate a trigger on output TOM_OUT_T[x:x] if equal to TOM[i]_CH[x]_CN0.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [10:8] \internal Reserved */
    __IO Ifx_Strict_32Bit SL:1;            /**< \brief [11:11] Signal level for pulse width (rwh) */
    __IO Ifx_Strict_32Bit CLK_SRC:4;       /**< \brief [15:12] Clock source select for channel (rwh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [16:16] \internal Reserved */
    __IO Ifx_Strict_32Bit TRIG_PULSE:1;    /**< \brief [17:17] Trigger output pulse length of one cluster clock period (rw) */
    __IO Ifx_Strict_32Bit UDMODE:2;        /**< \brief [19:18] Up-down counter mode (rw) */
    __IO Ifx_Strict_32Bit RST_CCU0:1;      /**< \brief [20:20] Reset source of CCU0 (rw) */
    __IO Ifx_Strict_32Bit OSM_TRIG:1;      /**< \brief [21:21] One-shot pulse generation enabled by the selected trigger signal (rw) */
    __IO Ifx_Strict_32Bit EXT_TRIG:1;      /**< \brief [22:22] ##suppress##Select TOM_EXT_TRIGIN[x:x] as trigger signal##suppress## (rw) */
    __IO Ifx_Strict_32Bit EXTTRIGOUT:1;    /**< \brief [23:23] ##suppress##Select TOM_EXT_TRIGIN[x:x] as potential output signal TOM_CH_TRIGOUT[x:x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRIGOUT:1;       /**< \brief [24:24] ##suppress##Trigger output selection (output signal TOM_CH_TRIGOUT[x:x]) of module TOM channel [x]##suppress## (rw) */
    __IO Ifx_Strict_32Bit SPE_TRIG:1;      /**< \brief [25:25] ##suppress##SPE trigger to reset TOM[i]_CH[x]_CN0##suppress## (rw) */
    __IO Ifx_Strict_32Bit OSM:1;           /**< \brief [26:26] One-shot mode. (rw) */
    __IO Ifx_Strict_32Bit BITREV:1;        /**< \brief [27:27] ##suppress##Bit-reversing of output of counter TOM[i]_CH[x]_CN0.##suppress## (rw) */
    __IO Ifx_Strict_32Bit SPEM:1;          /**< \brief [28:28] ##suppress##SPE output mode enable for channel.##suppress## (rw) */
    __IO Ifx_Strict_32Bit GCM:1;           /**< \brief [29:29] Gated Counter Mode enable (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [30:30] \internal Reserved */
    __IO Ifx_Strict_32Bit FREEZE:1;        /**< \brief [31:31] ##suppress##TOM[i] Freeze Mode enable##suppress## (rw) */
} Ifx_GTM_CLS_TOM_CH_CTRL_Bits;

/** \brief TOM[i] channel [x] control shadow register */
typedef struct _Ifx_GTM_CLS_TOM_CH_CTRL_SR_Bits
{
    __I  Ifx_Strict_32Bit :11;             /**< \brief [10:0] \internal Reserved */
    __IO Ifx_Strict_32Bit SL_SR:1;         /**< \brief [11:11] ##suppress##Shadow register for TOM[i]_CH[x]_CTRL.SL##suppress## (rw) */
    __IO Ifx_Strict_32Bit CLK_SRC_SR:4;    /**< \brief [15:12] ##suppress##Shadow register for TOM[i]_CH[x]_CTRL.CLK_SRC##suppress## (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_TOM_CH_CTRL_SR_Bits;

/** \brief TOM[i] channel [x] interrupt enable register */
typedef struct _Ifx_GTM_CLS_TOM_CH_IRQ_EN_Bits
{
    __IO Ifx_Strict_32Bit CCU0TC_IRQ_EN:1;    /**< \brief [0:0] ##suppress##TOM_CCU0TC[x]_IRQ interrupt enable##suppress## (rw) */
    __IO Ifx_Strict_32Bit CCU1TC_IRQ_EN:1;    /**< \brief [1:1] ##suppress##TOM_CCU1TC[x]_IRQ interrupt enable##suppress## (rw) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_GTM_CLS_TOM_CH_IRQ_EN_Bits;

/** \brief TOM[i] channel [x] force interrupt register */
typedef struct _Ifx_GTM_CLS_TOM_CH_IRQ_FORCINT_Bits
{
    __IO Ifx_Strict_32Bit TRG_CCU0TC:1;    /**< \brief [0:0] ##suppress##Trigger the bit TOM[i]_CH[x]_IRQ_NOTIFY.CCU0TC by software##suppress## (rw) */
    __IO Ifx_Strict_32Bit TRG_CCU1TC:1;    /**< \brief [1:1] ##suppress##Trigger the bit TOM[i]_CH[x]_IRQ_NOTIFY.CCU1TC by software##suppress## (rw) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_GTM_CLS_TOM_CH_IRQ_FORCINT_Bits;

/** \brief TOM[i] channel [x] interrupt mode register */
typedef struct _Ifx_GTM_CLS_TOM_CH_IRQ_MODE_Bits
{
    __IO Ifx_Strict_32Bit IRQ_MODE:2;      /**< \brief [1:0] IRQ mode selection (rw) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_GTM_CLS_TOM_CH_IRQ_MODE_Bits;

/** \brief TOM[i] channel [x] interrupt notification register */
typedef struct _Ifx_GTM_CLS_TOM_CH_IRQ_NOTIFY_Bits
{
    __IO Ifx_Strict_32Bit CCU0TC:1;        /**< \brief [0:0] CCU0 Trigger condition interrupt for channel [x] (rw1ch) */
    __IO Ifx_Strict_32Bit CCU1TC:1;        /**< \brief [1:1] CCU1 Trigger condition interrupt for channel [x] (rw1ch) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_GTM_CLS_TOM_CH_IRQ_NOTIFY_Bits;

/** \brief TOM[i] channel [x] CCU0 compare shadow register */
typedef struct _Ifx_GTM_CLS_TOM_CH_SR0_Bits
{
    __IO Ifx_Strict_32Bit SR0:16;          /**< \brief [15:0] ##suppress##TOM[i] channel [x] shadow register TOM[i]_CH[x]_SR0 for update of compare register TOM[i]_CH[x]_CM0##suppress## (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_TOM_CH_SR0_Bits;

/** \brief TOM[i] channel [x] CCU1 compare shadow register */
typedef struct _Ifx_GTM_CLS_TOM_CH_SR1_Bits
{
    __IO Ifx_Strict_32Bit SR1:16;          /**< \brief [15:0] ##suppress##TOM[i] channel [x] shadow register TOM[i]_CH[x]_SR1 for update of compare register TOM[i]_CH[x]_CM1##suppress## (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_TOM_CH_SR1_Bits;

/** \brief TOM[i] channel [x] status register */
typedef struct _Ifx_GTM_CLS_TOM_CH_STAT_Bits
{
    __I  Ifx_Strict_32Bit OL:1;            /**< \brief [0:0] ##suppress##Output level of output TOM_OUT[x:x]##suppress## (rh) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [28:1] \internal Reserved */
    __IO Ifx_Strict_32Bit OSM_RTF:1;       /**< \brief [29:29] One-shot mode retrigger failed flag (rw1ch) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [31:30] \internal Reserved */
} Ifx_GTM_CLS_TOM_CH_STAT_Bits;

/** \brief TOM[i] TGC [g] action time base register */
typedef struct _Ifx_GTM_CLS_TOM_TGC_ACT_TB_Bits
{
    __IO Ifx_Strict_32Bit ACT_TB:24;       /**< \brief [23:0] ##suppress##Specifies the signed compare value with selected signal CCM[i]_TBU_TS0, CCM[i]_TBU_TS1 and CCM[i]_TBU_TS2.##suppress## (rw) */
    __IO Ifx_Strict_32Bit TB_TRIG:1;       /**< \brief [24:24] Set trigger request (rwh) */
    __IO Ifx_Strict_32Bit TBU_SEL:2;       /**< \brief [26:25] Selection of time base used for comparison (rw) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [31:27] \internal Reserved */
} Ifx_GTM_CLS_TOM_TGC_ACT_TB_Bits;

/** \brief TOM[i] TGC [g] enable/disable control register */
typedef struct _Ifx_GTM_CLS_TOM_TGC_ENDIS_CTRL_Bits
{
    __IO Ifx_Strict_32Bit ENDIS_CTRL0:2;    /**< \brief [1:0] ##suppress##TOM[i] channel [x] (x=c + g*8) enable/disable control register.##suppress## (rw) */
    __IO Ifx_Strict_32Bit ENDIS_CTRL1:2;    /**< \brief [3:2] ##suppress##TOM[i] channel [x] (x=c + g*8) enable/disable control register.##suppress## (rw) */
    __IO Ifx_Strict_32Bit ENDIS_CTRL2:2;    /**< \brief [5:4] ##suppress##TOM[i] channel [x] (x=c + g*8) enable/disable control register.##suppress## (rw) */
    __IO Ifx_Strict_32Bit ENDIS_CTRL3:2;    /**< \brief [7:6] ##suppress##TOM[i] channel [x] (x=c + g*8) enable/disable control register.##suppress## (rw) */
    __IO Ifx_Strict_32Bit ENDIS_CTRL4:2;    /**< \brief [9:8] ##suppress##TOM[i] channel [x] (x=c + g*8) enable/disable control register.##suppress## (rw) */
    __IO Ifx_Strict_32Bit ENDIS_CTRL5:2;    /**< \brief [11:10] ##suppress##TOM[i] channel [x] (x=c + g*8) enable/disable control register.##suppress## (rw) */
    __IO Ifx_Strict_32Bit ENDIS_CTRL6:2;    /**< \brief [13:12] ##suppress##TOM[i] channel [x] (x=c + g*8) enable/disable control register.##suppress## (rw) */
    __IO Ifx_Strict_32Bit ENDIS_CTRL7:2;    /**< \brief [15:14] ##suppress##TOM[i] channel [x] (x=c + g*8) enable/disable control register.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_TOM_TGC_ENDIS_CTRL_Bits;

/** \brief TOM[i] TGC [g] enable/disable status register */
typedef struct _Ifx_GTM_CLS_TOM_TGC_ENDIS_STAT_Bits
{
    __IO Ifx_Strict_32Bit ENDIS_STAT0:2;    /**< \brief [1:0] ##suppress##TOM[i] channel [x] ( x=c + g*8 ) enable/disable status register##suppress## (rwh) */
    __IO Ifx_Strict_32Bit ENDIS_STAT1:2;    /**< \brief [3:2] ##suppress##TOM[i] channel [x] ( x=c + g*8 ) enable/disable status register##suppress## (rwh) */
    __IO Ifx_Strict_32Bit ENDIS_STAT2:2;    /**< \brief [5:4] ##suppress##TOM[i] channel [x] ( x=c + g*8 ) enable/disable status register##suppress## (rwh) */
    __IO Ifx_Strict_32Bit ENDIS_STAT3:2;    /**< \brief [7:6] ##suppress##TOM[i] channel [x] ( x=c + g*8 ) enable/disable status register##suppress## (rwh) */
    __IO Ifx_Strict_32Bit ENDIS_STAT4:2;    /**< \brief [9:8] ##suppress##TOM[i] channel [x] ( x=c + g*8 ) enable/disable status register##suppress## (rwh) */
    __IO Ifx_Strict_32Bit ENDIS_STAT5:2;    /**< \brief [11:10] ##suppress##TOM[i] channel [x] ( x=c + g*8 ) enable/disable status register##suppress## (rwh) */
    __IO Ifx_Strict_32Bit ENDIS_STAT6:2;    /**< \brief [13:12] ##suppress##TOM[i] channel [x] ( x=c + g*8 ) enable/disable status register##suppress## (rwh) */
    __IO Ifx_Strict_32Bit ENDIS_STAT7:2;    /**< \brief [15:14] ##suppress##TOM[i] channel [x] ( x=c + g*8 ) enable/disable status register##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_TOM_TGC_ENDIS_STAT_Bits;

/** \brief TOM[i] TGC [g] force update control register */
typedef struct _Ifx_GTM_CLS_TOM_TGC_FUPD_CTRL_Bits
{
    __IO Ifx_Strict_32Bit FUPD_CTRL0:2;    /**< \brief [1:0] ##suppress##Force update control of operation registers of TOM[i] channel [x] (x = c + g*8)##suppress## (rw) */
    __IO Ifx_Strict_32Bit FUPD_CTRL1:2;    /**< \brief [3:2] ##suppress##Force update control of operation registers of TOM[i] channel [x] (x = c + g*8)##suppress## (rw) */
    __IO Ifx_Strict_32Bit FUPD_CTRL2:2;    /**< \brief [5:4] ##suppress##Force update control of operation registers of TOM[i] channel [x] (x = c + g*8)##suppress## (rw) */
    __IO Ifx_Strict_32Bit FUPD_CTRL3:2;    /**< \brief [7:6] ##suppress##Force update control of operation registers of TOM[i] channel [x] (x = c + g*8)##suppress## (rw) */
    __IO Ifx_Strict_32Bit FUPD_CTRL4:2;    /**< \brief [9:8] ##suppress##Force update control of operation registers of TOM[i] channel [x] (x = c + g*8)##suppress## (rw) */
    __IO Ifx_Strict_32Bit FUPD_CTRL5:2;    /**< \brief [11:10] ##suppress##Force update control of operation registers of TOM[i] channel [x] (x = c + g*8)##suppress## (rw) */
    __IO Ifx_Strict_32Bit FUPD_CTRL6:2;    /**< \brief [13:12] ##suppress##Force update control of operation registers of TOM[i] channel [x] (x = c + g*8)##suppress## (rw) */
    __IO Ifx_Strict_32Bit FUPD_CTRL7:2;    /**< \brief [15:14] ##suppress##Force update control of operation registers of TOM[i] channel [x] (x = c + g*8)##suppress## (rw) */
    __IO Ifx_Strict_32Bit RSTCN0_CH0:2;    /**< \brief [17:16] ##suppress##Reset TOM[i]_CH[x]_CN0 of channel [x] (x=c + g*8) with the force update event##suppress## (rw) */
    __IO Ifx_Strict_32Bit RSTCN0_CH1:2;    /**< \brief [19:18] ##suppress##Reset TOM[i]_CH[x]_CN0 of channel [x] (x=c + g*8) with the force update event##suppress## (rw) */
    __IO Ifx_Strict_32Bit RSTCN0_CH2:2;    /**< \brief [21:20] ##suppress##Reset TOM[i]_CH[x]_CN0 of channel [x] (x=c + g*8) with the force update event##suppress## (rw) */
    __IO Ifx_Strict_32Bit RSTCN0_CH3:2;    /**< \brief [23:22] ##suppress##Reset TOM[i]_CH[x]_CN0 of channel [x] (x=c + g*8) with the force update event##suppress## (rw) */
    __IO Ifx_Strict_32Bit RSTCN0_CH4:2;    /**< \brief [25:24] ##suppress##Reset TOM[i]_CH[x]_CN0 of channel [x] (x=c + g*8) with the force update event##suppress## (rw) */
    __IO Ifx_Strict_32Bit RSTCN0_CH5:2;    /**< \brief [27:26] ##suppress##Reset TOM[i]_CH[x]_CN0 of channel [x] (x=c + g*8) with the force update event##suppress## (rw) */
    __IO Ifx_Strict_32Bit RSTCN0_CH6:2;    /**< \brief [29:28] ##suppress##Reset TOM[i]_CH[x]_CN0 of channel [x] (x=c + g*8) with the force update event##suppress## (rw) */
    __IO Ifx_Strict_32Bit RSTCN0_CH7:2;    /**< \brief [31:30] ##suppress##Reset TOM[i]_CH[x]_CN0 of channel [x] (x=c + g*8) with the force update event##suppress## (rw) */
} Ifx_GTM_CLS_TOM_TGC_FUPD_CTRL_Bits;

/** \brief TOM[i] TGC [g] global control register */
typedef struct _Ifx_GTM_CLS_TOM_TGC_GLB_CTRL_Bits
{
    __IO Ifx_Strict_32Bit HOST_TRIG:1;     /**< \brief [0:0] ##suppress##Trigger request signal to update the register TOM[i]_TGC[g]_ENDIS_STAT, TOM[i]_TGC[g]_OUTEN_STAT##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [7:1] \internal Reserved */
    __IO Ifx_Strict_32Bit RST_CH0:1;       /**< \brief [8:8] Software reset of channel [x]; x = c + g*8 (rw) */
    __IO Ifx_Strict_32Bit RST_CH1:1;       /**< \brief [9:9] Software reset of channel [x]; x = c + g*8 (rw) */
    __IO Ifx_Strict_32Bit RST_CH2:1;       /**< \brief [10:10] Software reset of channel [x]; x = c + g*8 (rw) */
    __IO Ifx_Strict_32Bit RST_CH3:1;       /**< \brief [11:11] Software reset of channel [x]; x = c + g*8 (rw) */
    __IO Ifx_Strict_32Bit RST_CH4:1;       /**< \brief [12:12] Software reset of channel [x]; x = c + g*8 (rw) */
    __IO Ifx_Strict_32Bit RST_CH5:1;       /**< \brief [13:13] Software reset of channel [x]; x = c + g*8 (rw) */
    __IO Ifx_Strict_32Bit RST_CH6:1;       /**< \brief [14:14] Software reset of channel [x]; x = c + g*8 (rw) */
    __IO Ifx_Strict_32Bit RST_CH7:1;       /**< \brief [15:15] Software reset of channel [x]; x = c + g*8 (rw) */
    __IO Ifx_Strict_32Bit UPEN_CTRL0:2;    /**< \brief [17:16] ##suppress##TOM[i] channel [x] ( x=c + g*8 ) enable update of register TOM[i]_CH[x]_CM0, TOM[i]_CH[x]_CM1, TOM[i]_CH[x]_CTRL.SL and TOM[i]_CH[x]_CTRL.CLK_SRC from TOM[i]_CH[x]_SR0, TOM[i]_CH[x]_SR1, TOM[i]_CH[x]_CTRL_SL.SL_SR and TOM[i]_CH[x]_CTRL_SR.CLK_SRC_SR.##suppress## (rw) */
    __IO Ifx_Strict_32Bit UPEN_CTRL1:2;    /**< \brief [19:18] ##suppress##TOM[i] channel [x] ( x=c + g*8 ) enable update of register TOM[i]_CH[x]_CM0, TOM[i]_CH[x]_CM1, TOM[i]_CH[x]_CTRL.SL and TOM[i]_CH[x]_CTRL.CLK_SRC from TOM[i]_CH[x]_SR0, TOM[i]_CH[x]_SR1, TOM[i]_CH[x]_CTRL_SL.SL_SR and TOM[i]_CH[x]_CTRL_SR.CLK_SRC_SR.##suppress## (rw) */
    __IO Ifx_Strict_32Bit UPEN_CTRL2:2;    /**< \brief [21:20] ##suppress##TOM[i] channel [x] ( x=c + g*8 ) enable update of register TOM[i]_CH[x]_CM0, TOM[i]_CH[x]_CM1, TOM[i]_CH[x]_CTRL.SL and TOM[i]_CH[x]_CTRL.CLK_SRC from TOM[i]_CH[x]_SR0, TOM[i]_CH[x]_SR1, TOM[i]_CH[x]_CTRL_SL.SL_SR and TOM[i]_CH[x]_CTRL_SR.CLK_SRC_SR.##suppress## (rw) */
    __IO Ifx_Strict_32Bit UPEN_CTRL3:2;    /**< \brief [23:22] ##suppress##TOM[i] channel [x] ( x=c + g*8 ) enable update of register TOM[i]_CH[x]_CM0, TOM[i]_CH[x]_CM1, TOM[i]_CH[x]_CTRL.SL and TOM[i]_CH[x]_CTRL.CLK_SRC from TOM[i]_CH[x]_SR0, TOM[i]_CH[x]_SR1, TOM[i]_CH[x]_CTRL_SL.SL_SR and TOM[i]_CH[x]_CTRL_SR.CLK_SRC_SR.##suppress## (rw) */
    __IO Ifx_Strict_32Bit UPEN_CTRL4:2;    /**< \brief [25:24] ##suppress##TOM[i] channel [x] ( x=c + g*8 ) enable update of register TOM[i]_CH[x]_CM0, TOM[i]_CH[x]_CM1, TOM[i]_CH[x]_CTRL.SL and TOM[i]_CH[x]_CTRL.CLK_SRC from TOM[i]_CH[x]_SR0, TOM[i]_CH[x]_SR1, TOM[i]_CH[x]_CTRL_SL.SL_SR and TOM[i]_CH[x]_CTRL_SR.CLK_SRC_SR.##suppress## (rw) */
    __IO Ifx_Strict_32Bit UPEN_CTRL5:2;    /**< \brief [27:26] ##suppress##TOM[i] channel [x] ( x=c + g*8 ) enable update of register TOM[i]_CH[x]_CM0, TOM[i]_CH[x]_CM1, TOM[i]_CH[x]_CTRL.SL and TOM[i]_CH[x]_CTRL.CLK_SRC from TOM[i]_CH[x]_SR0, TOM[i]_CH[x]_SR1, TOM[i]_CH[x]_CTRL_SL.SL_SR and TOM[i]_CH[x]_CTRL_SR.CLK_SRC_SR.##suppress## (rw) */
    __IO Ifx_Strict_32Bit UPEN_CTRL6:2;    /**< \brief [29:28] ##suppress##TOM[i] channel [x] ( x=c + g*8 ) enable update of register TOM[i]_CH[x]_CM0, TOM[i]_CH[x]_CM1, TOM[i]_CH[x]_CTRL.SL and TOM[i]_CH[x]_CTRL.CLK_SRC from TOM[i]_CH[x]_SR0, TOM[i]_CH[x]_SR1, TOM[i]_CH[x]_CTRL_SL.SL_SR and TOM[i]_CH[x]_CTRL_SR.CLK_SRC_SR.##suppress## (rw) */
    __IO Ifx_Strict_32Bit UPEN_CTRL7:2;    /**< \brief [31:30] ##suppress##TOM[i] channel [x] ( x=c + g*8 ) enable update of register TOM[i]_CH[x]_CM0, TOM[i]_CH[x]_CM1, TOM[i]_CH[x]_CTRL.SL and TOM[i]_CH[x]_CTRL.CLK_SRC from TOM[i]_CH[x]_SR0, TOM[i]_CH[x]_SR1, TOM[i]_CH[x]_CTRL_SL.SL_SR and TOM[i]_CH[x]_CTRL_SR.CLK_SRC_SR.##suppress## (rw) */
} Ifx_GTM_CLS_TOM_TGC_GLB_CTRL_Bits;

/** \brief TOM[i] TGC [g] internal trigger control register */
typedef struct _Ifx_GTM_CLS_TOM_TGC_INT_TRIG_Bits
{
    __IO Ifx_Strict_32Bit INT_TRIG0:2;     /**< \brief [1:0] ##suppress##Select input signal TOM_CH_TRIGOUT[x:x] as a trigger source for TGC[g] (x=c + g*8)##suppress## (rw) */
    __IO Ifx_Strict_32Bit INT_TRIG1:2;     /**< \brief [3:2] ##suppress##Select input signal TOM_CH_TRIGOUT[x:x] as a trigger source for TGC[g] (x=c + g*8)##suppress## (rw) */
    __IO Ifx_Strict_32Bit INT_TRIG2:2;     /**< \brief [5:4] ##suppress##Select input signal TOM_CH_TRIGOUT[x:x] as a trigger source for TGC[g] (x=c + g*8)##suppress## (rw) */
    __IO Ifx_Strict_32Bit INT_TRIG3:2;     /**< \brief [7:6] ##suppress##Select input signal TOM_CH_TRIGOUT[x:x] as a trigger source for TGC[g] (x=c + g*8)##suppress## (rw) */
    __IO Ifx_Strict_32Bit INT_TRIG4:2;     /**< \brief [9:8] ##suppress##Select input signal TOM_CH_TRIGOUT[x:x] as a trigger source for TGC[g] (x=c + g*8)##suppress## (rw) */
    __IO Ifx_Strict_32Bit INT_TRIG5:2;     /**< \brief [11:10] ##suppress##Select input signal TOM_CH_TRIGOUT[x:x] as a trigger source for TGC[g] (x=c + g*8)##suppress## (rw) */
    __IO Ifx_Strict_32Bit INT_TRIG6:2;     /**< \brief [13:12] ##suppress##Select input signal TOM_CH_TRIGOUT[x:x] as a trigger source for TGC[g] (x=c + g*8)##suppress## (rw) */
    __IO Ifx_Strict_32Bit INT_TRIG7:2;     /**< \brief [15:14] ##suppress##Select input signal TOM_CH_TRIGOUT[x:x] as a trigger source for TGC[g] (x=c + g*8)##suppress## (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_TOM_TGC_INT_TRIG_Bits;

/** \brief TOM[i] TGC [g] output enable control register */
typedef struct _Ifx_GTM_CLS_TOM_TGC_OUTEN_CTRL_Bits
{
    __IO Ifx_Strict_32Bit OUTEN_CTRL0:2;    /**< \brief [1:0] ##suppress##Output enable control of TOM [i] channel [x] output TOM_OUT[x:x], x=c+g*8##suppress## (rw) */
    __IO Ifx_Strict_32Bit OUTEN_CTRL1:2;    /**< \brief [3:2] ##suppress##Output enable control of TOM [i] channel [x] output TOM_OUT[x:x], x=c+g*8##suppress## (rw) */
    __IO Ifx_Strict_32Bit OUTEN_CTRL2:2;    /**< \brief [5:4] ##suppress##Output enable control of TOM [i] channel [x] output TOM_OUT[x:x], x=c+g*8##suppress## (rw) */
    __IO Ifx_Strict_32Bit OUTEN_CTRL3:2;    /**< \brief [7:6] ##suppress##Output enable control of TOM [i] channel [x] output TOM_OUT[x:x], x=c+g*8##suppress## (rw) */
    __IO Ifx_Strict_32Bit OUTEN_CTRL4:2;    /**< \brief [9:8] ##suppress##Output enable control of TOM [i] channel [x] output TOM_OUT[x:x], x=c+g*8##suppress## (rw) */
    __IO Ifx_Strict_32Bit OUTEN_CTRL5:2;    /**< \brief [11:10] ##suppress##Output enable control of TOM [i] channel [x] output TOM_OUT[x:x], x=c+g*8##suppress## (rw) */
    __IO Ifx_Strict_32Bit OUTEN_CTRL6:2;    /**< \brief [13:12] ##suppress##Output enable control of TOM [i] channel [x] output TOM_OUT[x:x], x=c+g*8##suppress## (rw) */
    __IO Ifx_Strict_32Bit OUTEN_CTRL7:2;    /**< \brief [15:14] ##suppress##Output enable control of TOM [i] channel [x] output TOM_OUT[x:x], x=c+g*8##suppress## (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_TOM_TGC_OUTEN_CTRL_Bits;

/** \brief TOM[i] TGC [g] output enable status register */
typedef struct _Ifx_GTM_CLS_TOM_TGC_OUTEN_STAT_Bits
{
    __IO Ifx_Strict_32Bit OUTEN_STAT0:2;    /**< \brief [1:0] ##suppress##Output enable status of TOM [i] channel [x] output TOM_OUT[x:x], x=c+g*8##suppress## (rwh) */
    __IO Ifx_Strict_32Bit OUTEN_STAT1:2;    /**< \brief [3:2] ##suppress##Output enable status of TOM [i] channel [x] output TOM_OUT[x:x], x=c+g*8##suppress## (rwh) */
    __IO Ifx_Strict_32Bit OUTEN_STAT2:2;    /**< \brief [5:4] ##suppress##Output enable status of TOM [i] channel [x] output TOM_OUT[x:x], x=c+g*8##suppress## (rwh) */
    __IO Ifx_Strict_32Bit OUTEN_STAT3:2;    /**< \brief [7:6] ##suppress##Output enable status of TOM [i] channel [x] output TOM_OUT[x:x], x=c+g*8##suppress## (rwh) */
    __IO Ifx_Strict_32Bit OUTEN_STAT4:2;    /**< \brief [9:8] ##suppress##Output enable status of TOM [i] channel [x] output TOM_OUT[x:x], x=c+g*8##suppress## (rwh) */
    __IO Ifx_Strict_32Bit OUTEN_STAT5:2;    /**< \brief [11:10] ##suppress##Output enable status of TOM [i] channel [x] output TOM_OUT[x:x], x=c+g*8##suppress## (rwh) */
    __IO Ifx_Strict_32Bit OUTEN_STAT6:2;    /**< \brief [13:12] ##suppress##Output enable status of TOM [i] channel [x] output TOM_OUT[x:x], x=c+g*8##suppress## (rwh) */
    __IO Ifx_Strict_32Bit OUTEN_STAT7:2;    /**< \brief [15:14] ##suppress##Output enable status of TOM [i] channel [x] output TOM_OUT[x:x], x=c+g*8##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_GTM_CLS_TOM_TGC_OUTEN_STAT_Bits;

/** \brief DPLL_ADT_T[p] */
typedef struct _Ifx_GTM_DPLL_ADT_T_Bits
{
    __IO Ifx_Strict_32Bit PD:13;           /**< \brief [12:0] ##suppress##Physical deviation; Adapt values for each nominal TRIGGER increment in FULL_SCALE;##suppress## (rw) */
    __IO Ifx_Strict_32Bit TINT:3;          /**< \brief [15:13] ##suppress##TRIGGER Interrupt information;##suppress## (rw) */
    __IO Ifx_Strict_32Bit NT:3;            /**< \brief [18:16] ##suppress##Number of TRIGGER events; number of nominal TRIGGER parts in the corresponding increment.##suppress## (rw) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [23:19] \internal Reserved */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_DPLL_ADT_T_Bits;

/** \brief DPLL_DT_T[p] */
typedef struct _Ifx_GTM_DPLL_DT_T_Bits
{
    __IO Ifx_Strict_32Bit DT_T:24;         /**< \brief [23:0] ##suppress##Difference time of TRIGGER; increment duration values for each TRIGGER increment in FULL_SCALE divided by the number of nominal increments (nominal value).##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_DPLL_DT_T_Bits;

/** \brief DPLL_RDT_T[p] */
typedef struct _Ifx_GTM_DPLL_RDT_T_Bits
{
    __IO Ifx_Strict_32Bit RDT_T:24;        /**< \brief [23:0] ##suppress##Reciprocal difference time of TRIGGER; 2* (TNU+1- SYN_NT) stored values nominal reciprocal value of the number of time stamp clocks measured in the corresponding increment (which is divided by the number of nominal increments); multiplied by *2^32 while only the lower 24 bits are used; the LSB is rounded up, when the next truncated bit is 1.##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_DPLL_RDT_T_Bits;

/** \brief DPLL_TSF_T[p] */
typedef struct _Ifx_GTM_DPLL_TSF_T_Bits
{
    __IO Ifx_Strict_32Bit TSF_T:24;        /**< \brief [23:0] ##suppress##Time stamp field of active TRIGGER slopes##suppress## (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_DPLL_TSF_T_Bits;

/** \brief Cluster 0 DTMAUX input 0 selection register */
typedef struct _Ifx_GTM_DTMAUX_IN_Bits
{
    __O  Ifx_UReg_32Bit SEL0:3;            /**< \brief [2:0] Input selection for CDTM0_DTM0_AUXINy (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __O  Ifx_UReg_32Bit SEL1:3;            /**< \brief [6:4] Input selection for CDTM0_DTM1_AUXINy (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __O  Ifx_UReg_32Bit SEL2:3;            /**< \brief [10:8] Input selection for CDTM0_DTM2_AUXINy (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [11:11] \internal Reserved */
    __O  Ifx_UReg_32Bit SEL3:3;            /**< \brief [14:12] Input selection for CDTM0_DTM3_AUXINy (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __O  Ifx_UReg_32Bit SEL4:3;            /**< \brief [18:16] Input selection for CDTM0_DTM4_AUXINy (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [19:19] \internal Reserved */
    __O  Ifx_UReg_32Bit SEL5:3;            /**< \brief [22:20] Input selection for CDTM0_DTM5_AUXINy (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [23:23] \internal Reserved */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_DTMAUX_IN_Bits;

/** \brief FOUT Selection for Encoder Interface 0 */
typedef struct _Ifx_GTM_FOUTENC_Bits
{
    __IO Ifx_UReg_32Bit TIM_IN:3;          /**< \brief [2:0] TIM module selection for encoder interface input IN of GPT12x (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit CH_IN:3;           /**< \brief [6:4] TIM channel selection for encoder interface input IN of GPT12x (rw) */
    __IO Ifx_UReg_32Bit EN_IN:1;           /**< \brief [7:7] Enable connection to encoder interface input IN of GPT12x (rw) */
    __IO Ifx_UReg_32Bit TIM_EUD:3;         /**< \brief [10:8] TIM module selection for encoder interface input EUD of GPT12x (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [11:11] \internal Reserved */
    __IO Ifx_UReg_32Bit CH_EUD:3;          /**< \brief [14:12] TIM channel selection for encoder interface input EUD of GPT12x (rw) */
    __IO Ifx_UReg_32Bit EN_EUD:1;          /**< \brief [15:15] Enable connection to encoder interface input EUD of GPT12x (rw) */
    __IO Ifx_UReg_32Bit TIM_TOPZ:3;        /**< \brief [18:16] TIM module selection for encoder interface input TOP Zero (T4IN) of GPT12x (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [19:19] \internal Reserved */
    __IO Ifx_UReg_32Bit CH_TOPZ:3;         /**< \brief [22:20] TIM channel selection for encoder interface input TOP Zero (T4IN) of GPT12x (rw) */
    __IO Ifx_UReg_32Bit EN_TOPZ:1;         /**< \brief [23:23] Enable connection to encoder interface input TOP Zero (T4IN) of GPT12x (rw) */
    __IO Ifx_UReg_32Bit TIM_CAPB:3;        /**< \brief [26:24] TIM module selection for CAPINB input of GPT12x (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [27:27] \internal Reserved */
    __IO Ifx_UReg_32Bit CH_CAPB:3;         /**< \brief [30:28] TIM channel selection for CAPINB input of GPT12x (rw) */
    __IO Ifx_UReg_32Bit EN_CAPB:1;         /**< \brief [31:31] Enable connection to CAPINB input of GPT12x (rw) */
} Ifx_GTM_FOUTENC_Bits;

/** \brief GTM to LCDCDC output trigger selection register */
typedef struct _Ifx_GTM_LCDCDC_OUT_Bits
{
    __IO Ifx_UReg_32Bit SEL:4;             /**< \brief [3:0] GTM to LCDCDC trigger output selection (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_GTM_LCDCDC_OUT_Bits;

/** \brief GTM to MSC SET0 output selection register 0 */
typedef struct _Ifx_GTM_MSCSET_CON0_Bits
{
    __IO Ifx_UReg_32Bit SEL0:5;            /**< \brief [4:0] SET0.x signal output selection (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit SEL1:5;            /**< \brief [12:8] SET0.x signal output selection (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __IO Ifx_UReg_32Bit SEL2:5;            /**< \brief [20:16] SET0.x signal output selection (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit SEL3:5;            /**< \brief [28:24] SET0.x signal output selection (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_GTM_MSCSET_CON0_Bits;

/** \brief GTM to MSC SET0 output selection register 1 */
typedef struct _Ifx_GTM_MSCSET_CON1_Bits
{
    __IO Ifx_UReg_32Bit SEL4:5;            /**< \brief [4:0] SET0.x signal output selection (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit SEL5:5;            /**< \brief [12:8] SET0.x signal output selection (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __IO Ifx_UReg_32Bit SEL6:5;            /**< \brief [20:16] SET0.x signal output selection (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit SEL7:5;            /**< \brief [28:24] SET0.x signal output selection (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_GTM_MSCSET_CON1_Bits;

/** \brief GTM to MSC SET0 output selection register 2 */
typedef struct _Ifx_GTM_MSCSET_CON2_Bits
{
    __IO Ifx_UReg_32Bit SEL8:5;            /**< \brief [4:0] SET0.x signal output selection (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit SEL9:5;            /**< \brief [12:8] SET0.x signal output selection (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __IO Ifx_UReg_32Bit SEL10:5;           /**< \brief [20:16] SET0.x signal output selection (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit SEL11:5;           /**< \brief [28:24] SET0.x signal output selection (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_GTM_MSCSET_CON2_Bits;

/** \brief GTM to MSC SET0 output selection register 3 */
typedef struct _Ifx_GTM_MSCSET_CON3_Bits
{
    __IO Ifx_UReg_32Bit SEL12:5;           /**< \brief [4:0] SET0.x signal output selection (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit SEL13:5;           /**< \brief [12:8] SET0.x signal output selection (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __IO Ifx_UReg_32Bit SEL14:5;           /**< \brief [20:16] SET0.x signal output selection (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit SEL15:5;           /**< \brief [28:24] SET0.x signal output selection (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_GTM_MSCSET_CON3_Bits;

/** \brief GTM to MSC0 input bus ALTINH signal selection register */
typedef struct _Ifx_GTM_MSC_INHCON_Bits
{
    __IO Ifx_UReg_32Bit SEL0:2;            /**< \brief [1:0] MSC0 bus line ALTINH.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL1:2;            /**< \brief [3:2] MSC0 bus line ALTINH.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL2:2;            /**< \brief [5:4] MSC0 bus line ALTINH.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL3:2;            /**< \brief [7:6] MSC0 bus line ALTINH.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL4:2;            /**< \brief [9:8] MSC0 bus line ALTINH.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL5:2;            /**< \brief [11:10] MSC0 bus line ALTINH.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL6:2;            /**< \brief [13:12] MSC0 bus line ALTINH.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL7:2;            /**< \brief [15:14] MSC0 bus line ALTINH.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL8:2;            /**< \brief [17:16] MSC0 bus line ALTINH.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL9:2;            /**< \brief [19:18] MSC0 bus line ALTINH.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL10:2;           /**< \brief [21:20] MSC0 bus line ALTINH.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL11:2;           /**< \brief [23:22] MSC0 bus line ALTINH.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL12:2;           /**< \brief [25:24] MSC0 bus line ALTINH.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL13:2;           /**< \brief [27:26] MSC0 bus line ALTINH.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL14:2;           /**< \brief [29:28] MSC0 bus line ALTINH.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL15:2;           /**< \brief [31:30] MSC0 bus line ALTINH.x SETi signal selection (rw) */
} Ifx_GTM_MSC_INHCON_Bits;

/** \brief GTM to MSC0 input bus ALTINHE signal selection register */
typedef struct _Ifx_GTM_MSC_INHECON_Bits
{
    __IO Ifx_UReg_32Bit SEL0:2;            /**< \brief [1:0] MSC0 bus line ALTINHE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL1:2;            /**< \brief [3:2] MSC0 bus line ALTINHE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL2:2;            /**< \brief [5:4] MSC0 bus line ALTINHE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL3:2;            /**< \brief [7:6] MSC0 bus line ALTINHE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL4:2;            /**< \brief [9:8] MSC0 bus line ALTINHE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL5:2;            /**< \brief [11:10] MSC0 bus line ALTINHE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL6:2;            /**< \brief [13:12] MSC0 bus line ALTINHE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL7:2;            /**< \brief [15:14] MSC0 bus line ALTINHE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL8:2;            /**< \brief [17:16] MSC0 bus line ALTINHE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL9:2;            /**< \brief [19:18] MSC0 bus line ALTINHE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL10:2;           /**< \brief [21:20] MSC0 bus line ALTINHE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL11:2;           /**< \brief [23:22] MSC0 bus line ALTINHE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL12:2;           /**< \brief [25:24] MSC0 bus line ALTINHE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL13:2;           /**< \brief [27:26] MSC0 bus line ALTINHE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL14:2;           /**< \brief [29:28] MSC0 bus line ALTINHE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL15:2;           /**< \brief [31:30] MSC0 bus line ALTINHE.x SETi signal selection (rw) */
} Ifx_GTM_MSC_INHECON_Bits;

/** \brief GTM to MSC0 input bus ALTINL signal selection register */
typedef struct _Ifx_GTM_MSC_INLCON_Bits
{
    __IO Ifx_UReg_32Bit SEL0:2;            /**< \brief [1:0] MSC0 bus line ALTINL.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL1:2;            /**< \brief [3:2] MSC0 bus line ALTINL.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL2:2;            /**< \brief [5:4] MSC0 bus line ALTINL.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL3:2;            /**< \brief [7:6] MSC0 bus line ALTINL.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL4:2;            /**< \brief [9:8] MSC0 bus line ALTINL.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL5:2;            /**< \brief [11:10] MSC0 bus line ALTINL.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL6:2;            /**< \brief [13:12] MSC0 bus line ALTINL.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL7:2;            /**< \brief [15:14] MSC0 bus line ALTINL.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL8:2;            /**< \brief [17:16] MSC0 bus line ALTINL.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL9:2;            /**< \brief [19:18] MSC0 bus line ALTINL.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL10:2;           /**< \brief [21:20] MSC0 bus line ALTINL.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL11:2;           /**< \brief [23:22] MSC0 bus line ALTINL.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL12:2;           /**< \brief [25:24] MSC0 bus line ALTINL.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL13:2;           /**< \brief [27:26] MSC0 bus line ALTINL.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL14:2;           /**< \brief [29:28] MSC0 bus line ALTINL.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL15:2;           /**< \brief [31:30] MSC0 bus line ALTINL.x SETi signal selection (rw) */
} Ifx_GTM_MSC_INLCON_Bits;

/** \brief GTM to MSC0 input bus ALTINLE signal selection register */
typedef struct _Ifx_GTM_MSC_INLECON_Bits
{
    __IO Ifx_UReg_32Bit SEL0:2;            /**< \brief [1:0] MSC0 bus line ALTINLE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL1:2;            /**< \brief [3:2] MSC0 bus line ALTINLE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL2:2;            /**< \brief [5:4] MSC0 bus line ALTINLE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL3:2;            /**< \brief [7:6] MSC0 bus line ALTINLE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL4:2;            /**< \brief [9:8] MSC0 bus line ALTINLE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL5:2;            /**< \brief [11:10] MSC0 bus line ALTINLE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL6:2;            /**< \brief [13:12] MSC0 bus line ALTINLE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL7:2;            /**< \brief [15:14] MSC0 bus line ALTINLE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL8:2;            /**< \brief [17:16] MSC0 bus line ALTINLE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL9:2;            /**< \brief [19:18] MSC0 bus line ALTINLE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL10:2;           /**< \brief [21:20] MSC0 bus line ALTINLE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL11:2;           /**< \brief [23:22] MSC0 bus line ALTINLE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL12:2;           /**< \brief [25:24] MSC0 bus line ALTINLE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL13:2;           /**< \brief [27:26] MSC0 bus line ALTINLE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL14:2;           /**< \brief [29:28] MSC0 bus line ALTINLE.x SETi signal selection (rw) */
    __IO Ifx_UReg_32Bit SEL15:2;           /**< \brief [31:30] MSC0 bus line ALTINLE.x SETi signal selection (rw) */
} Ifx_GTM_MSC_INLECON_Bits;

/** \brief Hardware breakpoint enable register */
typedef struct _Ifx_GTM_OCDS_HWBEN_Bits
{
    __IO Ifx_UReg_32Bit HBCL0:1;           /**< \brief [0:0] Hardware breakpoint enable of cluster 0 (rw) */
    __IO Ifx_UReg_32Bit HBCL1:1;           /**< \brief [1:1] Hardware breakpoint enable of cluster 1 (rw) */
    __IO Ifx_UReg_32Bit HBCL2:1;           /**< \brief [2:2] Hardware breakpoint enable of cluster 2 (rw) */
    __IO Ifx_UReg_32Bit HBCL3:1;           /**< \brief [3:3] Hardware breakpoint enable of cluster 3 (rw) */
    __IO Ifx_UReg_32Bit HBCL4:1;           /**< \brief [4:4] Hardware breakpoint enable of cluster 4 (rw) */
    __IO Ifx_UReg_32Bit HBCL5:1;           /**< \brief [5:5] Hardware breakpoint enable of cluster 5 (rw) */
    __IO Ifx_UReg_32Bit HBCL6:1;           /**< \brief [6:6] Hardware breakpoint enable of cluster 6 (rw) */
    __IO Ifx_UReg_32Bit HBCL7:1;           /**< \brief [7:7] Hardware breakpoint enable of cluster 7 (rw) */
    __IO Ifx_UReg_32Bit HBCL8:1;           /**< \brief [8:8] Hardware breakpoint enable of cluster 8 (rw) */
    __IO Ifx_UReg_32Bit HBCL9:1;           /**< \brief [9:9] Hardware breakpoint enable of cluster 9 (rw) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_GTM_OCDS_HWBEN_Bits;

/** \brief OCDS debug access register */
typedef struct _Ifx_GTM_OCDS_ODA_Bits
{
    __IO Ifx_UReg_32Bit DRAC:2;            /**< \brief [1:0] Debug read access control (rw) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_GTM_OCDS_ODA_Bits;

/** \brief OCDS TBU0 trigger register */
typedef struct _Ifx_GTM_OCDS_OTBU0T_Bits
{
    __IO Ifx_UReg_32Bit CV:27;             /**< \brief [26:0] Compare value (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [27:27] \internal Reserved */
    __IO Ifx_UReg_32Bit CM:2;              /**< \brief [29:28] Compare mode (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_GTM_OCDS_OTBU0T_Bits;

/** \brief OCDS TBU1 trigger register */
typedef struct _Ifx_GTM_OCDS_OTBU1T_Bits
{
    __IO Ifx_UReg_32Bit CV:24;             /**< \brief [23:0] Compare value (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [27:24] \internal Reserved */
    __IO Ifx_UReg_32Bit EN:1;              /**< \brief [28:28] Enable (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_GTM_OCDS_OTBU1T_Bits;

/** \brief OCDS TBU2 trigger register */
typedef struct _Ifx_GTM_OCDS_OTBU2T_Bits
{
    __IO Ifx_UReg_32Bit CV:24;             /**< \brief [23:0] Compare value (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [27:24] \internal Reserved */
    __IO Ifx_UReg_32Bit EN:1;              /**< \brief [28:28] Enable (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_GTM_OCDS_OTBU2T_Bits;

/** \brief OCDS TBU3 trigger register */
typedef struct _Ifx_GTM_OCDS_OTBU3T_Bits
{
    __IO Ifx_UReg_32Bit CV:24;             /**< \brief [23:0] Compare value (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [27:24] \internal Reserved */
    __IO Ifx_UReg_32Bit EN:1;              /**< \brief [28:28] Enable (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_GTM_OCDS_OTBU3T_Bits;

/** \brief OCDS trigger set control 0 register */
typedef struct _Ifx_GTM_OCDS_OTSC0_Bits
{
    __IO Ifx_UReg_32Bit B0LMT:3;           /**< \brief [2:0] OTGB0 TS16_IOS low-byte module type (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit B0LMI:4;           /**< \brief [7:4] OTGB0 TS16_IOS low-byte module instance (rw) */
    __IO Ifx_UReg_32Bit B0HMT:3;           /**< \brief [10:8] OTGB0 TS16_IOS high-byte module type (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [11:11] \internal Reserved */
    __IO Ifx_UReg_32Bit B0HMI:4;           /**< \brief [15:12] OTGB0 TS16_IOS high-byte module instance (rw) */
    __IO Ifx_UReg_32Bit B1LMT:3;           /**< \brief [18:16] OTGB1 TS16_IOS low-byte module type (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [19:19] \internal Reserved */
    __IO Ifx_UReg_32Bit B1LMI:4;           /**< \brief [23:20] OTGB1 TS16_IOS low-byte module instance (rw) */
    __IO Ifx_UReg_32Bit B1HMT:3;           /**< \brief [26:24] OTGB1 TS16_IOS high-byte module type (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [27:27] \internal Reserved */
    __IO Ifx_UReg_32Bit B1HMI:4;           /**< \brief [31:28] OTGB1 TS16_IOS high-byte module instance (rw) */
} Ifx_GTM_OCDS_OTSC0_Bits;

/** \brief OCDS trigger set control 1 register */
typedef struct _Ifx_GTM_OCDS_OTSC1_Bits
{
    __IO Ifx_UReg_32Bit MCCS:4;            /**< \brief [3:0] MCS channel selection (rw) */
    __IO Ifx_UReg_32Bit MCI:4;             /**< \brief [7:4] MCS cluster instance (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [8:8] \internal Reserved */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [9:9] \internal Reserved */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_GTM_OCDS_OTSC1_Bits;

/** \brief OCDS trigger set select register */
typedef struct _Ifx_GTM_OCDS_OTSS_Bits
{
    __IO Ifx_UReg_32Bit OTGB0:4;           /**< \brief [3:0] Trigger set for OTGB0 (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __IO Ifx_UReg_32Bit OTGB1:4;           /**< \brief [11:8] Trigger set for OTGB1 (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __IO Ifx_UReg_32Bit OTGBM0:4;          /**< \brief [19:16] Trigger set for OTGBM0 (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [23:20] \internal Reserved */
    __IO Ifx_UReg_32Bit OTGBM1:4;          /**< \brief [27:24] Trigger set for OTGBM1 (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_GTM_OCDS_OTSS_Bits;

/** \brief OCDS control and status register */
typedef struct _Ifx_GTM_OCS_Bits
{
    __I  Ifx_UReg_32Bit :24;               /**< \brief [23:0] \internal Reserved */
    __IO Ifx_UReg_32Bit SUS:4;             /**< \brief [27:24] OCDS suspend control (rw) */
    __O  Ifx_UReg_32Bit SUS_P:1;           /**< \brief [28:28] SUS write protection (w) */
    __I  Ifx_UReg_32Bit SUSSTA:1;          /**< \brief [29:29] Suspend state (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_GTM_OCS_Bits;

/** \brief Resource Protection Register */
typedef struct _Ifx_GTM_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual Machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual Machine definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection Set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection Set definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_GTM_PROT_Bits;

/** \brief GTM to PSI5-S0 output trigger selection register */
typedef struct _Ifx_GTM_PSI5S_OUT_Bits
{
    __IO Ifx_UReg_32Bit SEL0:4;            /**< \brief [3:0] GTM to PSI5-Sn trigger 0 output selection (rw) */
    __IO Ifx_UReg_32Bit SEL1:4;            /**< \brief [7:4] GTM to PSI5-Sn trigger 1 output selection (rw) */
    __IO Ifx_UReg_32Bit SEL2:4;            /**< \brief [11:8] GTM to PSI5-Sn trigger 2 output selection (rw) */
    __IO Ifx_UReg_32Bit SEL3:4;            /**< \brief [15:12] GTM to PSI5-Sn trigger 3 output selection (rw) */
    __IO Ifx_UReg_32Bit SEL4:4;            /**< \brief [19:16] GTM to PSI5-Sn trigger 4 output selection (rw) */
    __IO Ifx_UReg_32Bit SEL5:4;            /**< \brief [23:20] GTM to PSI5-Sn trigger 5 output selection (rw) */
    __IO Ifx_UReg_32Bit SEL6:4;            /**< \brief [27:24] GTM to PSI5-Sn trigger 6 output selection (rw) */
    __IO Ifx_UReg_32Bit SEL7:4;            /**< \brief [31:28] GTM to PSI5-Sn trigger 7 output selection (rw) */
} Ifx_GTM_PSI5S_OUT_Bits;

/** \brief GTM to PSI5 output trigger selection register */
typedef struct _Ifx_GTM_PSI5_OUT_Bits
{
    __IO Ifx_UReg_32Bit SEL0:4;            /**< \brief [3:0] GTM to PSI5 trigger 0 output selection (rw) */
    __IO Ifx_UReg_32Bit SEL1:4;            /**< \brief [7:4] GTM to PSI5 trigger 1 output selection (rw) */
    __IO Ifx_UReg_32Bit SEL2:4;            /**< \brief [11:8] GTM to PSI5 trigger 2 output selection (rw) */
    __IO Ifx_UReg_32Bit SEL3:4;            /**< \brief [15:12] GTM to PSI5 trigger 3 output selection (rw) */
    __IO Ifx_UReg_32Bit SEL4:4;            /**< \brief [19:16] GTM to PSI5 trigger 4 output selection (rw) */
    __IO Ifx_UReg_32Bit SEL5:4;            /**< \brief [23:20] GTM to PSI5 trigger 5 output selection (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_GTM_PSI5_OUT_Bits;

/** \brief GTM to QSPI0 output selection register */
typedef struct _Ifx_GTM_QSPI_OUT_Bits
{
    __IO Ifx_UReg_32Bit SEL:5;             /**< \brief [4:0] GTM to QSPI0 trigger output selection (rw) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_GTM_QSPI_OUT_Bits;

/** \brief Reset control register A */
typedef struct _Ifx_GTM_RST_CTRLA_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit GRSTEN0:1;         /**< \brief [8:8] Enable for Global Module Reset Group 0 - GRSTEN0 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN1:1;         /**< \brief [9:9] Enable for Global Module Reset Group 1 - GRSTEN1 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN2:1;         /**< \brief [10:10] Enable for Global Module Reset Group 2 - GRSTEN2 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN3:1;         /**< \brief [11:11] Enable for Global Module Reset Group 3 - GRSTEN3 (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GTM_RST_CTRLA_Bits;

/** \brief Reset control register B */
typedef struct _Ifx_GTM_RST_CTRLB_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [30:1] \internal Reserved */
    __O  Ifx_UReg_32Bit STATCLR:1;         /**< \brief [31:31] Kernel Reset Status Clear - STATCLR (w) */
} Ifx_GTM_RST_CTRLB_Bits;

/** \brief Reset status register */
typedef struct _Ifx_GTM_RST_STAT_Bits
{
    __I  Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset Status - KRST (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __I  Ifx_UReg_32Bit GRST0:1;           /**< \brief [8:8] Status for Global Module Reset Group 0 - GRST0 (rh) */
    __I  Ifx_UReg_32Bit GRST1:1;           /**< \brief [9:9] Status for Global Module Reset Group 1 - GRST1 (rh) */
    __I  Ifx_UReg_32Bit GRST2:1;           /**< \brief [10:10] Status for Global Module Reset Group 2 - GRST2 (rh) */
    __I  Ifx_UReg_32Bit GRST3:1;           /**< \brief [11:11] Status for Global Module Reset Group 3 - GRST3 (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GTM_RST_STAT_Bits;

/** \brief GTM to SENT0 trigger x output selection register A */
typedef struct _Ifx_GTM_SENT_OUTA_Bits
{
    __IO Ifx_UReg_32Bit SEL3:5;            /**< \brief [4:0] GTM to SENTn trigger 3 output selection (rw) */
    __IO Ifx_UReg_32Bit SEL4:5;            /**< \brief [9:5] GTM to SENTn trigger 4 output selection (rw) */
    __IO Ifx_UReg_32Bit SEL5:5;            /**< \brief [14:10] GTM to SENTn trigger 5 output selection (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit SEL6:5;            /**< \brief [20:16] GTM to SENTn trigger 6 output selection (rw) */
    __IO Ifx_UReg_32Bit SEL7:5;            /**< \brief [25:21] GTM to SENTn trigger 7 output selection (rw) */
    __IO Ifx_UReg_32Bit SEL8:5;            /**< \brief [30:26] GTM to SENTn trigger 8 output selection (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_GTM_SENT_OUTA_Bits;

/** \brief GTM to SENT0 trigger x output selection register B */
typedef struct _Ifx_GTM_SENT_OUTB_Bits
{
    __IO Ifx_UReg_32Bit SEL9:5;            /**< \brief [4:0] GTM to SENTn trigger 9 output selection (rw) */
    __IO Ifx_UReg_32Bit SEL10:5;           /**< \brief [9:5] GTM to SENTn trigger 10 output selection (rw) */
    __IO Ifx_UReg_32Bit SEL11:5;           /**< \brief [14:10] GTM to SENTn trigger 11 output selection (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit SEL12:5;           /**< \brief [20:16] GTM to SENTn trigger 12 output selection (rw) */
    __IO Ifx_UReg_32Bit SEL13:5;           /**< \brief [25:21] GTM to SENTn trigger 13 output selection (rw) */
    __IO Ifx_UReg_32Bit SEL14:5;           /**< \brief [30:26] GTM to SENTn trigger 14 output selection (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_GTM_SENT_OUTB_Bits;

/** \brief Spare Bits */
typedef struct _Ifx_GTM_SPARE_Bits
{
    __IO Ifx_UReg_32Bit SPABA:4;           /**< \brief [3:0] Spare Bits A - For future extensions (rwh) */
    __IO Ifx_UReg_32Bit SPABB:4;           /**< \brief [7:4] Spare Bits B - for future extensions (rwh) */
    __IO Ifx_UReg_32Bit SPABC:4;           /**< \brief [11:8] Spare Bits C - for future extensions (rwh) */
    __IO Ifx_UReg_32Bit SPABD:4;           /**< \brief [15:12] Spare Bits D - for future extensions (rwh) */
    __IO Ifx_UReg_32Bit SPABE:4;           /**< \brief [19:16] Spare Bits E - for future extensions (rwh) */
    __IO Ifx_UReg_32Bit SPABF:4;           /**< \brief [23:20] Spare Bits F - for future extensions (rwh) */
    __IO Ifx_UReg_32Bit SPABG:4;           /**< \brief [27:24] Spare Bits G - for future extensions (rwh) */
    __IO Ifx_UReg_32Bit SPABH:4;           /**< \brief [31:28] Spare Bits H - for future extensions (rwh) */
} Ifx_GTM_SPARE_Bits;

/** \brief TIM0 input selection register */
typedef struct _Ifx_GTM_TIMINSEL_Bits
{
    __IO Ifx_UReg_32Bit CH0SEL:4;          /**< \brief [3:0] GTM TIM0 channel 0 input selection (rw) */
    __IO Ifx_UReg_32Bit CH1SEL:4;          /**< \brief [7:4] GTM TIM0 channel 1 input selection (rw) */
    __IO Ifx_UReg_32Bit CH2SEL:4;          /**< \brief [11:8] GTM TIM0 channel 2 input selection (rw) */
    __IO Ifx_UReg_32Bit CH3SEL:4;          /**< \brief [15:12] GTM TIM0 channel 3 input selection (rw) */
    __IO Ifx_UReg_32Bit CH4SEL:4;          /**< \brief [19:16] GTM TIM0 channel 4 input selection (rw) */
    __IO Ifx_UReg_32Bit CH5SEL:4;          /**< \brief [23:20] GTM TIM0 channel 5 input selection (rw) */
    __IO Ifx_UReg_32Bit CH6SEL:4;          /**< \brief [27:24] GTM TIM0 channel 6 input selection (rw) */
    __IO Ifx_UReg_32Bit CH7SEL:4;          /**< \brief [31:28] GTM TIM0 channel 7 input selection (rw) */
} Ifx_GTM_TIMINSEL_Bits;

/** \brief GTM to Ports signal TOUT output selection register 0 */
typedef struct _Ifx_GTM_TOUTSEL_Bits
{
    __IO Ifx_UReg_32Bit SEL0:5;            /**< \brief [4:0] GTM to Ports signal TOUT(0*6+0) output selection (rw) */
    __IO Ifx_UReg_32Bit SEL1:5;            /**< \brief [9:5] GTM to Ports signal TOUT(0*6+1) output selection (rw) */
    __IO Ifx_UReg_32Bit SEL2:5;            /**< \brief [14:10] GTM to Ports signal TOUT(0*6+2) output selection (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit SEL3:5;            /**< \brief [20:16] GTM to Ports signal TOUT(0*6+3) output selection (rw) */
    __IO Ifx_UReg_32Bit SEL4:5;            /**< \brief [25:21] GTM to Ports signal TOUT(0*6+4) output selection (rw) */
    __IO Ifx_UReg_32Bit SEL5:5;            /**< \brief [30:26] GTM to Ports signal TOUT(0*6+5) output selection (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_GTM_TOUTSEL_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_gtm_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_ACCEN_PRS_Bits B;              /**< \brief Bitfield access */
} Ifx_GTM_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_ACCEN_RDA_Bits B;              /**< \brief Bitfield access */
} Ifx_GTM_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_ACCEN_RDB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_GTM_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_ACCEN_VM_Bits B;               /**< \brief Bitfield access */
} Ifx_GTM_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_ACCEN_WRA_Bits B;              /**< \brief Bitfield access */
} Ifx_GTM_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_ACCEN_WRB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_GTM_ACCEN_WRB_FPI;

/** \brief GTM to ADC output selection register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_ADC_OUT_Bits B;                /**< \brief Bitfield access */
} Ifx_GTM_ADC_OUT;

/** \brief GTM to ASCLIN0 output selection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_ASCLIN_OUT_Bits B;             /**< \brief Bitfield access */
} Ifx_GTM_ASCLIN_OUT;

/** \brief GTM to CAN0 output selection register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CAN_OUT_Bits B;                /**< \brief Bitfield access */
} Ifx_GTM_CAN_OUT;

/** \brief Clock control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLC_Bits B;                    /**< \brief Bitfield access */
} Ifx_GTM_CLC;

/** \brief BRIDGE_MODE   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_AEI_BRIDGE_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_AEI_BRIDGE_MODE;

/** \brief BRIDGE_PTR1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_AEI_BRIDGE_PTR1_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_AEI_BRIDGE_PTR1;

/** \brief BRIDGE_PTR2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_AEI_BRIDGE_PTR2_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_AEI_BRIDGE_PTR2;

/** \brief GTM MCS master port disable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_AEI_MCS_AEM_DIS_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_AEI_MCS_AEM_DIS;

/** \brief GTM_AEI_ADDR_XPT   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARCH_AEI_ADDR_XPT_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARCH_AEI_ADDR_XPT;

/** \brief GTM_AEI_STA_XPT   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARCH_AEI_STA_XPT_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARCH_AEI_STA_XPT;

/** \brief GTM ARU communication disable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARCH_ARU_COM_DIS_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARCH_ARU_COM_DIS;

/** \brief GTM configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARCH_CFG_Bits B;           /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARCH_CFG;

/** \brief GTM Cluster Clock Configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARCH_CLK_CFG_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARCH_CLK_CFG;

/** \brief GTM global control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARCH_CTRL_Bits B;          /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARCH_CTRL;

/** \brief GTM error interrupt enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARCH_EIRQ_EN_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARCH_EIRQ_EN;

/** \brief GTM interrupt enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARCH_IRQ_EN_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARCH_IRQ_EN;

/** \brief GTM Software interrupt generation register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARCH_IRQ_FORCINT_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARCH_IRQ_FORCINT;

/** \brief GTM top level interrupts mode selection   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARCH_IRQ_MODE_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARCH_IRQ_MODE;

/** \brief GTM Interrupt notification register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARCH_IRQ_NOTIFY_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARCH_IRQ_NOTIFY;

/** \brief GTM version control register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARCH_REV_Bits B;           /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARCH_REV;

/** \brief GTM global reset register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARCH_RST_Bits B;           /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARCH_RST;

/** \brief ARU access register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARU_ACCESS_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARU_ACCESS;

/** \brief ARU caddr counter value   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARU_CADDR_Bits B;          /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARU_CADDR;

/** \brief ARU caddr counter end value   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARU_CADDR_END_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARU_CADDR_END;

/** \brief ARU enable dynamic routing   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARU_CTRL_Bits B;           /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARU_CTRL;

/** \brief ARU access register upper data word   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARU_DATA_H_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARU_DATA_H;

/** \brief ARU access register lower data word   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARU_DATA_L_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARU_DATA_L;

/** \brief ARU debug access channel 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARU_DBG_ACCESS0_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARU_DBG_ACCESS0;

/** \brief ARU debug access channel 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARU_DBG_ACCESS1_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARU_DBG_ACCESS1;

/** \brief ARU debug access 0 transfer register upper data word   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARU_DBG_DATA0_H_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARU_DBG_DATA0_H;

/** \brief ARU debug access 0 transfer register lower data word   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARU_DBG_DATA0_L_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARU_DBG_DATA0_L;

/** \brief ARU debug access 1 transfer register upper data word   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARU_DBG_DATA1_H_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARU_DBG_DATA1_H;

/** \brief ARU debug access 1 transfer register lower data word   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARU_DBG_DATA1_L_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARU_DBG_DATA1_L;

/** \brief ARU [g] dynamic routing control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARU_DYN_CTRL_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARU_DYN_CTRL;

/** \brief ARU [g] master ID for dynamic routing   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARU_DYN_RDADDR_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARU_DYN_RDADDR;

/** \brief ARU [g] higher bits of DYN_ROUTE register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARU_DYN_ROUTE_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARU_DYN_ROUTE_HIGH;

/** \brief ARU [g] lower bits of DYN_ROUTE register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARU_DYN_ROUTE_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARU_DYN_ROUTE_LOW;

/** \brief ARU [g] shadow register of DYN_ROUTE register higher bits   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARU_DYN_ROUTE_SR_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARU_DYN_ROUTE_SR_HIGH;

/** \brief ARU [g] shadow register of DYN_ROUTE register lower bits   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARU_DYN_ROUTE_SR_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARU_DYN_ROUTE_SR_LOW;

/** \brief ARU interrupt enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARU_IRQ_EN_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARU_IRQ_EN;

/** \brief ARU force interrupt register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARU_IRQ_FORCINT_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARU_IRQ_FORCINT;

/** \brief ARU interrupt mode register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARU_IRQ_MODE_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARU_IRQ_MODE;

/** \brief ARU interrupt notification register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ARU_IRQ_NOTIFY_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_ARU_IRQ_NOTIFY;

/** \brief ATOM[i] AGC action time base register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_AGC_ACT_TB_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_AGC_ACT_TB;

/** \brief ATOM[i] AGC enable/disable control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_AGC_ENDIS_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_AGC_ENDIS_CTRL;

/** \brief ATOM[i] AGC enable/disable status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_AGC_ENDIS_STAT_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_AGC_ENDIS_STAT;

/** \brief ATOM[i] AGC force update control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_AGC_FUPD_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_AGC_FUPD_CTRL;

/** \brief ATOM[i] AGC global control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_AGC_GLB_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_AGC_GLB_CTRL;

/** \brief ATOM[i] AGC internal trigger control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_AGC_INT_TRIG_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_AGC_INT_TRIG;

/** \brief ATOM[i] AGC output enable control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_AGC_OUTEN_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_AGC_OUTEN_CTRL;

/** \brief ATOM[i] AGC output enable status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_AGC_OUTEN_STAT_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_AGC_OUTEN_STAT;

/** \brief ATOM[i] channel [x] CCU0 compare register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_CH_CM0_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_CH_CM0;

/** \brief ATOM[i] channel [x] CCU1 compare register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_CH_CM1_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_CH_CM1;

/** \brief ATOM[i] channel [x] CCU0 counter register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_CH_CN0_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_CH_CN0;

/** \brief ATOM[i] channel [x] control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_CH_CTRL_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_CH_CTRL;

/** \brief ATOM[i] channel [x] control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_CH_CTRL_SOMB_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_CH_CTRL_SOMB;

/** \brief ATOM[i] channel [x] control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_CH_CTRL_SOMC_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_CH_CTRL_SOMC;

/** \brief ATOM[i] channel [x] control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_CH_CTRL_SOMI_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_CH_CTRL_SOMI;

/** \brief ATOM[i] channel [x] control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_CH_CTRL_SOMP_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_CH_CTRL_SOMP;

/** \brief ATOM[i] channel [x] control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_CH_CTRL_SOMS_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_CH_CTRL_SOMS;

/** \brief ATOM[i] channel [x] control shadow register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_CH_CTRL_SR_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_CH_CTRL_SR;

/** \brief ATOM[i] channel [x] interrupt enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_CH_IRQ_EN_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_CH_IRQ_EN;

/** \brief ATOM[i] channel [x] software interrupt generation   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_CH_IRQ_FORCINT_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_CH_IRQ_FORCINT;

/** \brief ATOM[i] channel [x] interrupt mode configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_CH_IRQ_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_CH_IRQ_MODE;

/** \brief ATOM[i] channel [x] interrupt notification register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_CH_IRQ_NOTIFY_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_CH_IRQ_NOTIFY;

/** \brief ATOM[i] channel[x] ARU read address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_CH_RDADDR_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_CH_RDADDR;

/** \brief ATOM[i] channel [x] CCU0 compare shadow register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_CH_SR0_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_CH_SR0;

/** \brief ATOM[i] channel [x] CCU1 compare shadow register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_CH_SR1_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_CH_SR1;

/** \brief ATOM[i] channel [x] status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ATOM_CH_STAT_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_ATOM_CH_STAT;

/** \brief AXIM[i] slot allocation status.   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_AXIM_FREE_Bits B;          /**< \brief Bitfield access */
} Ifx_GTM_CLS_AXIM_FREE;

/** \brief AXIM[i] slot release (de-allocation).   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_AXIM_RELEASE_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_AXIM_RELEASE;

/** \brief AXIM[i] slot request (allocation).   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_AXIM_REQUEST_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_AXIM_REQUEST;

/** \brief AXIM[i] slot[s] address bits 31:0 of AXI transaction.   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_AXIM_SLOT_ADDR_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_AXIM_SLOT_ADDR_LOW;

/** \brief AXIM[i] slot [s] configuration 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_AXIM_SLOT_CFG1_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_AXIM_SLOT_CFG1;

/** \brief AXIM[i] slot[s] configuration 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_AXIM_SLOT_CFG2_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_AXIM_SLOT_CFG2;

/** \brief AXIM[i] slot[s] data bits 31:0 of AXI transaction.   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_AXIM_SLOT_DATA_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_AXIM_SLOT_DATA_LOW;

/** \brief AXIM[i] slot[s] status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_AXIM_SLOT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_AXIM_SLOT_STATUS;

/** \brief BRC error interrupt enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_BRC_EIRQ_EN_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_BRC_EIRQ_EN;

/** \brief BRC interrupt enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_BRC_IRQ_EN_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_BRC_IRQ_EN;

/** \brief BRC force interrupt register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_BRC_IRQ_FORCINT_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_BRC_IRQ_FORCINT;

/** \brief BRC interrupt mode configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_BRC_IRQ_MODE_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_BRC_IRQ_MODE;

/** \brief BRC interrupt notification register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_BRC_IRQ_NOTIFY_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_BRC_IRQ_NOTIFY;

/** \brief BRC software reset register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_BRC_RST_Bits B;            /**< \brief Bitfield access */
} Ifx_GTM_CLS_BRC_RST;

/** \brief BRC read address for input channel [x]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_BRC_SRC_ADDR_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_BRC_SRC_ADDR;

/** \brief BRC destination channels for input channel [x]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_BRC_SRC_DEST_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_BRC_SRC_DEST;

/** \brief CCM[i] MCS Bus Master Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CCM_AEIM_STA_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_CCM_AEIM_STA;

/** \brief CCM[i] Address Range Protector [a] Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CCM_ARP_CTRL_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_CCM_ARP_CTRL;

/** \brief CCM[i] Address Range Protector [a] Protection Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CCM_ARP_PROT_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_CCM_ARP_PROT;

/** \brief CCM[i] ATOM Output Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CCM_ATOM_OUT_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_CCM_ATOM_OUT;

/** \brief CCM[i] Configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CCM_CFG_Bits B;            /**< \brief Bitfield access */
} Ifx_GTM_CLS_CCM_CFG;

/** \brief CCM[i] CMU Clock Configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CCM_CMU_CLK_CFG_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_CCM_CMU_CLK_CFG;

/** \brief CCM[i] CMU Fixed Clock Configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CCM_CMU_FXCLK_CFG_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_CCM_CMU_FXCLK_CFG;

/** \brief CCM[i] External Capture Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CCM_EXT_CAP_EN_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_CCM_EXT_CAP_EN;

/** \brief CCM[i] Hardware Configuration Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CCM_HW_CONF_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_CCM_HW_CONF;

/** \brief CCM[i] 2. Hardware Configuration Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CCM_HW_CONF2_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_CCM_HW_CONF2;

/** \brief CCM[i] Protection Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CCM_PROT_Bits B;           /**< \brief Bitfield access */
} Ifx_GTM_CLS_CCM_PROT;

/** \brief CCM[i] TIM AUX Input Source Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CCM_TIM_AUX_IN_SRC_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_CCM_TIM_AUX_IN_SRC;

/** \brief CCM[i] TOM Output Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CCM_TOM_OUT_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_CCM_TOM_OUT;

/** \brief CDTM[i]_DTM[d] channel control register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CDTM_DTM_CH_CTRL1_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_CDTM_DTM_CH_CTRL1;

/** \brief CDTM[i]_DTM[d] channel control register 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CDTM_DTM_CH_CTRL2_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_CDTM_DTM_CH_CTRL2;

/** \brief CDTM[i] DTM[j] channel control register 2 shadow   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CDTM_DTM_CH_CTRL2_SR_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_CDTM_DTM_CH_CTRL2_SR;

/** \brief CDTM[i]_DTM[d] channel control register 3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CDTM_DTM_CH_CTRL3_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_CDTM_DTM_CH_CTRL3;

/** \brief CDTM[i]_DTM[d] channel [x] dead-time reload values   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CDTM_DTM_CH_DTV_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_CDTM_DTM_CH_DTV;

/** \brief CDTM[i]_DTM[d] channel [x] dead-time shadow values   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CDTM_DTM_CH_DTV_SR_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_CDTM_DTM_CH_DTV_SR;

/** \brief CDTM[i]_DTM[d] channel shadow register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CDTM_DTM_CH_SR_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_CDTM_DTM_CH_SR;

/** \brief CDTM[i]_DTM[d] global configuration and control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CDTM_DTM_CTRL_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_CDTM_DTM_CTRL;

/** \brief CDTM[i]_DTM[d] global configuration and control register 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CDTM_DTM_CTRL2_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_CDTM_DTM_CTRL2;

/** \brief CDTM[i]_DTM[d] phase shift unit configuration and control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CDTM_DTM_PS_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_CDTM_DTM_PS_CTRL;

/** \brief CMP error interrupt enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CMP_EIRQ_EN_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_CMP_EIRQ_EN;

/** \brief CMP comparator enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CMP_EN_Bits B;             /**< \brief Bitfield access */
} Ifx_GTM_CLS_CMP_EN;

/** \brief CMP interrupt enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CMP_IRQ_EN_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_CMP_IRQ_EN;

/** \brief CMP interrupt force register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CMP_IRQ_FORCINT_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_CMP_IRQ_FORCINT;

/** \brief CMP interrupt mode configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CMP_IRQ_MODE_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_CMP_IRQ_MODE;

/** \brief CMP event notification register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CMP_IRQ_NOTIFY_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_CMP_IRQ_NOTIFY;

/** \brief CMU control for clock resolution generator [x]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CMU_CLKX_CTRL_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_CMU_CLKX_CTRL;

/** \brief CMU control for clock resolution generator 6   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CMU_CLK_6_CTRL_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_CMU_CLK_6_CTRL;

/** \brief CMU control for clock resolution generator 7   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CMU_CLK_7_CTRL_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_CMU_CLK_7_CTRL;

/** \brief CMU control for clock resolution generator   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CMU_CLK_CTRL_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_CMU_CLK_CTRL;

/** \brief CMU clock enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CMU_CLK_EN_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_CMU_CLK_EN;

/** \brief The denominator for the external clock resolution generator [z]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CMU_ECLK_DEN_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_CMU_ECLK_DEN;

/** \brief The numerator for the external clock resolution generator [z]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CMU_ECLK_NUM_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_CMU_ECLK_NUM;

/** \brief CMU control for selection of FCR subblock input   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CMU_FXCLK_CTRL_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_CMU_FXCLK_CTRL;

/** \brief The denominator for CMU global clock resolution generator   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CMU_GCLK_DEN_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_CMU_GCLK_DEN;

/** \brief The numerator for CMU global clock resolution generator   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CMU_GCLK_NUM_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_CMU_GCLK_NUM;

/** \brief CMU synchronizing ARU and clock source   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_CMU_GLB_CTRL_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_CMU_GLB_CTRL;

/** \brief DPLL_ACB_[n]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_ACB_Bits B;           /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_ACB;

/** \brief Action Status Register including Shadow Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_ACT_STA_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_ACT_STA;

/** \brief DPLL_ADD_IN_CAL1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_ADD_IN_CAL1_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_ADD_IN_CAL1;

/** \brief DPLL_ADD_IN_CAL2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_ADD_IN_CAL2_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_ADD_IN_CAL2;

/** \brief DPLL_ADD_IN_LD1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_ADD_IN_LD1_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_ADD_IN_LD1;

/** \brief DPLL_ADD_IN_LD2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_ADD_IN_LD2_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_ADD_IN_LD2;

/** \brief DPLL_ADT_S[p]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_ADT_S_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_ADT_S;

/** \brief Address Offset Register of RAM 2 Regions   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_AOSV_2_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_AOSV_2;

/** \brief DPLL_APS   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_APS_Bits B;           /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_APS;

/** \brief Actual RAM Pointer Address for RAM region 1c3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_APS_1C3_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_APS_1C3;

/** \brief DPLL_APS_1C3_EXT   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_APS_1C3_EXT_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_APS_1C3_EXT;

/** \brief DPLL_APS_EXT   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_APS_EXT_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_APS_EXT;

/** \brief DPLL_APS_SYNC   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_APS_SYNC_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_APS_SYNC;

/** \brief DPLL_APS_SYNC_EXT   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_APS_SYNC_EXT_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_APS_SYNC_EXT;

/** \brief DPLL_APT   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_APT_Bits B;           /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_APT;

/** \brief Actual RAM Pointer Address for Region 2c   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_APT_2C_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_APT_2C;

/** \brief DPLL_APT_SYNC   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_APT_SYNC_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_APT_SYNC;

/** \brief DPLL_CDT_SX   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_CDT_SX_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_CDT_SX;

/** \brief DPLL_CDT_SX_NOM   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_CDT_SX_NOM_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_CDT_SX_NOM;

/** \brief DPLL_CDT_TX   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_CDT_TX_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_CDT_TX;

/** \brief DPLL_CDT_TX_NOM   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_CDT_TX_NOM_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_CDT_TX_NOM;

/** \brief DPLL_CNT_NUM_1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_CNT_NUM_1_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_CNT_NUM_1;

/** \brief DPLL_CNT_NUM_2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_CNT_NUM_2_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_CNT_NUM_2;

/** \brief DPLL_CSN_MAX   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_CSN_MAX_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_CSN_MAX;

/** \brief DPLL_CSN_MIN   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_CSN_MIN_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_CSN_MIN;

/** \brief DPLL_CTN_MAX   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_CTN_MAX_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_CTN_MAX;

/** \brief DPLL_CTN_MIN   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_CTN_MIN_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_CTN_MIN;

/** \brief Control Register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_CTRL_0_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_CTRL_0;

/** \brief DPLL_CTRL_0_SHADOW_STATE   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_CTRL_0_SHADOW_STATE_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_CTRL_0_SHADOW_STATE;

/** \brief DPLL_CTRL_0_SHADOW_TRIGGER   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_CTRL_0_SHADOW_TRIGGER_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_CTRL_0_SHADOW_TRIGGER;

/** \brief Control Register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_CTRL_1_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_CTRL_1;

/** \brief Control Register 11   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_CTRL_11_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_CTRL_11;

/** \brief DPLL control register 12   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_CTRL_12_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_CTRL_12;

/** \brief DPLL_CTRL_1_SHADOW_STATE   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_CTRL_1_SHADOW_STATE_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_CTRL_1_SHADOW_STATE;

/** \brief DPLL_CTRL_1_SHADOW_TRIGGER   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_CTRL_1_SHADOW_TRIGGER_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_CTRL_1_SHADOW_TRIGGER;

/** \brief Action Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_CTRL_2_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_CTRL_2;

/** \brief Action Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_CTRL_3_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_CTRL_3;

/** \brief Action Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_CTRL_4_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_CTRL_4;

/** \brief Action Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_CTRL_5_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_CTRL_5;

/** \brief DPLL_CTRL_EXT   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_CTRL_EXT_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_CTRL_EXT;

/** \brief Time to React for Action [n]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_DLA_Bits B;           /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_DLA;

/** \brief Calculated Relative Time to Action [n]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_DTA_Bits B;           /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_DTA;

/** \brief DPLL_DT_S[p]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_DT_S_Bits B;          /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_DT_S;

/** \brief DPLL_DT_S_ACT   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_DT_S_ACT_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_DT_S_ACT;

/** \brief Start value of DT_S_ACT   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_DT_S_START_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_DT_S_START;

/** \brief DPLL_DT_T_ACT   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_DT_T_ACT_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_DT_T_ACT;

/** \brief Start value of DT_T_ACT   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_DT_T_START_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_DT_T_START;

/** \brief DPLL_EDT_S   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_EDT_S_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_EDT_S;

/** \brief DPLL_EDT_T   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_EDT_T_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_EDT_T;

/** \brief Error Interrupt Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_EIRQ_EN_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_EIRQ_EN;

/** \brief DPLL_FTV_S   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_FTV_S_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_FTV_S;

/** \brief DPLL_FTV_T   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_FTV_T_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_FTV_T;

/** \brief DPLL_ID_PMTR_[n]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_ID_PMTR_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_ID_PMTR;

/** \brief Start value of ADD_IN_ADDER1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_INCF1_OFFSET_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_INCF1_OFFSET;

/** \brief Start value of the ADD_IN_ADDER2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_INCF2_OFFSET_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_INCF2_OFFSET;

/** \brief DPLL_INC_CNT1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_INC_CNT1_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_INC_CNT1;

/** \brief DPLL_INC_CNT1_MASK   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_INC_CNT1_MASK_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_INC_CNT1_MASK;

/** \brief DPLL_INC_CNT2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_INC_CNT2_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_INC_CNT2;

/** \brief DPLL_INC_CNT2_MASK   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_INC_CNT2_MASK_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_INC_CNT2_MASK;

/** \brief Interrupt Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_IRQ_EN_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_IRQ_EN;

/** \brief Force Interrupt Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_IRQ_FORCINT_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_IRQ_FORCINT;

/** \brief Interrupt Request Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_IRQ_MODE_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_IRQ_MODE;

/** \brief Interrupt Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_IRQ_NOTIFY_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_IRQ_NOTIFY;

/** \brief DPLL_MEDT_S   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_MEDT_S_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_MEDT_S;

/** \brief DPLL_MEDT_T   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_MEDT_T_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_MEDT_T;

/** \brief DPLL_MLS1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_MLS1_Bits B;          /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_MLS1;

/** \brief DPLL_MLS2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_MLS2_Bits B;          /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_MLS2;

/** \brief Missing Pulses to be Added or Subtracted Directly   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_MPVAL1_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_MPVAL1;

/** \brief Missing Pulses to be Added or Subtracted Directly   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_MPVAL2_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_MPVAL2;

/** \brief DPLL_MP_S   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_MP_S_Bits B;          /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_MP_S;

/** \brief DPLL_MP_T   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_MP_T_Bits B;          /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_MP_T;

/** \brief Calculated Relative Time to Action [n]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_NA_Bits B;            /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_NA;

/** \brief Number of Pulses to be sent in Emergency Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_NMB_S_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_NMB_S;

/** \brief Target Number of Pulses to be sent in Emergency Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_NMB_S_TAR_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_NMB_S_TAR;

/** \brief Last but one Target Number of Pulses to be sent in Emergency Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_NMB_S_TAR_OLD_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_NMB_S_TAR_OLD;

/** \brief Number of Pulses to be sent in Normal Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_NMB_T_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_NMB_T;

/** \brief Target Number of Pulses to be sent in Normal Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_NMB_T_TAR_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_NMB_T_TAR;

/** \brief Last but one Target Number of Pulses to be sent in Normal Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_NMB_T_TAR_OLD_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_NMB_T_TAR_OLD;

/** \brief DPLL_NTI_CNT   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_NTI_CNT_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_NTI_CNT;

/** \brief DPLL_NUSC   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_NUSC_Bits B;          /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_NUSC;

/** \brief DPLL_NUSC_EXT1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_NUSC_EXT1_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_NUSC_EXT1;

/** \brief DPLL_NUSC_EXT2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_NUSC_EXT2_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_NUSC_EXT2;

/** \brief DPLL_NUTC   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_NUTC_Bits B;          /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_NUTC;

/** \brief Offset and Switch old/new Address Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_OSW_Bits B;           /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_OSW;

/** \brief Projected Increment Sum Relations for Action [n]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_PDT_Bits B;           /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_PDT;

/** \brief Position Request for Action [n]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_PSA_Bits B;           /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_PSA;

/** \brief Calculated Position Value to start Action [n]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_PSAC_Bits B;          /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_PSAC;

/** \brief DPLL_PSSC   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_PSSC_Bits B;          /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_PSSC;

/** \brief DPLL_PSSM   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_PSSM_Bits B;          /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_PSSM;

/** \brief DPLL_PSSM_OLD   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_PSSM_OLD_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_PSSM_OLD;

/** \brief DPLL_PSTC   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_PSTC_Bits B;          /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_PSTC;

/** \brief DPLL_PSTM   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_PSTM_Bits B;          /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_PSTM;

/** \brief DPLL_PSTM_OLD   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_PSTM_OLD_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_PSTM_OLD;

/** \brief DPLL_PVT   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_PVT_Bits B;           /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_PVT;

/** \brief DPLL RAM1B reserved  data   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_RAM1B_RSVD_0_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_RAM1B_RSVD_0;

/** \brief DPLL RAM1B reserved  data   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_RAM1B_RSVD_1_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_RAM1B_RSVD_1;

/** \brief DPLL RAM1B reserved  data   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_RAM1B_RSVD_2_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_RAM1B_RSVD_2;

/** \brief DPLL RAM1B reserved  data [k]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_RAM1B_RSVD_3_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_RAM1B_RSVD_3;

/** \brief DPLL RAM1B reserved  data [k]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_RAM1B_RSVD_4_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_RAM1B_RSVD_4;

/** \brief DPLL RAM1B reserved data [k]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_RAM1B_RSVD_5_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_RAM1B_RSVD_5;

/** \brief DPLL RAM1B reserved data [k]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_RAM1B_RSVD_6_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_RAM1B_RSVD_6;

/** \brief Register to control the RAM Initialization   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_RAM_INI_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_RAM_INI;

/** \brief DPLL_RCDT_SX   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_RCDT_SX_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_RCDT_SX;

/** \brief DPLL_RCDT_SX_NOM   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_RCDT_SX_NOM_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_RCDT_SX_NOM;

/** \brief DPLL_RCDT_TX   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_RCDT_TX_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_RCDT_TX;

/** \brief DPLL_RCDT_TX_NOM   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_RCDT_TX_NOM_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_RCDT_TX_NOM;

/** \brief DPLL_RDT_S[p]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_RDT_S_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_RDT_S;

/** \brief DPLL_RDT_S_ACT   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_RDT_S_ACT_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_RDT_S_ACT;

/** \brief DPLL_RDT_T_ACT   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_RDT_T_ACT_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_RDT_T_ACT;

/** \brief DPLL memory RR2 word [m]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_RR2_Bits B;           /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_RR2;

/** \brief DPLL_SIDEL   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_SIDEL_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_SIDEL;

/** \brief DPLL_SLR   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_SLR_Bits B;           /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_SLR;

/** \brief Status of the state machine states   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_STA_Bits B;           /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_STA;

/** \brief Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_STATUS_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_STATUS;

/** \brief DPLL_STA_FLAG   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_STA_FLAG_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_STA_FLAG;

/** \brief DPLL_STA_MASK   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_STA_MASK_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_STA_MASK;

/** \brief Software triggered input events   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_SW_TRIG_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_SW_TRIG;

/** \brief DPLL_TBU_TS0_S   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_TBU_TS0_S_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_TBU_TS0_S;

/** \brief DPLL_TBU_TS0_T   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_TBU_TS0_T_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_TBU_TS0_T;

/** \brief DPLL_THMA   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_THMA_Bits B;          /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_THMA;

/** \brief DPLL_THMI   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_THMI_Bits B;          /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_THMI;

/** \brief DPLL_THVAL   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_THVAL_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_THVAL;

/** \brief DPLL_THVAL2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_THVAL2_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_THVAL2;

/** \brief DPLL_TIDEL   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_TIDEL_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_TIDEL;

/** \brief DPLL_TLR   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_TLR_Bits B;           /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_TLR;

/** \brief DPLL_TOV   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_TOV_Bits B;           /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_TOV;

/** \brief DPLL_TOV_S   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_TOV_S_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_TOV_S;

/** \brief Calculated Time Value to start Action [n]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_TSAC_Bits B;          /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_TSAC;

/** \brief DPLL_TSF_S[p]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_TSF_S_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_TSF_S;

/** \brief DPLL_TS_S   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_TS_S_Bits B;          /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_TS_S;

/** \brief DPLL_TS_S_OLD   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_TS_S_OLD_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_TS_S_OLD;

/** \brief DPLL_TS_T   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_TS_T_Bits B;          /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_TS_T;

/** \brief DPLL_TS_T_OLD   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_DPLL_TS_T_OLD_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_DPLL_TS_T_OLD;

/** \brief FIFO data memory word [m]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_FIFO_MEMORY_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_FIFO_MEMORY;

/** \brief ICM_IRQG_0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ICM_IRQG_0_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_ICM_IRQG_0;

/** \brief ICM Interrupt group register covering DPLL   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ICM_IRQG_1_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_ICM_IRQG_1;

/** \brief ICM Interrupt group register covering TIM0, TIM1, TIM2, TIM3   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ICM_IRQG_2_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_ICM_IRQG_2;

/** \brief ICM Interrupt group register covering TIM4, TIM5, TIM6, TIM7   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ICM_IRQG_3_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_ICM_IRQG_3;

/** \brief ICM Interrupt group register covering MCS0 to MCS3 sub-modules   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ICM_IRQG_4_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_ICM_IRQG_4;

/** \brief ICM Interrupt group register covering MCS4 to MCS7 sub-modules   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ICM_IRQG_5_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_ICM_IRQG_5;

/** \brief ICM_IRQG_ATOM_[g]_CI   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ICM_IRQG_ATOM_CI_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ICM_IRQG_ATOM_CI;

/** \brief ICM Interrupt group register 0 for channel error interrupt information   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ICM_IRQG_CEI0_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_ICM_IRQG_CEI0;

/** \brief ICM Interrupt group register 1 for channel error interrupt information   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ICM_IRQG_CEI1_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_ICM_IRQG_CEI1;

/** \brief ICM Interrupt group register 2 for channel error interrupt information   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ICM_IRQG_CEI2_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_ICM_IRQG_CEI2;

/** \brief ICM Interrupt group register 3 for channel error interrupt information   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ICM_IRQG_CEI3_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_ICM_IRQG_CEI3;

/** \brief ICM Interrupt group register 4 for channel error interrupt information   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ICM_IRQG_CEI4_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_ICM_IRQG_CEI4;

/** \brief ICM_IRQG_CLS_[g]_MEI   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ICM_IRQG_CLS_MEI_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ICM_IRQG_CLS_MEI;

/** \brief ICM Interrupt group MCS[j] for Channel Error Interrupt information   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ICM_IRQG_MCS_CEI_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ICM_IRQG_MCS_CEI;

/** \brief ICM Interrupt group MCS[j] for Channel Interrupt information   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ICM_IRQG_MCS_CI_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ICM_IRQG_MCS_CI;

/** \brief ICM Interrupt group register for module error interrupt information   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ICM_IRQG_MEI_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_ICM_IRQG_MEI;

/** \brief ICM_IRQG_PSM_0_CEI   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ICM_IRQG_PSM_0_CEI_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ICM_IRQG_PSM_0_CEI;

/** \brief ICM_IRQG_PSM_0_CI   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ICM_IRQG_PSM_0_CI_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ICM_IRQG_PSM_0_CI;

/** \brief ICM Interrupt group SPE for module Error Interrupt information   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ICM_IRQG_SPE_CEI_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ICM_IRQG_SPE_CEI;

/** \brief ICM Interrupt group SPE for module Interrupt information   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ICM_IRQG_SPE_CI_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ICM_IRQG_SPE_CI;

/** \brief ICM_IRQG_TOM_[g]_CI   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_ICM_IRQG_TOM_CI_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_ICM_IRQG_TOM_CI;

/** \brief MAP Control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MAP_CTRL_Bits B;           /**< \brief Bitfield access */
} Ifx_GTM_CLS_MAP_CTRL;

/** \brief MCS[i] cancel ARU transfer instruction   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_CAT_Bits B;            /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_CAT;

/** \brief MCS[i] channel x ARU control Bit register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_CH_ACB_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_CH_ACB;

/** \brief MCS[i] channel x control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_CH_CTRL_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_CH_CTRL;

/** \brief MCS[i] channel x error interrupt enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_CH_EIRQ_EN_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_CH_EIRQ_EN;

/** \brief MCS[i] channel x interrupt enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_CH_IRQ_EN_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_CH_IRQ_EN;

/** \brief MCS[i] channel x force interrupt register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_CH_IRQ_FORCINT_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_CH_IRQ_FORCINT;

/** \brief MCS[i] channel x IRQ mode configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_CH_IRQ_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_CH_IRQ_MODE;

/** \brief MCS[i] channel x interrupt notification register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_CH_IRQ_NOTIFY_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_CH_IRQ_NOTIFY;

/** \brief MCS[i] channel x memory high byte register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_CH_MHB_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_CH_MHB;

/** \brief MCS[i] channel x program counter register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_CH_PC_Bits B;          /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_CH_PC;

/** \brief MCS[i] channel x general-purpose register [y]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_CH_R_Bits B;           /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_CH_R;

/** \brief MCS[i] clear trigger control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_CTRG_Bits B;           /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_CTRG;

/** \brief MCS[i] control and status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_CTRL_STAT_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_CTRL_STAT;

/** \brief MCS[i] cancel waiting instruction   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_CWT_Bits B;            /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_CWT;

/** \brief MCS[i] error register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_ERR_Bits B;            /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_ERR;

/** \brief MCS[i] hardware break point h control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_HBP_CTRL_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_HBP_CTRL;

/** \brief MCS[i] hardware break point interrupt enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_HBP_IRQ_EN_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_HBP_IRQ_EN;

/** \brief MCS[i] force hardware break point interrupt register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_HBP_IRQ_FORCINT_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_HBP_IRQ_FORCINT;

/** \brief MCS[i] break point h interrupt mode configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_HBP_IRQ_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_HBP_IRQ_MODE;

/** \brief MCS[i] hardware break point interrupt notification register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_HBP_IRQ_NOTIFY_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_HBP_IRQ_NOTIFY;

/** \brief MCS[i] hardware break point pattern register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_HBP_PATTERN_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_HBP_PATTERN;

/** \brief MCS[i] hardware break point status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_HBP_STATUS_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_HBP_STATUS;

/** \brief MCS[i] memory region word [m]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_MEM_Bits B;            /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_MEM;

/** \brief MCS[i] write-protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_REG_PROT_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_REG_PROT;

/** \brief MCS[i] reset register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_RESET_Bits B;          /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_RESET;

/** \brief MCS[i] shared interrupt enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_SINT_IRQ_EN_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_SINT_IRQ_EN;

/** \brief MCS[i] force shared interrupt register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_SINT_IRQ_FORCINT_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_SINT_IRQ_FORCINT;

/** \brief MCS[i] shared interrupt mode configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_SINT_IRQ_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_SINT_IRQ_MODE;

/** \brief MCS[i] shared interrupt notification register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_SINT_IRQ_NOTIFY_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_SINT_IRQ_NOTIFY;

/** \brief MCS[i] set trigger control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MCS_STRG_Bits B;           /**< \brief Bitfield access */
} Ifx_GTM_CLS_MCS_STRG;

/** \brief MON activity register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MON_ACTIVITY_0_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_MON_ACTIVITY_0;

/** \brief MON activity register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MON_ACTIVITY_1_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_MON_ACTIVITY_1;

/** \brief MON activity register for MCS [j]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MON_ACTIVITY_MCS_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_MON_ACTIVITY_MCS;

/** \brief MON status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_MON_STATUS_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_MON_STATUS;

/** \brief AFD [i] FIFO [x] buffer access register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_PSM_AFD_CH_BUF_ACC_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_PSM_AFD_CH_BUF_ACC;

/** \brief F2A[i] stream [x] ARU read register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_PSM_F2A_CH_ARU_RD_FIFO_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_PSM_F2A_CH_ARU_RD_FIFO;

/** \brief F2A[i] stream [x] configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_PSM_F2A_CH_STR_CFG_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_PSM_F2A_CH_STR_CFG;

/** \brief F2A[i] stream control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_PSM_F2A_CTRL_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_PSM_F2A_CTRL;

/** \brief F2A[i] stream activation register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_PSM_F2A_ENABLE_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_PSM_F2A_ENABLE;

/** \brief FIFO[i] channel [x] control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_PSM_FIFO_CH_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_PSM_FIFO_CH_CTRL;

/** \brief FIFO[i] channel [x] error interrupt enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_PSM_FIFO_CH_EIRQ_EN_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_PSM_FIFO_CH_EIRQ_EN;

/** \brief FIFO[i] channel [x] end address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_PSM_FIFO_CH_END_ADDR_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_PSM_FIFO_CH_END_ADDR;

/** \brief FIFO[i] channel [x] fill level register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_PSM_FIFO_CH_FILL_LEVEL_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_PSM_FIFO_CH_FILL_LEVEL;

/** \brief FIFO[i] channel [x] interrupt enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_PSM_FIFO_CH_IRQ_EN_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_PSM_FIFO_CH_IRQ_EN;

/** \brief FIFO[i] channel [x] force interrupt register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_PSM_FIFO_CH_IRQ_FORCINT_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_PSM_FIFO_CH_IRQ_FORCINT;

/** \brief FIFO[i] channel [x] interrupt mode control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_PSM_FIFO_CH_IRQ_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_PSM_FIFO_CH_IRQ_MODE;

/** \brief FIFO[i] channel [x] interrupt notification register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_PSM_FIFO_CH_IRQ_NOTIFY_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_PSM_FIFO_CH_IRQ_NOTIFY;

/** \brief FIFO[i] channel [x] lower watermark register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_PSM_FIFO_CH_LOWER_WM_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_PSM_FIFO_CH_LOWER_WM;

/** \brief FIFO[i] channel [x] read pointer register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_PSM_FIFO_CH_RD_PTR_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_PSM_FIFO_CH_RD_PTR;

/** \brief FIFO[i] channel [x] start address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_PSM_FIFO_CH_START_ADDR_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_PSM_FIFO_CH_START_ADDR;

/** \brief FIFO[i] channel [x] status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_PSM_FIFO_CH_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_PSM_FIFO_CH_STATUS;

/** \brief FIFO[i] channel [x] upper watermark register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_PSM_FIFO_CH_UPPER_WM_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_PSM_FIFO_CH_UPPER_WM;

/** \brief FIFO[i] channel [x] write pointer register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_PSM_FIFO_CH_WR_PTR_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_PSM_FIFO_CH_WR_PTR;

/** \brief SPE[i] Command Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_SPE_CMD_Bits B;            /**< \brief Bitfield access */
} Ifx_GTM_CLS_SPE_CMD;

/** \brief SPE[i] Control Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_SPE_CTRL_STAT_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_SPE_CTRL_STAT;

/** \brief SPE[i] Control Status Register 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_SPE_CTRL_STAT2_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_SPE_CTRL_STAT2;

/** \brief SPE[i] Error Interrupt Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_SPE_EIRQ_EN_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_SPE_EIRQ_EN;

/** \brief SPE[i] Interrupt Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_SPE_IRQ_EN_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_SPE_IRQ_EN;

/** \brief SPE[i] Interrupt Generation By Software   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_SPE_IRQ_FORCINT_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_SPE_IRQ_FORCINT;

/** \brief SPE[i] Interrupt Mode Configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_SPE_IRQ_MODE_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_SPE_IRQ_MODE;

/** \brief SPE[i] Interrupt Notification Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_SPE_IRQ_NOTIFY_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_SPE_IRQ_NOTIFY;

/** \brief SPE[i] Output Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_SPE_OUT_CTRL_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_SPE_OUT_CTRL;

/** \brief SPE[i] Output Definition Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_SPE_OUT_PAT_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_SPE_OUT_PAT;

/** \brief SPE[i] Input Pattern Definition Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_SPE_PAT_Bits B;            /**< \brief Bitfield access */
} Ifx_GTM_CLS_SPE_PAT;

/** \brief SPE[i] Revolution Counter Compare Value   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_SPE_REV_CMP_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_SPE_REV_CMP;

/** \brief SPE[i] Input Revolution Counter   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_SPE_REV_CNT_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_SPE_REV_CNT;

/** \brief TBU channel 0 base   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TBU_CH0_BASE_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_TBU_CH0_BASE;

/** \brief TBU channel 0 control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TBU_CH0_CTRL_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_TBU_CH0_CTRL;

/** \brief TBU channel 1 control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TBU_CH1_CTRL_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_TBU_CH1_CTRL;

/** \brief TBU channel 2 control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TBU_CH2_CTRL_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_TBU_CH2_CTRL;

/** \brief TBU channel 3 base   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TBU_CH3_BASE_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_TBU_CH3_BASE;

/** \brief TBU channel 3 base captured   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TBU_CH3_BASE_CAPTURE_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_TBU_CH3_BASE_CAPTURE;

/** \brief TBU channel 3 modulo value   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TBU_CH3_BASE_MARK_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_TBU_CH3_BASE_MARK;

/** \brief TBU channel 3 control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TBU_CH3_CTRL_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_TBU_CH3_CTRL;

/** \brief TBU global channel enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TBU_CHEN_Bits B;           /**< \brief Bitfield access */
} Ifx_GTM_CLS_TBU_CHEN;

/** \brief TBU channel [x] base   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TBU_CH_BASE_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_TBU_CH_BASE;

/** \brief TIM[i] channel [x] SMU counter register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TIM_CH_CNT_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_TIM_CH_CNT;

/** \brief TIM[i] channel [x] SMU shadow counter register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TIM_CH_CNTS_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_TIM_CH_CNTS;

/** \brief TIM[i] channel [x] control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TIM_CH_CTRL_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_TIM_CH_CTRL;

/** \brief TIM[i] channel [x] SMU edge counter register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TIM_CH_ECNT_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_TIM_CH_ECNT;

/** \brief TIM[i] channel [x] extended control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TIM_CH_ECTRL_Bits B;       /**< \brief Bitfield access */
} Ifx_GTM_CLS_TIM_CH_ECTRL;

/** \brief TIM[i] channel [x] error interrupt enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TIM_CH_EIRQ_EN_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_TIM_CH_EIRQ_EN;

/** \brief TIM[i] channel [x] filter parameter 1 register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TIM_CH_FLT_FE_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_TIM_CH_FLT_FE;

/** \brief TIM[i] channel [x] filter parameter 0 register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TIM_CH_FLT_RE_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_TIM_CH_FLT_RE;

/** \brief TIM[i] channel [x] general-purpose 0 register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TIM_CH_GPR0_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_TIM_CH_GPR0;

/** \brief TIM[i] channel [x] general-purpose 1 register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TIM_CH_GPR1_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_TIM_CH_GPR1;

/** \brief TIM[i] channel [x] interrupt enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TIM_CH_IRQ_EN_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_TIM_CH_IRQ_EN;

/** \brief TIM[i] channel [x] force interrupt register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TIM_CH_IRQ_FORCINT_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_TIM_CH_IRQ_FORCINT;

/** \brief TIM[i] channel [x] interrupt mode configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TIM_CH_IRQ_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_TIM_CH_IRQ_MODE;

/** \brief TIM[i] channel [x] interrupt notification register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TIM_CH_IRQ_NOTIFY_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_TIM_CH_IRQ_NOTIFY;

/** \brief TIM[i]_CH[x]_TDUC   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TIM_CH_TDUC_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_TIM_CH_TDUC;

/** \brief TIM[i]_CH[x]_TDUV   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TIM_CH_TDUV_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_TIM_CH_TDUV;

/** \brief TIM[i] input value observation register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TIM_INP_VAL_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_TIM_INP_VAL;

/** \brief TIM[i] AUX IN source selection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TIM_IN_SRC_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_TIM_IN_SRC;

/** \brief TIM[i] global software reset register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TIM_RST_Bits B;            /**< \brief Bitfield access */
} Ifx_GTM_CLS_TIM_RST;

/** \brief TOM[i] channel [x] CCU0 compare register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TOM_CH_CM0_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_TOM_CH_CM0;

/** \brief TOM[i] channel [x] CCU1 compare register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TOM_CH_CM1_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_TOM_CH_CM1;

/** \brief TOM[i] channel [x] CCU0 counter   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TOM_CH_CN0_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_TOM_CH_CN0;

/** \brief TOM[i] channel [x] control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TOM_CH_CTRL_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_TOM_CH_CTRL;

/** \brief TOM[i] channel [x] control shadow register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TOM_CH_CTRL_SR_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_TOM_CH_CTRL_SR;

/** \brief TOM[i] channel [x] interrupt enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TOM_CH_IRQ_EN_Bits B;      /**< \brief Bitfield access */
} Ifx_GTM_CLS_TOM_CH_IRQ_EN;

/** \brief TOM[i] channel [x] force interrupt register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TOM_CH_IRQ_FORCINT_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_TOM_CH_IRQ_FORCINT;

/** \brief TOM[i] channel [x] interrupt mode register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TOM_CH_IRQ_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_TOM_CH_IRQ_MODE;

/** \brief TOM[i] channel [x] interrupt notification register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TOM_CH_IRQ_NOTIFY_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_TOM_CH_IRQ_NOTIFY;

/** \brief TOM[i] channel [x] CCU0 compare shadow register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TOM_CH_SR0_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_TOM_CH_SR0;

/** \brief TOM[i] channel [x] CCU1 compare shadow register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TOM_CH_SR1_Bits B;         /**< \brief Bitfield access */
} Ifx_GTM_CLS_TOM_CH_SR1;

/** \brief TOM[i] channel [x] status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TOM_CH_STAT_Bits B;        /**< \brief Bitfield access */
} Ifx_GTM_CLS_TOM_CH_STAT;

/** \brief TOM[i] TGC [g] action time base register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TOM_TGC_ACT_TB_Bits B;     /**< \brief Bitfield access */
} Ifx_GTM_CLS_TOM_TGC_ACT_TB;

/** \brief TOM[i] TGC [g] enable/disable control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TOM_TGC_ENDIS_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_TOM_TGC_ENDIS_CTRL;

/** \brief TOM[i] TGC [g] enable/disable status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TOM_TGC_ENDIS_STAT_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_TOM_TGC_ENDIS_STAT;

/** \brief TOM[i] TGC [g] force update control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TOM_TGC_FUPD_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_TOM_TGC_FUPD_CTRL;

/** \brief TOM[i] TGC [g] global control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TOM_TGC_GLB_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_TOM_TGC_GLB_CTRL;

/** \brief TOM[i] TGC [g] internal trigger control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TOM_TGC_INT_TRIG_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_TOM_TGC_INT_TRIG;

/** \brief TOM[i] TGC [g] output enable control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TOM_TGC_OUTEN_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_TOM_TGC_OUTEN_CTRL;

/** \brief TOM[i] TGC [g] output enable status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_CLS_TOM_TGC_OUTEN_STAT_Bits B;    /**< \brief Bitfield access */
} Ifx_GTM_CLS_TOM_TGC_OUTEN_STAT;

/** \brief DPLL_ADT_T[p]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_DPLL_ADT_T_Bits B;             /**< \brief Bitfield access */
} Ifx_GTM_DPLL_ADT_T;

/** \brief DPLL_DT_T[p]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_DPLL_DT_T_Bits B;              /**< \brief Bitfield access */
} Ifx_GTM_DPLL_DT_T;

/** \brief DPLL_RDT_T[p]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_DPLL_RDT_T_Bits B;             /**< \brief Bitfield access */
} Ifx_GTM_DPLL_RDT_T;

/** \brief DPLL_TSF_T[p]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_DPLL_TSF_T_Bits B;             /**< \brief Bitfield access */
} Ifx_GTM_DPLL_TSF_T;

/** \brief Cluster 0 DTMAUX input 0 selection register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_DTMAUX_IN_Bits B;              /**< \brief Bitfield access */
} Ifx_GTM_DTMAUX_IN;

/** \brief FOUT Selection for Encoder Interface 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_FOUTENC_Bits B;                /**< \brief Bitfield access */
} Ifx_GTM_FOUTENC;

/** \brief GTM to LCDCDC output trigger selection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_LCDCDC_OUT_Bits B;             /**< \brief Bitfield access */
} Ifx_GTM_LCDCDC_OUT;

/** \brief GTM to MSC SET0 output selection register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_MSCSET_CON0_Bits B;            /**< \brief Bitfield access */
} Ifx_GTM_MSCSET_CON0;

/** \brief GTM to MSC SET0 output selection register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_MSCSET_CON1_Bits B;            /**< \brief Bitfield access */
} Ifx_GTM_MSCSET_CON1;

/** \brief GTM to MSC SET0 output selection register 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_MSCSET_CON2_Bits B;            /**< \brief Bitfield access */
} Ifx_GTM_MSCSET_CON2;

/** \brief GTM to MSC SET0 output selection register 3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_MSCSET_CON3_Bits B;            /**< \brief Bitfield access */
} Ifx_GTM_MSCSET_CON3;

/** \brief GTM to MSC0 input bus ALTINH signal selection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_MSC_INHCON_Bits B;             /**< \brief Bitfield access */
} Ifx_GTM_MSC_INHCON;

/** \brief GTM to MSC0 input bus ALTINHE signal selection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_MSC_INHECON_Bits B;            /**< \brief Bitfield access */
} Ifx_GTM_MSC_INHECON;

/** \brief GTM to MSC0 input bus ALTINL signal selection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_MSC_INLCON_Bits B;             /**< \brief Bitfield access */
} Ifx_GTM_MSC_INLCON;

/** \brief GTM to MSC0 input bus ALTINLE signal selection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_MSC_INLECON_Bits B;            /**< \brief Bitfield access */
} Ifx_GTM_MSC_INLECON;

/** \brief Hardware breakpoint enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_OCDS_HWBEN_Bits B;             /**< \brief Bitfield access */
} Ifx_GTM_OCDS_HWBEN;

/** \brief OCDS debug access register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_OCDS_ODA_Bits B;               /**< \brief Bitfield access */
} Ifx_GTM_OCDS_ODA;

/** \brief OCDS TBU0 trigger register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_OCDS_OTBU0T_Bits B;            /**< \brief Bitfield access */
} Ifx_GTM_OCDS_OTBU0T;

/** \brief OCDS TBU1 trigger register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_OCDS_OTBU1T_Bits B;            /**< \brief Bitfield access */
} Ifx_GTM_OCDS_OTBU1T;

/** \brief OCDS TBU2 trigger register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_OCDS_OTBU2T_Bits B;            /**< \brief Bitfield access */
} Ifx_GTM_OCDS_OTBU2T;

/** \brief OCDS TBU3 trigger register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_OCDS_OTBU3T_Bits B;            /**< \brief Bitfield access */
} Ifx_GTM_OCDS_OTBU3T;

/** \brief OCDS trigger set control 0 register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_OCDS_OTSC0_Bits B;             /**< \brief Bitfield access */
} Ifx_GTM_OCDS_OTSC0;

/** \brief OCDS trigger set control 1 register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_OCDS_OTSC1_Bits B;             /**< \brief Bitfield access */
} Ifx_GTM_OCDS_OTSC1;

/** \brief OCDS trigger set select register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_OCDS_OTSS_Bits B;              /**< \brief Bitfield access */
} Ifx_GTM_OCDS_OTSS;

/** \brief OCDS control and status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_OCS_Bits B;                    /**< \brief Bitfield access */
} Ifx_GTM_OCS;

/** \brief Resource Protection Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_PROT_Bits B;                   /**< \brief Bitfield access */
} Ifx_GTM_PROT;

/** \brief GTM to PSI5-S0 output trigger selection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_PSI5S_OUT_Bits B;              /**< \brief Bitfield access */
} Ifx_GTM_PSI5S_OUT;

/** \brief GTM to PSI5 output trigger selection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_PSI5_OUT_Bits B;               /**< \brief Bitfield access */
} Ifx_GTM_PSI5_OUT;

/** \brief GTM to QSPI0 output selection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_QSPI_OUT_Bits B;               /**< \brief Bitfield access */
} Ifx_GTM_QSPI_OUT;

/** \brief Reset control register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_RST_CTRLA_Bits B;              /**< \brief Bitfield access */
} Ifx_GTM_RST_CTRLA;

/** \brief Reset control register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_RST_CTRLB_Bits B;              /**< \brief Bitfield access */
} Ifx_GTM_RST_CTRLB;

/** \brief Reset status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_RST_STAT_Bits B;               /**< \brief Bitfield access */
} Ifx_GTM_RST_STAT;

/** \brief GTM to SENT0 trigger x output selection register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_SENT_OUTA_Bits B;              /**< \brief Bitfield access */
} Ifx_GTM_SENT_OUTA;

/** \brief GTM to SENT0 trigger x output selection register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_SENT_OUTB_Bits B;              /**< \brief Bitfield access */
} Ifx_GTM_SENT_OUTB;

/** \brief Spare Bits   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_SPARE_Bits B;                  /**< \brief Bitfield access */
} Ifx_GTM_SPARE;

/** \brief TIM0 input selection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_TIMINSEL_Bits B;               /**< \brief Bitfield access */
} Ifx_GTM_TIMINSEL;

/** \brief GTM to Ports signal TOUT output selection register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GTM_TOUTSEL_Bits B;                /**< \brief Bitfield access */
} Ifx_GTM_TOUTSEL;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_ARCH_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief ARCH object */
typedef volatile struct _Ifx_GTM_CLS_ARCH
{
       __I  Ifx_GTM_CLS_ARCH_REV                REV;                    /**< \brief 0, GTM version control register*/
       __IO Ifx_GTM_CLS_ARCH_RST                RST;                    /**< \brief 4, GTM global reset register*/
       __IO Ifx_GTM_CLS_ARCH_CTRL               CTRL;                   /**< \brief 8, GTM global control register*/
       __IO Ifx_GTM_CLS_ARCH_CFG                CFG;                    /**< \brief C, GTM configuration register*/
       __I  Ifx_GTM_CLS_ARCH_AEI_ADDR_XPT       AEI_ADDR_XPT;           /**< \brief 10, GTM_AEI_ADDR_XPT*/
       __I  Ifx_GTM_CLS_ARCH_AEI_STA_XPT        AEI_STA_XPT;            /**< \brief 14, GTM_AEI_STA_XPT*/
       __IO Ifx_GTM_CLS_ARCH_IRQ_NOTIFY         IRQ_NOTIFY;             /**< \brief 18, GTM Interrupt notification register*/
       __IO Ifx_GTM_CLS_ARCH_IRQ_EN             IRQ_EN;                 /**< \brief 1C, GTM interrupt enable register*/
       __IO Ifx_GTM_CLS_ARCH_EIRQ_EN            EIRQ_EN;                /**< \brief 20, GTM error interrupt enable register*/
       __IO Ifx_GTM_CLS_ARCH_IRQ_FORCINT        IRQ_FORCINT;            /**< \brief 24, GTM Software interrupt generation register*/
       __IO Ifx_GTM_CLS_ARCH_IRQ_MODE           IRQ_MODE;               /**< \brief 28, GTM top level interrupts mode selection*/
       __IO Ifx_GTM_CLS_ARCH_CLK_CFG            CLK_CFG;                /**< \brief 2C, GTM Cluster Clock Configuration*/
       __IO Ifx_GTM_CLS_ARCH_ARU_COM_DIS        ARU_COM_DIS;            /**< \brief 30, GTM ARU communication disable*/
} Ifx_GTM_CLS_ARCH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_AEI_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief AEI object */
typedef volatile struct _Ifx_GTM_CLS_AEI
{
       __IO Ifx_GTM_CLS_AEI_BRIDGE_MODE         BRIDGE_MODE;            /**< \brief 0, BRIDGE_MODE*/
       __I  Ifx_GTM_CLS_AEI_BRIDGE_PTR1         BRIDGE_PTR1;            /**< \brief 4, BRIDGE_PTR1*/
       __I  Ifx_GTM_CLS_AEI_BRIDGE_PTR2         BRIDGE_PTR2;            /**< \brief 8, BRIDGE_PTR2*/
       __IO Ifx_GTM_CLS_AEI_MCS_AEM_DIS         MCS_AEM_DIS;            /**< \brief C, GTM MCS master port disable register*/
} Ifx_GTM_CLS_AEI;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_CMU_CLK_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief CLK object */
typedef volatile struct _Ifx_GTM_CLS_CMU_CLK
{
       __IO Ifx_GTM_CLS_CMU_CLKX_CTRL           CTRL;                   /**< \brief 0, CMU control for clock resolution generator [x]*/
} Ifx_GTM_CLS_CMU_CLK;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_CMU_ECLK_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief ECLK object */
typedef volatile struct _Ifx_GTM_CLS_CMU_ECLK
{
       __IO Ifx_GTM_CLS_CMU_ECLK_NUM            NUM;                    /**< \brief 0, The numerator for the external clock resolution generator [z]*/
       __IO Ifx_GTM_CLS_CMU_ECLK_DEN            DEN;                    /**< \brief 4, The denominator for the external clock resolution generator [z]*/
} Ifx_GTM_CLS_CMU_ECLK;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_CMU_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief CMU object */
typedef volatile struct _Ifx_GTM_CLS_CMU
{
       __IO Ifx_GTM_CLS_CMU_CLK_EN              CLK_EN;                 /**< \brief 0, CMU clock enable*/
       __IO Ifx_GTM_CLS_CMU_GCLK_NUM            GCLK_NUM;               /**< \brief 4, The numerator for CMU global clock resolution generator*/
       __IO Ifx_GTM_CLS_CMU_GCLK_DEN            GCLK_DEN;               /**< \brief 8, The denominator for CMU global clock resolution generator*/
        __IO Ifx_GTM_CLS_CMU_CLK                 CLK0;                   /**< \brief C, */
        __IO Ifx_GTM_CLS_CMU_CLK                 CLK1;                   /**< \brief 10, */
        __IO Ifx_GTM_CLS_CMU_CLK                 CLK2;                   /**< \brief 14, */
        __IO Ifx_GTM_CLS_CMU_CLK                 CLK3;                   /**< \brief 18, */
        __IO Ifx_GTM_CLS_CMU_CLK                 CLK4;                   /**< \brief 1C, */
        __IO Ifx_GTM_CLS_CMU_CLK                 CLK5;                   /**< \brief 20, */
       __IO Ifx_GTM_CLS_CMU_CLK_6_CTRL          CLK_6_CTRL;             /**< \brief 24, CMU control for clock resolution generator 6*/
       __IO Ifx_GTM_CLS_CMU_CLK_7_CTRL          CLK_7_CTRL;             /**< \brief 28, CMU control for clock resolution generator 7*/
       __IO Ifx_GTM_CLS_CMU_ECLK                ECLK[3];                /**< \brief 2C, */
       __IO Ifx_GTM_CLS_CMU_FXCLK_CTRL          FXCLK_CTRL;             /**< \brief 44, CMU control for selection of FCR subblock input*/
       __IO Ifx_GTM_CLS_CMU_GLB_CTRL            GLB_CTRL;               /**< \brief 48, CMU synchronizing ARU and clock source*/
       __IO Ifx_GTM_CLS_CMU_CLK_CTRL            CLK_CTRL;               /**< \brief 4C, CMU control for clock resolution generator*/
} Ifx_GTM_CLS_CMU;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_TBU_CH_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief CH object */
typedef volatile struct _Ifx_GTM_CLS_TBU_CH
{
       __IO Ifx_GTM_CLS_TBU_CH_BASE             BASE;                   /**< \brief 0, TBU channel [x] base*/
} Ifx_GTM_CLS_TBU_CH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_TBU_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief TBU object */
typedef volatile struct _Ifx_GTM_CLS_TBU
{
       __IO Ifx_GTM_CLS_TBU_CHEN                CHEN;                   /**< \brief 0, TBU global channel enable*/
       __IO Ifx_GTM_CLS_TBU_CH0_CTRL            CH0_CTRL;               /**< \brief 4, TBU channel 0 control*/
       __IO Ifx_GTM_CLS_TBU_CH0_BASE            CH0_BASE;               /**< \brief 8, TBU channel 0 base*/
       __IO Ifx_GTM_CLS_TBU_CH1_CTRL            CH1_CTRL;               /**< \brief C, TBU channel 1 control*/
        __IO Ifx_GTM_CLS_TBU_CH                  CH1;                    /**< \brief 10, */
       __IO Ifx_GTM_CLS_TBU_CH2_CTRL            CH2_CTRL;               /**< \brief 14, TBU channel 2 control*/
        __IO Ifx_GTM_CLS_TBU_CH                  CH2;                    /**< \brief 18, */
       __IO Ifx_GTM_CLS_TBU_CH3_CTRL            CH3_CTRL;               /**< \brief 1C, TBU channel 3 control*/
       __IO Ifx_GTM_CLS_TBU_CH3_BASE            CH3_BASE;               /**< \brief 20, TBU channel 3 base*/
       __IO Ifx_GTM_CLS_TBU_CH3_BASE_MARK       CH3_BASE_MARK;          /**< \brief 24, TBU channel 3 modulo value*/
       __I  Ifx_GTM_CLS_TBU_CH3_BASE_CAPTURE    CH3_BASE_CAPTURE;       /**< \brief 28, TBU channel 3 base captured*/
} Ifx_GTM_CLS_TBU;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_ARU_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief ARU object */
typedef volatile struct _Ifx_GTM_CLS_ARU
{
       __IO Ifx_GTM_CLS_ARU_ACCESS              ACCESS;                 /**< \brief 0, ARU access register*/
       __IO Ifx_GTM_CLS_ARU_DATA_H              DATA_H;                 /**< \brief 4, ARU access register upper data word*/
       __IO Ifx_GTM_CLS_ARU_DATA_L              DATA_L;                 /**< \brief 8, ARU access register lower data word*/
       __IO Ifx_GTM_CLS_ARU_DBG_ACCESS0         DBG_ACCESS0;            /**< \brief C, ARU debug access channel 0*/
       __I  Ifx_GTM_CLS_ARU_DBG_DATA0_H         DBG_DATA0_H;            /**< \brief 10, ARU debug access 0 transfer register upper data word*/
       __I  Ifx_GTM_CLS_ARU_DBG_DATA0_L         DBG_DATA0_L;            /**< \brief 14, ARU debug access 0 transfer register lower data word*/
       __IO Ifx_GTM_CLS_ARU_DBG_ACCESS1         DBG_ACCESS1;            /**< \brief 18, ARU debug access channel 0*/
       __I  Ifx_GTM_CLS_ARU_DBG_DATA1_H         DBG_DATA1_H;            /**< \brief 1C, ARU debug access 1 transfer register upper data word*/
       __I  Ifx_GTM_CLS_ARU_DBG_DATA1_L         DBG_DATA1_L;            /**< \brief 20, ARU debug access 1 transfer register lower data word*/
       __IO Ifx_GTM_CLS_ARU_IRQ_NOTIFY          IRQ_NOTIFY;             /**< \brief 24, ARU interrupt notification register*/
       __IO Ifx_GTM_CLS_ARU_IRQ_EN              IRQ_EN;                 /**< \brief 28, ARU interrupt enable register*/
       __IO Ifx_GTM_CLS_ARU_IRQ_FORCINT         IRQ_FORCINT;            /**< \brief 2C, ARU force interrupt register*/
       __IO Ifx_GTM_CLS_ARU_IRQ_MODE            IRQ_MODE;               /**< \brief 30, ARU interrupt mode register*/
       __IO Ifx_GTM_CLS_ARU_CADDR_END           CADDR_END;              /**< \brief 34, ARU caddr counter end value*/
       __I  Ifx_UReg_8Bit                       reserved_38[4];         /**< \brief 38, \internal Reserved */
       __IO Ifx_GTM_CLS_ARU_CTRL                CTRL;                   /**< \brief 3C, ARU enable dynamic routing*/
       __IO Ifx_GTM_CLS_ARU_DYN_CTRL            DYN_CTRL[2];            /**< \brief 40, ARU [g] dynamic routing control register*/
       __IO Ifx_GTM_CLS_ARU_DYN_ROUTE_LOW       DYN_ROUTE_LOW[2];       /**< \brief 48, ARU [g] lower bits of DYN_ROUTE register*/
       __IO Ifx_GTM_CLS_ARU_DYN_ROUTE_HIGH      DYN_ROUTE_HIGH[2];      /**< \brief 50, ARU [g] higher bits of DYN_ROUTE register*/
       __IO Ifx_GTM_CLS_ARU_DYN_ROUTE_SR_LOW    DYN_ROUTE_SR_LOW[2];    /**< \brief 58, ARU [g] shadow register of DYN_ROUTE register lower bits*/
       __IO Ifx_GTM_CLS_ARU_DYN_ROUTE_SR_HIGH   DYN_ROUTE_SR_HIGH[2];    /**< \brief 60, ARU [g] shadow register of DYN_ROUTE register higher bits*/
       __IO Ifx_GTM_CLS_ARU_DYN_RDADDR          DYN_RDADDR[2];          /**< \brief 68, ARU [g] master ID for dynamic routing*/
       __I  Ifx_UReg_8Bit                       reserved_70[12];        /**< \brief 70, \internal Reserved */
       __I  Ifx_GTM_CLS_ARU_CADDR               CADDR;                  /**< \brief 7C, ARU caddr counter value*/
} Ifx_GTM_CLS_ARU;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_BRC_SRC_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief SRC object */
typedef volatile struct _Ifx_GTM_CLS_BRC_SRC
{
       __IO Ifx_GTM_CLS_BRC_SRC_ADDR            ADDR;                   /**< \brief 0, BRC read address for input channel [x]*/
       __IO Ifx_GTM_CLS_BRC_SRC_DEST            DEST;                   /**< \brief 4, BRC destination channels for input channel [x]*/
} Ifx_GTM_CLS_BRC_SRC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_BRC_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief BRC object */
typedef volatile struct _Ifx_GTM_CLS_BRC
{
       __IO Ifx_GTM_CLS_BRC_SRC                 SRC[12];                /**< \brief 0, */
       __IO Ifx_GTM_CLS_BRC_IRQ_NOTIFY          IRQ_NOTIFY;             /**< \brief 60, BRC interrupt notification register*/
       __IO Ifx_GTM_CLS_BRC_IRQ_EN              IRQ_EN;                 /**< \brief 64, BRC interrupt enable register*/
       __IO Ifx_GTM_CLS_BRC_IRQ_FORCINT         IRQ_FORCINT;            /**< \brief 68, BRC force interrupt register*/
       __IO Ifx_GTM_CLS_BRC_IRQ_MODE            IRQ_MODE;               /**< \brief 6C, BRC interrupt mode configuration register*/
       __IO Ifx_GTM_CLS_BRC_RST                 RST;                    /**< \brief 70, BRC software reset register*/
       __IO Ifx_GTM_CLS_BRC_EIRQ_EN             EIRQ_EN;                /**< \brief 74, BRC error interrupt enable register*/
} Ifx_GTM_CLS_BRC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_ICM_IRQG_CLS_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief IRQG_CLS object */
typedef volatile struct _Ifx_GTM_CLS_ICM_IRQG_CLS
{
       __I  Ifx_GTM_CLS_ICM_IRQG_CLS_MEI        MEI;                    /**< \brief 0, ICM_IRQG_CLS_[g]_MEI*/
} Ifx_GTM_CLS_ICM_IRQG_CLS;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_ICM_IRQG_ATOM_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief IRQG_ATOM object */
typedef volatile struct _Ifx_GTM_CLS_ICM_IRQG_ATOM
{
       __I  Ifx_GTM_CLS_ICM_IRQG_ATOM_CI        CI;                     /**< \brief 0, ICM_IRQG_ATOM_[g]_CI*/
} Ifx_GTM_CLS_ICM_IRQG_ATOM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_ICM_IRQG_TOM_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief IRQG_TOM object */
typedef volatile struct _Ifx_GTM_CLS_ICM_IRQG_TOM
{
       __I  Ifx_GTM_CLS_ICM_IRQG_TOM_CI         CI;                     /**< \brief 0, ICM_IRQG_TOM_[g]_CI*/
} Ifx_GTM_CLS_ICM_IRQG_TOM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_ICM_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief ICM object */
typedef volatile struct _Ifx_GTM_CLS_ICM
{
       __I  Ifx_GTM_CLS_ICM_IRQG_0              IRQG_0;                 /**< \brief 0, ICM_IRQG_0*/
       __I  Ifx_GTM_CLS_ICM_IRQG_1              IRQG_1;                 /**< \brief 4, ICM Interrupt group register covering DPLL*/
       __I  Ifx_GTM_CLS_ICM_IRQG_2              IRQG_2;                 /**< \brief 8, ICM Interrupt group register covering TIM0, TIM1, TIM2, TIM3*/
       __I  Ifx_GTM_CLS_ICM_IRQG_3              IRQG_3;                 /**< \brief C, ICM Interrupt group register covering TIM4, TIM5, TIM6, TIM7*/
       __I  Ifx_GTM_CLS_ICM_IRQG_4              IRQG_4;                 /**< \brief 10, ICM Interrupt group register covering MCS0 to MCS3 sub-modules*/
       __I  Ifx_GTM_CLS_ICM_IRQG_5              IRQG_5;                 /**< \brief 14, ICM Interrupt group register covering MCS4 to MCS7 sub-modules*/
       __I  Ifx_UReg_8Bit                       reserved_18[24];        /**< \brief 18, \internal Reserved */
       __I  Ifx_GTM_CLS_ICM_IRQG_MEI            IRQG_MEI;               /**< \brief 30, ICM Interrupt group register for module error interrupt information*/
       __I  Ifx_GTM_CLS_ICM_IRQG_CEI0           IRQG_CEI0;              /**< \brief 34, ICM Interrupt group register 0 for channel error interrupt information*/
       __I  Ifx_GTM_CLS_ICM_IRQG_CEI1           IRQG_CEI1;              /**< \brief 38, ICM Interrupt group register 1 for channel error interrupt information*/
       __I  Ifx_GTM_CLS_ICM_IRQG_CEI2           IRQG_CEI2;              /**< \brief 3C, ICM Interrupt group register 2 for channel error interrupt information*/
       __I  Ifx_GTM_CLS_ICM_IRQG_CEI3           IRQG_CEI3;              /**< \brief 40, ICM Interrupt group register 3 for channel error interrupt information*/
       __I  Ifx_GTM_CLS_ICM_IRQG_CEI4           IRQG_CEI4;              /**< \brief 44, ICM Interrupt group register 4 for channel error interrupt information*/
       __I  Ifx_UReg_8Bit                       reserved_48[28];        /**< \brief 48, \internal Reserved */
       __I  Ifx_GTM_CLS_ICM_IRQG_MCS_CEI        IRQG_MCS_CEI[10];       /**< \brief 64, ICM Interrupt group MCS[j] for Channel Error Interrupt information*/
       __I  Ifx_UReg_8Bit                       reserved_8C[24];        /**< \brief 8C, \internal Reserved */
       __I  Ifx_GTM_CLS_ICM_IRQG_PSM_0_CEI      IRQG_PSM_0_CEI;         /**< \brief A4, ICM_IRQG_PSM_0_CEI*/
       __I  Ifx_UReg_8Bit                       reserved_A8[12];        /**< \brief A8, \internal Reserved */
       __I  Ifx_GTM_CLS_ICM_IRQG_SPE_CEI        IRQG_SPE_CEI;           /**< \brief B4, ICM Interrupt group SPE for module Error Interrupt information*/
       __I  Ifx_UReg_8Bit                       reserved_B8[88];        /**< \brief B8, \internal Reserved */
       __IO Ifx_GTM_CLS_ICM_IRQG_CLS            IRQG_CLS[3];            /**< \brief 110, */
       __I  Ifx_UReg_8Bit                       reserved_11C[4];        /**< \brief 11C, \internal Reserved */
       __I  Ifx_GTM_CLS_ICM_IRQG_MCS_CI         IRQG_MCS_CI[10];        /**< \brief 120, ICM Interrupt group MCS[j] for Channel Interrupt information*/
       __I  Ifx_UReg_8Bit                       reserved_148[24];       /**< \brief 148, \internal Reserved */
       __I  Ifx_GTM_CLS_ICM_IRQG_PSM_0_CI       IRQG_PSM_0_CI;          /**< \brief 160, ICM_IRQG_PSM_0_CI*/
       __I  Ifx_UReg_8Bit                       reserved_164[12];       /**< \brief 164, \internal Reserved */
       __I  Ifx_GTM_CLS_ICM_IRQG_SPE_CI         IRQG_SPE_CI;            /**< \brief 170, ICM Interrupt group SPE for module Interrupt information*/
       __I  Ifx_UReg_8Bit                       reserved_174[28];       /**< \brief 174, \internal Reserved */
       __IO Ifx_GTM_CLS_ICM_IRQG_ATOM           IRQG_ATOM[3];           /**< \brief 190, */
       __I  Ifx_UReg_8Bit                       reserved_19C[4];        /**< \brief 19C, \internal Reserved */
       __IO Ifx_GTM_CLS_ICM_IRQG_TOM            IRQG_TOM[3];            /**< \brief 1A0, */
       __I  Ifx_UReg_8Bit                       reserved_1AC[12];       /**< \brief 1AC, \internal Reserved */
} Ifx_GTM_CLS_ICM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_MAP_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MAP object */
typedef volatile struct _Ifx_GTM_CLS_MAP
{
       __IO Ifx_GTM_CLS_MAP_CTRL                CTRL;                   /**< \brief 0, MAP Control register*/
} Ifx_GTM_CLS_MAP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_MON_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MON object */
typedef volatile struct _Ifx_GTM_CLS_MON
{
       __IO Ifx_GTM_CLS_MON_STATUS              STATUS;                 /**< \brief 0, MON status register*/
       __IO Ifx_GTM_CLS_MON_ACTIVITY_0          ACTIVITY_0;             /**< \brief 4, MON activity register 0*/
       __IO Ifx_GTM_CLS_MON_ACTIVITY_1          ACTIVITY_1;             /**< \brief 8, MON activity register 1*/
       __IO Ifx_GTM_CLS_MON_ACTIVITY_MCS        ACTIVITY_MCS[10];       /**< \brief C, MON activity register for MCS [j]*/
} Ifx_GTM_CLS_MON;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_CMP_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief CMP object */
typedef volatile struct _Ifx_GTM_CLS_CMP
{
       __IO Ifx_GTM_CLS_CMP_EN                  EN;                     /**< \brief 0, CMP comparator enable register*/
       __IO Ifx_GTM_CLS_CMP_IRQ_NOTIFY          IRQ_NOTIFY;             /**< \brief 4, CMP event notification register*/
       __IO Ifx_GTM_CLS_CMP_IRQ_EN              IRQ_EN;                 /**< \brief 8, CMP interrupt enable register*/
       __IO Ifx_GTM_CLS_CMP_IRQ_FORCINT         IRQ_FORCINT;            /**< \brief C, CMP interrupt force register*/
       __IO Ifx_GTM_CLS_CMP_IRQ_MODE            IRQ_MODE;               /**< \brief 10, CMP interrupt mode configuration register*/
       __IO Ifx_GTM_CLS_CMP_EIRQ_EN             EIRQ_EN;                /**< \brief 14, CMP error interrupt enable register*/
} Ifx_GTM_CLS_CMP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_TIM_CH_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief CH object */
typedef volatile struct _Ifx_GTM_CLS_TIM_CH
{
       __IO Ifx_GTM_CLS_TIM_CH_GPR0             GPR0;                   /**< \brief 0, TIM[i] channel [x] general-purpose 0 register*/
       __IO Ifx_GTM_CLS_TIM_CH_GPR1             GPR1;                   /**< \brief 4, TIM[i] channel [x] general-purpose 1 register*/
       __I  Ifx_GTM_CLS_TIM_CH_CNT              CNT;                    /**< \brief 8, TIM[i] channel [x] SMU counter register*/
       __I  Ifx_GTM_CLS_TIM_CH_ECNT             ECNT;                   /**< \brief C, TIM[i] channel [x] SMU edge counter register*/
       __IO Ifx_GTM_CLS_TIM_CH_CNTS             CNTS;                   /**< \brief 10, TIM[i] channel [x] SMU shadow counter register*/
       __IO Ifx_GTM_CLS_TIM_CH_TDUC             TDUC;                   /**< \brief 14, TIM[i]_CH[x]_TDUC*/
       __IO Ifx_GTM_CLS_TIM_CH_TDUV             TDUV;                   /**< \brief 18, TIM[i]_CH[x]_TDUV*/
       __IO Ifx_GTM_CLS_TIM_CH_FLT_RE           FLT_RE;                 /**< \brief 1C, TIM[i] channel [x] filter parameter 0 register*/
       __IO Ifx_GTM_CLS_TIM_CH_FLT_FE           FLT_FE;                 /**< \brief 20, TIM[i] channel [x] filter parameter 1 register*/
       __IO Ifx_GTM_CLS_TIM_CH_CTRL             CTRL;                   /**< \brief 24, TIM[i] channel [x] control register*/
       __IO Ifx_GTM_CLS_TIM_CH_ECTRL            ECTRL;                  /**< \brief 28, TIM[i] channel [x] extended control register*/
       __IO Ifx_GTM_CLS_TIM_CH_IRQ_NOTIFY       IRQ_NOTIFY;             /**< \brief 2C, TIM[i] channel [x] interrupt notification register*/
       __IO Ifx_GTM_CLS_TIM_CH_IRQ_EN           IRQ_EN;                 /**< \brief 30, TIM[i] channel [x] interrupt enable register*/
       __IO Ifx_GTM_CLS_TIM_CH_IRQ_FORCINT      IRQ_FORCINT;            /**< \brief 34, TIM[i] channel [x] force interrupt register*/
       __IO Ifx_GTM_CLS_TIM_CH_IRQ_MODE         IRQ_MODE;               /**< \brief 38, TIM[i] channel [x] interrupt mode configuration register*/
       __IO Ifx_GTM_CLS_TIM_CH_EIRQ_EN          EIRQ_EN;                /**< \brief 3C, TIM[i] channel [x] error interrupt enable register*/
       __I  Ifx_UReg_8Bit                       reserved_40[64];        /**< \brief 40, \internal Reserved */
} Ifx_GTM_CLS_TIM_CH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_TIM_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief TIM object */
typedef volatile struct _Ifx_GTM_CLS_TIM
{
       __IO Ifx_GTM_CLS_TIM_CH                  CH[8];                  /**< \brief 0, */
       __I  Ifx_GTM_CLS_TIM_INP_VAL             INP_VAL;                /**< \brief 400, TIM[i] input value observation register*/
       __IO Ifx_GTM_CLS_TIM_IN_SRC              IN_SRC;                 /**< \brief 404, TIM[i] AUX IN source selection register*/
       __IO Ifx_GTM_CLS_TIM_RST                 RST;                    /**< \brief 408, TIM[i] global software reset register*/
} Ifx_GTM_CLS_TIM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_TOM_CH_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief CH object */
typedef volatile struct _Ifx_GTM_CLS_TOM_CH
{
       __IO Ifx_GTM_CLS_TOM_CH_CTRL             CTRL;                   /**< \brief 0, TOM[i] channel [x] control register*/
       __IO Ifx_GTM_CLS_TOM_CH_SR0              SR0;                    /**< \brief 4, TOM[i] channel [x] CCU0 compare shadow register*/
       __IO Ifx_GTM_CLS_TOM_CH_SR1              SR1;                    /**< \brief 8, TOM[i] channel [x] CCU1 compare shadow register*/
       __IO Ifx_GTM_CLS_TOM_CH_CM0              CM0;                    /**< \brief C, TOM[i] channel [x] CCU0 compare register*/
       __IO Ifx_GTM_CLS_TOM_CH_CM1              CM1;                    /**< \brief 10, TOM[i] channel [x] CCU1 compare register*/
       __IO Ifx_GTM_CLS_TOM_CH_CN0              CN0;                    /**< \brief 14, TOM[i] channel [x] CCU0 counter*/
       __IO Ifx_GTM_CLS_TOM_CH_STAT             STAT;                   /**< \brief 18, TOM[i] channel [x] status register*/
       __IO Ifx_GTM_CLS_TOM_CH_IRQ_NOTIFY       IRQ_NOTIFY;             /**< \brief 1C, TOM[i] channel [x] interrupt notification register*/
       __IO Ifx_GTM_CLS_TOM_CH_IRQ_EN           IRQ_EN;                 /**< \brief 20, TOM[i] channel [x] interrupt enable register*/
       __IO Ifx_GTM_CLS_TOM_CH_IRQ_FORCINT      IRQ_FORCINT;            /**< \brief 24, TOM[i] channel [x] force interrupt register*/
       __IO Ifx_GTM_CLS_TOM_CH_IRQ_MODE         IRQ_MODE;               /**< \brief 28, TOM[i] channel [x] interrupt mode register*/
       __I  Ifx_UReg_8Bit                       reserved_2C[4];         /**< \brief 2C, \internal Reserved */
       __IO Ifx_GTM_CLS_TOM_CH_CTRL_SR          CTRL_SR;                /**< \brief 30, TOM[i] channel [x] control shadow register*/
       __I  Ifx_UReg_8Bit                       reserved_34[12];        /**< \brief 34, \internal Reserved */
} Ifx_GTM_CLS_TOM_CH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_TOM_TGC_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief TGC object */
typedef volatile struct _Ifx_GTM_CLS_TOM_TGC
{
       __IO Ifx_GTM_CLS_TOM_TGC_GLB_CTRL        GLB_CTRL;               /**< \brief 0, TOM[i] TGC [g] global control register*/
       __IO Ifx_GTM_CLS_TOM_TGC_ACT_TB          ACT_TB;                 /**< \brief 4, TOM[i] TGC [g] action time base register*/
       __IO Ifx_GTM_CLS_TOM_TGC_FUPD_CTRL       FUPD_CTRL;              /**< \brief 8, TOM[i] TGC [g] force update control register*/
       __IO Ifx_GTM_CLS_TOM_TGC_INT_TRIG        INT_TRIG;               /**< \brief C, TOM[i] TGC [g] internal trigger control register*/
       __I  Ifx_UReg_8Bit                       reserved_10[48];        /**< \brief 10, \internal Reserved */
       __IO Ifx_GTM_CLS_TOM_TGC_ENDIS_CTRL      ENDIS_CTRL;             /**< \brief 40, TOM[i] TGC [g] enable/disable control register*/
       __IO Ifx_GTM_CLS_TOM_TGC_ENDIS_STAT      ENDIS_STAT;             /**< \brief 44, TOM[i] TGC [g] enable/disable status register*/
       __IO Ifx_GTM_CLS_TOM_TGC_OUTEN_CTRL      OUTEN_CTRL;             /**< \brief 48, TOM[i] TGC [g] output enable control register*/
       __IO Ifx_GTM_CLS_TOM_TGC_OUTEN_STAT      OUTEN_STAT;             /**< \brief 4C, TOM[i] TGC [g] output enable status register*/
       __I  Ifx_UReg_8Bit                       reserved_50[48];        /**< \brief 50, \internal Reserved */
} Ifx_GTM_CLS_TOM_TGC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_TOM_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief TOM object */
typedef volatile struct _Ifx_GTM_CLS_TOM
{
       __IO Ifx_GTM_CLS_TOM_CH                  CH[16];                 /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_400[48];       /**< \brief 400, \internal Reserved */
       __IO Ifx_GTM_CLS_TOM_TGC                 TGC[2];                 /**< \brief 430, */
} Ifx_GTM_CLS_TOM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_ATOM_CH_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief CH object */
typedef volatile struct _Ifx_GTM_CLS_ATOM_CH
{
       __IO Ifx_GTM_CLS_ATOM_CH_RDADDR          RDADDR;                 /**< \brief 0, ATOM[i] channel[x] ARU read address register*/
       union
       {
            __IO Ifx_GTM_CLS_ATOM_CH_CTRL_SOMI       CTRL_SOMI;              /**< \brief 4, ATOM[i] channel [x] control register*/
            __IO Ifx_GTM_CLS_ATOM_CH_CTRL_SOMC       CTRL_SOMC;              /**< \brief 4, ATOM[i] channel [x] control register*/
            __IO Ifx_GTM_CLS_ATOM_CH_CTRL_SOMP       CTRL_SOMP;              /**< \brief 4, ATOM[i] channel [x] control register*/
            __IO Ifx_GTM_CLS_ATOM_CH_CTRL_SOMS       CTRL_SOMS;              /**< \brief 4, ATOM[i] channel [x] control register*/
            __IO Ifx_GTM_CLS_ATOM_CH_CTRL_SOMB       CTRL_SOMB;              /**< \brief 4, ATOM[i] channel [x] control register*/
            __IO Ifx_GTM_CLS_ATOM_CH_CTRL            CTRL;                   /**< \brief 4, ATOM[i] channel [x] control register*/
       };
       __IO Ifx_GTM_CLS_ATOM_CH_SR0             SR0;                    /**< \brief 8, ATOM[i] channel [x] CCU0 compare shadow register*/
       __IO Ifx_GTM_CLS_ATOM_CH_SR1             SR1;                    /**< \brief C, ATOM[i] channel [x] CCU1 compare shadow register*/
       __IO Ifx_GTM_CLS_ATOM_CH_CM0             CM0;                    /**< \brief 10, ATOM[i] channel [x] CCU0 compare register*/
       __IO Ifx_GTM_CLS_ATOM_CH_CM1             CM1;                    /**< \brief 14, ATOM[i] channel [x] CCU1 compare register*/
       __IO Ifx_GTM_CLS_ATOM_CH_CN0             CN0;                    /**< \brief 18, ATOM[i] channel [x] CCU0 counter register*/
       __IO Ifx_GTM_CLS_ATOM_CH_STAT            STAT;                   /**< \brief 1C, ATOM[i] channel [x] status register*/
       __IO Ifx_GTM_CLS_ATOM_CH_IRQ_NOTIFY      IRQ_NOTIFY;             /**< \brief 20, ATOM[i] channel [x] interrupt notification register*/
       __IO Ifx_GTM_CLS_ATOM_CH_IRQ_EN          IRQ_EN;                 /**< \brief 24, ATOM[i] channel [x] interrupt enable register*/
       __IO Ifx_GTM_CLS_ATOM_CH_IRQ_FORCINT     IRQ_FORCINT;            /**< \brief 28, ATOM[i] channel [x] software interrupt generation*/
       __IO Ifx_GTM_CLS_ATOM_CH_IRQ_MODE        IRQ_MODE;               /**< \brief 2C, ATOM[i] channel [x] interrupt mode configuration register*/
       __I  Ifx_UReg_8Bit                       reserved_30[4];         /**< \brief 30, \internal Reserved */
       __IO Ifx_GTM_CLS_ATOM_CH_CTRL_SR         CTRL_SR;                /**< \brief 34, ATOM[i] channel [x] control shadow register*/
       __I  Ifx_UReg_8Bit                       reserved_38[72];        /**< \brief 38, \internal Reserved */
} Ifx_GTM_CLS_ATOM_CH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_ATOM_AGC_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief AGC object */
typedef volatile struct _Ifx_GTM_CLS_ATOM_AGC
{
       __IO Ifx_GTM_CLS_ATOM_AGC_GLB_CTRL       GLB_CTRL;               /**< \brief 0, ATOM[i] AGC global control register*/
       __IO Ifx_GTM_CLS_ATOM_AGC_ENDIS_CTRL     ENDIS_CTRL;             /**< \brief 4, ATOM[i] AGC enable/disable control register*/
       __IO Ifx_GTM_CLS_ATOM_AGC_ENDIS_STAT     ENDIS_STAT;             /**< \brief 8, ATOM[i] AGC enable/disable status register*/
       __IO Ifx_GTM_CLS_ATOM_AGC_ACT_TB         ACT_TB;                 /**< \brief C, ATOM[i] AGC action time base register*/
       __IO Ifx_GTM_CLS_ATOM_AGC_OUTEN_CTRL     OUTEN_CTRL;             /**< \brief 10, ATOM[i] AGC output enable control register*/
       __IO Ifx_GTM_CLS_ATOM_AGC_OUTEN_STAT     OUTEN_STAT;             /**< \brief 14, ATOM[i] AGC output enable status register*/
       __IO Ifx_GTM_CLS_ATOM_AGC_FUPD_CTRL      FUPD_CTRL;              /**< \brief 18, ATOM[i] AGC force update control register*/
       __IO Ifx_GTM_CLS_ATOM_AGC_INT_TRIG       INT_TRIG;               /**< \brief 1C, ATOM[i] AGC internal trigger control register*/
} Ifx_GTM_CLS_ATOM_AGC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_ATOM_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief ATOM object */
typedef volatile struct _Ifx_GTM_CLS_ATOM
{
       __IO Ifx_GTM_CLS_ATOM_CH                 CH[8];                  /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_400[64];       /**< \brief 400, \internal Reserved */
       __IO Ifx_GTM_CLS_ATOM_AGC                AGC;                    /**< \brief 440, */
} Ifx_GTM_CLS_ATOM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_MCS_CH_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief CH object */
typedef volatile struct _Ifx_GTM_CLS_MCS_CH
{
       __IO Ifx_GTM_CLS_MCS_CH_R                R0;                     /**< \brief 0, MCS[i] channel x general-purpose register [y]*/
       __IO Ifx_GTM_CLS_MCS_CH_R                R1;                     /**< \brief 4, MCS[i] channel x general-purpose register [y]*/
       __IO Ifx_GTM_CLS_MCS_CH_R                R2;                     /**< \brief 8, MCS[i] channel x general-purpose register [y]*/
       __IO Ifx_GTM_CLS_MCS_CH_R                R3;                     /**< \brief C, MCS[i] channel x general-purpose register [y]*/
       __IO Ifx_GTM_CLS_MCS_CH_R                R4;                     /**< \brief 10, MCS[i] channel x general-purpose register [y]*/
       __IO Ifx_GTM_CLS_MCS_CH_R                R5;                     /**< \brief 14, MCS[i] channel x general-purpose register [y]*/
       __IO Ifx_GTM_CLS_MCS_CH_R                R6;                     /**< \brief 18, MCS[i] channel x general-purpose register [y]*/
       __IO Ifx_GTM_CLS_MCS_CH_R                R7;                     /**< \brief 1C, MCS[i] channel x general-purpose register [y]*/
       __IO Ifx_GTM_CLS_MCS_CH_CTRL             CTRL;                   /**< \brief 20, MCS[i] channel x control register*/
       __I  Ifx_GTM_CLS_MCS_CH_ACB              ACB;                    /**< \brief 24, MCS[i] channel x ARU control Bit register*/
       __I  Ifx_UReg_8Bit                       reserved_28[20];        /**< \brief 28, \internal Reserved */
       __I  Ifx_GTM_CLS_MCS_CH_MHB              MHB;                    /**< \brief 3C, MCS[i] channel x memory high byte register*/
       __I  Ifx_UReg_8Bit                       reserved_40[160];       /**< \brief 40, \internal Reserved */
       __IO Ifx_GTM_CLS_MCS_CH_PC               PC;                     /**< \brief E0, MCS[i] channel x program counter register*/
       __IO Ifx_GTM_CLS_MCS_CH_IRQ_NOTIFY       IRQ_NOTIFY;             /**< \brief E4, MCS[i] channel x interrupt notification register*/
       __IO Ifx_GTM_CLS_MCS_CH_IRQ_EN           IRQ_EN;                 /**< \brief E8, MCS[i] channel x interrupt enable register*/
       __IO Ifx_GTM_CLS_MCS_CH_IRQ_FORCINT      IRQ_FORCINT;            /**< \brief EC, MCS[i] channel x force interrupt register*/
       __IO Ifx_GTM_CLS_MCS_CH_IRQ_MODE         IRQ_MODE;               /**< \brief F0, MCS[i] channel x IRQ mode configuration register*/
       __IO Ifx_GTM_CLS_MCS_CH_EIRQ_EN          EIRQ_EN;                /**< \brief F4, MCS[i] channel x error interrupt enable register*/
       __I  Ifx_UReg_8Bit                       reserved_F8[8];         /**< \brief F8, \internal Reserved */
} Ifx_GTM_CLS_MCS_CH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_MCS_HBP_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief HBP object */
typedef volatile struct _Ifx_GTM_CLS_MCS_HBP
{
       __IO Ifx_GTM_CLS_MCS_HBP_CTRL            CTRL;                   /**< \brief 0, MCS[i] hardware break point h control register*/
       __IO Ifx_GTM_CLS_MCS_HBP_PATTERN         PATTERN;                /**< \brief 4, MCS[i] hardware break point pattern register*/
       __IO Ifx_GTM_CLS_MCS_HBP_STATUS          STATUS;                 /**< \brief 8, MCS[i] hardware break point status register*/
       __IO Ifx_GTM_CLS_MCS_HBP_IRQ_NOTIFY      IRQ_NOTIFY;             /**< \brief C, MCS[i] hardware break point interrupt notification register*/
       __IO Ifx_GTM_CLS_MCS_HBP_IRQ_EN          IRQ_EN;                 /**< \brief 10, MCS[i] hardware break point interrupt enable register*/
       __IO Ifx_GTM_CLS_MCS_HBP_IRQ_FORCINT     IRQ_FORCINT;            /**< \brief 14, MCS[i] force hardware break point interrupt register*/
       __IO Ifx_GTM_CLS_MCS_HBP_IRQ_MODE        IRQ_MODE;               /**< \brief 18, MCS[i] break point h interrupt mode configuration register*/
       __I  Ifx_UReg_8Bit                       reserved_1C[4];         /**< \brief 1C, \internal Reserved */
} Ifx_GTM_CLS_MCS_HBP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_MCS_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MCS object */
typedef volatile struct _Ifx_GTM_CLS_MCS
{
       __IO Ifx_GTM_CLS_MCS_CH                  CH[8];                  /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_800[1576];     /**< \brief 800, \internal Reserved */
       __IO Ifx_GTM_CLS_MCS_CTRG                CTRG;                   /**< \brief E28, MCS[i] clear trigger control register*/
       __IO Ifx_GTM_CLS_MCS_STRG                STRG;                   /**< \brief E2C, MCS[i] set trigger control register*/
       __I  Ifx_UReg_8Bit                       reserved_E30[208];      /**< \brief E30, \internal Reserved */
       __IO Ifx_GTM_CLS_MCS_CTRL_STAT           CTRL_STAT;              /**< \brief F00, MCS[i] control and status register*/
       __IO Ifx_GTM_CLS_MCS_RESET               RESET;                  /**< \brief F04, MCS[i] reset register*/
       __IO Ifx_GTM_CLS_MCS_CAT                 CAT;                    /**< \brief F08, MCS[i] cancel ARU transfer instruction*/
       __IO Ifx_GTM_CLS_MCS_CWT                 CWT;                    /**< \brief F0C, MCS[i] cancel waiting instruction*/
       __IO Ifx_GTM_CLS_MCS_ERR                 ERR;                    /**< \brief F10, MCS[i] error register*/
       __I  Ifx_UReg_8Bit                       reserved_F14[8];        /**< \brief F14, \internal Reserved */
       __IO Ifx_GTM_CLS_MCS_REG_PROT            REG_PROT;               /**< \brief F1C, MCS[i] write-protection register*/
       __IO Ifx_GTM_CLS_MCS_SINT_IRQ_NOTIFY     SINT_IRQ_NOTIFY;        /**< \brief F20, MCS[i] shared interrupt notification register*/
       __IO Ifx_GTM_CLS_MCS_SINT_IRQ_EN         SINT_IRQ_EN;            /**< \brief F24, MCS[i] shared interrupt enable register*/
       __IO Ifx_GTM_CLS_MCS_SINT_IRQ_FORCINT    SINT_IRQ_FORCINT;       /**< \brief F28, MCS[i] force shared interrupt register*/
       __IO Ifx_GTM_CLS_MCS_SINT_IRQ_MODE       SINT_IRQ_MODE;          /**< \brief F2C, MCS[i] shared interrupt mode configuration register*/
       __I  Ifx_UReg_8Bit                       reserved_F30[16];       /**< \brief F30, \internal Reserved */
       __IO Ifx_GTM_CLS_MCS_HBP                 HBP[2];                 /**< \brief F40, */
} Ifx_GTM_CLS_MCS;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_CCM_ARP_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief ARP object */
typedef volatile struct _Ifx_GTM_CLS_CCM_ARP
{
       __IO Ifx_GTM_CLS_CCM_ARP_CTRL            CTRL;                   /**< \brief 0, CCM[i] Address Range Protector [a] Control Register*/
       __IO Ifx_GTM_CLS_CCM_ARP_PROT            PROT;                   /**< \brief 4, CCM[i] Address Range Protector [a] Protection Register*/
} Ifx_GTM_CLS_CCM_ARP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_CCM_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief CCM object */
typedef volatile struct _Ifx_GTM_CLS_CCM
{
       __IO Ifx_GTM_CLS_CCM_ARP                 ARP[10];                /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_50[388];       /**< \brief 50, \internal Reserved */
       __I  Ifx_GTM_CLS_CCM_HW_CONF2            HW_CONF2;               /**< \brief 1D4, CCM[i] 2. Hardware Configuration Register*/
       __IO Ifx_GTM_CLS_CCM_AEIM_STA            AEIM_STA;               /**< \brief 1D8, CCM[i] MCS Bus Master Status Register*/
       __I  Ifx_GTM_CLS_CCM_HW_CONF             HW_CONF;                /**< \brief 1DC, CCM[i] Hardware Configuration Register*/
       __IO Ifx_GTM_CLS_CCM_TIM_AUX_IN_SRC      TIM_AUX_IN_SRC;         /**< \brief 1E0, CCM[i] TIM AUX Input Source Register*/
       __IO Ifx_GTM_CLS_CCM_EXT_CAP_EN          EXT_CAP_EN;             /**< \brief 1E4, CCM[i] External Capture Enable Register*/
       __I  Ifx_GTM_CLS_CCM_TOM_OUT             TOM_OUT;                /**< \brief 1E8, CCM[i] TOM Output Register*/
       __I  Ifx_GTM_CLS_CCM_ATOM_OUT            ATOM_OUT;               /**< \brief 1EC, CCM[i] ATOM Output Register*/
       __IO Ifx_GTM_CLS_CCM_CMU_CLK_CFG         CMU_CLK_CFG;            /**< \brief 1F0, CCM[i] CMU Clock Configuration Register*/
       __IO Ifx_GTM_CLS_CCM_CMU_FXCLK_CFG       CMU_FXCLK_CFG;          /**< \brief 1F4, CCM[i] CMU Fixed Clock Configuration Register*/
       __IO Ifx_GTM_CLS_CCM_CFG                 CFG;                    /**< \brief 1F8, CCM[i] Configuration Register*/
       __IO Ifx_GTM_CLS_CCM_PROT                PROT;                   /**< \brief 1FC, CCM[i] Protection Register*/
} Ifx_GTM_CLS_CCM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_CDTM_DTM_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief DTM object */
typedef volatile struct _Ifx_GTM_CLS_CDTM_DTM
{
       __IO Ifx_GTM_CLS_CDTM_DTM_CTRL           CTRL;                   /**< \brief 0, CDTM[i]_DTM[d] global configuration and control register*/
       __IO Ifx_GTM_CLS_CDTM_DTM_CH_CTRL1       CH_CTRL1;               /**< \brief 4, CDTM[i]_DTM[d] channel control register 1*/
       __IO Ifx_GTM_CLS_CDTM_DTM_CH_CTRL2       CH_CTRL2;               /**< \brief 8, CDTM[i]_DTM[d] channel control register 2*/
       __IO Ifx_GTM_CLS_CDTM_DTM_CH_CTRL2_SR    CH_CTRL2_SR;            /**< \brief C, CDTM[i] DTM[j] channel control register 2 shadow*/
       __IO Ifx_GTM_CLS_CDTM_DTM_PS_CTRL        PS_CTRL;                /**< \brief 10, CDTM[i]_DTM[d] phase shift unit configuration and control register*/
       __IO Ifx_GTM_CLS_CDTM_DTM_CH_DTV         CH_DTV[4];              /**< \brief 14, CDTM[i]_DTM[d] channel [x] dead-time reload values*/
       __IO Ifx_GTM_CLS_CDTM_DTM_CH_SR          CH_SR;                  /**< \brief 24, CDTM[i]_DTM[d] channel shadow register*/
       __IO Ifx_GTM_CLS_CDTM_DTM_CH_CTRL3       CH_CTRL3;               /**< \brief 28, CDTM[i]_DTM[d] channel control register 3*/
       __IO Ifx_GTM_CLS_CDTM_DTM_CTRL2          CTRL2;                  /**< \brief 2C, CDTM[i]_DTM[d] global configuration and control register 2*/
       __IO Ifx_GTM_CLS_CDTM_DTM_CH_DTV_SR      CH_DTV_SR[4];           /**< \brief 30, CDTM[i]_DTM[d] channel [x] dead-time shadow values*/
} Ifx_GTM_CLS_CDTM_DTM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_CDTM_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief CDTM object */
typedef volatile struct _Ifx_GTM_CLS_CDTM
{
       __IO Ifx_GTM_CLS_CDTM_DTM                DTM[6];                 /**< \brief 0, */
} Ifx_GTM_CLS_CDTM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_PSM_F2A_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief F2A object */
typedef volatile struct _Ifx_GTM_CLS_PSM_F2A
{
       __IO Ifx_GTM_CLS_PSM_F2A_CH_ARU_RD_FIFO  CH_ARU_RD_FIFO[8];      /**< \brief 0, F2A[i] stream [x] ARU read register*/
       __IO Ifx_GTM_CLS_PSM_F2A_CH_STR_CFG      CH_STR_CFG[8];          /**< \brief 20, F2A[i] stream [x] configuration register*/
       __IO Ifx_GTM_CLS_PSM_F2A_ENABLE          ENABLE;                 /**< \brief 40, F2A[i] stream activation register*/
       __IO Ifx_GTM_CLS_PSM_F2A_CTRL            CTRL;                   /**< \brief 44, F2A[i] stream control register*/
} Ifx_GTM_CLS_PSM_F2A;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_PSM_AFD_CH_struct
 * \{  */
/******************************************************************************/
/** \name Object L5
 * \{  */
/** \brief CH object */
typedef volatile struct _Ifx_GTM_CLS_PSM_AFD_CH
{
       __IO Ifx_GTM_CLS_PSM_AFD_CH_BUF_ACC      BUF_ACC;                /**< \brief 0, AFD [i] FIFO [x] buffer access register*/
       __I  Ifx_UReg_8Bit                       reserved_4[12];         /**< \brief 4, \internal Reserved */
} Ifx_GTM_CLS_PSM_AFD_CH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_PSM_AFD_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief AFD object */
typedef volatile struct _Ifx_GTM_CLS_PSM_AFD
{
       __IO Ifx_GTM_CLS_PSM_AFD_CH              CH[8];                  /**< \brief 0, */
} Ifx_GTM_CLS_PSM_AFD;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_PSM_FIFO_CH_struct
 * \{  */
/******************************************************************************/
/** \name Object L5
 * \{  */
/** \brief CH object */
typedef volatile struct _Ifx_GTM_CLS_PSM_FIFO_CH
{
       __IO Ifx_GTM_CLS_PSM_FIFO_CH_CTRL        CTRL;                   /**< \brief 0, FIFO[i] channel [x] control register*/
       __IO Ifx_GTM_CLS_PSM_FIFO_CH_END_ADDR    END_ADDR;               /**< \brief 4, FIFO[i] channel [x] end address register*/
       __IO Ifx_GTM_CLS_PSM_FIFO_CH_START_ADDR  START_ADDR;             /**< \brief 8, FIFO[i] channel [x] start address register*/
       __IO Ifx_GTM_CLS_PSM_FIFO_CH_UPPER_WM    UPPER_WM;               /**< \brief C, FIFO[i] channel [x] upper watermark register*/
       __IO Ifx_GTM_CLS_PSM_FIFO_CH_LOWER_WM    LOWER_WM;               /**< \brief 10, FIFO[i] channel [x] lower watermark register*/
       __I  Ifx_GTM_CLS_PSM_FIFO_CH_STATUS      STATUS;                 /**< \brief 14, FIFO[i] channel [x] status register*/
       __I  Ifx_GTM_CLS_PSM_FIFO_CH_FILL_LEVEL  FILL_LEVEL;             /**< \brief 18, FIFO[i] channel [x] fill level register*/
       __I  Ifx_GTM_CLS_PSM_FIFO_CH_WR_PTR      WR_PTR;                 /**< \brief 1C, FIFO[i] channel [x] write pointer register*/
       __I  Ifx_GTM_CLS_PSM_FIFO_CH_RD_PTR      RD_PTR;                 /**< \brief 20, FIFO[i] channel [x] read pointer register*/
       __IO Ifx_GTM_CLS_PSM_FIFO_CH_IRQ_NOTIFY  IRQ_NOTIFY;             /**< \brief 24, FIFO[i] channel [x] interrupt notification register*/
       __IO Ifx_GTM_CLS_PSM_FIFO_CH_IRQ_EN      IRQ_EN;                 /**< \brief 28, FIFO[i] channel [x] interrupt enable register*/
       __IO Ifx_GTM_CLS_PSM_FIFO_CH_IRQ_FORCINT IRQ_FORCINT;            /**< \brief 2C, FIFO[i] channel [x] force interrupt register*/
       __IO Ifx_GTM_CLS_PSM_FIFO_CH_IRQ_MODE    IRQ_MODE;               /**< \brief 30, FIFO[i] channel [x] interrupt mode control register*/
       __IO Ifx_GTM_CLS_PSM_FIFO_CH_EIRQ_EN     EIRQ_EN;                /**< \brief 34, FIFO[i] channel [x] error interrupt enable register*/
       __I  Ifx_UReg_8Bit                       reserved_38[8];         /**< \brief 38, \internal Reserved */
} Ifx_GTM_CLS_PSM_FIFO_CH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_PSM_FIFO_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief FIFO object */
typedef volatile struct _Ifx_GTM_CLS_PSM_FIFO
{
       __IO Ifx_GTM_CLS_PSM_FIFO_CH             CH[8];                  /**< \brief 0, */
} Ifx_GTM_CLS_PSM_FIFO;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_PSM_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief PSM object */
typedef volatile struct _Ifx_GTM_CLS_PSM
{
       __IO Ifx_GTM_CLS_PSM_F2A                 F2A;                    /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_48[56];        /**< \brief 48, \internal Reserved */
       __IO Ifx_GTM_CLS_PSM_AFD                 AFD;                    /**< \brief 80, */
       __I  Ifx_UReg_8Bit                       reserved_100[256];      /**< \brief 100, \internal Reserved */
       __IO Ifx_GTM_CLS_PSM_FIFO                FIFO;                   /**< \brief 200, */
} Ifx_GTM_CLS_PSM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_SPE_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief SPE object */
typedef volatile struct _Ifx_GTM_CLS_SPE
{
       __IO Ifx_GTM_CLS_SPE_CTRL_STAT           CTRL_STAT;              /**< \brief 0, SPE[i] Control Status Register*/
       __IO Ifx_GTM_CLS_SPE_PAT                 PAT;                    /**< \brief 4, SPE[i] Input Pattern Definition Register*/
       __IO Ifx_GTM_CLS_SPE_OUT_PAT             OUT_PAT[8];             /**< \brief 8, SPE[i] Output Definition Register*/
       __IO Ifx_GTM_CLS_SPE_OUT_CTRL            OUT_CTRL;               /**< \brief 28, SPE[i] Output Control Register*/
       __IO Ifx_GTM_CLS_SPE_IRQ_NOTIFY          IRQ_NOTIFY;             /**< \brief 2C, SPE[i] Interrupt Notification Register*/
       __IO Ifx_GTM_CLS_SPE_IRQ_EN              IRQ_EN;                 /**< \brief 30, SPE[i] Interrupt Enable Register*/
       __IO Ifx_GTM_CLS_SPE_IRQ_FORCINT         IRQ_FORCINT;            /**< \brief 34, SPE[i] Interrupt Generation By Software*/
       __IO Ifx_GTM_CLS_SPE_IRQ_MODE            IRQ_MODE;               /**< \brief 38, SPE[i] Interrupt Mode Configuration Register*/
       __IO Ifx_GTM_CLS_SPE_EIRQ_EN             EIRQ_EN;                /**< \brief 3C, SPE[i] Error Interrupt Enable Register*/
       __IO Ifx_GTM_CLS_SPE_REV_CNT             REV_CNT;                /**< \brief 40, SPE[i] Input Revolution Counter*/
       __IO Ifx_GTM_CLS_SPE_REV_CMP             REV_CMP;                /**< \brief 44, SPE[i] Revolution Counter Compare Value*/
       __IO Ifx_GTM_CLS_SPE_CTRL_STAT2          CTRL_STAT2;             /**< \brief 48, SPE[i] Control Status Register 2*/
       __IO Ifx_GTM_CLS_SPE_CMD                 CMD;                    /**< \brief 4C, SPE[i] Command Register*/
} Ifx_GTM_CLS_SPE;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_AXIM_SLOT_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief SLOT object */
typedef volatile struct _Ifx_GTM_CLS_AXIM_SLOT
{
       __IO Ifx_GTM_CLS_AXIM_SLOT_ADDR_LOW      ADDR_LOW;               /**< \brief 0, AXIM[i] slot[s] address bits 31:0 of AXI transaction.*/
       __I  Ifx_UReg_8Bit                       reserved_4[4];          /**< \brief 4, \internal Reserved */
       __IO Ifx_GTM_CLS_AXIM_SLOT_DATA_LOW      DATA_LOW;               /**< \brief 8, AXIM[i] slot[s] data bits 31:0 of AXI transaction.*/
       __I  Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
       __IO Ifx_GTM_CLS_AXIM_SLOT_CFG1          CFG1;                   /**< \brief 10, AXIM[i] slot [s] configuration 1*/
       __IO Ifx_GTM_CLS_AXIM_SLOT_CFG2          CFG2;                   /**< \brief 14, AXIM[i] slot[s] configuration 2*/
       __I  Ifx_GTM_CLS_AXIM_SLOT_STATUS        STATUS;                 /**< \brief 18, AXIM[i] slot[s] status*/
       __I  Ifx_UReg_8Bit                       reserved_1C[4];         /**< \brief 1C, \internal Reserved */
} Ifx_GTM_CLS_AXIM_SLOT;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_AXIM_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief AXIM object */
typedef volatile struct _Ifx_GTM_CLS_AXIM
{
       __I  Ifx_GTM_CLS_AXIM_FREE               FREE;                   /**< \brief 0, AXIM[i] slot allocation status.*/
       __I  Ifx_GTM_CLS_AXIM_REQUEST            REQUEST;                /**< \brief 4, AXIM[i] slot request (allocation).*/
       __IO Ifx_GTM_CLS_AXIM_RELEASE            RELEASE;                /**< \brief 8, AXIM[i] slot release (de-allocation).*/
       __I  Ifx_UReg_8Bit                       reserved_C[20];         /**< \brief C, \internal Reserved */
       __IO Ifx_GTM_CLS_AXIM_SLOT               SLOT[8];                /**< \brief 20, */
} Ifx_GTM_CLS_AXIM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_DPLL_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief DPLL object */
typedef volatile struct _Ifx_GTM_CLS_DPLL
{
       __IO Ifx_GTM_CLS_DPLL_CTRL_0             CTRL_0;                 /**< \brief 0, Control Register 0*/
       __IO Ifx_GTM_CLS_DPLL_CTRL_1             CTRL_1;                 /**< \brief 4, Control Register 1*/
       __IO Ifx_GTM_CLS_DPLL_CTRL_2             CTRL_2;                 /**< \brief 8, Action Enable Register*/
       __IO Ifx_GTM_CLS_DPLL_CTRL_3             CTRL_3;                 /**< \brief C, Action Enable Register*/
       __IO Ifx_GTM_CLS_DPLL_CTRL_4             CTRL_4;                 /**< \brief 10, Action Enable Register*/
       __IO Ifx_GTM_CLS_DPLL_CTRL_5             CTRL_5;                 /**< \brief 14, Action Enable Register*/
       __IO Ifx_GTM_CLS_DPLL_ACT_STA            ACT_STA;                /**< \brief 18, Action Status Register including Shadow Register*/
       __IO Ifx_GTM_CLS_DPLL_OSW                OSW;                    /**< \brief 1C, Offset and Switch old/new Address Register*/
       __I  Ifx_GTM_CLS_DPLL_AOSV_2             AOSV_2;                 /**< \brief 20, Address Offset Register of RAM 2 Regions*/
       __IO Ifx_GTM_CLS_DPLL_APT                APT;                    /**< \brief 24, DPLL_APT*/
       __IO Ifx_GTM_CLS_DPLL_APS                APS;                    /**< \brief 28, DPLL_APS*/
       __IO Ifx_GTM_CLS_DPLL_APT_2C             APT_2C;                 /**< \brief 2C, Actual RAM Pointer Address for Region 2c*/
       __IO Ifx_GTM_CLS_DPLL_APS_1C3            APS_1C3;                /**< \brief 30, Actual RAM Pointer Address for RAM region 1c3*/
       __IO Ifx_GTM_CLS_DPLL_NUTC               NUTC;                   /**< \brief 34, DPLL_NUTC*/
       __IO Ifx_GTM_CLS_DPLL_NUSC               NUSC;                   /**< \brief 38, DPLL_NUSC*/
       __IO Ifx_GTM_CLS_DPLL_NTI_CNT            NTI_CNT;                /**< \brief 3C, DPLL_NTI_CNT*/
       __IO Ifx_GTM_CLS_DPLL_IRQ_NOTIFY         IRQ_NOTIFY;             /**< \brief 40, Interrupt Register*/
       __IO Ifx_GTM_CLS_DPLL_IRQ_EN             IRQ_EN;                 /**< \brief 44, Interrupt Enable Register*/
       __IO Ifx_GTM_CLS_DPLL_IRQ_FORCINT        IRQ_FORCINT;            /**< \brief 48, Force Interrupt Register*/
       __IO Ifx_GTM_CLS_DPLL_IRQ_MODE           IRQ_MODE;               /**< \brief 4C, Interrupt Request Mode*/
       __IO Ifx_GTM_CLS_DPLL_EIRQ_EN            EIRQ_EN;                /**< \brief 50, Error Interrupt Enable Register*/
       __I  Ifx_UReg_8Bit                       reserved_54[92];        /**< \brief 54, \internal Reserved */
       __IO Ifx_GTM_CLS_DPLL_INC_CNT1           INC_CNT1;               /**< \brief B0, DPLL_INC_CNT1*/
       __IO Ifx_GTM_CLS_DPLL_INC_CNT2           INC_CNT2;               /**< \brief B4, DPLL_INC_CNT2*/
       __IO Ifx_GTM_CLS_DPLL_APT_SYNC           APT_SYNC;               /**< \brief B8, DPLL_APT_SYNC*/
       __IO Ifx_GTM_CLS_DPLL_APS_SYNC           APS_SYNC;               /**< \brief BC, DPLL_APS_SYNC*/
       __IO Ifx_GTM_CLS_DPLL_TBU_TS0_T          TBU_TS0_T;              /**< \brief C0, DPLL_TBU_TS0_T*/
       __IO Ifx_GTM_CLS_DPLL_TBU_TS0_S          TBU_TS0_S;              /**< \brief C4, DPLL_TBU_TS0_S*/
       __IO Ifx_GTM_CLS_DPLL_ADD_IN_LD1         ADD_IN_LD1;             /**< \brief C8, DPLL_ADD_IN_LD1*/
       __IO Ifx_GTM_CLS_DPLL_ADD_IN_LD2         ADD_IN_LD2;             /**< \brief CC, DPLL_ADD_IN_LD2*/
       __I  Ifx_UReg_8Bit                       reserved_D0[44];        /**< \brief D0, \internal Reserved */
       __IO Ifx_GTM_CLS_DPLL_STATUS             STATUS;                 /**< \brief FC, Status Register*/
       __IO Ifx_GTM_CLS_DPLL_ID_PMTR            ID_PMTR[32];            /**< \brief 100, DPLL_ID_PMTR_[n]*/
       __I  Ifx_UReg_8Bit                       reserved_180[96];       /**< \brief 180, \internal Reserved */
       __I  Ifx_GTM_CLS_DPLL_CTRL_0_SHADOW_TRIGGER CTRL_0_SHADOW_TRIGGER;    /**< \brief 1E0, DPLL_CTRL_0_SHADOW_TRIGGER*/
       __I  Ifx_GTM_CLS_DPLL_CTRL_0_SHADOW_STATE CTRL_0_SHADOW_STATE;    /**< \brief 1E4, DPLL_CTRL_0_SHADOW_STATE*/
       __I  Ifx_GTM_CLS_DPLL_CTRL_1_SHADOW_TRIGGER CTRL_1_SHADOW_TRIGGER;    /**< \brief 1E8, DPLL_CTRL_1_SHADOW_TRIGGER*/
       __I  Ifx_GTM_CLS_DPLL_CTRL_1_SHADOW_STATE CTRL_1_SHADOW_STATE;    /**< \brief 1EC, DPLL_CTRL_1_SHADOW_STATE*/
       __I  Ifx_UReg_8Bit                       reserved_1F0[12];       /**< \brief 1F0, \internal Reserved */
       __IO Ifx_GTM_CLS_DPLL_RAM_INI            RAM_INI;                /**< \brief 1FC, Register to control the RAM Initialization*/
       __IO Ifx_GTM_CLS_DPLL_PSA                PSA[32];                /**< \brief 200, Position Request for Action [n]*/
       __IO Ifx_GTM_CLS_DPLL_DLA                DLA[32];                /**< \brief 280, Time to React for Action [n]*/
       __IO Ifx_GTM_CLS_DPLL_NA                 NA[32];                 /**< \brief 300, Calculated Relative Time to Action [n]*/
       __IO Ifx_GTM_CLS_DPLL_DTA                DTA[32];                /**< \brief 380, Calculated Relative Time to Action [n]*/
       __IO Ifx_GTM_CLS_DPLL_TS_T               TS_T;                   /**< \brief 400, DPLL_TS_T*/
       __IO Ifx_GTM_CLS_DPLL_TS_T_OLD           TS_T_OLD;               /**< \brief 404, DPLL_TS_T_OLD*/
       __IO Ifx_GTM_CLS_DPLL_FTV_T              FTV_T;                  /**< \brief 408, DPLL_FTV_T*/
       __IO Ifx_GTM_CLS_DPLL_RAM1B_RSVD_0       RAM1B_RSVD_0;           /**< \brief 40C, DPLL RAM1B reserved  data*/
       __IO Ifx_GTM_CLS_DPLL_TS_S               TS_S;                   /**< \brief 410, DPLL_TS_S*/
       __IO Ifx_GTM_CLS_DPLL_TS_S_OLD           TS_S_OLD;               /**< \brief 414, DPLL_TS_S_OLD*/
       __IO Ifx_GTM_CLS_DPLL_FTV_S              FTV_S;                  /**< \brief 418, DPLL_FTV_S*/
       __IO Ifx_GTM_CLS_DPLL_RAM1B_RSVD_1       RAM1B_RSVD_1;           /**< \brief 41C, DPLL RAM1B reserved  data*/
       __IO Ifx_GTM_CLS_DPLL_THMI               THMI;                   /**< \brief 420, DPLL_THMI*/
       __IO Ifx_GTM_CLS_DPLL_THMA               THMA;                   /**< \brief 424, DPLL_THMA*/
       __IO Ifx_GTM_CLS_DPLL_THVAL              THVAL;                  /**< \brief 428, DPLL_THVAL*/
       __IO Ifx_GTM_CLS_DPLL_RAM1B_RSVD_2       RAM1B_RSVD_2;           /**< \brief 42C, DPLL RAM1B reserved  data*/
       __IO Ifx_GTM_CLS_DPLL_TOV                TOV;                    /**< \brief 430, DPLL_TOV*/
       __IO Ifx_GTM_CLS_DPLL_TOV_S              TOV_S;                  /**< \brief 434, DPLL_TOV_S*/
       __IO Ifx_GTM_CLS_DPLL_ADD_IN_CAL1        ADD_IN_CAL1;            /**< \brief 438, DPLL_ADD_IN_CAL1*/
       __IO Ifx_GTM_CLS_DPLL_ADD_IN_CAL2        ADD_IN_CAL2;            /**< \brief 43C, DPLL_ADD_IN_CAL2*/
       __IO Ifx_GTM_CLS_DPLL_MPVAL1             MPVAL1;                 /**< \brief 440, Missing Pulses to be Added or Subtracted Directly*/
       __IO Ifx_GTM_CLS_DPLL_MPVAL2             MPVAL2;                 /**< \brief 444, Missing Pulses to be Added or Subtracted Directly*/
       __IO Ifx_GTM_CLS_DPLL_NMB_T_TAR          NMB_T_TAR;              /**< \brief 448, Target Number of Pulses to be sent in Normal Mode*/
       __IO Ifx_GTM_CLS_DPLL_NMB_T_TAR_OLD      NMB_T_TAR_OLD;          /**< \brief 44C, Last but one Target Number of Pulses to be sent in Normal Mode*/
       __IO Ifx_GTM_CLS_DPLL_NMB_S_TAR          NMB_S_TAR;              /**< \brief 450, Target Number of Pulses to be sent in Emergency Mode*/
       __IO Ifx_GTM_CLS_DPLL_NMB_S_TAR_OLD      NMB_S_TAR_OLD;          /**< \brief 454, Last but one Target Number of Pulses to be sent in Emergency Mode*/
       __IO Ifx_GTM_CLS_DPLL_RAM1B_RSVD_3       RAM1B_RSVD_3[2];        /**< \brief 458, DPLL RAM1B reserved  data [k]*/
       __IO Ifx_GTM_CLS_DPLL_RCDT_TX            RCDT_TX;                /**< \brief 460, DPLL_RCDT_TX*/
       __IO Ifx_GTM_CLS_DPLL_RCDT_SX            RCDT_SX;                /**< \brief 464, DPLL_RCDT_SX*/
       __IO Ifx_GTM_CLS_DPLL_RCDT_TX_NOM        RCDT_TX_NOM;            /**< \brief 468, DPLL_RCDT_TX_NOM*/
       __IO Ifx_GTM_CLS_DPLL_RCDT_SX_NOM        RCDT_SX_NOM;            /**< \brief 46C, DPLL_RCDT_SX_NOM*/
       __IO Ifx_GTM_CLS_DPLL_RDT_T_ACT          RDT_T_ACT;              /**< \brief 470, DPLL_RDT_T_ACT*/
       __IO Ifx_GTM_CLS_DPLL_RDT_S_ACT          RDT_S_ACT;              /**< \brief 474, DPLL_RDT_S_ACT*/
       __IO Ifx_GTM_CLS_DPLL_DT_T_ACT           DT_T_ACT;               /**< \brief 478, DPLL_DT_T_ACT*/
       __IO Ifx_GTM_CLS_DPLL_DT_S_ACT           DT_S_ACT;               /**< \brief 47C, DPLL_DT_S_ACT*/
       __IO Ifx_GTM_CLS_DPLL_EDT_T              EDT_T;                  /**< \brief 480, DPLL_EDT_T*/
       __IO Ifx_GTM_CLS_DPLL_MEDT_T             MEDT_T;                 /**< \brief 484, DPLL_MEDT_T*/
       __IO Ifx_GTM_CLS_DPLL_EDT_S              EDT_S;                  /**< \brief 488, DPLL_EDT_S*/
       __IO Ifx_GTM_CLS_DPLL_MEDT_S             MEDT_S;                 /**< \brief 48C, DPLL_MEDT_S*/
       __IO Ifx_GTM_CLS_DPLL_CDT_TX             CDT_TX;                 /**< \brief 490, DPLL_CDT_TX*/
       __IO Ifx_GTM_CLS_DPLL_CDT_SX             CDT_SX;                 /**< \brief 494, DPLL_CDT_SX*/
       __IO Ifx_GTM_CLS_DPLL_CDT_TX_NOM         CDT_TX_NOM;             /**< \brief 498, DPLL_CDT_TX_NOM*/
       __IO Ifx_GTM_CLS_DPLL_CDT_SX_NOM         CDT_SX_NOM;             /**< \brief 49C, DPLL_CDT_SX_NOM*/
       __IO Ifx_GTM_CLS_DPLL_TLR                TLR;                    /**< \brief 4A0, DPLL_TLR*/
       __IO Ifx_GTM_CLS_DPLL_SLR                SLR;                    /**< \brief 4A4, DPLL_SLR*/
       __IO Ifx_GTM_CLS_DPLL_RAM1B_RSVD_4       RAM1B_RSVD_4[22];       /**< \brief 4A8, DPLL RAM1B reserved  data [k]*/
       __IO Ifx_GTM_CLS_DPLL_PDT                PDT[32];                /**< \brief 500, Projected Increment Sum Relations for Action [n]*/
       __IO Ifx_GTM_CLS_DPLL_RAM1B_RSVD_5       RAM1B_RSVD_5[16];       /**< \brief 580, DPLL RAM1B reserved data [k]*/
       __IO Ifx_GTM_CLS_DPLL_MLS1               MLS1;                   /**< \brief 5C0, DPLL_MLS1*/
       __IO Ifx_GTM_CLS_DPLL_MLS2               MLS2;                   /**< \brief 5C4, DPLL_MLS2*/
       __IO Ifx_GTM_CLS_DPLL_CNT_NUM_1          CNT_NUM_1;              /**< \brief 5C8, DPLL_CNT_NUM_1*/
       __IO Ifx_GTM_CLS_DPLL_CNT_NUM_2          CNT_NUM_2;              /**< \brief 5CC, DPLL_CNT_NUM_2*/
       __IO Ifx_GTM_CLS_DPLL_PVT                PVT;                    /**< \brief 5D0, DPLL_PVT*/
       __IO Ifx_GTM_CLS_DPLL_RAM1B_RSVD_6       RAM1B_RSVD_6[3];        /**< \brief 5D4, DPLL RAM1B reserved data [k]*/
       __IO Ifx_GTM_CLS_DPLL_PSTC               PSTC;                   /**< \brief 5E0, DPLL_PSTC*/
       __IO Ifx_GTM_CLS_DPLL_PSSC               PSSC;                   /**< \brief 5E4, DPLL_PSSC*/
       __IO Ifx_GTM_CLS_DPLL_PSTM               PSTM;                   /**< \brief 5E8, DPLL_PSTM*/
       __IO Ifx_GTM_CLS_DPLL_PSTM_OLD           PSTM_OLD;               /**< \brief 5EC, DPLL_PSTM_OLD*/
       __IO Ifx_GTM_CLS_DPLL_PSSM               PSSM;                   /**< \brief 5F0, DPLL_PSSM*/
       __IO Ifx_GTM_CLS_DPLL_PSSM_OLD           PSSM_OLD;               /**< \brief 5F4, DPLL_PSSM_OLD*/
       __IO Ifx_GTM_CLS_DPLL_NMB_T              NMB_T;                  /**< \brief 5F8, Number of Pulses to be sent in Normal Mode*/
       __IO Ifx_GTM_CLS_DPLL_NMB_S              NMB_S;                  /**< \brief 5FC, Number of Pulses to be sent in Emergency Mode*/
       __IO Ifx_GTM_CLS_DPLL_RDT_S              RDT_S[64];              /**< \brief 600, DPLL_RDT_S[p]*/
       __IO Ifx_GTM_CLS_DPLL_TSF_S              TSF_S[64];              /**< \brief 700, DPLL_TSF_S[p]*/
       __IO Ifx_GTM_CLS_DPLL_ADT_S              ADT_S[64];              /**< \brief 800, DPLL_ADT_S[p]*/
       __IO Ifx_GTM_CLS_DPLL_DT_S               DT_S[64];               /**< \brief 900, DPLL_DT_S[p]*/
       __I  Ifx_UReg_8Bit                       reserved_A00[1024];     /**< \brief A00, \internal Reserved */
       __IO Ifx_GTM_CLS_DPLL_TSAC               TSAC[32];               /**< \brief E00, Calculated Time Value to start Action [n]*/
       __IO Ifx_GTM_CLS_DPLL_PSAC               PSAC[32];               /**< \brief E80, Calculated Position Value to start Action [n]*/
       __IO Ifx_GTM_CLS_DPLL_ACB                ACB[8];                 /**< \brief F00, DPLL_ACB_[n]*/
       __IO Ifx_GTM_CLS_DPLL_CTRL_11            CTRL_11;                /**< \brief F20, Control Register 11*/
       __I  Ifx_GTM_CLS_DPLL_THVAL2             THVAL2;                 /**< \brief F24, DPLL_THVAL2*/
       __IO Ifx_GTM_CLS_DPLL_TIDEL              TIDEL;                  /**< \brief F28, DPLL_TIDEL*/
       __IO Ifx_GTM_CLS_DPLL_SIDEL              SIDEL;                  /**< \brief F2C, DPLL_SIDEL*/
       __IO Ifx_GTM_CLS_DPLL_APS_SYNC_EXT       APS_SYNC_EXT;           /**< \brief F30, DPLL_APS_SYNC_EXT*/
       __IO Ifx_GTM_CLS_DPLL_CTRL_EXT           CTRL_EXT;               /**< \brief F34, DPLL_CTRL_EXT*/
       __IO Ifx_GTM_CLS_DPLL_APS_EXT            APS_EXT;                /**< \brief F38, DPLL_APS_EXT*/
       __IO Ifx_GTM_CLS_DPLL_APS_1C3_EXT        APS_1C3_EXT;            /**< \brief F3C, DPLL_APS_1C3_EXT*/
       __I  Ifx_GTM_CLS_DPLL_STA                STA;                    /**< \brief F40, Status of the state machine states*/
       __IO Ifx_GTM_CLS_DPLL_INCF1_OFFSET       INCF1_OFFSET;           /**< \brief F44, Start value of ADD_IN_ADDER1*/
       __IO Ifx_GTM_CLS_DPLL_INCF2_OFFSET       INCF2_OFFSET;           /**< \brief F48, Start value of the ADD_IN_ADDER2*/
       __IO Ifx_GTM_CLS_DPLL_DT_T_START         DT_T_START;             /**< \brief F4C, Start value of DT_T_ACT*/
       __IO Ifx_GTM_CLS_DPLL_DT_S_START         DT_S_START;             /**< \brief F50, Start value of DT_S_ACT*/
       __IO Ifx_GTM_CLS_DPLL_STA_MASK           STA_MASK;               /**< \brief F54, DPLL_STA_MASK*/
       __IO Ifx_GTM_CLS_DPLL_STA_FLAG           STA_FLAG;               /**< \brief F58, DPLL_STA_FLAG*/
       __IO Ifx_GTM_CLS_DPLL_INC_CNT1_MASK      INC_CNT1_MASK;          /**< \brief F5C, DPLL_INC_CNT1_MASK*/
       __IO Ifx_GTM_CLS_DPLL_INC_CNT2_MASK      INC_CNT2_MASK;          /**< \brief F60, DPLL_INC_CNT2_MASK*/
       __IO Ifx_GTM_CLS_DPLL_NUSC_EXT1          NUSC_EXT1;              /**< \brief F64, DPLL_NUSC_EXT1*/
       __IO Ifx_GTM_CLS_DPLL_NUSC_EXT2          NUSC_EXT2;              /**< \brief F68, DPLL_NUSC_EXT2*/
       __IO Ifx_GTM_CLS_DPLL_CTN_MIN            CTN_MIN;                /**< \brief F6C, DPLL_CTN_MIN*/
       __IO Ifx_GTM_CLS_DPLL_CTN_MAX            CTN_MAX;                /**< \brief F70, DPLL_CTN_MAX*/
       __IO Ifx_GTM_CLS_DPLL_CSN_MIN            CSN_MIN;                /**< \brief F74, DPLL_CSN_MIN*/
       __IO Ifx_GTM_CLS_DPLL_CSN_MAX            CSN_MAX;                /**< \brief F78, DPLL_CSN_MAX*/
       __IO Ifx_GTM_CLS_DPLL_SW_TRIG            SW_TRIG;                /**< \brief F7C, Software triggered input events*/
       __I  Ifx_GTM_CLS_DPLL_MP_T               MP_T;                   /**< \brief F80, DPLL_MP_T*/
       __I  Ifx_GTM_CLS_DPLL_MP_S               MP_S;                   /**< \brief F84, DPLL_MP_S*/
       __IO Ifx_GTM_CLS_DPLL_CTRL_12            CTRL_12;                /**< \brief F88, DPLL control register 12*/
       __I  Ifx_UReg_8Bit                       reserved_F8C[12404];    /**< \brief F8C, \internal Reserved */
       __IO Ifx_GTM_CLS_DPLL_RR2                RR2[4096];              /**< \brief 4000, DPLL memory RR2 word [m]*/
} Ifx_GTM_CLS_DPLL;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CLS_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief CLS object */
typedef volatile struct _Ifx_GTM_CLS
{
       __IO Ifx_GTM_CLS_ARCH                    ARCH;                   /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_34[12];        /**< \brief 34, \internal Reserved */
       __IO Ifx_GTM_CLS_AEI                     AEI;                    /**< \brief 40, */
       __I  Ifx_UReg_8Bit                       reserved_50[48];        /**< \brief 50, \internal Reserved */
       __IO Ifx_GTM_CLS_CMU                     CMU;                    /**< \brief 80, */
       __I  Ifx_UReg_8Bit                       reserved_D0[48];        /**< \brief D0, \internal Reserved */
       __IO Ifx_GTM_CLS_TBU                     TBU;                    /**< \brief 100, */
       __I  Ifx_UReg_8Bit                       reserved_12C[84];       /**< \brief 12C, \internal Reserved */
       __IO Ifx_GTM_CLS_ARU                     ARU;                    /**< \brief 180, */
       __IO Ifx_GTM_CLS_BRC                     BRC;                    /**< \brief 200, */
       __I  Ifx_UReg_8Bit                       reserved_278[392];      /**< \brief 278, \internal Reserved */
       __IO Ifx_GTM_CLS_ICM                     ICM;                    /**< \brief 400, */
       __I  Ifx_UReg_8Bit                       reserved_5B8[136];      /**< \brief 5B8, \internal Reserved */
       __IO Ifx_GTM_CLS_MAP                     MAP;                    /**< \brief 640, */
       __I  Ifx_UReg_8Bit                       reserved_644[60];       /**< \brief 644, \internal Reserved */
       __IO Ifx_GTM_CLS_MON                     MON;                    /**< \brief 680, */
       __I  Ifx_UReg_8Bit                       reserved_6B4[12];       /**< \brief 6B4, \internal Reserved */
       __IO Ifx_GTM_CLS_CMP                     CMP;                    /**< \brief 6C0, */
       __I  Ifx_UReg_8Bit                       reserved_6D8[296];      /**< \brief 6D8, \internal Reserved */
       __IO Ifx_GTM_CLS_TIM                     TIM;                    /**< \brief 800, */
       __I  Ifx_UReg_8Bit                       reserved_C0C[1012];     /**< \brief C0C, \internal Reserved */
       __IO Ifx_GTM_CLS_TOM                     TOM;                    /**< \brief 1000, */
       __I  Ifx_UReg_8Bit                       reserved_1530[720];     /**< \brief 1530, \internal Reserved */
       __IO Ifx_GTM_CLS_ATOM                    ATOM;                   /**< \brief 1800, */
       __I  Ifx_UReg_8Bit                       reserved_1C60[928];     /**< \brief 1C60, \internal Reserved */
       __IO Ifx_GTM_CLS_MCS                     MCS;                    /**< \brief 2000, */
       __I  Ifx_UReg_8Bit                       reserved_2F80[4224];    /**< \brief 2F80, \internal Reserved */
       __IO Ifx_GTM_CLS_CCM                     CCM;                    /**< \brief 4000, */
       __I  Ifx_UReg_8Bit                       reserved_4200[512];     /**< \brief 4200, \internal Reserved */
       __IO Ifx_GTM_CLS_CDTM                    CDTM;                   /**< \brief 4400, */
       __I  Ifx_UReg_8Bit                       reserved_4580[640];     /**< \brief 4580, \internal Reserved */
       __IO Ifx_GTM_CLS_PSM                     PSM;                    /**< \brief 4800, */
       __IO Ifx_GTM_CLS_SPE                     SPE;                    /**< \brief 4C00, */
       __I  Ifx_UReg_8Bit                       reserved_4C50[944];     /**< \brief 4C50, \internal Reserved */
       __IO Ifx_GTM_CLS_AXIM                    AXIM;                   /**< \brief 5000, */
       __I  Ifx_UReg_8Bit                       reserved_5120[3808];    /**< \brief 5120, \internal Reserved */
       __IO Ifx_GTM_CLS_FIFO_MEMORY             FIFO_MEMORY[1024];      /**< \brief 6000, FIFO data memory word [m]*/
       __I  Ifx_UReg_8Bit                       reserved_7000[4096];    /**< \brief 7000, \internal Reserved */
       __IO Ifx_GTM_CLS_DPLL                    DPLL;                   /**< \brief 8000, */
       __IO Ifx_GTM_CLS_MCS_MEM                 MCS_MEM[16384];         /**< \brief 10000, MCS[i] memory region word [m]*/
} Ifx_GTM_CLS;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_GTM_RST
{
       __IO Ifx_GTM_RST_CTRLA                   CTRLA;                  /**< \brief 0, Reset control register A*/
       __IO Ifx_GTM_RST_CTRLB                   CTRLB;                  /**< \brief 4, Reset control register B*/
       __I  Ifx_GTM_RST_STAT                    STAT;                   /**< \brief 8, Reset status register*/
} Ifx_GTM_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CL_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_GTM_CL_ACCEN
{
       __IO Ifx_GTM_ACCEN_WRA                   WRA;                    /**< \brief 0, Write access enable register A for cluster 0*/
       __IO Ifx_GTM_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, Write access enable register B for cluster 0*/
       __IO Ifx_GTM_ACCEN_RDA                   RDA;                    /**< \brief 8, Read access enable register A for cluster 0*/
       __IO Ifx_GTM_ACCEN_RDB_FPI               RDB;                    /**< \brief C, Read access enable register B for cluster 0*/
       __IO Ifx_GTM_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable register for cluster 0*/
       __IO Ifx_GTM_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable register for cluster 0*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_GTM_CL_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CL_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief CL object */
typedef volatile struct _Ifx_GTM_CL
{
       __I  Ifx_UReg_8Bit                       reserved_0[4];          /**< \brief 0, \internal Reserved */
       __IO Ifx_GTM_CL_ACCEN                    ACCEN;                  /**< \brief 4, */
} Ifx_GTM_CL;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CTRL_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_GTM_CTRL_ACCEN
{
       __IO Ifx_GTM_ACCEN_WRA                   WRA;                    /**< \brief 0, Write access enable register A for control logic*/
       __IO Ifx_GTM_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, Write access enable register B for control logic*/
       __IO Ifx_GTM_ACCEN_RDA                   RDA;                    /**< \brief 8, Read access enable register A for control logic*/
       __IO Ifx_GTM_ACCEN_RDB_FPI               RDB;                    /**< \brief C, Read access enable register B for control logic*/
       __IO Ifx_GTM_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable register for control logic*/
       __IO Ifx_GTM_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable register for control logic*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_GTM_CTRL_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CTRL_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief CTRL object */
typedef volatile struct _Ifx_GTM_CTRL
{
       __IO Ifx_GTM_PROT                        PROTE;                  /**< \brief 0, PROT register Endinit for control logic*/
       __IO Ifx_GTM_CTRL_ACCEN                  ACCEN;                  /**< \brief 4, */
} Ifx_GTM_CTRL;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_WRAP_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_GTM_WRAP_ACCEN
{
       __IO Ifx_GTM_ACCEN_WRA                   WRA;                    /**< \brief 0, Write access enable register A for wrapper logic*/
       __IO Ifx_GTM_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, Write access enable register B for wrapper logic*/
       __IO Ifx_GTM_ACCEN_RDA                   RDA;                    /**< \brief 8, Read access enable register A for wrapper logic*/
       __IO Ifx_GTM_ACCEN_RDB_FPI               RDB;                    /**< \brief C, Read access enable register B for wrapper logic*/
       __IO Ifx_GTM_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable register for wrapper logic*/
       __IO Ifx_GTM_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable register for wrapper logic*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_GTM_WRAP_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_WRAP_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief WRAP object */
typedef volatile struct _Ifx_GTM_WRAP
{
       __I  Ifx_UReg_8Bit                       reserved_0[4];          /**< \brief 0, \internal Reserved */
       __IO Ifx_GTM_WRAP_ACCEN                  ACCEN;                  /**< \brief 4, */
} Ifx_GTM_WRAP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_OCDS_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief OCDS object */
typedef volatile struct _Ifx_GTM_OCDS
{
       __IO Ifx_GTM_OCDS_OTBU0T                 OTBU0T;                 /**< \brief 0, OCDS TBU0 trigger register*/
       __IO Ifx_GTM_OCDS_OTBU1T                 OTBU1T;                 /**< \brief 4, OCDS TBU1 trigger register*/
       __IO Ifx_GTM_OCDS_OTBU2T                 OTBU2T;                 /**< \brief 8, OCDS TBU2 trigger register*/
       __IO Ifx_GTM_OCDS_OTBU3T                 OTBU3T;                 /**< \brief C, OCDS TBU3 trigger register*/
       __IO Ifx_GTM_OCDS_OTSS                   OTSS;                   /**< \brief 10, OCDS trigger set select register*/
       __IO Ifx_GTM_OCDS_OTSC0                  OTSC0;                  /**< \brief 14, OCDS trigger set control 0 register*/
       __IO Ifx_GTM_OCDS_OTSC1                  OTSC1;                  /**< \brief 18, OCDS trigger set control 1 register*/
       __IO Ifx_GTM_OCDS_ODA                    ODA;                    /**< \brief 1C, OCDS debug access register*/
       __IO Ifx_GTM_OCDS_HWBEN                  HWBEN;                  /**< \brief 20, Hardware breakpoint enable register*/
} Ifx_GTM_OCDS;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_MSCSET_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief MSCSET object */
typedef volatile struct _Ifx_GTM_MSCSET
{
       __IO Ifx_GTM_MSCSET_CON0                 CON0;                   /**< \brief 0, GTM to MSC SET0 output selection register 0*/
       __IO Ifx_GTM_MSCSET_CON1                 CON1;                   /**< \brief 4, GTM to MSC SET0 output selection register 0*/
       __IO Ifx_GTM_MSCSET_CON2                 CON2;                   /**< \brief 8, GTM to MSC SET0 output selection register 0*/
       __IO Ifx_GTM_MSCSET_CON3                 CON3;                   /**< \brief C, GTM to MSC SET0 output selection register 0*/
} Ifx_GTM_MSCSET;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_MSC_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief MSC object */
typedef volatile struct _Ifx_GTM_MSC
{
       __IO Ifx_GTM_MSC_INLCON                  INLCON;                 /**< \brief 0, GTM to MSC0 input bus ALTINL signal selection register*/
       __IO Ifx_GTM_MSC_INHCON                  INHCON;                 /**< \brief 4, GTM to MSC0 input bus ALTINH signal selection register*/
       __IO Ifx_GTM_MSC_INLECON                 INLECON;                /**< \brief 8, GTM to MSC0 input bus ALTINLE signal selection register*/
       __IO Ifx_GTM_MSC_INHECON                 INHECON;                /**< \brief C, GTM to MSC0 input bus ALTINHE signal selection register*/
} Ifx_GTM_MSC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_PSI5_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief PSI5 object */
typedef volatile struct _Ifx_GTM_PSI5
{
       __IO Ifx_GTM_PSI5_OUT                    OUT;                    /**< \brief 0, GTM to PSI5 output trigger selection register*/
} Ifx_GTM_PSI5;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_PSI5S_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief PSI5S object */
typedef volatile struct _Ifx_GTM_PSI5S
{
       __IO Ifx_GTM_PSI5S_OUT                   OUT;                    /**< \brief 0, GTM to PSI5-S0 output trigger selection register*/
} Ifx_GTM_PSI5S;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_LCDCDC_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief LCDCDC object */
typedef volatile struct _Ifx_GTM_LCDCDC
{
       __IO Ifx_GTM_LCDCDC_OUT                  OUT;                    /**< \brief 0, GTM to LCDCDC output trigger selection register*/
} Ifx_GTM_LCDCDC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_CAN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief CAN object */
typedef volatile struct _Ifx_GTM_CAN
{
       __IO Ifx_GTM_CAN_OUT                     OUT[4];                 /**< \brief 0, GTM to CAN0 output selection register 0*/
} Ifx_GTM_CAN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_QSPI_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief QSPI object */
typedef volatile struct _Ifx_GTM_QSPI
{
       __IO Ifx_GTM_QSPI_OUT                    OUT;                    /**< \brief 0, GTM to QSPI0 output selection register*/
} Ifx_GTM_QSPI;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_ASCLIN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ASCLIN object */
typedef volatile struct _Ifx_GTM_ASCLIN
{
       __IO Ifx_GTM_ASCLIN_OUT                  OUT;                    /**< \brief 0, GTM to ASCLIN0 output selection register*/
} Ifx_GTM_ASCLIN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_SENT_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief SENT object */
typedef volatile struct _Ifx_GTM_SENT
{
       __IO Ifx_GTM_SENT_OUTA                   OUTA;                   /**< \brief 0, GTM to SENT0 trigger x output selection register A*/
       __IO Ifx_GTM_SENT_OUTB                   OUTB;                   /**< \brief 4, GTM to SENT0 trigger x output selection register B*/
} Ifx_GTM_SENT;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_ADC_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ADC object */
typedef volatile struct _Ifx_GTM_ADC
{
       __IO Ifx_GTM_ADC_OUT                     OUT[12];                /**< \brief 0, GTM to ADC output selection register 0*/
} Ifx_GTM_ADC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_DTMAUX_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief DTMAUX object */
typedef volatile struct _Ifx_GTM_DTMAUX
{
       __O  Ifx_GTM_DTMAUX_IN                   IN[2];                  /**< \brief 0, Cluster 0 DTMAUX input 0 selection register*/
} Ifx_GTM_DTMAUX;

/******************************************************************************/
/** \addtogroup IfxSfr_Gtm_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief GTM object */
typedef volatile struct _Ifx_GTM
{
       __IO Ifx_GTM_CLS                         CLS[12];                /**< \brief 0, */
       __IO Ifx_GTM_CLC                         CLC;                    /**< \brief 180000, Clock control register*/
       __IO Ifx_GTM_OCS                         OCS;                    /**< \brief 180004, OCDS control and status register*/
       __I  Ifx_UReg_8Bit                       reserved_180008[8];     /**< \brief 180008, \internal Reserved */
       __IO Ifx_GTM_RST                         RST;                    /**< \brief 180010, */
       __IO Ifx_GTM_PROT                        PROTSE;                 /**< \brief 18001C, PROT register Safe Endinit*/
       __IO Ifx_GTM_CL                          CL[12];                 /**< \brief 180020, Protection per cluster*/
       __IO Ifx_GTM_CTRL                        CTRL;                   /**< \brief 1801D0, Protection of UBS Registers*/
       __IO Ifx_GTM_WRAP                        WRAP;                   /**< \brief 1801F4, Protection of Wrapper Registers*/
       __I  Ifx_UReg_8Bit                       reserved_180218[616];    /**< \brief 180218, \internal Reserved */
       __IO Ifx_GTM_SPARE                       SPARE;                  /**< \brief 180480, Spare Bits*/
       __I  Ifx_UReg_8Bit                       reserved_180484[124];    /**< \brief 180484, \internal Reserved */
       __IO Ifx_GTM_OCDS                        OCDS;                   /**< \brief 180500, Hardware breakpoint enable register*/
       __I  Ifx_UReg_8Bit                       reserved_180524[2780];    /**< \brief 180524, \internal Reserved */
       __IO Ifx_GTM_TIMINSEL                    TIMINSEL[8];            /**< \brief 181000, TIM0 input selection register*/
       __I  Ifx_UReg_8Bit                       reserved_181020[224];    /**< \brief 181020, \internal Reserved */
       __IO Ifx_GTM_TOUTSEL                     TOUTSEL[50];            /**< \brief 181100, GTM to Ports signal TOUT output selection register 0*/
       __I  Ifx_UReg_8Bit                       reserved_1811C8[312];    /**< \brief 1811C8, \internal Reserved */
       __IO Ifx_GTM_MSCSET                      MSCSET[9];              /**< \brief 181300, */
       __IO Ifx_GTM_MSC                         MSC[4];                 /**< \brief 181390, */
       __I  Ifx_UReg_8Bit                       reserved_1813D0[48];    /**< \brief 1813D0, \internal Reserved */
       __IO Ifx_GTM_PSI5                        PSI5;                   /**< \brief 181400, GTM to PSI5 output trigger selection register*/
       __I  Ifx_UReg_8Bit                       reserved_181404[12];    /**< \brief 181404, \internal Reserved */
       __IO Ifx_GTM_PSI5S                       PSI5S[2];               /**< \brief 181410, GTM to PSI5-S0 output trigger selection register*/
       __I  Ifx_UReg_8Bit                       reserved_181418[8];     /**< \brief 181418, \internal Reserved */
       __IO Ifx_GTM_LCDCDC                      LCDCDC;                 /**< \brief 181420, GTM to LCDCDC output trigger selection register*/
       __I  Ifx_UReg_8Bit                       reserved_181424[92];    /**< \brief 181424, \internal Reserved */
       __IO Ifx_GTM_CAN                         CAN[5];                 /**< \brief 181480, */
       __I  Ifx_UReg_8Bit                       reserved_1814D0[48];    /**< \brief 1814D0, \internal Reserved */
       __IO Ifx_GTM_FOUTENC                     FOUTENC[4];             /**< \brief 181500, FOUT Selection for Encoder Interface 0*/
       __I  Ifx_UReg_8Bit                       reserved_181510[112];    /**< \brief 181510, \internal Reserved */
       __IO Ifx_GTM_QSPI                        QSPI[8];                /**< \brief 181580, GTM to QSPI0 output selection register*/
       __I  Ifx_UReg_8Bit                       reserved_1815A0[96];    /**< \brief 1815A0, \internal Reserved */
       __IO Ifx_GTM_ASCLIN                      ASCLIN[28];             /**< \brief 181600, GTM to ASCLIN0 output selection register*/
       __I  Ifx_UReg_8Bit                       reserved_181670[16];    /**< \brief 181670, \internal Reserved */
       __IO Ifx_GTM_SENT                        SENT[2];                /**< \brief 181680, */
       __I  Ifx_UReg_8Bit                       reserved_181690[112];    /**< \brief 181690, \internal Reserved */
       __IO Ifx_GTM_ADC                         ADC;                    /**< \brief 181700, */
       __I  Ifx_UReg_8Bit                       reserved_181730[80];    /**< \brief 181730, \internal Reserved */
       __IO Ifx_GTM_DTMAUX                      DTMAUX[7];              /**< \brief 181780, */
       __I  Ifx_UReg_8Bit                       reserved_1817B8[518216];    /**< \brief 1817B8, \internal Reserved */
} Ifx_GTM;

/** \}  */
/******************************************************************************/
/** \}  */

/******************************************************************************/
#if defined (_TASKING_)
#pragma restore
#endif
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

#endif /* IFXGTM_REGDEF_H */

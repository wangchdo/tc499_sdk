/**
 * \file IfxAdc_cfg.h
 * \brief ADC on-chip implementation data
 * \ingroup IfxLld_Adc
 *
 * \version iLLD_2_0_1_2_19
 * \copyright Copyright (c) 2023 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 * \defgroup IfxLld_Adc ADC
 * \ingroup IfxLld
 * \defgroup IfxLld_Adc_Impl Implementation
 * \ingroup IfxLld_Adc
 * \defgroup IfxLld_Adc_Std Standard
 * \ingroup IfxLld_Adc
 */

#ifndef IFXADC_CFG_H
#define IFXADC_CFG_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

/******************************************************************************/
/*-----------------------------------Macros-----------------------------------*/
/******************************************************************************/

/** \brief Number of TMADC Objects
 */
#define IFXADC_NUM_TMADC             (8)

#define IFXADC_NUM_SAR_CORES         (16)

/** \brief Number of FCC Objects
 */
#define IFXADC_NUM_FCC               (10)

/** \brief Number of DSADC IN Channels
 */
#define IFXADC_NUM_DSADC_IN_CHANNELS (14)

/** \brief Number of DSADC EX Channels
 */
#define IFXADC_NUM_DSADC_EX_CHANNELS (4)

/** \brief Number of CDSP Cores
 */
#define IFXADC_NUM_CDSP_CORES        (18)

/** \brief Number of TMADC Channels
 */
#define IFXADC_NUM_TMADC_CHANNELS    (16)

/** \brief ICCM and DCCM memory offset
 */
#define IFXADC_ICCM_DCCM_OFFSET      (0x2000u)

/** \brief Number of APU in ADC
 */
#define IFXADC_NUM_APU               (16)

/** \brief Maximum timeout in nanoseconds for calibration(3ms) + module power on(15us)
 */
#ifndef IFXADC_TMADC_MAX_TIMEOUT
#define IFXADC_TMADC_MAX_TIMEOUT     ((uint32)(3015000U))
#endif

/** \brief Maximum timeout in nanoseconds for module power on (15us)
 */
#ifndef IFXADC_TMADC_POWERON_TIMEOUT
#define IFXADC_TMADC_POWERON_TIMEOUT ((uint32)(15000U))
#endif

/******************************************************************************/
/*-------------------------------Enumerations---------------------------------*/
/******************************************************************************/

/** \brief Enumeration holding the DSP core
 */
typedef enum
{
    IfxAdc_CdspCore_none  = -1, /**< \brief Not Selected */
    IfxAdc_CdspCore_0     = 0,  /**< \brief CdspCore 0 */
    IfxAdc_CdspCore_1     = 1,  /**< \brief CdspCore 1 */
    IfxAdc_CdspCore_2     = 2,  /**< \brief CdspCore 2 */
    IfxAdc_CdspCore_3     = 3,  /**< \brief CdspCore 3 */
    IfxAdc_CdspCore_4     = 4,  /**< \brief CdspCore 4 */
    IfxAdc_CdspCore_5     = 5,  /**< \brief CdspCore 5 */
    IfxAdc_CdspCore_6     = 6,  /**< \brief CdspCore 6 */
    IfxAdc_CdspCore_7     = 7,  /**< \brief CdspCore 7 */
    IfxAdc_CdspCore_8     = 8,  /**< \brief CdspCore 8 */
    IfxAdc_CdspCore_9     = 9,  /**< \brief CdspCore 9 */
    IfxAdc_CdspCore_10    = 10, /**< \brief CdspCore 10 */
    IfxAdc_CdspCore_11    = 11, /**< \brief CdspCore 11 */
    IfxAdc_CdspCore_12    = 12, /**< \brief CdspCore 12 */
    IfxAdc_CdspCore_13    = 13, /**< \brief CdspCore 13 */
    IfxAdc_CdspCore_14    = 14, /**< \brief CdspCore 14 */
    IfxAdc_CdspCore_15    = 15, /**< \brief CdspCore 15 */
    IfxAdc_CdspCore_16    = 16, /**< \brief CdspCore 16 */
    IfxAdc_CdspCore_17    = 17, /**< \brief CdspCore 17 */
    IfxAdc_CdspCore_count = 18  /**< \brief Count */
} IfxAdc_CdspCore;

/** \brief Enumeration holding analog modulator channels
 */
typedef enum
{
    IfxAdc_DsadcChannel_none  = -1, /**< \brief Not Selected */
    IfxAdc_DsadcChannel_0     = 0,  /**< \brief DsadcChannel 0 */
    IfxAdc_DsadcChannel_1     = 1,  /**< \brief DsadcChannel 1 */
    IfxAdc_DsadcChannel_2     = 2,  /**< \brief DsadcChannel 2 */
    IfxAdc_DsadcChannel_3     = 3,  /**< \brief DsadcChannel 3 */
    IfxAdc_DsadcChannel_4     = 4,  /**< \brief DsadcChannel 4 */
    IfxAdc_DsadcChannel_5     = 5,  /**< \brief DsadcChannel 5 */
    IfxAdc_DsadcChannel_6     = 6,  /**< \brief DsadcChannel 6 */
    IfxAdc_DsadcChannel_7     = 7,  /**< \brief DsadcChannel 7 */
    IfxAdc_DsadcChannel_8     = 8,  /**< \brief DsadcChannel 8 */
    IfxAdc_DsadcChannel_9     = 9,  /**< \brief DsadcChannel 9 */
    IfxAdc_DsadcChannel_10    = 10, /**< \brief DsadcChannel 10 */
    IfxAdc_DsadcChannel_11    = 11, /**< \brief DsadcChannel 11 */
    IfxAdc_DsadcChannel_12    = 12, /**< \brief DsadcChannel 12 */
    IfxAdc_DsadcChannel_13    = 13, /**< \brief DsadcChannel 13 */
    IfxAdc_DsadcChannel_count = 14  /**< \brief Count */
} IfxAdc_DsadcChannel;

/** \brief Enumeration holding external modulator channels
 */
typedef enum
{
    IfxAdc_Exmod_none  = -1, /**< \brief Not Selected */
    IfxAdc_Exmod_0     = 0,  /**< \brief Exmod 0 */
    IfxAdc_Exmod_1     = 1,  /**< \brief Exmod 1 */
    IfxAdc_Exmod_2     = 2,  /**< \brief Exmod 2 */
    IfxAdc_Exmod_3     = 3,  /**< \brief Exmod 3 */
    IfxAdc_Exmod_count = 4   /**< \brief Count */
} IfxAdc_Exmod;

/** \brief Enumeration holding the module numbers of FCC
 */
typedef enum
{
    IfxAdc_FccModule_none  = -1, /**< \brief Not Selected */
    IfxAdc_FccModule_0     = 0,  /**< \brief FccModule 0 */
    IfxAdc_FccModule_1     = 1,  /**< \brief FccModule 1 */
    IfxAdc_FccModule_2     = 2,  /**< \brief FccModule 2 */
    IfxAdc_FccModule_3     = 3,  /**< \brief FccModule 3 */
    IfxAdc_FccModule_4     = 4,  /**< \brief FccModule 4 */
    IfxAdc_FccModule_5     = 5,  /**< \brief FccModule 5 */
    IfxAdc_FccModule_6     = 6,  /**< \brief FccModule 6 */
    IfxAdc_FccModule_7     = 7,  /**< \brief FccModule 7 */
    IfxAdc_FccModule_8     = 8,  /**< \brief FccModule 8 */
    IfxAdc_FccModule_9     = 9,  /**< \brief FccModule 9 */
    IfxAdc_FccModule_count = 10  /**< \brief Count */
} IfxAdc_FccModule;

/** \brief Enumeration holding TMADC channel numbers
 */
typedef enum
{
    IfxAdc_TmadcChannel_none  = -1, /**< \brief Not Selected */
    IfxAdc_TmadcChannel_0     = 0,  /**< \brief TmadcChannel 0 */
    IfxAdc_TmadcChannel_1     = 1,  /**< \brief TmadcChannel 1 */
    IfxAdc_TmadcChannel_2     = 2,  /**< \brief TmadcChannel 2 */
    IfxAdc_TmadcChannel_3     = 3,  /**< \brief TmadcChannel 3 */
    IfxAdc_TmadcChannel_4     = 4,  /**< \brief TmadcChannel 4 */
    IfxAdc_TmadcChannel_5     = 5,  /**< \brief TmadcChannel 5 */
    IfxAdc_TmadcChannel_6     = 6,  /**< \brief TmadcChannel 6 */
    IfxAdc_TmadcChannel_7     = 7,  /**< \brief TmadcChannel 7 */
    IfxAdc_TmadcChannel_8     = 8,  /**< \brief TmadcChannel 8 */
    IfxAdc_TmadcChannel_9     = 9,  /**< \brief TmadcChannel 9 */
    IfxAdc_TmadcChannel_10    = 10, /**< \brief TmadcChannel 10 */
    IfxAdc_TmadcChannel_11    = 11, /**< \brief TmadcChannel 11 */
    IfxAdc_TmadcChannel_12    = 12, /**< \brief TmadcChannel 12 */
    IfxAdc_TmadcChannel_13    = 13, /**< \brief TmadcChannel 13 */
    IfxAdc_TmadcChannel_14    = 14, /**< \brief TmadcChannel 14 */
    IfxAdc_TmadcChannel_15    = 15, /**< \brief TmadcChannel 15 */
    IfxAdc_TmadcChannel_count = 16  /**< \brief Count */
} IfxAdc_TmadcChannel;

/** \brief Enumeration holding the module numbers of TMADC
 */
typedef enum
{
    IfxAdc_TmadcModule_none  = -1, /**< \brief Not Selected */
    IfxAdc_TmadcModule_0     = 0,  /**< \brief TmadcModule 0 */
    IfxAdc_TmadcModule_1     = 1,  /**< \brief TmadcModule 1 */
    IfxAdc_TmadcModule_2     = 2,  /**< \brief TmadcModule 2 */
    IfxAdc_TmadcModule_3     = 3,  /**< \brief TmadcModule 3 */
    IfxAdc_TmadcModule_4     = 4,  /**< \brief TmadcModule 4 */
    IfxAdc_TmadcModule_5     = 5,  /**< \brief TmadcModule 5 */
    IfxAdc_TmadcModule_6     = 6,  /**< \brief TmadcModule 6 */
    IfxAdc_TmadcModule_7     = 7,  /**< \brief TmadcModule 7 */
    IfxAdc_TmadcModule_count = 8   /**< \brief Count */
} IfxAdc_TmadcModule;

#endif /* IFXADC_CFG_H */

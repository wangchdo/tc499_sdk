/**
 * \file IfxAdcCdspFw_cfg.h
 * \brief ADC on-chip implementation data
 * \ingroup IfxLld_Adc
 *
 * \version iLLD_2_0_1_2_19
 * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such
 * terms of use are agreed, use of this file is subject to following:
 *
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or
 * organization obtaining a copy of the software and accompanying
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 * \defgroup IfxLld_AdcCdspFw ADC
 * \ingroup IfxLld
 * \defgroup IfxLld_AdcCdspFw_Impl Implementation
 * \ingroup IfxLld_AdcCdspFw
 * \defgroup IfxLld_AdcCdspFw_Std Standard
 * \ingroup IfxLld_AdcCdspFw
 */

#ifndef IFXADCCDSPFW_CFG_H
#define IFXADCCDSPFW_CFG_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/
#include "Cpu/Std/Ifx_Types.h"

/******************************************************************************/
/*-----------------------------------Macros-----------------------------------*/
/******************************************************************************/
#define FIR_NTAPS_MAX			(128)
#define IIR_ORDER				(6)
#define FIR_X_ARR_DIM			(FIR_NTAPS_MAX)
#define IIR_W_ARR_DIM			(IIR_ORDER)
#define IIR_BIQ_SECT_N			(IIR_ORDER >> 1)
#define IIR_BIQ_ORDER			(2)
#define IIR_BIQ_NTAPS			(IIR_BIQ_ORDER + 1)
#define IIR_CFG_COEFFS_ARR_DIM	((IIR_BIQ_NTAPS * 2) * IIR_BIQ_SECT_N)

/******************************************************************************/
/*--------------------------------Enumerations--------------------------------*/
/******************************************************************************/
typedef enum FC_s {
  FC0,
  FC1,
  FC2,
  FC3,
  FC4,
  FCM
} FC_Selector_t;
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/

/* Section of the configuration table dedicated to general filterchain parameters. */
/*[cover parentID={8C6796F0-9AF2-4524-9F46-A1FBB829DEB5}] Config_General_t [/cover]*/
typedef struct UserConfig_Common_s {
  uint32 InputAddress;
  uint32 SecondaryInputAddress;
  FC_Selector_t FC_Id;
} UserConfig_Common_t;

/* Section of the configuration table dedicated to the FIR filter. */
/*[cover parentID={D2D4A9D8-4C10-4c0c-8E72-10A71E2249B4}] Config_Fir_t [/cover]*/
typedef struct UserConfig_Fir_s {
  uint16 NTaps;
  uint16 DecRate;
  uint16 GradualAccum;
  sint16 Fir_Coeffs[FIR_X_ARR_DIM];
} UserConfig_Fir_t;

/* Section of the configuration table dedicated to IIR filter. */
/*[cover parentID={730D3270-5CDA-4253-AB9F-69E9072513B3}] Config_Iir_t [/cover]*/
typedef struct UserConfig_Iir_s {
  uint16 DecRate;
  uint16 BitExtension;
  sint16 Iir_Coeffs[IIR_CFG_COEFFS_ARR_DIM];
} UserConfig_Iir_t;

typedef struct UserConfig_Mat_s {
  uint16 Operation;
  sint16 OpBValue;
  sint16 BitShiftValue;
} UserConfig_Mat_t;

typedef struct UserConfig_Avg_s {
  uint16 NofSamples;
} UserConfig_Avg_t;

typedef struct UserConfig_Mdn_s {
  uint16 NofSamples;
} UserConfig_Mdn_t;

/* Section of the configuration table dedicated to the Data Accumulation filter. */
/*[cover parentID={D4719BAC-5B50-4d73-8977-CB3FF3BB6B0D}] Config_Da_t [/cover]*/
typedef struct UserConfig_Da_s {
  uint16 FC_Restart_Ctrl;
  uint16 Disc_N;
  uint16 Accum_N;
  uint16 Rep_N;
  uint16 BitShift;
  uint16 BypassEnable;
} UserConfig_Da_t;

/*[cover parentID={83B54685-D5A1-449e-961E-B5E9169B4DFE}] CDSP_Config_t [/cover]*/
typedef struct Cdsp_Config_s {
    UserConfig_Common_t Common;
    UserConfig_Fir_t    Fir;
    UserConfig_Iir_t    Iir;
    UserConfig_Mat_t    Mat;
    UserConfig_Avg_t    Avg;
    UserConfig_Mdn_t    Mdn;
    UserConfig_Da_t     Dac;
} Cdsp_UserConfig_t;

/******************************************************************************/
/*-------------------Global Exported Variables/Constants----------------------*/
/******************************************************************************/
IFX_EXTERN IFX_CONST Cdsp_UserConfig_t cdspFc0Dccm;
IFX_EXTERN IFX_CONST uint16            cdspFc0DccmSize;
IFX_EXTERN IFX_CONST unsigned char     cdspFgaIccmImage[];
IFX_EXTERN IFX_CONST unsigned int      cdspFgaIccmImageSize;
IFX_EXTERN IFX_CONST unsigned char     cdspFgbIccmImage[];
IFX_EXTERN IFX_CONST unsigned int      cdspFgbIccmImageSize;

#endif /* IFXADCCDSPFW_CFG_H */

/**
 * \file IfxCss_SecureCrypto.h
 * \brief CSS SECURECRYPTO details
 * \ingroup IfxLld_Css
 *
 * \version iLLD_2_0_1_2_19
 * \copyright Copyright (c) 2023 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 *
 * \defgroup IfxLld_Css_SecureCrypto_Usage How to use the Secure Crypto Driver?
 * \ingroup IfxLld_Css_SecureCrypto
 *
 * \section IfxLld_Css_SecureCrypto_Overview Overview:
 *
 * This driver module deals with the initialization of the Cyber Security Satellite(CSS) module, by the Secure CPU (CPUcs).
 * This driver is ONLY meant to be used by the secure master.
 * The secure master MUST initialize the CSS and it's channels using this driver, before using the CSS resources for cryptographic operations.
 *
 * Functionality Provided:
 *
 * The Secure Crypto driver provides the following functionality to configure the CSS module:
 *
 *  1. Global initialization of CSS module:
 *
 *      1.1 Global security configuration
 *
 *      1.2 Interrupt mapping to different channels
 *
 *      1.3 Storing the life cycle keys
 *
 *      1.4 Configure the number of channels being used.
 *
 *  2. Initialization of CSS channels:
 *
 *      2.1 Initialization of KEY/IV RAM Area
 *
 *      2.2 Interrupt priority / Node configuration
 *
 *      2.3 Permissions for KEY write
 *
 * \section IfxLld_Css_SecureCrypto_Steps How to use this driver:
 *
 * \subsection IfxLld_Css_SecureCrypto_Step1 STEP 1: Instantiate the necessary config / handle structures:
 *
 * \code
 * // 1. Module configuration:
 * IfxCss_SecureCrypto_ModuleConfig myCssConfig;
 *
 * // 2. Module Handle
 * IfxCss_SecureCrypto_Css myCssModule;
 *
 * // 3. Channel configurations:
 * // Create a configuration for each channel being used
 * IfxCss_SecureCrypto_ChannelConfig Channel0Cfg; // 0 - 20
 *
 * // keep a pointer table with the pointer to all channel configs
 * IfxCss_SecureCrypto_ChannelConfig *myChannelCfgTable[] =
 * {
 *  &Channel0Cfg,
 *  &Channel1Cfg,
 *  .
 *  .
 *  .
 *  &Channel20Cfg
 * };
 *
 * // 4. Channel Handle
 * IfxCss_SecureCrypto_CssChannel channel0;
 *
 * // Keep a pointer table with the pointer to all channel handles
 * IfxCss_SecureCrypto_ChannelConfig *myChannelTable[] =
 * {
 *  &channel0,
 *  &channel1,
 *  .
 *  .
 *  .
 *  &channel20
 * };
 *
 * // 5. [Optional] if Interrupts are needed
 * // Instantiate a configuration for each interrupt node
 * IfxCss_SecureCrypto_InterruptCfg errorInterruptCfg;
 * IfxCss_SecureCrypto_InterruptCfg fifoEmptyInterruptCfg;
 *
 * // Keep a pointer table with a pointer to the interrupt configurations
 * IfxCss_SecureCrypto_InterruptCfg *interruptCfgTbl[] =
 * {
 *  &errorInterruptCfg,
 *  &fifoEmptyInterruptCfg,
 *  .
 *  .
 * };
 *
 * // 6. [Optional] Have a pointer to the list of global keys used
 * IfxCss_Key *keyList[] =
 * {
 *  &key0,
 *  &key1,
 *  .
 *  .
 *  .
 * };
 * \endcode
 *
 * \subsection IfxLld_Css_SecureCrypto_Step2 STEP 2: Initialize the configurations to default values:
 *
 * \code
 * // Initialize the module configuration
 * IfxCss_SecureCrypto_initModuleConfig(&MODULE_CSS0, &myCssConfig);
 *
 * // Initialize the channel configuration
 * // loop for all channel configs used
 * IfxCss_SecureCrypto_initChannelConfig(&(MODULE_CSS0.CH[0]), &Channel0Cfg);
 * \endcode
 *
 * \subsection IfxLld_Css_SecureCrypto_Step3 STEP 3: Over-write default configurations to required values:
 *
 * \code
 * // Module config
 * myCssConfig.numKeys     = 2;
 * myCssConfig.numChannels = 5;
 *
 * // Channel Config
 * Channel0Cfg.id          = 1;
 * Channel0Cfg.keyCfg.size = 4;
 * Channel0Cfg.ivCfg.size  = 4;
 *
 * // Interrupt Configuration
 * errorInterruptCfg.cssNode       = IfxCss_serviceRequestNode_0;
 * errorInterruptCfg.typeOfService = IfxSrc_Tos_cpu0;
 *
 * // map the required pointers to the module config
 * myCssConfig.channelConfig = myChannelCfgTable;
 * myCssConfig.interrupt     = interruptCfgTbl;
 * myCssConfig.lifeCycleKeys = keyList;
 * \endcode
 *
 * \subsection IfxLld_Css_SecureCrypto_Step4 STEP 4: Now, initialize the module + channels:
 *
 * \code
 * IfxCss_SecureCrypto_initModule(&myCssModule, &myCssConfig);
 *
 * \endcode
 *
 * The CSS module channels, initialized above, are now ready for use by respective masters.\n
 *
 * \subsection IfxLld_Css_SecureCrypto_PROT PROT Usage of CSS:
 *
 * PROT can be optionally enabled before initializing the module.
 *
 * 1. Initialize PROT and APU of CSS Module:
 *
 * \code
 * // Create AP config data structure for CSS Module
 * IfxCssSecure_ApConfig apConfig;
 *
 * // Initialise PROT and APU Configuration for CSS Module
 * IfxCssSecure_initApConfig(&apConfig);
 *
 * // Provide required Config for PROTCSE
 * apConfig.protcseConfig.protOwner.ownerDefined        = TRUE;
 * apConfig.protcseConfig.protOwner.vmEnable            = FALSE;
 * apConfig.protcseConfig.protOwner.protectionSetEnable = FALSE;
 * apConfig.protcseConfig.protOwner.tagId               = IfxApProt_TagId_cpucsd;
 * apConfig.protcseConfig.protState                     = IfxApProt_State_init;
 *
 * // Provide required Config for APU-PCS
 * apConfig.apuConfig.wraTagId = (uint32)0x1000;
 * apConfig.apuConfig.rdaTagId = (uint32)0x1000;
 * apConfig.apuConfig.vmRdId   = 0x1;
 * apConfig.apuConfig.vmWrId   = 0x1;
 * apConfig.apuConfig.prsRdId  = 0x1;
 * apConfig.apuConfig.prsWrId  = 0x1;
 *
 * // Initialize PROT and APU of CSS Module
 * IfxCssSecure_initAp(&MODULE_CSS0, &apConfig);
 *
 * \endcode
 *
 * 2. Initialize PROT and APU of CSS Channel(s):
 *
 * \code
 * // Create AP config data structure for CSS Channel
 * IfxCssSecure_Ch_ApConfig ch_apConfig;
 *
 * // Initialise PROT and APU Configuration for CSS Channel
 * IfxCssSecure_Ch_initApConfig(&ch_apConfig);
 *
 * // Provide required Config for RPCHx_PROTCSE, x=0:20
 * ch_apConfig.protcseConfig.protOwner.ownerDefined = TRUE;
 * ch_apConfig.protcseConfig.protOwner.tagId        = IfxApProt_TagId_cpucsd;
 * ch_apConfig.protcseConfig.protState              = IfxApProt_State_init;
 *
 * // Provide required Config for APU-PCFGx, x=0:20
 * // x=0 (Private Channel0) has special restrictions. Refer UM
 * ch_apConfig.apuCfgConfig.wraTagId = (uint32)0x1000;
 * ch_apConfig.apuCfgConfig.rdaTagId = (uint32)0x1000;
 * ch_apConfig.apuCfgConfig.vmRdId   = 0x1;
 * ch_apConfig.apuCfgConfig.vmWrId   = 0x1;
 * ch_apConfig.apuCfgConfig.prsRdId  = 0x1;
 * ch_apConfig.apuCfgConfig.prsWrId  = 0x1;
 *
 * // Provide required Config for APU-PDATx, x=0:20
 * // x=0 (Private Channel0) has special restrictions. Refer UM
 * ch_apConfig.apuDataConfig.wraTagId = (uint32)0x1000;
 * ch_apConfig.apuDataConfig.rdaTagId = (uint32)0x1000;
 * ch_apConfig.apuDataConfig.vmRdId   = 0x1;
 * ch_apConfig.apuDataConfig.vmWrId   = 0x1;
 * ch_apConfig.apuDataConfig.prsRdId  = 0x1;
 * ch_apConfig.apuDataConfig.prsWrId  = 0x1;
 *
 * // Initialize PROT and APU of CSS Channelx, x=0:20
 * IfxCssSecure_Ch_initAp(&MODULE_CSS0.CH[x], &ch_apConfig);
 * \endcode
 *
 * \defgroup IfxLld_Css_SecureCrypto SECURECRYPTO
 * \ingroup IfxLld_Css
 * \defgroup IfxLld_Css_SecureCrypto_Public_functions Public functions
 * \ingroup IfxLld_Css_SecureCrypto
 * \defgroup IfxLld_Css_SecureCrypto_Private_functions Private functions
 * \ingroup IfxLld_Css_SecureCrypto
 * \defgroup IfxLld_Css_SecureCrypto_Structures Structures
 * \ingroup IfxLld_Css_SecureCrypto
 * \defgroup IfxLld_Css_SecureCrypto_Enumerations Enumerations
 * \ingroup IfxLld_Css_SecureCrypto
 */

#ifndef IFXCSS_SECURECRYPTO_H
#define IFXCSS_SECURECRYPTO_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include "Css/Crypto/IfxCss_Crypto.h"
#include "Css/Std/IfxCssSecure.h"

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/

/** \addtogroup IfxLld_Css_SecureCrypto_Structures
 * \{ */
/** \brief Handle of CSS channel
 */
typedef struct
{
    IfxCss_channelId id;                   /**< \brief ID of channel */
    Ifx_CSS_CH      *chSFR;                /**< \brief pointer to the Channel SFR base structure */
    boolean          keyAddrInvalid;       /**< \brief If TRUE: Key address mapping invalid */
    boolean          ivAddrInvalid;        /**< \brief if TRUE: IV address maping invalid */
    uint8            numKeys;              /**< \brief number of keys for this channel */
    boolean          keyWriteEn;           /**< \brief if TRUE, channel is allowed to write keys */
} IfxCss_SecureCrypto_CssChannel;

/** \} */

/** \addtogroup IfxLld_Css_SecureCrypto_Structures
 * \{ */
/** \brief Configuration of channel as viewed by Secure master.
 * Contains configurations needed for initialization before usage by other masters.
 */
typedef struct
{
    Ifx_CSS_CH                    *channelSFR;             /**< \brief Pointer to the channel SFR */
    IfxCss_channelId               id;                     /**< \brief channel ID */
    IfxCss_ChannelKeyCfg           keyCfg;                 /**< \brief Key section mapping configuration of channel */
    IfxCss_ChannelIvCfg            ivCfg;                  /**< \brief IV section mapping configuration of channel */
    IfxCss_channelPriority         priority;               /**< \brief priority of channel */
    IfxCssSecure_ChannelAuthCfg    authCfg;                /**< \brief Authentication alarm configuration of channel */
    IfxCss_ChannelInterruptNodeCfg interruptNodeCfg;       /**< \brief Interrupt Node configuration of channel */
    boolean                        keyWriteEn;             /**< \brief Enumeration describing key write capability of channel */
} IfxCss_SecureCrypto_ChannelConfig;

/** \brief Handle of CSS module
 */
typedef struct
{
    Ifx_CSS                        *cssSFR;               /**< \brief Pointer to the module SFR address base */
    IfxCss_KeyIvWriteStatus         keyWriteStatus;       /**< \brief Write status of the key */
    uint16                          numKeys;              /**< \brief Number of global keys */
    IfxCss_SecureCrypto_CssChannel *channelPtr;           /**< \brief Pointer to the list of channels */
} IfxCss_SecureCrypto_Css;

typedef struct
{
    IfxCss_serviceRequestNode cssNode;            /**< \brief Node number of CSS SRN */
    IfxSrc_Tos                typOfService;       /**< \brief Type of Service */
    Ifx_Priority              priority;           /**< \brief Priority of Interrupt */
    IfxSrc_VmId               vmId;               /**< \brief VM ID */
} IfxCss_SecureCrypto_InterruptCfg;

/** \brief Secure CSS module configuration
 */
typedef struct
{
    Ifx_CSS                           *cssSFR;                   /**< \brief pointer to the CSS module */
    IfxCssSecure_GlobalSecurityCfg     globalSecCfg;             /**< \brief Global security event action configurations */
    IfxCss_SecureCrypto_ChannelConfig *channelConfig;            /**< \brief Pointer to list of channel configurations */
    IfxCss_Key                        *lifeCycleKeys;            /**< \brief Pointer to list of life cycle keys */
    IfxCss_SecureCrypto_InterruptCfg  *interrupt;                /**< \brief Pointer to list of SRN node configurations */
    uint8                              numInterruptNodes;        /**< \brief Number of Interrupt nodes configured */
    uint16                             numKeys;                  /**< \brief Number of Life cycle keys that should be initialized by the secure master. */
    uint8                              numChannels;              /**< \brief number of channels being initialized */
} IfxCss_SecureCrypto_ModuleConfig;

/** \brief Data structure holding information of keys (attributes, errors) for a channel
 */
typedef struct
{
    IfxCss_KeyAttributes    attributes;        /**< \brief Attributes of channel Key */
    IfxCss_KeyIvWriteStatus writeStatus;       /**< \brief Union holding the key write status */
} IfxCss_SecureCrypto_keyInfo;

/** \} */

/** \addtogroup IfxLld_Css_SecureCrypto_Public_functions
 * \{ */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Function to initialize the CSS module
 * \param css pointer to the CSS module handle
 * \param config pointer to module configuration
 * \return status of initialization
 */
IFX_EXTERN IfxCss_status IfxCss_SecureCrypto_initModule(IfxCss_SecureCrypto_Css *css, const IfxCss_SecureCrypto_ModuleConfig *config);

/** \brief Function to initialize the channels by Secure master
 * \param channel pointer to the (list of) Channel handle.
 * \param channelCfg pointero the (list of) channel configurations
 * \param numChannels Number of channels to be initialized
 * \return status operation
 */
IFX_EXTERN IfxCss_status IfxCss_SecureCrypto_initChannels(IfxCss_SecureCrypto_CssChannel *channel, IfxCss_SecureCrypto_ChannelConfig *channelCfg, uint8 numChannels);

/** \brief function to load the life cycle keys by secure master
 * \param css Pointer to the handle of css module
 * \param keyList pointer to list of keys
 * \param numKeys Number of keys to be loaded
 * \return status of operation
 */
IFX_EXTERN IfxCss_status IfxCss_SecureCrypto_loadLifeCycleKeys(IfxCss_SecureCrypto_Css *css, IfxCss_Key *keyList, uint16 numKeys);

/** \brief function to initialize the default configurations of CSS module
 * \param css pointer to the CSS SFR set
 * \param moduleConfig Pointer to the CSS module configuration
 * \return None
 */
IFX_EXTERN void IfxCss_SecureCrypto_initModuleConfig(Ifx_CSS *css, IfxCss_SecureCrypto_ModuleConfig *moduleConfig);

/** \brief Function to initialize the default configurations of a channel
 * \param cssChannel Pointer to the CSS channel SFR
 * \param config Pointer to the channel configuration
 * \return None
 */
IFX_EXTERN void IfxCss_SecureCrypto_initChannelConfig(Ifx_CSS_CH *cssChannel, IfxCss_SecureCrypto_ChannelConfig *config);

/** \brief Load global key into the key RAM area.
 * \param css Pointer to the CSS module handle
 * \param keyPtr pointer to the key to be stored
 * \return status of key write
 */
IFX_EXTERN IfxCss_KeyIvWriteStatus IfxCss_SecureCrypto_loadGlobalKey(IfxCss_SecureCrypto_Css *css, const IfxCss_Key *keyPtr);

/** \} */

#endif /* IFXCSS_SECURECRYPTO_H */

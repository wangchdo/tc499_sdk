/**
 * \file IfxCssSecure.h
 * \brief CSS  basic functionality
 * \ingroup IfxLld_Css
 *
 * \version iLLD_2_0_1_2_19
 * \copyright Copyright (c) 2023 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 *
 * \defgroup IfxLld_Css_Std_Secure Secure Basic Functionality
 * \ingroup IfxLld_Css_Std
 * \defgroup IfxLld_Css_Std_Secure_Channel_functions Channel functions
 * \ingroup IfxLld_Css_Std_Secure
 * \defgroup IfxLld_Css_Std_Secure_Structures Structures
 * \ingroup IfxLld_Css_Std_Secure
 * \defgroup IfxLld_Css_Std_Secure_Module_functions Module functions
 * \ingroup IfxLld_Css_Std_Secure
 * \defgroup IfxLld_Css_Std_Secure_Enumerations Enumerations
 * \ingroup IfxLld_Css_Std_Secure
 */

#ifndef IFXCSSSECURE_H
#define IFXCSSSECURE_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include "_Impl/IfxCss_cfg.h"
#include "IfxCss.h"
#include "Ap/Std/IfxApApu.h"
#include "Ap/Std/IfxApProt.h"

/******************************************************************************/
/*-----------------------------------Macros-----------------------------------*/
/******************************************************************************/

/** \brief TODO
 */
#define IFXCSSSECURE_CHECK_KEY_BASEADDR(x) // TODO: do a pre-compile check of all limits. #error if out of limits.

/** \brief Default base address of IV area in CSS RAM
 */
#ifndef IFXCSSSECURE_IV_BASEADDR
#define IFXCSSSECURE_IV_BASEADDR       (((uint32)256))
#endif

/** \brief Base address of key RAM area reserved for the private channel
 */
#ifndef IFXCSSSECURE_PRIV_KEY_BASEADDR
#define IFXCSSSECURE_PRIV_KEY_BASEADDR ((uint32)(496))
#endif

/** \brief base address of IV section of private channel
 */
#ifndef IFXCSSSECURE_PRIV_IV_BASEADDR
#define IFXCSSSECURE_PRIV_IV_BASEADDR  ((uint32)(504))
#endif

/** \brief RAM SIZE of CSS to store Keys and IV
 */
#define IFXCSSSECURE_RAMSIZE           (((uint32)512))

/******************************************************************************/
/*--------------------------------Enumerations--------------------------------*/
/******************************************************************************/

/** \addtogroup IfxLld_Css_Std_Secure_Enumerations
 * \{ */
/** \brief Enumeration describing block action on external security event.
 */
typedef enum
{
    IfxCssSecure_extSecBlck_disable = 0,  /**< \brief Disable block on external security event */
    IfxCssSecure_extSecBlck_enable        /**< \brief enable block on external security event */
} IfxCssSecure_extSecBlck;

/** \brief Enumeration describing block action on internal security events
 */
typedef enum
{
    IfxCssSecure_intSecBlck_none        = 0,  /**< \brief no reaction on internal security events */
    IfxCssSecure_intSecBlck_channelKeys = 1,  /**< \brief Block action to keys of channel causing event */
    IfxCssSecure_intSecBlck_moduleKeys  = 2   /**< \brief block access to key storage of entire module */
} IfxCssSecure_intSecBlck;

/** \} */

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/

/** \addtogroup IfxLld_Css_Std_Secure_Structures
 * \{ */
/** \brief PROT and APU Configuration for CSS Module
 */
typedef struct
{
    IfxApProt_ProtConfig protcseConfig;       /**< \brief PROTCSE related configuration */
    IfxApApu_ApuConfig   apuConfig;           /**< \brief APU Configuration */
} IfxCssSecure_ApConfig;

/** \brief PROT and APU Configuration for CSS Channel
 */
typedef struct
{
    IfxApProt_ProtConfig protcseConfig;       /**< \brief PROTCSE related configuration */
    IfxApApu_ApuConfig   apuCfgConfig;        /**< \brief APU CFG Configuration */
    IfxApApu_ApuConfig   apuDataConfig;       /**< \brief APU Data Configuration */
} IfxCssSecure_Ch_ApConfig;

/** \brief Authentication configuration of the channel
 */
typedef struct
{
    IfxCss_channelAuthAlarmThres alarmThreshold;       /**< \brief Alarm threshold value for authentication alarm */
    IfxCss_channelAuthThresLock  thresholdLock;        /**< \brief Lock/unlock the authentication threshold after write */
    boolean                      clearCounter;         /**< \brief Clear the alarm counter for the channel */
} IfxCssSecure_ChannelAuthCfg;

/** \brief Global security configuration for security events [SECCFG]
 */
typedef struct
{
    IfxCssSecure_extSecBlck extSecEventCfg;       /**< \brief Configuration of block actions for external security events */
    IfxCssSecure_intSecBlck intSecEventCfg;       /**< \brief Configuration of block actions for internal security events */
} IfxCssSecure_GlobalSecurityCfg;

/** \} */

/** \addtogroup IfxLld_Css_Std_Secure_Channel_functions
 * \{ */

/******************************************************************************/
/*-------------------------Inline Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Function to check if the key base address of the channel is proper.
 * checks for alignment (4memWords) and for limits
 * \param addr key base address
 * \param size Size of the Key section
 * \param channelId Channel whose key is to be checked
 * \return return FALSE: key base address not as per the requirements.
 * return TRUE: key base address as per the requirements
 */
IFX_INLINE boolean IfxCssSecure_Ch_checkKeyMapping(uint32 addr, uint32 size, IfxCss_channelId channelId);

/** \brief Function to check the IV base address of a channel.
 * checks if the IV base address is aligned to 4 memory words
 * checks if the IV address is within limits.
 * \param addr key base address
 * \param size Size of the IV section
 * \param channelId Channel whose IV is to be checked
 * \return return FALSE: IV base address not as per the requirements.
 * return TRUE: IV base address as per the requirements
 */
IFX_INLINE boolean IfxCssSecure_Ch_checkIvMapping(uint32 addr, uint32 size, IfxCss_channelId channelId);

/** \brief Function to write the KEYCFG register.
 * \param chSFR pointer to the channel SFR
 * \param addr key base address
 * \param size Size of key section allocated to channel
 * \param writeEnable if TRUE: key can be written by the channel
 * \return None
 */
IFX_INLINE void IfxCssSecure_Ch_writeKeyCfg(Ifx_CSS_CH *chSFR, uint32 addr, uint32 size, boolean writeEnable);

/** \brief Function to write the KEYCFG register.
 * \param chSFR pointer to the channel SFR
 * \param addr key base address
 * \param size Size of key section allocated to channel
 * \return None
 */
IFX_INLINE void IfxCssSecure_Ch_writeIvCfg(Ifx_CSS_CH *chSFR, uint32 addr, uint32 size);

/** \brief function to write the temporary priorities into a word, for register access later
 * \param reg Pointer to the register
 * \param ch channel ID
 * \param value Value to be set in register
 * \return None
 */
IFX_INLINE void IfxCssSecure_Ch_setChPropTemp(uint32 *reg, IfxCss_channelId ch, uint32 value);

/** \brief funciton to write authentication configuration register.
 * \param chPtr pointer to the channel SFR
 * \param authCfg Channel authentication configuration
 * \return None
 */
IFX_INLINE void IfxCssSecure_Ch_setAuthCfg(Ifx_CSS_CH *chPtr, IfxCssSecure_ChannelAuthCfg *authCfg);

/** \brief Function to initialize the PROT and APU Config of CSS Channel with default value
 * \param config PROT and APU Config
 * \return None
 */
IFX_INLINE void IfxCssSecure_Ch_initApConfig(IfxCssSecure_Ch_ApConfig *config);

/** \brief Function to initialize the PROT and APU of CSS Channel
 * \param cssChannel Pointer to the CSS Channel SFR
 * \param config PROT and APU Config
 * \return None
 */
IFX_INLINE void IfxCssSecure_Ch_initAp(Ifx_CSS_CH *cssChannel, IfxCssSecure_Ch_ApConfig *config);

/** \} */

/** \addtogroup IfxLld_Css_Std_Secure_Module_functions
 * \{ */

/******************************************************************************/
/*-------------------------Inline Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Function to configure the global security event actions
 * \param cssSFR Pointer to the CSS SFR base address
 * \param secEventCfg pointer to the security event configuration
 * \return None
 */
IFX_INLINE void IfxCssSecure_configureGlobalSecurity(Ifx_CSS *cssSFR, const IfxCssSecure_GlobalSecurityCfg *secEventCfg);

/** \brief Function to write back the PRIOCFG register at once
 * \return None
 */
IFX_INLINE void IfxCssSecure_setGlobalChReg(uint32 *cssSFR, uint32 regValue);

/** \brief Function to initialize the PROT and APU Config of CSS Module with default value
 * \param config PROT and APU Config
 * \return None
 */
IFX_INLINE void IfxCssSecure_initApConfig(IfxCssSecure_ApConfig *config);

/** \brief Function to initialize the PROT and APU of CSS Module
 * \param css Pointer to the CSS SFR base address
 * \param config PROT and APU Config
 * \return None
 */
IFX_INLINE void IfxCssSecure_initAp(Ifx_CSS *css, IfxCssSecure_ApConfig *config);

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Configures access to all masters to all the CSS module and channels in the device
 * \param apConfig pointer to configuration structure
 * \return None
 */
IFX_EXTERN void IfxCssSecure_configureAccessToCss(IfxApApu_ApuConfig *apConfig);

/** \} */

/******************************************************************************/
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxCssSecure_configureGlobalSecurity(Ifx_CSS *cssSFR, const IfxCssSecure_GlobalSecurityCfg *secEventCfg)
{
    Ifx_CSS_SECCFG seccfg;
    seccfg.B.EXTSECLCK = (uint32)(secEventCfg->extSecEventCfg);
    seccfg.B.SECLCK    = (uint32)(secEventCfg->intSecEventCfg);

    cssSFR->SECCFG.U   = seccfg.U;
}


IFX_INLINE boolean IfxCssSecure_Ch_checkKeyMapping(uint32 addr, uint32 size, IfxCss_channelId channelId)
{
    boolean keyValid = TRUE;

    /* step 1: check if the alignment is proper */
    /* keyValid = ((addr & (uint32)0x3) == (uint32)0) && (size > (uint32)0); */ /* CE: alignment check not needed currently */

    if ((size > (uint32)0) && (channelId > 0))
    {
        keyValid = ((addr + size) < IFXCSSSECURE_IV_BASEADDR);  // TODO: FIX the check part!!
    }

    return keyValid;
}


IFX_INLINE boolean IfxCssSecure_Ch_checkIvMapping(uint32 addr, uint32 size, IfxCss_channelId channelId)
{
    boolean IvValid = TRUE;

    /* step 1: check if the alignment is proper */
    /* IvValid = ((addr & (uint32)0x3) == (uint32)0) && (size > 0); */ /* CE: alignment check not needed currently */

    if ((size > (uint32)0) && (channelId > 0))
    {
        IvValid = ((addr >= IFXCSSSECURE_IV_BASEADDR) && ((addr + size) < IFXCSSSECURE_PRIV_KEY_BASEADDR));
    }

    return IvValid;
}


IFX_INLINE void IfxCssSecure_Ch_writeKeyCfg(Ifx_CSS_CH *chSFR, uint32 addr, uint32 size, boolean writeEnable)
{
    Ifx_CSS_CH_ASGN_KEY keyCfg;
    keyCfg.U          = chSFR->ASGN.KEY.U;

    keyCfg.B.SIZE     = size;
    keyCfg.B.BASE     = addr;
    keyCfg.B.WRENA    = writeEnable ? (uint32)1 : (uint32)0;

    chSFR->ASGN.KEY.U = keyCfg.U; /* write back */
}


IFX_INLINE void IfxCssSecure_Ch_writeIvCfg(Ifx_CSS_CH *chSFR, uint32 addr, uint32 size)
{
    Ifx_CSS_CH_ASGN_IV ivCfg;
    ivCfg.U          = chSFR->ASGN.IV.U;

    ivCfg.B.SIZE     = size;
    ivCfg.B.BASE     = addr;

    chSFR->ASGN.IV.U = ivCfg.U; /* write back */
}


IFX_INLINE void IfxCssSecure_Ch_setChPropTemp(uint32 *reg, IfxCss_channelId ch, uint32 value)
{
    *reg |= (uint32)value << (uint32)ch;
}


IFX_INLINE void IfxCssSecure_setGlobalChReg(uint32 *cssSFR, uint32 regValue)
{
    *cssSFR = regValue;
}


IFX_INLINE void IfxCssSecure_Ch_setAuthCfg(Ifx_CSS_CH *chPtr, IfxCssSecure_ChannelAuthCfg *authCfg)
{
    Ifx_CSS_CH_AUTHCFG authReg;
    authReg.U         = chPtr->AUTHCFG.U;

    authReg.B.ALARMTH = (uint32)(authCfg->alarmThreshold);
    authReg.B.THLCK   = (uint32)(authCfg->thresholdLock);
    authReg.B.CLRCNT  = (authCfg->clearCounter == TRUE ? (uint32)1 : (uint32)0);

    chPtr->AUTHCFG.U  = authReg.U;
}


IFX_INLINE void IfxCssSecure_initApConfig(IfxCssSecure_ApConfig *config)
{
    IfxApProt_initConfig(&config->protcseConfig);
    IfxApApu_initConfig(&config->apuConfig);
}


IFX_INLINE void IfxCssSecure_initAp(Ifx_CSS *css, IfxCssSecure_ApConfig *config)
{
    /* Initialize the PROT */
    IfxApProt_init((Ifx_PROT_PROT *)&css->PROTCSE, &config->protcseConfig);

    /* Change the state to CONFIG, Configure APU and set PROT state back to RUN */
    /* Initialize the APU */
    IfxApProt_setState((Ifx_PROT_PROT *)&css->PROTCSE, IfxApProt_State_config);
    IfxApApu_init((Ifx_ACCEN_ACCEN *)&css->ACCENCS, &config->apuConfig);
    IfxApProt_setState((Ifx_PROT_PROT *)&css->PROTCSE, IfxApProt_State_run);
}


IFX_INLINE void IfxCssSecure_Ch_initApConfig(IfxCssSecure_Ch_ApConfig *config)
{
    IfxApProt_initConfig(&config->protcseConfig);
    IfxApApu_initConfig(&config->apuCfgConfig);
    IfxApApu_initConfig(&config->apuDataConfig);
}


IFX_INLINE void IfxCssSecure_Ch_initAp(Ifx_CSS_CH *cssChannel, IfxCssSecure_Ch_ApConfig *config)
{
    /* Initialize the PROT */
    IfxApProt_init((Ifx_PROT_PROT *)&cssChannel->PROTCSE, &config->protcseConfig);

    /* Change the state to CONFIG, Configure APU and set PROT state back to RUN */
    /* Initialize the APU */
    IfxApProt_setState((Ifx_PROT_PROT *)&cssChannel->PROTCSE, IfxApProt_State_config);
    IfxApApu_init((Ifx_ACCEN_ACCEN *)&cssChannel->ACCEN.CFG, &config->apuCfgConfig);
    IfxApApu_init((Ifx_ACCEN_ACCEN *)&cssChannel->ACCEN.DATA, &config->apuDataConfig);
    IfxApProt_setState((Ifx_PROT_PROT *)&cssChannel->PROTCSE, IfxApProt_State_run);
}


#endif /* IFXCSSSECURE_H */

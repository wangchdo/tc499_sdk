/**
 * \file IfxFlashCsrm_cfg.h
 * \brief FLASHCSRM on-chip implementation data
 * \ingroup IfxLld_FlashCsrm
 *
 * \version iLLD_2_0_1_2_19
 * \copyright Copyright (c) 2022 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 * \defgroup IfxLld_FlashCsrm FLASHCSRM
 * \ingroup IfxLld
 * \defgroup IfxLld_FlashCsrm_Impl Implementation
 * \ingroup IfxLld_FlashCsrm
 * \defgroup IfxLld_FlashCsrm_Std Standard Driver
 * \ingroup IfxLld_FlashCsrm
 */

#ifndef IFXFLASHCSRM_CFG_H
#define IFXFLASHCSRM_CFG_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include "Cpu/Std/Ifx_Types.h"

/******************************************************************************/
/*-----------------------------------Macros-----------------------------------*/
/******************************************************************************/

/** \brief base address for CSCI command sequences
 */
#define IFXFLASHCSRM_CMD_BASE_ADDRESS            (0xF80C0000)

/** \brief Offset between CSRM command areas.
 */
#define IFXFLASHCSRM_CMD_BASE_OFFSET             (0x0x00040000)

/** \brief Number of CSRM DFLASH Banks
 */
#define IFXFLASHCSRM_DFLASH_BANKS                (1)

/** \brief CSRM DFLASH logical sector count
 */
#define IFXFLASHCSRM_DFLASH_NUM_LOG_SECTORS      (64)

/** \brief CSRM PFLASH Start Address
 */
#define IFXFLASHCSRM_PFLASH_START                (0xA4000000)

/** \brief CSRM PFLASH size
 */
#define IFXFLASHCSRM_PFLASH_SIZE                 (0x100000)

/** \brief CSRM PFLASH end address
 */
#define IFXFLASHCSRM_PFLASH_END                  (IFXFLASHCSRM_PFLASH_START + IFXFLASHCSRM_PFLASH_SIZE - 1)

/** \brief CSRM DFLASH CFS logical sector count
 */
#define IFXFLASHCSRM_DFLASH_NUM_CFS_LOG_SECTORS  (22)

/** \brief CSRM DFLASH UCB logical sector count
 */
#define IFXFLASHCSRM_DFLASH_NUM_UCB_LOG_SECTORS  (26)

/** \brief CSRM DFLASH Physical sector count
 */
#define IFXFLASHCSRM_DFLASH_NUM_PHYSICAL_SECTORS (2)

/** \brief CSRM PFLASH logical sector count
 */
#define IFXFLASHCSRM_PFLASH_NUM_LOG_SECTORS      (64)

/** \brief CSRM PFLASH Physical sector count
 */
#define IFXFLASHCSRM_PFLASH_NUM_PHYSICAL_SECTORS (2)

/** \brief CSRM DFLASH Start Address
 */
#define IFXFLASHCSRM_DFLASH_START                (0xAE800000)

/** \brief CSRM DFLASH Size
 */
#define IFXFLASHCSRM_DFLASH_SIZE                 (IFXFLASHCSRM_DFLASH_NUM_LOG_SECTORS * 0x800)

/** \brief CSRM DFLASH end address
 */
#define IFXFLASHCSRM_DFLASH_END                  (IFXFLASHCSRM_DFLASH_START + IFXFLASHCSRM_DFLASH_SIZE - 1)

/** \brief DFLASH page length: 8 bytes
 */
#define IFXFLASHCSRM_DFLASH_PAGE_LENGTH          (8)

/** \brief Page length in bytes
 */
#define IFXFLASHCSRM_PFLASH_PAGE_LENGTH          (32)

/** \brief UCB1 Start Address
 */
#define IFXFLASHCSRM_UCB1_START                  (0xAEC00000)

/** \brief UCB1 End Address
 */
#define IFXFLASHCSRM_UCB1_END                    (0xAEC0CFFF)

/******************************************************************************/
/*-------------------------------Enumerations---------------------------------*/
/******************************************************************************/

/** \brief Available Flash Banks
 */
typedef enum
{
    IfxFlashCsrm_FlashType_P00     = 0,   /**< \brief PFlash00 */
    IfxFlashCsrm_FlashType_P01     = 1,   /**< \brief PFlash01 */
    IfxFlashCsrm_FlashType_P10     = 2,   /**< \brief PFlash10 */
    IfxFlashCsrm_FlashType_P11     = 3,   /**< \brief PFlash11 */
    IfxFlashCsrm_FlashType_P20     = 4,   /**< \brief PFlash20 */
    IfxFlashCsrm_FlashType_P21     = 5,   /**< \brief PFlash21 */
    IfxFlashCsrm_FlashType_P30     = 6,   /**< \brief PFlash30 */
    IfxFlashCsrm_FlashType_P31     = 7,   /**< \brief PFlash31 */
    IfxFlashCsrm_FlashType_P40     = 8,   /**< \brief PFlash40 */
    IfxFlashCsrm_FlashType_P41     = 9,   /**< \brief PFlash41 */
    IfxFlashCsrm_FlashType_P50     = 10,  /**< \brief PFlash50 */
    IfxFlashCsrm_FlashType_P51     = 11,  /**< \brief PFlash51 */
    IfxFlashCsrm_FlashType_DHost   = 16,  /**< \brief host data flash */
    IfxFlashCsrm_FlashType_DCsrm   = 17,  /**< \brief csrm data flash */
    IfxFlashCsrm_FlashType_PCsrm   = 18,  /**< \brief csrm p flash */
    IfxFlashCsrm_FlashType_Invalid = 255  /**< \brief Invalid flash */
} IfxFlashCsrm_FlashType;

/** \brief user configuration block type
 */
typedef enum
{
    IfxFlashCsrm_UcbType_ucbBmhd                 = 0,   /**< \brief Host UCB_RTC_BMHDn (n=0-3) */
    IfxFlashCsrm_UcbType_ucbUsercfg              = 1,   /**< \brief Host UCB_RTC_USERCFG_ORIG and UCB_RTC_USERCFG_COPY */
    IfxFlashCsrm_UcbType_ucbSwap                 = 2,   /**< \brief Host UCB_RTC_SWAP_ORIG and UCB_RTC_SWAP_COPY */
    IfxFlashCsrm_UcbType_ucbEcprio               = 3,   /**< \brief Host UCB_RTC_ECPRIO_ORIG and UCB_RTC_ECPRIO_COPY */
    IfxFlashCsrm_UcbType_ucbHostPflashHostDflash = 16,  /**< \brief Disable global read and write protection for HOST DFLASH and all HOST PFLASHs */
    IfxFlashCsrm_UcbType_ucbHostDflash           = 32,  /**< \brief Disable global read protection for HOST DFLASH */
    IfxFlashCsrm_UcbType_ucbHostPflash           = 33,  /**< \brief Disable global read protection for HOST PFLASH */
    IfxFlashCsrm_UcbType_ucbHostPflash0A         = 48,  /**< \brief Disable global read protection and sector specific write protection for HOST PFLASH0A */
    IfxFlashCsrm_UcbType_ucbHostPflash0B         = 49,  /**< \brief Disable global read protection and sector specific write protection for HOST PFLASH0B */
    IfxFlashCsrm_UcbType_ucbHostPflash1A         = 50,  /**< \brief Disable global read protection and sector specific write protection for HOST PFLASH1A */
    IfxFlashCsrm_UcbType_ucbHostPflash1B         = 51,  /**< \brief Disable global read protection and sector specific write protection for HOST PFLASH1B */
    IfxFlashCsrm_UcbType_ucbHostPflash2A         = 52,  /**< \brief Disable global read protection and sector specific write protection for HOST PFLASH2A */
    IfxFlashCsrm_UcbType_ucbHostPflash2B         = 53,  /**< \brief Disable global read protection and sector specific write protection for HOST PFLASH2B */
    IfxFlashCsrm_UcbType_ucbHostPflash3A         = 54,  /**< \brief Disable global read protection and sector specific write protection for HOST PFLASH3A */
    IfxFlashCsrm_UcbType_ucbHostPflash3B         = 55,  /**< \brief Disable global read protection and sector specific write protection for HOST PFLASH3B */
    IfxFlashCsrm_UcbType_ucbHostPflash4A         = 56,  /**< \brief Disable global read protection and sector specific write protection for HOST PFLASH4A */
    IfxFlashCsrm_UcbType_ucbHostPflash4B         = 57,  /**< \brief Disable global read protection and sector specific write protection for HOST PFLASH4B */
    IfxFlashCsrm_UcbType_ucbHostPflash5A         = 58,  /**< \brief Disable global read protection and sector specific write protection for HOST PFLASH5A */
    IfxFlashCsrm_UcbType_ucbHostPflash5B         = 59,  /**< \brief Disable global read protection and sector specific write protection for HOST PFLASH5B */
    IfxFlashCsrm_UcbType_csrmucbBmhd             = 128, /**< \brief UCB_CS_BMHDn(n=0-3) */
    IfxFlashCsrm_UcbType_csrmucbUsercfg          = 129, /**< \brief UCB_CS_USERCFG_ORIG and UCB_CS_USERCFG_COPY */
    IfxFlashCsrm_UcbType_csrmucbSwap             = 130, /**< \brief UCB_CS_SWAP_ORIG and UCB_CS_SWAP_COPY */
    IfxFlashCsrm_UcbType_csrmucbEcprio           = 131, /**< \brief UCB_CS_ECPRIO_ORIG and UCB_CS_ECPRIO_COPY */
    IfxFlashCsrm_UcbType_csrmucbDbgcs            = 141, /**< \brief UCB_CS_BGCS_ORIG and UCB_CS_DBGCS_COPY */
    IfxFlashCsrm_UcbType_csrmucbRetest           = 143, /**< \brief UCB_RETEST */
    IfxFlashCsrm_UcbType_csrmucbFlash            = 144, /**< \brief UCB_CS_FLASH_ORIG and UCB_CS_FLASH_COPY */
    IfxFlashCsrm_UcbType_csrmDflash              = 160, /**< \brief Disable sector specific write protection for CSRM DFLASH */
    IfxFlashCsrm_UcbType_csrmPflash              = 176  /**< \brief Disable sector specific write protection for CSRM PFLASH */
} IfxFlashCsrm_UcbType;

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/

/** \brief contains start and end address of sectors
 */
typedef struct
{
    uint32 start;       /**< \brief start address of sector */
    uint32 end;         /**< \brief end address of sector */
} IfxFlashCsrm_flashSector;

/******************************************************************************/
/*-------------------Global Exported Variables/Constants----------------------*/
/******************************************************************************/
/** \brief Table defining CSRM DFLASH CFS logical sector
 */
IFX_EXTERN IFX_CONST IfxFlashCsrm_flashSector IfxFlashCsrm_dFlashTableCfsLog[IFXFLASHCSRM_DFLASH_NUM_CFS_LOG_SECTORS];

/** \brief Table defining CSRM DFLASH logical sector
 */
IFX_EXTERN IFX_CONST IfxFlashCsrm_flashSector IfxFlashCsrm_dFlashTableLog[IFXFLASHCSRM_DFLASH_NUM_LOG_SECTORS];

/** \brief Table defining CSRM DFLASH UCB logical sector
 */
IFX_EXTERN IFX_CONST IfxFlashCsrm_flashSector IfxFlashCsrm_dFlashTableUcbLog[IFXFLASHCSRM_DFLASH_NUM_UCB_LOG_SECTORS];

/** \brief Table defining CSRM PFLASH logical sector
 */
IFX_EXTERN IFX_CONST IfxFlashCsrm_flashSector IfxFlashCsrm_pFlashTableLog[IFXFLASHCSRM_PFLASH_NUM_LOG_SECTORS];

/** \brief Table defining CSRM PFLASH Physical sector
 */
IFX_EXTERN IFX_CONST IfxFlashCsrm_flashSector IfxFlashCsrm_pFlashTablePhys[IFXFLASHCSRM_PFLASH_NUM_PHYSICAL_SECTORS];

#endif /* IFXFLASHCSRM_CFG_H */

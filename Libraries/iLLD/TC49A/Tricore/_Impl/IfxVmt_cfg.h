/**
 * \file IfxVmt_cfg.h
 * \brief Vmt on-chip implementation data
 * \ingroup IfxLld_Vmt
 *
 * \version iLLD_2_0_1_2_19
 * \copyright Copyright (c) 2021 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such
 * terms of use are agreed, use of this file is subject to following:
 *
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or
 * organization obtaining a copy of the software and accompanying
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxLld_Vmt Vmt
 * \ingroup IfxLld
 * \defgroup IfxLld_Vmt_Impl Implementation
 * \ingroup IfxLld_Vmt
 * \defgroup IfxLld_Vmt_Std Standard Driver
 * \ingroup IfxLld_Vmt
 */

#ifndef IFXVMT_CFG_H
#define IFXVMT_CFG_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include "Cpu/Std/Ifx_Types.h"
#include "_Impl/IfxSmu_cfg.h"

/******************************************************************************/
/*-----------------------------------Macros-----------------------------------*/
/******************************************************************************/

/** \brief Number of MBIST Table items
 */
#define IFXVMT_NUM_MBIST_TABLE_ITEMS (224)

/** \brief Maximum number of tracked SRAM addresses (ETTR)
 */
#define IFXVMT_MAX_TRACKED_ADDRESSES (5)

/** \brief Number of DMTUs
 */
#define IFXVMT_NUM_DMTU              (7)

/******************************************************************************/
/*-------------------------------Enumerations---------------------------------*/
/******************************************************************************/

/** \brief MBIST Selection
 */

typedef enum
{
    IfxVmt_MbistSel_none            = -1,
    IfxVmt_MbistSel_cpu0Dspr        = 0,
    IfxVmt_MbistSel_cpu0Dtag        = 1,
    IfxVmt_MbistSel_cpu0Pspr        = 2,
    IfxVmt_MbistSel_cpu0Ptag        = 3,
    IfxVmt_MbistSel_cpu0Dlmu        = 4,
    IfxVmt_MbistSel_cpu1Dspr        = 5,
    IfxVmt_MbistSel_cpu1Dtag        = 6,
    IfxVmt_MbistSel_cpu1Pspr        = 7,
    IfxVmt_MbistSel_cpu1Ptag        = 8,
    IfxVmt_MbistSel_cpu1Dlmu        = 9,
    IfxVmt_MbistSel_cpu2Dspr        = 10,
    IfxVmt_MbistSel_cpu2Dtag        = 11,
    IfxVmt_MbistSel_cpu2Pspr        = 12,
    IfxVmt_MbistSel_cpu2Ptag        = 13,
    IfxVmt_MbistSel_cpu2Dlmu        = 14,
    IfxVmt_MbistSel_cpu3Dspr        = 15,
    IfxVmt_MbistSel_cpu3Dtag        = 16,
    IfxVmt_MbistSel_cpu3Pspr        = 17,
    IfxVmt_MbistSel_cpu3Ptag        = 18,
    IfxVmt_MbistSel_cpu3Dlmu        = 19,
    IfxVmt_MbistSel_dma0            = 20,
    IfxVmt_MbistSel_mcds4pTbuf      = 21,
    IfxVmt_MbistSel_mcds4pLut       = 22,
    IfxVmt_MbistSel_dma1            = 42,
    IfxVmt_MbistSel_mcds2pTbuf      = 43,
    IfxVmt_MbistSel_mcds2pLut       = 44,
    IfxVmt_MbistSel_cssKeyattr      = 301,
    IfxVmt_MbistSel_cssKeystore     = 302,
    IfxVmt_MbistSel_cssFifo0        = 303,
    IfxVmt_MbistSel_cssFifo1        = 304,
    IfxVmt_MbistSel_cssFifo2        = 305,
    IfxVmt_MbistSel_cpu4Dspr        = 52,
    IfxVmt_MbistSel_cpu4Dtag        = 53,
    IfxVmt_MbistSel_cpu4Pspr        = 54,
    IfxVmt_MbistSel_cpu4Ptag        = 55,
    IfxVmt_MbistSel_cpu4Dlmu        = 56,
    IfxVmt_MbistSel_cpu5Dspr        = 57,
    IfxVmt_MbistSel_cpu5Dtag        = 58,
    IfxVmt_MbistSel_cpu5Pspr        = 59,
    IfxVmt_MbistSel_cpu5Ptag        = 60,
    IfxVmt_MbistSel_cpu5Dlmu        = 61,
    IfxVmt_MbistSel_mod9            = 64,
    IfxVmt_MbistSel_mod10           = 321,
    IfxVmt_MbistSel_hsphyPcs0       = 66,
    IfxVmt_MbistSel_hsphyPcs1       = 67,
    IfxVmt_MbistSel_pcieDmaRbuf     = 68,
    IfxVmt_MbistSel_pcieRxDq        = 69,
    IfxVmt_MbistSel_pcieRxHq        = 70,
    IfxVmt_MbistSel_pcieRetryBuf    = 71,
    IfxVmt_MbistSel_pcieMcplBuf     = 72,
    IfxVmt_MbistSel_ethermacAxi     = 73,
    IfxVmt_MbistSel_ethermacDmi     = 74,
    IfxVmt_MbistSel_ethermac0Gcl    = 75,
    IfxVmt_MbistSel_ethermac1Gcl    = 76,
    IfxVmt_MbistSel_ethermac0RxEven = 77,
    IfxVmt_MbistSel_ethermac0RxOdd  = 78,
    IfxVmt_MbistSel_ethermac1RxEven = 79,
    IfxVmt_MbistSel_ethermac1RxOdd  = 80,
    IfxVmt_MbistSel_ethermac0TxEven = 81,
    IfxVmt_MbistSel_ethermac0TxOdd  = 82,
    IfxVmt_MbistSel_ethermac1TxEven = 83,
    IfxVmt_MbistSel_ethermac1TxOdd  = 84,
    IfxVmt_MbistSel_mcan0           = 85,
    IfxVmt_MbistSel_mcan1           = 86,
    IfxVmt_MbistSel_mcan2           = 87,
    IfxVmt_MbistSel_mcan3           = 88,
    IfxVmt_MbistSel_mcan4           = 89,
    IfxVmt_MbistSel_dreRam          = 90,
    IfxVmt_MbistSel_sdmmc           = 91,
    IfxVmt_MbistSel_lmu0            = 96,
    IfxVmt_MbistSel_lmu1            = 97,
    IfxVmt_MbistSel_lmu2            = 98,
    IfxVmt_MbistSel_lmu3            = 99,
    IfxVmt_MbistSel_lmu4            = 100,
    IfxVmt_MbistSel_lmu5            = 101,
    IfxVmt_MbistSel_lmu6            = 102,
    IfxVmt_MbistSel_lmu7            = 103,
    IfxVmt_MbistSel_psi5            = 104,
    IfxVmt_MbistSel_eray0Obf        = 105,
    IfxVmt_MbistSel_eray1Obf        = 106,
    IfxVmt_MbistSel_eray0IbfTbf     = 107,
    IfxVmt_MbistSel_eray1IbfTbf     = 108,
    IfxVmt_MbistSel_eray0Mbf        = 109,
    IfxVmt_MbistSel_eray1Mbf        = 110,
    IfxVmt_MbistSel_csrmDspr        = 384,
    IfxVmt_MbistSel_csrmDtag        = 385,
    IfxVmt_MbistSel_csrmPspr        = 386,
    IfxVmt_MbistSel_csrmPtag        = 387,
    IfxVmt_MbistSel_csrmDlmu        = 388,
    IfxVmt_MbistSel_mod8            = 389,
    IfxVmt_MbistSel_scrXram         = 134,
    IfxVmt_MbistSel_scrIram         = 135,
    IfxVmt_MbistSel_ppuIctag        = 160,
    IfxVmt_MbistSel_ppuIcdata       = 161,
    IfxVmt_MbistSel_ppuDctag        = 162,
    IfxVmt_MbistSel_ppuDcdata       = 163,
    IfxVmt_MbistSel_ppuBc           = 164,
    IfxVmt_MbistSel_ppuPt           = 165,
    IfxVmt_MbistSel_ppuRttint       = 166,
    IfxVmt_MbistSel_ppuVecmem0      = 167,
    IfxVmt_MbistSel_ppuVecmem1      = 168,
    IfxVmt_MbistSel_ppuVecmem2      = 169,
    IfxVmt_MbistSel_ppuVecmem3      = 170,
    IfxVmt_MbistSel_ppuLlmram       = 171,
    IfxVmt_MbistSel_gtmDpll1a       = 192,
    IfxVmt_MbistSel_gtmDpll1b       = 193,
    IfxVmt_MbistSel_gtmDpll2        = 194,
    IfxVmt_MbistSel_gtmFifo         = 195,
    IfxVmt_MbistSel_gtmMcsP0        = 196,
    IfxVmt_MbistSel_gtmMcsD0        = 197,
    IfxVmt_MbistSel_gtmMcsP1        = 198,
    IfxVmt_MbistSel_gtmMcsD1        = 199,
    IfxVmt_MbistSel_cdsp0Data       = 200,
    IfxVmt_MbistSel_cdsp0Prog       = 201,
    IfxVmt_MbistSel_cdsp4Data       = 202,
    IfxVmt_MbistSel_cdsp4Prog       = 203,
    IfxVmt_MbistSel_cdsp8Data       = 204,
    IfxVmt_MbistSel_cdsp8Prog       = 205,
    IfxVmt_MbistSel_cdsp12Data      = 206,
    IfxVmt_MbistSel_cdsp12Prog      = 207,
    IfxVmt_MbistSel_cdsp16Data      = 208,
    IfxVmt_MbistSel_cdsp16Prog      = 209,
}IfxVmt_MbistSel;

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/

/** \brief Describes physical parameters of a SRAM memory
 */
typedef struct
{
    uint8  numBlocks;      /**< \brief number of SRAM blocks */
    uint16 dataSize;       /**< \brief Data Size of each memory block */
    uint8  eccSize;        /**< \brief ECC Size of each memory block */
    uint8  eccInvPos0;     /**< \brief First ECC bit which needs to be inverted */
    uint8  eccInvPos1;     /**< \brief Second ECC bit which needs to be inverted */
} IfxVmt_SramItem;

/******************************************************************************/
/*-------------------Global Exported Variables/Constants----------------------*/
/******************************************************************************/

IFX_EXTERN IFX_CONST IfxVmt_SramItem IfxVmt_sramTable[IFXVMT_NUM_MBIST_TABLE_ITEMS];

#endif /* IFXVMT_CFG_H */

/**
 * \file IfxPpucCore.h
 * \brief PPUC  basic functionality
 * \ingroup IfxLld_Ppuc
 *
 * \version iLLD_2_0_1_2_19
 * \copyright Copyright (c) 2022 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 * Contains the implementation related to the EV Core
 *
 * \defgroup IfxLld_Ppuc_Std_Core Core Basic Functionality
 * \ingroup IfxLld_Ppuc_Std
 * \defgroup IfxLld_Ppuc_Std_Core_Core Core_Functions
 * \ingroup IfxLld_Ppuc_Std_Core
 * \defgroup IfxLld_Ppuc_Std_Core_Enums Core_Enums
 * \ingroup IfxLld_Ppuc_Std_Core
 */

#ifndef IFXPPUCCORE_H
#define IFXPPUCCORE_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include "_Impl/IfxPpuc_cfg.h"
#include "Cpu/Std/IfxCpu_Intrinsics.h"
#include "IfxPpuc_reg.h"
#include "Ap/Std/IfxApApu.h"

/******************************************************************************/
/*--------------------------------Enumerations--------------------------------*/
/******************************************************************************/

/** \addtogroup IfxLld_Ppuc_Std_Core_Enums
 * \{ */
/** \brief Desribes the core status
 */
typedef enum
{
    IfxPpucCore_Status_run   = 0,  /**< \brief The processor is in run state */
    IfxPpucCore_Status_sleep = 1,  /**< \brief The processor is in sleep state */
    IfxPpucCore_Status_halt  = 2   /**< \brief The processor is in halt state */
} IfxPpucCore_Status;

/** \} */

/** \addtogroup IfxLld_Ppuc_Std_Core_Core
 * \{ */

/******************************************************************************/
/*-------------------------Inline Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Remove the processor out of halt state to start/resume execution
 * \param ppuc PPUC module pointer
 * \return None
 */
IFX_INLINE void IfxPpucCore_startCore(Ifx_PPUC *ppuc);

/** \brief Put the processor into halt state
 * \param ppuc PPUC module pointer
 * \return None
 */
IFX_INLINE void IfxPpucCore_haltCore(Ifx_PPUC *ppuc);

/** \brief Returns the processor status
 * \param ppuc PPUC module pointer
 * \return The processor status
 */
IFX_INLINE IfxPpucCore_Status IfxPpucCore_getCoreStatus(Ifx_PPUC *ppuc);

/** \brief Sets the interrupt vector base address
 * \param ppuc PPUC module pointer
 * \param intVectAddress Interrupt vector base address
 * \return None
 */
IFX_INLINE void IfxPpucCore_configureInterruptVectorBaseAddress(Ifx_PPUC *ppuc, uint32 intVectAddress);

/** \brief Enable the PPUC module
 * \param ppuc PPUC module pointer
 * \return None
 */
IFX_INLINE void IfxPpucCore_enableModule(Ifx_PPUC *ppuc);

/** \brief Disables the PPUC module
 * \param ppuc PPUC module pointer
 * \return None
 */
IFX_INLINE void IfxPpucCore_disableModule(Ifx_PPUC *ppuc);

/** \brief Check if the module is enabled or not
 * \param ppuc PPUC module pointer
 * \return module enable status
 */
IFX_INLINE boolean IfxPpucCore_isModuleEnabled(Ifx_PPUC *ppuc);

/** \brief Enable Interrupt handling for PPU as ISP
 * \param ppuc PPUC module pointer
 * \return None
 */
IFX_INLINE void IfxPpucCore_enableInterruptHandling(Ifx_PPUC *ppuc);

/** \brief Disable Interrupt handling for PPU as ISP
 * \param ppuc PPUC module pointer
 * \return None
 */
IFX_INLINE void IfxPpucCore_disableInterruptHandling(Ifx_PPUC *ppuc);

/** \brief Enable the CBU interface
 * \param ppuc PPUC module pointer
 * \return None
 */
IFX_INLINE void IfxPpucCore_enableCBUInterface(Ifx_PPUC *ppuc);

/** \brief Disable the CBU interface
 * \param ppuc PPUC module pointer
 * \return None
 */
IFX_INLINE void IfxPpucCore_disableCBUInterface(Ifx_PPUC *ppuc);

/** \brief Enable the STU interface
 * \param ppuc PPUC module pointer
 * \return None
 */
IFX_INLINE void IfxPpucCore_enableSTUInterface(Ifx_PPUC *ppuc);

/** \brief Disable the STU interface
 * \param ppuc PPUC module pointer
 * \return None
 */
IFX_INLINE void IfxPpucCore_disableSTUInterface(Ifx_PPUC *ppuc);

/** \brief Enable the LBU interface
 * \param ppuc PPUC module pointer
 * \return None
 */
IFX_INLINE void IfxPpucCore_enableLBUInterface(Ifx_PPUC *ppuc);

/** \brief Disable the LBU interface
 * \param ppuc PPUC module pointer
 * \return None
 */
IFX_INLINE void IfxPpucCore_disableLBUInterface(Ifx_PPUC *ppuc);

/** \brief Enable the CSMDMI interface
 * \param ppuc PPUC module pointer
 * \return None
 */
IFX_INLINE void IfxPpucCore_enableCSMDMIInterface(Ifx_PPUC *ppuc);

/** \brief Disable the CSMDMI interface
 * \param ppuc PPUC module pointer
 * \return None
 */
IFX_INLINE void IfxPpucCore_disableCSMDMIInterface(Ifx_PPUC *ppuc);

/** \brief Enable the STUDMI interface
 * \param ppuc PPUC module pointer
 * \return None
 */
IFX_INLINE void IfxPpucCore_enableSTUDMIInterface(Ifx_PPUC *ppuc);

/** \brief Disable the STUDMI interface
 * \param ppuc PPUC module pointer
 * \return None
 */
IFX_INLINE void IfxPpucCore_disableSTUDMIInterface(Ifx_PPUC *ppuc);

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Configures the interrupt vector base address, enables the PPU to ICU interface and removes the processor from halt state
 * \param ppuc PPUC module pointer
 * \param intVectAddress interrupt vector base address
 * \return None
 */
IFX_EXTERN void IfxPpucCore_configureCoreAndRun(Ifx_PPUC *ppuc, uint32 intVectAddress);

/** \brief Configures access to all masters to the PPU in the device
 * \param apConfig config pointer to configuration structure.
 * \return None
 */
IFX_EXTERN void IfxPpucCore_configureAccessToPpuc(IfxApApu_ApuConfig *apConfig);

/** \} */

/******************************************************************************/
/*-------------------------Inline Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief API to trigger a SW reset and clear the status. Returns TRUE if successful, FALSE if not successful.
 * \param ppuc PPU module pointer
 * \return Return true
 */
IFX_INLINE boolean IfxPpucCore_triggerSwReset(Ifx_PPUC *ppuc);

/** \brief API to request wake up from sleep
 * \param ppuc PPUC Module pointer
 * \return None
 */
IFX_INLINE void IfxPpucCore_requestWakeUp(Ifx_PPUC *ppuc);

/******************************************************************************/
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxPpucCore_startCore(Ifx_PPUC *ppuc)
{
    ppuc->CTRL.B.REQR = 1U;

    /* Wait till the status is changed to RUN */
    while (ppuc->STAT.B.RUN != 0U)
    {}
}


IFX_INLINE void IfxPpucCore_haltCore(Ifx_PPUC *ppuc)
{
    ppuc->CTRL.B.REQH = 1U;

    /* Wait till the processor is put to halt */
    while (ppuc->STAT.B.RUN != 2U)
    {}
}


IFX_INLINE IfxPpucCore_Status IfxPpucCore_getCoreStatus(Ifx_PPUC *ppuc)
{
    return (IfxPpucCore_Status)(ppuc->STAT.B.RUN);
}


IFX_INLINE void IfxPpucCore_configureInterruptVectorBaseAddress(Ifx_PPUC *ppuc, uint32 intVectAddress)
{
    ppuc->VECBASE.U = intVectAddress;
}


IFX_INLINE void IfxPpucCore_enableModule(Ifx_PPUC *ppuc)
{
    /* TODO ADD the PROT mechanism once details available */
    ppuc->CLC.B.DISR = 0U;
}


IFX_INLINE void IfxPpucCore_disableModule(Ifx_PPUC *ppuc)
{
    /* TODO ADD the PROT mechanism once details available */
    ppuc->CLC.B.DISR = 1U;
}


IFX_INLINE boolean IfxPpucCore_isModuleEnabled(Ifx_PPUC *ppuc)
{
    return (boolean)(ppuc->CLC.B.DISS == 0U);
}


IFX_INLINE void IfxPpucCore_enableInterruptHandling(Ifx_PPUC *ppuc)
{
    ppuc->CTRL.B.ENIRQ = 1U;
}


IFX_INLINE void IfxPpucCore_disableInterruptHandling(Ifx_PPUC *ppuc)
{
    ppuc->CTRL.B.ENIRQ = 0U;
}


IFX_INLINE void IfxPpucCore_enableCBUInterface(Ifx_PPUC *ppuc)
{
    /* TODO ADD the PROT mechanism once details available */
    ppuc->CTRL.B.CBU = 1U;
}


IFX_INLINE void IfxPpucCore_disableCBUInterface(Ifx_PPUC *ppuc)
{
    /* TODO ADD the PROT mechanism once details available */
    ppuc->CTRL.B.CBU = 0U;
}


IFX_INLINE void IfxPpucCore_enableSTUInterface(Ifx_PPUC *ppuc)
{
    /* TODO ADD the PROT mechanism once details available */
    ppuc->CTRL.B.STU = 1U;
}


IFX_INLINE void IfxPpucCore_disableSTUInterface(Ifx_PPUC *ppuc)
{
    /* TODO ADD the PROT mechanism once details available */
    ppuc->CTRL.B.STU = 0U;
}


IFX_INLINE void IfxPpucCore_enableLBUInterface(Ifx_PPUC *ppuc)
{
    /* TODO ADD the PROT mechanism once details available */
    ppuc->CTRL.B.LBU = 1U;
}


IFX_INLINE void IfxPpucCore_disableLBUInterface(Ifx_PPUC *ppuc)
{
    /* TODO ADD the PROT mechanism once details available */
    ppuc->CTRL.B.LBU = 0U;
}


IFX_INLINE void IfxPpucCore_enableCSMDMIInterface(Ifx_PPUC *ppuc)
{
    /* TODO ADD the PROT mechanism once details available */
    ppuc->CTRL.B.CSMDMI = 1U;
}


IFX_INLINE void IfxPpucCore_disableCSMDMIInterface(Ifx_PPUC *ppuc)
{
    /* TODO ADD the PROT mechanism once details available */
    ppuc->CTRL.B.CSMDMI = 0U;
}


IFX_INLINE void IfxPpucCore_enableSTUDMIInterface(Ifx_PPUC *ppuc)
{
    /* TODO ADD the PROT mechanism once details available */
    ppuc->CTRL.B.STUDMI = 1U;
}


IFX_INLINE void IfxPpucCore_disableSTUDMIInterface(Ifx_PPUC *ppuc)
{
    /* TODO ADD the PROT mechanism once details available */
    ppuc->CTRL.B.STUDMI = 0U;
}


IFX_INLINE boolean IfxPpucCore_triggerSwReset(Ifx_PPUC *ppuc)
{
    boolean status = 0U;

    ppuc->RST.CTRLA.U = 0x1U;
    ppuc->RST.CTRLB.U = 0x1U;

    /* Wait until the reset status is updated */
    while (ppuc->RST.STAT.B.KRST != 2U)
    {}

    /* Clear the RST STATUS */
    ppuc->RST.CTRLB.B.STATCLR = 1U;

    if (ppuc->RST.STAT.B.KRST == 2U)
    {
        status = 1U;
    }

    return status;
}


IFX_INLINE void IfxPpucCore_requestWakeUp(Ifx_PPUC *ppuc)
{
    ppuc->CTRL.B.REQWU = 1U;

    /* Wait till the processor starts execution */
    while (ppuc->STAT.B.RUN != 0U)
    {}
}


#endif /* IFXPPUCCORE_H */

/**
 * \file IfxRng_Rng.h
 * \brief RNG RNG details
 * \ingroup IfxLld_Rng
 *
 * \version iLLD_2_0_1_2_19
 * \copyright Copyright (c) 2023 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 *
 * \defgroup IfxLld_Rng_Usage How to use the RNG Driver?
 * \ingroup IfxLld_Rng
 *
 * \section IfxLld_Rng_Overview Overview:
 * This driver module is used for generating random numbers using the resources provided by the Random Number Generator (RNG) module.\n\n
 *
 * Supported generators are:
 *  -# TRNG (True Random Number Generator)
 *  -# DRNG (Deterministic random number generator)
 *  -# HRNG (Hybrid random number generator)
 *
 * Functionality provided:
 *     -# Initialization of random number generator with following configuration
 *      - Modes: TRNG/DRNG/HRNG
 *      - Internal/External seed
 *      - Variable seed length
 *      - Expansion rate for HRNG
 *     -# Start the generation of random numbers
 *     -# Read the random numbers being generated
 *     -# Insertion of extra input
 *     -# PROT configuration (see Std layer APIs)
 *
 * \section IfxLld_Rng_Steps Steps to use the Rng driver
 *
 * \subsection IfxLld_Rng_Step1 STEP 1 Initialization:
 *
 *     \code
 *     // 1. Instantiate the configuration structure
 *     IfxRng_Rng_Config config;
 *
 *     // 2. Instantiate the module handle structure
 *     IfxRng_Rng rng;
 *
 *     // 3. Initialize the config to default values
 *     IfxRng_Rng_initConfig(&MODULE_RNG, &config);
 *
 *     \endcode
 *
 * \subsection IfxLld_Rng_Step2 STEP 2 Configure Random Number Generator
 *
 * Configure the configuration structure according to your usecase. Some examples are shown below:\n
 *
 * <b>Configuration 1. TRNG Mode</b>
 *  \code
 *     config.mode             = IfxRng_operationMode_TRNG;	// Select mode of operation
 *     config.seedType         = IfxRng_seedType_internal;		// Select seed type
 *     config.seedLength       = IfxRng_seedLength_64Bits;		// Select seed length
 *     config.expansionRate    = IfxRng_expansionRate_1,;		// Select expansion rate
 *     config.externalSeedPtr  = NULL_PTR;						// External seed data pointer
 *  \endcode
 *
 * <b>Configuration 2. DRNG Mode with internal seed</b>
 *  \code
 *     config.mode             = IfxRng_operationMode_DRNG;	// Select mode of operation
 *     config.seedType         = IfxRng_seedType_internal;		// Select seed type
 *     config.seedLength       = IfxRng_seedLength_192Bits;	// Select seed length
 *     config.expansionRate    = IfxRng_expansionRate_1;		// Select expansion rate
 *     config.externalSeedPtr  = NULL_PTR;						// External seed data pointer
 *  \endcode
 *
 * <b>Configuration 3. DRNG Mode with external seed</b>
 *  \code
 *  // Variable for storing external seed
 *  const uint32 externalSeed[6] = {0x637C1001, 0x5CFE778F, 0x1E91DEB4, 0xE5D63938, 0xB630D84B, 0x917F4138};
 *
 *     config.mode             = IfxRng_operationMode_DRNG;	// Select mode of operation
 *     config.seedType         = IfxRng_seedType_external;		// Select seed type
 *     config.seedLength       = IfxRng_seedLength_192Bits;	// Select seed length
 *     config.expansionRate    = IfxRng_expansionRate_1;		// Select expansion rate
 *     config.externalSeedPtr  = (uint32*)&externalSeed;		// External seed data pointer
 *  \endcode
 *
 * <b>Configuration 4. HRNG Mode with internal seed</b>
 *  \code
 *     config.mode             = IfxRng_operationMode_HRNG;	// Select mode of operation
 *     config.seedType         = IfxRng_seedType_internal;		// Select seed type
 *     config.seedLength       = IfxRng_seedLength_288Bits;	// Select seed length
 *     config.expansionRate    = IfxRng_expansionRate_16;		// Select expansion rate
 *     config.externalSeedPtr  = NULL_PTR;						// External seed data pointer
 *  \endcode
 *
 * <b>Configuration 5. HRNG Mode with external seed</b>
 *  \code
 *  // Variable for storing external seed
 *  const uint32 externalSeed[6] = {0x637C1001, 0x5CFE778F, 0x1E91DEB4, 0xE5D63938, 0xB630D84B, 0x917F4138};
 *
 *     config.mode             = IfxRng_operationMode_HRNG;	// Select mode of operation
 *     config.seedType         = IfxRng_seedType_external;		// Select seed type
 *     config.seedLength       = IfxRng_seedLength_192Bits;	// Select seed length
 *     config.expansionRate    = IfxRng_expansionRate_1;		// Select expansion rate
 *     config.externalSeedPtr  = (uint32*)&externalSeed;		// External seed data pointer
 *  \endcode
 *
 * \subsection IfxLld_Rng_Step3 STEP 3 Start RNG generator
 *     \code
 *
 *     IfxRng_status status;
 *
 *     // 1. Enable Module clock
 *     IfxRng_enableModule(&MODULE_RNG);
 *
 *     // 2. Initialize the Rng module to start generation
 *     status = IfxRng_Rng_init(&rng, &config);
 *
 *     \endcode
 *
 * \subsection IfxLld_Rng_Step4 STEP 4 Read random numbers being generated
 * In this step, the user has the option to either read a single word or read multiple words.\n
 *
 * <b>Option 1. Read Single Word</b>
 *
 *     \code
 *     uint32 word;
 *     word = IfxRng_Rng_readResult(&rng);
 *     \endcode
 *
 * <b>Option 2. Read Multiple Words</b>
 *
 *     \code
 *     uint32 words[20];
 *
 *     // 1. Point the result pointer to desired destination
 *     rng.resultPtr = (uint32 *)&words;
 *
 *     // 2. Specify the number of words to be read
 *     uint32 numWords = 5;
 *
 *     // 3. Read multiple words
 *     status = IfxRng_Rng_readResultFifo(&rng, numWords);
 *
 *     // 4. Read the number of valid words saved to destination
 *     uint32 validWordsCount = rng.validResultWords;
 *     \endcode
 *
 * \subsection IfxLld_Rng_Step5 [OPTIONAL] STEP 5 Inject extra input
 * Note: This step will only work in supported configurations
 *  \code
 *  // Variable containing extra input
 *  const uint32 extraInput[6] = {0x3EF1C7A3, 0x01CD4C14, 0x591984F6, 0x320430C8, 0x7BA7AF1B, 0xB620B01A};
 *
 *  // Write extra input
 *  status = IfxRng_Rng_writeExtraInput(&rng, extraInput[1]);
 *  \endcode
 *
 * \subsection IfxLld_Rng_Step6 [OPTIONAL] STEP 6 Turn off the generator
 *
 *     \code
 *     IfxRng_setModuleState(rng.rngSFR, IfxRng_state_config);
 *     \endcode
 *
 * \defgroup IfxLld_Rng_Rng RNG
 * \ingroup IfxLld_Rng
 * \defgroup IfxLld_Rng_Rng_Structures Structures
 * \ingroup IfxLld_Rng_Rng
 * \defgroup IfxLld_Rng_Rng_Functions Functions
 * \ingroup IfxLld_Rng_Rng
 */

#ifndef IFXRNG_RNG_H
#define IFXRNG_RNG_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include "Rng/Std/IfxRng.h"

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/

/** \addtogroup IfxLld_Rng_Rng_Structures
 * \{ */
/** \brief Handle of RNG Module
 */
typedef struct
{
    Ifx_RNG     *rngSFR;                 /**< \brief rngSFR Pointer to the RNG SFR */
    IfxRng_state state;                  /**< \brief state of the module */
    IfxRng_Error errors;                 /**< \brief Structure holding the errors */
    uint32      *resultPtr;              /**< \brief Pointer to the buffer where result is to be stored */
    uint32       validResultWords;       /**< \brief Number of result words written to the buffer */
} IfxRng_Rng;

/** \brief Configuration structure for RNG module.
 */
typedef struct
{
    Ifx_RNG             *rngSFR;                 /**< \brief rngSFR Pointer to the RNG SFR */
    IfxRng_operationMode mode;                   /**< \brief Select mode of operation */
    IfxRng_seedType      seedType;               /**< \brief Select seed type */
    IfxRng_seedLength    seedLength;             /**< \brief Select seed length */
    IfxRng_expansionRate expansionRate;          /**< \brief Select expansion rate */
    uint32              *externalSeedPtr;        /**< \brief External seed data pointer */
} IfxRng_Rng_Config;

/** \} */

/** \addtogroup IfxLld_Rng_Rng_Functions
 * \{ */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Gets all errors in operation and returns failure if any error is present.
 * \param rng Pointer to Handle of RNG Module
 * \return error failure
 */
IFX_EXTERN IfxRng_status IfxRng_Rng_getAndUpdateError(IfxRng_Rng *rng);

/** \brief Function to initialize the default setting of module
 * \param rngSFR Pointer to the RNG SFR
 * \param config Configuration structure for RNG module
 * \return None
 */
IFX_EXTERN void IfxRng_Rng_initConfig(Ifx_RNG *rngSFR, IfxRng_Rng_Config *config);

/** \brief Function to initialize the module
 * \param rng Pointer to the Handle of RNG Module
 * \param config Configuration structure for RNG module
 * \return Status of the operation
 */
IFX_EXTERN IfxRng_status IfxRng_Rng_init(IfxRng_Rng *rng, IfxRng_Rng_Config *config);

/** \brief Function to read one random word generated by the module
 * \param rng Pointer to the Handle of RNG Module
 * \return One Random word
 */
IFX_EXTERN uint32 IfxRng_Rng_readResult(IfxRng_Rng *rng);

/** \brief Function to read multiple random words generated by the module
 * \param rng Pointer to the Handle of RNG Module
 * \param numWords Number of words to be read
 * \return Operation status
 */
IFX_EXTERN IfxRng_status IfxRng_Rng_readResultFifo(IfxRng_Rng *rng, uint32 numWords);

/** \brief Function to write external seed
 * \param rng Pointer to the Handle of RNG Module
 * \param seedPtr Pointer to seed data
 * \param seedLength Seed length
 * \return Operation status
 */
IFX_EXTERN IfxRng_status IfxRng_Rng_writeExternalSeed(IfxRng_Rng *rng, uint32 *seedPtr, IfxRng_seedLength seedLength);

/** \brief Function to write extra input
 * \param rng Pointer to the Handle of RNG Module
 * \param data extra input data
 * \return Operation status
 */
IFX_EXTERN IfxRng_status IfxRng_Rng_writeExtraInput(IfxRng_Rng *rng, uint32 data);

/** \} */

#endif /* IFXRNG_RNG_H */
